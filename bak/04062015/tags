!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABx_lx	include/Eigen/src/Core/util/Constants.h	/^  ABx_lx              = 0x200,$/;"	e	enum:Eigen::DecompositionOptions
ALIVE	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	115;"	d
AMDOrdering	include/Eigen/src/OrderingMethods/Ordering.h	/^class AMDOrdering$/;"	c	namespace:Eigen
AccPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef ResPacket AccPacket;$/;"	t	class:Eigen::internal::gebp_traits
AccPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::AccPacket AccPacket;$/;"	t	struct:Eigen::internal::gebp_kernel
AccPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,DoublePacket,Scalar>::type AccPacket;$/;"	t	class:Eigen::internal::gebp_traits
AccessorLevels	include/Eigen/src/Core/util/Constants.h	/^enum AccessorLevels {$/;"	g	namespace:Eigen
Action	include/Eigen/src/Core/util/Constants.h	/^enum Action {GetAction, SetAction};$/;"	g	namespace:Eigen
ActualCols	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      ActualCols = Transpose ? MaxRows : MaxCols$/;"	e	enum:Eigen::internal::gemm_blocking_space::__anon208
ActualIndex	include/Eigen/src/Core/BandMatrix.h	/^        ActualIndex = ReturnOpposite ? -Index : Index,$/;"	e	enum:Eigen::internal::BandMatrixBase::DiagonalIntReturnType::__anon46
ActualLhsType	include/Eigen/src/Core/ProductBase.h	/^    typedef typename LhsBlasTraits::DirectLinearAccessType ActualLhsType;$/;"	t	class:Eigen::ProductBase
ActualLhsType	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename LhsProductTraits::DirectLinearAccessType ActualLhsType;$/;"	t	struct:Eigen::internal::triangular_solver_selector
ActualLhsType	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename LhsProductTraits::ExtractType ActualLhsType;$/;"	t	struct:Eigen::internal::triangular_solver_selector
ActualPacketAccessBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int ActualPacketAccessBit = 0x0;$/;"	m	namespace:Eigen
ActualPacketAccessBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int ActualPacketAccessBit = PacketAccessBit;$/;"	m	namespace:Eigen
ActualRhsType	include/Eigen/src/Core/ProductBase.h	/^    typedef typename RhsBlasTraits::DirectLinearAccessType ActualRhsType;$/;"	t	class:Eigen::ProductBase
ActualRows	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      ActualRows = Transpose ? MaxCols : MaxRows,$/;"	e	enum:Eigen::internal::gemm_blocking_space::__anon208
AddCost	include/Eigen/src/Core/NumTraits.h	/^    AddCost = 1,$/;"	e	enum:Eigen::GenericNumTraits::__anon188
AdjointReturnType	include/Eigen/src/Core/MatrixBase.h	/^                     >::type AdjointReturnType;$/;"	t	class:Eigen::MatrixBase
AdjointReturnType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^                     >::type AdjointReturnType;$/;"	t	class:Eigen::SparseMatrixBase
Affine	include/Eigen/src/Core/util/Constants.h	/^  Affine        = 0x2,$/;"	e	enum:Eigen::TransformTraits
Affine2d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,Affine> Affine2d;$/;"	t	namespace:Eigen
Affine2f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,Affine> Affine2f;$/;"	t	namespace:Eigen
Affine3d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,Affine> Affine3d;$/;"	t	namespace:Eigen
Affine3f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,Affine> Affine3f;$/;"	t	namespace:Eigen
AffineCompact	include/Eigen/src/Core/util/Constants.h	/^  AffineCompact = 0x10 | Affine,$/;"	e	enum:Eigen::TransformTraits
AffineCompact2d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,AffineCompact> AffineCompact2d;$/;"	t	namespace:Eigen
AffineCompact2f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,AffineCompact> AffineCompact2f;$/;"	t	namespace:Eigen
AffineCompact3d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,AffineCompact> AffineCompact3d;$/;"	t	namespace:Eigen
AffineCompact3f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,AffineCompact> AffineCompact3f;$/;"	t	namespace:Eigen
AffinePart	include/Eigen/src/Geometry/Transform.h	/^                              Block<MatrixType,Dim,HDim> >::type AffinePart;$/;"	t	class:Eigen::Transform
AffinePart	include/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::AffinePart AffinePart;$/;"	t	struct:Eigen::internal::transform_take_affine_part
AffineTransformType	include/Eigen/src/Geometry/Translation.h	/^  typedef Transform<Scalar,Dim,Affine> AffineTransformType;$/;"	t	class:Eigen::Translation
Aligned	include/Eigen/src/Core/util/Constants.h	/^  Aligned=1 $/;"	e	enum:Eigen::__anon264
AlignedBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int AlignedBit = 0x80;$/;"	m	namespace:Eigen
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox()$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox(const VectorType& _min, const VectorType& _max) : m_min(_min), m_max(_max) {}$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const AlignedBox<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const VectorType& p) : m_min(p), m_max(p) {}$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(int _dim) : m_min(_dim), m_max(_dim)$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^class AlignedBox$/;"	c	namespace:Eigen
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/All.h	110;"	d
AlignedBox	include/Eigen/src/Eigen2Support/Geometry/All.h	55;"	d
AlignedBox	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox()$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox(const OtherVectorType1& _min, const OtherVectorType2& _max) : m_min(_min), m_max(_max) {}$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(Index _dim) : m_min(_dim), m_max(_dim)$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const AlignedBox<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const MatrixBase<Derived>& a_p)$/;"	f	class:Eigen::AlignedBox
AlignedBox	include/Eigen/src/Geometry/AlignedBox.h	/^class AlignedBox$/;"	c	namespace:Eigen
AlignedMapType	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef Eigen::Map<Derived, Aligned> AlignedMapType;$/;"	t	class:Eigen::PlainObjectBase
AlignedOnScalar	include/Eigen/src/Core/GenericPacketMath.h	/^    AlignedOnScalar = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon172
AlignedOnScalar	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
AlignedOnScalar	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon7
AlignedOnScalar	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon8
AlignedOnScalar	include/Eigen/src/Core/arch/NEON/Complex.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
AlignedOnScalar	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
AlignedOnScalar	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon14
AlignedOnScalar	include/Eigen/src/Core/arch/SSE/Complex.h	/^    AlignedOnScalar = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
AlignedOnScalar	include/Eigen/src/Core/arch/SSE/Complex.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
AlignedOnScalar	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
AlignedOnScalar	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon25
AlignedOnScalar	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon26
AlignedScaling2d	include/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<double,2> AlignedScaling2d;$/;"	t	namespace:Eigen
AlignedScaling2f	include/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<float, 2> AlignedScaling2f;$/;"	t	namespace:Eigen
AlignedScaling3d	include/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<double,3> AlignedScaling3d;$/;"	t	namespace:Eigen
AlignedScaling3f	include/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<float, 3> AlignedScaling3f;$/;"	t	namespace:Eigen
AlignmentMask	include/Eigen/src/Cholesky/LLT.h	/^      AlignmentMask = int(PacketSize)-1,$/;"	e	enum:Eigen::LLT::__anon3
AlignmentMask	include/Eigen/src/Eigen2Support/SVD.h	/^      AlignmentMask = int(PacketSize)-1,$/;"	e	enum:Eigen::SVD::__anon358
AlignmentMatch	include/Eigen/src/Core/Ref.h	/^      AlignmentMatch = (_Options!=Aligned) || ((PlainObjectType::Flags&AlignedBit)==0) || ((traits<Derived>::Flags&AlignedBit)==AlignedBit),$/;"	e	enum:Eigen::internal::traits::match::__anon237
AllAtOnceTraversal	include/Eigen/src/Core/util/Constants.h	/^  AllAtOnceTraversal$/;"	e	enum:Eigen::__anon265
AltiVec	include/Eigen/src/Core/util/Constants.h	/^    AltiVec = 0x2,$/;"	e	enum:Eigen::Architecture::Type
AmbiVector	include/Eigen/src/SparseCore/AmbiVector.h	/^    AmbiVector(Index size)$/;"	f	class:Eigen::internal::AmbiVector
AmbiVector	include/Eigen/src/SparseCore/AmbiVector.h	/^class AmbiVector$/;"	c	namespace:Eigen::internal
AmbientDimAtCompileTime	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:Eigen::AlignedBox::__anon338
AmbientDimAtCompileTime	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:Eigen::Hyperplane::__anon340
AmbientDimAtCompileTime	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:Eigen::ParametrizedLine::__anon341
AmbientDimAtCompileTime	include/Eigen/src/Geometry/AlignedBox.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:Eigen::AlignedBox::__anon368
AmbientDimAtCompileTime	include/Eigen/src/Geometry/Hyperplane.h	/^    AmbientDimAtCompileTime = _AmbientDim,$/;"	e	enum:Eigen::Hyperplane::__anon372
AmbientDimAtCompileTime	include/Eigen/src/Geometry/ParametrizedLine.h	/^    AmbientDimAtCompileTime = _AmbientDim,$/;"	e	enum:Eigen::ParametrizedLine::__anon373
Ancestor	include/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename remove_all<Lhs>::type Ancestor;$/;"	t	struct:Eigen::internal::traits
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/All.h	33;"	d
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/All.h	88;"	d
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  AngleAxis() {}$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline AngleAxis(Scalar angle, const MatrixBase<Derived>& axis) : m_axis(axis), m_angle(angle) {}$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline AngleAxis(const QuaternionType& q) { *this = q; }$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const AngleAxis<OtherScalarType>& other)$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const MatrixBase<Derived>& m) { *this = m; }$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^class AngleAxis : public RotationBase<AngleAxis<_Scalar>,3>$/;"	c	namespace:Eigen
AngleAxis	include/Eigen/src/Geometry/AngleAxis.h	/^  AngleAxis() {}$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Geometry/AngleAxis.h	/^  inline AngleAxis(const Scalar& angle, const MatrixBase<Derived>& axis) : m_axis(axis), m_angle(angle) {}$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const AngleAxis<OtherScalarType>& other)$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const MatrixBase<Derived>& m) { *this = m; }$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Geometry/AngleAxis.h	/^  template<typename QuatDerived> inline explicit AngleAxis(const QuaternionBase<QuatDerived>& q) { *this = q; }$/;"	f	class:Eigen::AngleAxis
AngleAxis	include/Eigen/src/Geometry/AngleAxis.h	/^class AngleAxis : public RotationBase<AngleAxis<_Scalar>,3>$/;"	c	namespace:Eigen
AngleAxisType	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef AngleAxis<Scalar> AngleAxisType;$/;"	t	class:Eigen::Quaternion
AngleAxisType	include/Eigen/src/Geometry/Quaternion.h	/^  typedef AngleAxis<Scalar> AngleAxisType;$/;"	t	class:Eigen::QuaternionBase
AngleAxisType	include/Eigen/src/Geometry/Quaternion.h	/^  typedef typename Base::AngleAxisType AngleAxisType;$/;"	t	class:Eigen::Quaternion
AngleAxisd	include/Eigen/src/Eigen2Support/Geometry/All.h	35;"	d
AngleAxisd	include/Eigen/src/Eigen2Support/Geometry/All.h	90;"	d
AngleAxisd	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^typedef AngleAxis<double> AngleAxisd;$/;"	t	namespace:Eigen
AngleAxisd	include/Eigen/src/Geometry/AngleAxis.h	/^typedef AngleAxis<double> AngleAxisd;$/;"	t	namespace:Eigen
AngleAxisf	include/Eigen/src/Eigen2Support/Geometry/All.h	34;"	d
AngleAxisf	include/Eigen/src/Eigen2Support/Geometry/All.h	89;"	d
AngleAxisf	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^typedef AngleAxis<float> AngleAxisf;$/;"	t	namespace:Eigen
AngleAxisf	include/Eigen/src/Geometry/AngleAxis.h	/^typedef AngleAxis<float> AngleAxisf;$/;"	t	namespace:Eigen
Architecture	include/Eigen/src/Core/util/Constants.h	/^namespace Architecture$/;"	n	namespace:Eigen
Array	include/Eigen/src/Core/Array.h	/^    Array(internal::constructor_without_unaligned_array_assert)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array() : Base()$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const Array& other)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const ArrayBase<OtherDerived>& other)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const Scalar& val0, const Scalar& val1, const Scalar& val2)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const Scalar& val0, const Scalar& val1, const Scalar& val2, const Scalar& val3)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const T0& val0, const T1& val1)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE explicit Array(Index dim)$/;"	f	class:Eigen::Array
Array	include/Eigen/src/Core/Array.h	/^class Array$/;"	c	namespace:Eigen
Array	include/Eigen/src/Core/Map.h	/^  ::Array(const Scalar *data)$/;"	f	class:Eigen::Array
ArrayBase	include/Eigen/src/Core/ArrayBase.h	/^    ArrayBase() : Base() {}$/;"	f	class:Eigen::ArrayBase
ArrayBase	include/Eigen/src/Core/ArrayBase.h	/^template<typename Derived> class ArrayBase$/;"	c	namespace:Eigen
ArrayWrapper	include/Eigen/src/Core/ArrayWrapper.h	/^    inline ArrayWrapper(ExpressionType& matrix) : m_expression(matrix) {}$/;"	f	class:Eigen::ArrayWrapper
ArrayWrapper	include/Eigen/src/Core/ArrayWrapper.h	/^class ArrayWrapper : public ArrayBase<ArrayWrapper<ExpressionType> >$/;"	c	namespace:Eigen
ArrayXpr	include/Eigen/src/Core/util/Constants.h	/^struct ArrayXpr {};$/;"	s	namespace:Eigen
AutoAlign	include/Eigen/src/Core/util/Constants.h	/^  AutoAlign = 0,$/;"	e	enum:Eigen::__anon268
Ax_lBx	include/Eigen/src/Core/util/Constants.h	/^  Ax_lBx              = 0x100,$/;"	e	enum:Eigen::DecompositionOptions
BAx_lx	include/Eigen/src/Core/util/Constants.h	/^  BAx_lx              = 0x400,$/;"	e	enum:Eigen::DecompositionOptions
BLASFUNC	include/Eigen/src/misc/blas.h	9;"	d
BLASLONG	include/Eigen/src/misc/blas.h	/^typedef long BLASLONG;$/;"	t
BLASLONG	include/Eigen/src/misc/blas.h	/^typedef long long BLASLONG;$/;"	t
BLASULONG	include/Eigen/src/misc/blas.h	/^typedef unsigned long BLASULONG;$/;"	t
BLASULONG	include/Eigen/src/misc/blas.h	/^typedef unsigned long long BLASULONG;$/;"	t
BLAS_H	include/Eigen/src/misc/blas.h	2;"	d
BOTH_MATRICES_MUST_HAVE_THE_SAME_STORAGE_ORDER	include/Eigen/src/Core/util/StaticAssert.h	/^        BOTH_MATRICES_MUST_HAVE_THE_SAME_STORAGE_ORDER,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
BandMatrix	include/Eigen/src/Core/BandMatrix.h	/^    inline BandMatrix(Index rows=Rows, Index cols=Cols, Index supers=Supers, Index subs=Subs)$/;"	f	class:Eigen::internal::BandMatrix
BandMatrix	include/Eigen/src/Core/BandMatrix.h	/^class BandMatrix : public BandMatrixBase<BandMatrix<_Scalar,Rows,Cols,Supers,Subs,Options> >$/;"	c	namespace:Eigen::internal
BandMatrixBase	include/Eigen/src/Core/BandMatrix.h	/^class BandMatrixBase : public EigenBase<Derived>$/;"	c	namespace:Eigen::internal
BandMatrixWrapper	include/Eigen/src/Core/BandMatrix.h	/^    inline BandMatrixWrapper(const CoefficientsType& coeffs, Index rows=_Rows, Index cols=_Cols, Index supers=_Supers, Index subs=_Subs)$/;"	f	class:Eigen::internal::BandMatrixWrapper
BandMatrixWrapper	include/Eigen/src/Core/BandMatrix.h	/^class BandMatrixWrapper : public BandMatrixBase<BandMatrixWrapper<_CoefficientsType,_Rows,_Cols,_Supers,_Subs,_Options> >$/;"	c	namespace:Eigen::internal
Base	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef CholmodBase<_MatrixType, _UpLo, CholmodDecomposition> Base;$/;"	t	class:Eigen::CholmodDecomposition
Base	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef CholmodBase<_MatrixType, _UpLo, CholmodSimplicialLDLT> Base;$/;"	t	class:Eigen::CholmodSimplicialLDLT
Base	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef CholmodBase<_MatrixType, _UpLo, CholmodSimplicialLLT> Base;$/;"	t	class:Eigen::CholmodSimplicialLLT
Base	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef CholmodBase<_MatrixType, _UpLo, CholmodSupernodalLLT> Base;$/;"	t	class:Eigen::CholmodSupernodalLLT
Base	include/Eigen/src/Core/Array.h	/^    typedef PlainObjectBase<Array> Base;$/;"	t	class:Eigen::Array
Base	include/Eigen/src/Core/ArrayBase.h	/^    typedef DenseBase<Derived> Base;$/;"	t	class:Eigen::ArrayBase
Base	include/Eigen/src/Core/ArrayWrapper.h	/^    typedef ArrayBase<ArrayWrapper> Base;$/;"	t	class:Eigen::ArrayWrapper
Base	include/Eigen/src/Core/ArrayWrapper.h	/^    typedef MatrixBase<MatrixWrapper<ExpressionType> > Base;$/;"	t	class:Eigen::MatrixWrapper
Base	include/Eigen/src/Core/BandMatrix.h	/^    typedef BandMatrix<Scalar,Size,Size,Options&SelfAdjoint?0:1,1,Options|RowMajor> Base;$/;"	t	class:Eigen::internal::TridiagonalMatrix
Base	include/Eigen/src/Core/BandMatrix.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:Eigen::internal::BandMatrixBase
Base	include/Eigen/src/Core/Block.h	/^    typedef Impl Base;$/;"	t	class:Eigen::Block
Base	include/Eigen/src/Core/Block.h	/^    typedef Impl Base;$/;"	t	class:Eigen::BlockImpl
Base	include/Eigen/src/Core/Block.h	/^    typedef MapBase<BlockType> Base;$/;"	t	class:Eigen::internal::BlockImpl_dense
Base	include/Eigen/src/Core/Block.h	/^    typedef typename internal::dense_xpr_base<BlockType>::type Base;$/;"	t	class:Eigen::internal::BlockImpl_dense
Base	include/Eigen/src/Core/CwiseBinaryOp.h	/^                                         typename internal::traits<Rhs>::StorageKind>::ret>::Base Base;$/;"	t	class:Eigen::CwiseBinaryOp
Base	include/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::dense_xpr_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >::type Base;$/;"	t	class:Eigen::CwiseBinaryOpImpl
Base	include/Eigen/src/Core/CwiseNullaryOp.h	/^    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;$/;"	t	class:Eigen::CwiseNullaryOp
Base	include/Eigen/src/Core/CwiseUnaryOp.h	/^    typedef typename CwiseUnaryOpImpl<UnaryOp, XprType,typename internal::traits<XprType>::StorageKind>::Base Base;$/;"	t	class:Eigen::CwiseUnaryOp
Base	include/Eigen/src/Core/CwiseUnaryOp.h	/^    typedef typename internal::dense_xpr_base<CwiseUnaryOp<UnaryOp, XprType> >::type Base;$/;"	t	class:Eigen::CwiseUnaryOpImpl
Base	include/Eigen/src/Core/CwiseUnaryView.h	/^    typedef typename CwiseUnaryViewImpl<ViewOp, MatrixType,typename internal::traits<MatrixType>::StorageKind>::Base Base;$/;"	t	class:Eigen::CwiseUnaryView
Base	include/Eigen/src/Core/CwiseUnaryView.h	/^    typedef typename internal::dense_xpr_base< CwiseUnaryView<ViewOp, MatrixType> >::type Base;$/;"	t	class:Eigen::CwiseUnaryViewImpl
Base	include/Eigen/src/Core/DenseBase.h	/^    typedef DenseCoeffsBase<Derived> Base;$/;"	t	class:Eigen::DenseBase
Base	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef DenseCoeffsBase<Derived, ReadOnlyAccessors> Base;$/;"	t	class:Eigen::DenseCoeffsBase
Base	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef DenseCoeffsBase<Derived, WriteAccessors> Base;$/;"	t	class:Eigen::DenseCoeffsBase
Base	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:Eigen::DenseCoeffsBase
Base	include/Eigen/src/Core/Diagonal.h	/^    typedef typename internal::dense_xpr_base<Diagonal>::type Base;$/;"	t	class:Eigen::Diagonal
Base	include/Eigen/src/Core/DiagonalProduct.h	/^    typedef MatrixBase<DiagonalProduct> Base;$/;"	t	class:Eigen::DiagonalProduct
Base	include/Eigen/src/Core/Flagged.h	/^    typedef MatrixBase<Flagged> Base;$/;"	t	class:Eigen::Flagged
Base	include/Eigen/src/Core/ForceAlignedAccess.h	/^    typedef typename internal::dense_xpr_base<ForceAlignedAccess>::type Base;$/;"	t	class:Eigen::ForceAlignedAccess
Base	include/Eigen/src/Core/GeneralProduct.h	/^    typedef Matrix<typename internal::scalar_product_traits<typename Lhs::Scalar, typename Rhs::Scalar>::ReturnType,1,1> Base;$/;"	t	class:Eigen::GeneralProduct
Base	include/Eigen/src/Core/Map.h	/^    typedef MapBase<Map> Base;$/;"	t	class:Eigen::Map
Base	include/Eigen/src/Core/MapBase.h	/^    typedef MapBase<Derived, ReadOnlyAccessors> Base;$/;"	t	class:Eigen::MapBase
Base	include/Eigen/src/Core/MapBase.h	/^    typedef typename internal::dense_xpr_base<Derived>::type Base;$/;"	t	class:Eigen::MapBase
Base	include/Eigen/src/Core/Matrix.h	/^    typedef PlainObjectBase<Matrix> Base;$/;"	t	class:Eigen::Matrix
Base	include/Eigen/src/Core/MatrixBase.h	/^    typedef DenseBase<Derived> Base;$/;"	t	class:Eigen::MatrixBase
Base	include/Eigen/src/Core/NestByValue.h	/^    typedef typename internal::dense_xpr_base<NestByValue>::type Base;$/;"	t	class:Eigen::NestByValue
Base	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:Eigen::PermutationBase
Base	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef PermutationBase<Map> Base;$/;"	t	class:Eigen::Map
Base	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef PermutationBase<PermutationMatrix> Base;$/;"	t	class:Eigen::PermutationMatrix
Base	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef PermutationBase<PermutationWrapper> Base;$/;"	t	class:Eigen::PermutationWrapper
Base	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::dense_xpr_base<Derived>::type Base;$/;"	t	class:Eigen::PlainObjectBase
Base	include/Eigen/src/Core/ProductBase.h	/^                       typename NestedProduct::_RhsNested> Base;$/;"	t	class:ScaledProduct
Base	include/Eigen/src/Core/ProductBase.h	/^    typedef MatrixBase<Derived> Base;$/;"	t	class:Eigen::ProductBase
Base	include/Eigen/src/Core/Ref.h	/^    typedef RefBase<Ref> Base;$/;"	t	class:Eigen::Ref
Base	include/Eigen/src/Core/Ref.h	/^  typedef MapBase<Derived> Base;$/;"	t	class:Eigen::RefBase
Base	include/Eigen/src/Core/Replicate.h	/^    typedef typename internal::dense_xpr_base<Replicate>::type Base;$/;"	t	class:Eigen::Replicate
Base	include/Eigen/src/Core/ReturnByValue.h	/^    typedef typename internal::dense_xpr_base<ReturnByValue>::type Base;$/;"	t	class:Eigen::ReturnByValue
Base	include/Eigen/src/Core/Reverse.h	/^    typedef typename internal::dense_xpr_base<Reverse>::type Base;$/;"	t	class:Eigen::Reverse
Base	include/Eigen/src/Core/Select.h	/^    typedef typename internal::dense_xpr_base<Select>::type Base;$/;"	t	class:Eigen::Select
Base	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef TriangularBase<SelfAdjointView> Base;$/;"	t	class:Eigen::SelfAdjointView
Base	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    typedef typename internal::dense_xpr_base<SelfCwiseBinaryOp>::type Base;$/;"	t	class:Eigen::SelfCwiseBinaryOp
Base	include/Eigen/src/Core/SolveTriangular.h	/^  typedef ReturnByValue<triangular_solve_retval> Base;$/;"	t	struct:Eigen::internal::triangular_solve_retval
Base	include/Eigen/src/Core/Stride.h	/^    typedef Stride<0, Value> Base;$/;"	t	class:Eigen::InnerStride
Base	include/Eigen/src/Core/Stride.h	/^    typedef Stride<Value, 0> Base;$/;"	t	class:Eigen::OuterStride
Base	include/Eigen/src/Core/Swap.h	/^    typedef typename internal::dense_xpr_base<SwapWrapper>::type Base;$/;"	t	class:Eigen::SwapWrapper
Base	include/Eigen/src/Core/Transpose.h	/^    typedef typename TransposeImpl<MatrixType,typename internal::traits<MatrixType>::StorageKind>::Base Base;$/;"	t	class:Eigen::Transpose
Base	include/Eigen/src/Core/Transpose.h	/^    typedef typename internal::TransposeImpl_base<MatrixType>::type Base;$/;"	t	class:Eigen::TransposeImpl
Base	include/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsBase<Map> Base;$/;"	t	class:Eigen::Map
Base	include/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsBase<Transpositions> Base;$/;"	t	class:Eigen::Transpositions
Base	include/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsBase<TranspositionsWrapper> Base;$/;"	t	class:Eigen::TranspositionsWrapper
Base	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef TriangularBase<TriangularView> Base;$/;"	t	class:Eigen::TriangularView
Base	include/Eigen/src/Core/VectorBlock.h	/^                     internal::traits<VectorType>::Flags & RowMajorBit ? Size : 1> Base;$/;"	t	class:Eigen::VectorBlock
Base	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::dense_xpr_base<PartialReduxExpr>::type Base;$/;"	t	class:Eigen::PartialReduxExpr
Base	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef MatrixBase<CoeffBasedProduct> Base;$/;"	t	class:Eigen::CoeffBasedProduct
Base	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef blas_traits<NestedXpr> Base;$/;"	t	struct:Eigen::internal::blas_traits
Base	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef RotationBase<AngleAxis<_Scalar>,3> Base;$/;"	t	class:Eigen::AngleAxis
Base	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef RotationBase<Quaternion<_Scalar>,3> Base;$/;"	t	class:Eigen::Quaternion
Base	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef RotationBase<Rotation2D<_Scalar>,2> Base;$/;"	t	class:Eigen::Rotation2D
Base	include/Eigen/src/Eigen2Support/LU.h	/^    typedef FullPivLU<MatrixType> Base;$/;"	t	class:Eigen::LU
Base	include/Eigen/src/Eigen2Support/Minor.h	/^    typedef MatrixBase<Minor> Base;$/;"	t	class:Eigen::Minor
Base	include/Eigen/src/Eigen2Support/QR.h	/^    typedef HouseholderQR<MatrixType> Base;$/;"	t	class:Eigen::QR
Base	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    typedef SelfAdjointEigenSolver<_MatrixType> Base;$/;"	t	class:Eigen::GeneralizedSelfAdjointEigenSolver
Base	include/Eigen/src/Geometry/AngleAxis.h	/^  typedef RotationBase<AngleAxis<_Scalar>,3> Base;$/;"	t	class:Eigen::AngleAxis
Base	include/Eigen/src/Geometry/Homogeneous.h	/^    typedef MatrixBase<Homogeneous> Base;$/;"	t	class:Eigen::Homogeneous
Base	include/Eigen/src/Geometry/Quaternion.h	/^    typedef QuaternionBase<Map<Quaternion<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
Base	include/Eigen/src/Geometry/Quaternion.h	/^    typedef QuaternionBase<Map<const Quaternion<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
Base	include/Eigen/src/Geometry/Quaternion.h	/^  typedef QuaternionBase<Quaternion<_Scalar,_Options> > Base;$/;"	t	class:Eigen::Quaternion
Base	include/Eigen/src/Geometry/Quaternion.h	/^  typedef RotationBase<Derived, 3> Base;$/;"	t	class:Eigen::QuaternionBase
Base	include/Eigen/src/Geometry/Rotation2D.h	/^  typedef RotationBase<Rotation2D<_Scalar>,2> Base;$/;"	t	class:Eigen::Rotation2D
Base	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef IterativeSolverBase<BiCGSTAB> Base;$/;"	t	class:Eigen::BiCGSTAB
Base	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef IterativeSolverBase<ConjugateGradient> Base;$/;"	t	class:Eigen::ConjugateGradient
Base	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef PastixBase<PastixLDLT<MatrixType, _UpLo> > Base; $/;"	t	class:Eigen::PastixLDLT
Base	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef PastixBase<PastixLLT<MatrixType, _UpLo> > Base;$/;"	t	class:Eigen::PastixLLT
Base	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef PastixBase<PastixLU<MatrixType> > Base;$/;"	t	class:Eigen::PastixLU
Base	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef PardisoImpl< PardisoLDLT<MatrixType,Options> > Base;$/;"	t	class:Eigen::PardisoLDLT
Base	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef PardisoImpl< PardisoLLT<MatrixType,_UpLo> > Base;$/;"	t	class:Eigen::PardisoLLT
Base	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef PardisoImpl< PardisoLU<MatrixType> > Base;$/;"	t	class:Eigen::PardisoLU
Base	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef SimplicialCholeskyBase<SimplicialCholesky> Base;$/;"	t	class:Eigen::SimplicialCholesky
Base	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef SimplicialCholeskyBase<SimplicialLDLT> Base;$/;"	t	class:Eigen::SimplicialLDLT
Base	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef SimplicialCholeskyBase<SimplicialLLT> Base;$/;"	t	class:Eigen::SimplicialLLT
Base	include/Eigen/src/SparseCore/SparseBlock.h	/^      typedef typename _MatrixTypeNested::InnerIterator Base;$/;"	t	class:Eigen::BlockImpl::InnerIterator
Base	include/Eigen/src/SparseCore/SparseBlock.h	/^      typedef typename _MatrixTypeNested::ReverseInnerIterator Base;$/;"	t	class:Eigen::BlockImpl::ReverseInnerIterator
Base	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^      BinaryOp,Lhs,Rhs, InnerIterator> Base;$/;"	t	class:Eigen::CwiseBinaryOpImpl::InnerIterator
Base	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryOpImpl<UnaryOp,MatrixType,Sparse>::MatrixTypeIterator Base;$/;"	t	class:Eigen::CwiseUnaryOpImpl::InnerIterator
Base	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryOpImpl<UnaryOp,MatrixType,Sparse>::MatrixTypeReverseIterator Base;$/;"	t	class:Eigen::CwiseUnaryOpImpl::ReverseInnerIterator
Base	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryViewImpl<ViewOp,MatrixType,Sparse>::MatrixTypeIterator Base;$/;"	t	class:Eigen::CwiseUnaryViewImpl::InnerIterator
Base	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryViewImpl<ViewOp,MatrixType,Sparse>::MatrixTypeReverseIterator Base;$/;"	t	class:Eigen::CwiseUnaryViewImpl::ReverseInnerIterator
Base	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef SparseMatrixBase<SparseDenseOuterProduct> Base;$/;"	t	class:Eigen::SparseDenseOuterProduct
Base	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef typename _LhsNested::InnerIterator Base;$/;"	t	class:Eigen::SparseDenseOuterProduct::InnerIterator
Base	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^      const Transpose<const typename Rhs::DiagonalVectorType> >::InnerIterator Base;$/;"	t	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
Base	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^      const typename Lhs::DiagonalVectorType>::InnerIterator Base;$/;"	t	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
Base	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    typedef typename CwiseUnaryOp<scalar_multiple_op<typename Lhs::Scalar>,const Rhs>::InnerIterator Base;$/;"	t	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
Base	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    typedef typename CwiseUnaryOp<scalar_multiple_op<typename Rhs::Scalar>,const Lhs>::InnerIterator Base;$/;"	t	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
Base	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:Eigen::SparseMatrixBase
Base	include/Eigen/src/SparseCore/SparseProduct.h	/^    typedef SparseMatrixBase<SparseSparseProduct> Base;$/;"	t	class:Eigen::SparseSparseProduct
Base	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typedef typename _MatrixTypeNested::InnerIterator Base;$/;"	t	class:Eigen::TransposeImpl::InnerIterator
Base	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typedef typename _MatrixTypeNested::ReverseInnerIterator Base;$/;"	t	class:Eigen::TransposeImpl::ReverseInnerIterator
Base	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    typedef typename MatrixTypeNestedCleaned::InnerIterator Base;$/;"	t	class:Eigen::SparseTriangularView::InnerIterator
Base	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    typedef typename MatrixTypeNestedCleaned::ReverseInnerIterator Base;$/;"	t	class:Eigen::SparseTriangularView::ReverseInnerIterator
Base	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef internal::SparseLUImpl<Scalar, Index> Base;$/;"	t	class:Eigen::SparseLU
Base	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef SuperLUBase<_MatrixType,SuperILU> Base;$/;"	t	class:Eigen::SuperILU
Base	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef SuperLUBase<_MatrixType,SuperLU> Base;$/;"	t	class:Eigen::SuperLU
Base	include/Eigen/src/misc/Image.h	/^  typedef ReturnByValue<image_retval_base> Base;$/;"	t	struct:Eigen::internal::image_retval_base
Base	include/Eigen/src/misc/Kernel.h	/^  typedef ReturnByValue<kernel_retval_base> Base;$/;"	t	struct:Eigen::internal::kernel_retval_base
Base	include/Eigen/src/misc/Solve.h	/^  typedef ReturnByValue<solve_retval_base> Base;$/;"	t	struct:Eigen::internal::solve_retval_base
Base	include/Eigen/src/misc/SparseSolve.h	/^  typedef ReturnByValue<sparse_solve_retval_base> Base;$/;"	t	struct:Eigen::internal::sparse_solve_retval_base
BasePlainObject	include/Eigen/src/Core/ProductBase.h	/^    typedef typename Base::PlainObject BasePlainObject;$/;"	t	class:Eigen::ProductBase
BasisReturnType	include/Eigen/src/Core/MatrixBase.h	/^                  internal::traits<Derived>::ColsAtCompileTime> BasisReturnType;$/;"	t	class:Eigen::MatrixBase
BiCGSTAB	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  BiCGSTAB() : Base() {}$/;"	f	class:Eigen::BiCGSTAB
BiCGSTAB	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  BiCGSTAB(const MatrixType& A) : Base(A) {}$/;"	f	class:Eigen::BiCGSTAB
BiCGSTAB	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^class BiCGSTAB : public IterativeSolverBase<BiCGSTAB<_MatrixType,_Preconditioner> >$/;"	c	namespace:Eigen
BidiagonalType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef BandMatrix<RealScalar, ColsAtCompileTime, ColsAtCompileTime, 1, 0> BidiagonalType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
BinaryFunc	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef scalar_product_op<T> BinaryFunc;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
Block	include/Eigen/src/Core/Block.h	/^    inline Block(XprType& xpr, Index a_startRow, Index a_startCol)$/;"	f	class:Eigen::Block
Block	include/Eigen/src/Core/Block.h	/^    inline Block(XprType& xpr, Index i) : Impl(xpr,i)$/;"	f	class:Eigen::Block
Block	include/Eigen/src/Core/Block.h	/^    inline Block(XprType& xpr,$/;"	f	class:Eigen::Block
Block	include/Eigen/src/Core/Block.h	/^template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel> class Block$/;"	c	namespace:Eigen
BlockImpl	include/Eigen/src/Core/Block.h	/^    inline BlockImpl(XprType& xpr, Index a_startRow, Index a_startCol) : Impl(xpr, a_startRow, a_startCol) {}$/;"	f	class:Eigen::BlockImpl
BlockImpl	include/Eigen/src/Core/Block.h	/^    inline BlockImpl(XprType& xpr, Index a_startRow, Index a_startCol, Index blockRows, Index blockCols)$/;"	f	class:Eigen::BlockImpl
BlockImpl	include/Eigen/src/Core/Block.h	/^    inline BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}$/;"	f	class:Eigen::BlockImpl
BlockImpl	include/Eigen/src/Core/Block.h	/^class BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, Dense>$/;"	c	namespace:Eigen
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline BlockImpl(const SparseMatrixType& xpr, int i)$/;"	f	class:Eigen::BlockImpl
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline BlockImpl(const SparseMatrixType& xpr, int startRow, int startCol, int blockRows, int blockCols)$/;"	f	class:Eigen::BlockImpl
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline BlockImpl(const XprType& xpr, int i)$/;"	f	class:Eigen::BlockImpl
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline BlockImpl(const XprType& xpr, int startRow, int startCol, int blockRows, int blockCols)$/;"	f	class:Eigen::BlockImpl
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^class BlockImpl<SparseMatrix<_Scalar, _Options, _Index>,BlockRows,BlockCols,true,Sparse>$/;"	c	namespace:Eigen
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^class BlockImpl<XprType,BlockRows,BlockCols,InnerPanel,Sparse>$/;"	c	namespace:Eigen
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^class BlockImpl<XprType,BlockRows,BlockCols,true,Sparse>$/;"	c	namespace:Eigen
BlockImpl	include/Eigen/src/SparseCore/SparseBlock.h	/^class BlockImpl<const SparseMatrix<_Scalar, _Options, _Index>,BlockRows,BlockCols,true,Sparse>$/;"	c	namespace:Eigen
BlockImpl_dense	include/Eigen/src/Core/Block.h	/^    inline BlockImpl_dense(XprType& xpr, Index a_startRow, Index a_startCol)$/;"	f	class:Eigen::internal::BlockImpl_dense
BlockImpl_dense	include/Eigen/src/Core/Block.h	/^    inline BlockImpl_dense(XprType& xpr, Index i)$/;"	f	class:Eigen::internal::BlockImpl_dense
BlockImpl_dense	include/Eigen/src/Core/Block.h	/^    inline BlockImpl_dense(XprType& xpr, Index startRow, Index startCol)$/;"	f	class:Eigen::internal::BlockImpl_dense
BlockImpl_dense	include/Eigen/src/Core/Block.h	/^    inline BlockImpl_dense(XprType& xpr, const Scalar* data, Index blockRows, Index blockCols)$/;"	f	class:Eigen::internal::BlockImpl_dense
BlockImpl_dense	include/Eigen/src/Core/Block.h	/^    inline BlockImpl_dense(XprType& xpr,$/;"	f	class:Eigen::internal::BlockImpl_dense
BlockImpl_dense	include/Eigen/src/Core/Block.h	/^class BlockImpl_dense<XprType,BlockRows,BlockCols, InnerPanel,true>$/;"	c	namespace:Eigen::internal
BlockImpl_dense	include/Eigen/src/Core/Block.h	/^template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel, bool HasDirectAccess> class BlockImpl_dense$/;"	c	namespace:Eigen::internal
BlockIndexVector	include/Eigen/src/SparseLU/SparseLUImpl.h	/^    typedef Ref<Matrix<Index,Dynamic,1> > BlockIndexVector;$/;"	t	class:Eigen::internal::SparseLUImpl
BlockScalarVector	include/Eigen/src/SparseLU/SparseLUImpl.h	/^    typedef Ref<Matrix<Scalar,Dynamic,1> > BlockScalarVector;$/;"	t	class:Eigen::internal::SparseLUImpl
BlockSize	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^    BlockSize  = EIGEN_PLAIN_ENUM_MAX(mr,nr)$/;"	e	enum:Eigen::internal::tribb_kernel::__anon212
BlockType	include/Eigen/src/Core/Block.h	/^    typedef Block<XprType, BlockRows, BlockCols, InnerPanel> BlockType;$/;"	t	class:Eigen::internal::BlockImpl_dense
BlockType	include/Eigen/src/LU/PartialPivLU.h	/^  typedef Block<MatrixType,Dynamic,Dynamic> BlockType;$/;"	t	struct:Eigen::internal::partial_lu_impl
BlockType	include/Eigen/src/SparseCore/SparseBlock.h	/^    typedef Block<SparseMatrixType, BlockRows, BlockCols, true> BlockType;$/;"	t	class:Eigen::BlockImpl
BlockType	include/Eigen/src/SparseCore/SparseBlock.h	/^    typedef Block<XprType, BlockRows, BlockCols, true> BlockType;$/;"	t	class:Eigen::BlockImpl
BlockType	include/Eigen/src/SparseCore/SparseBlock.h	/^    typedef Block<const SparseMatrixType, BlockRows, BlockCols, true> BlockType;$/;"	t	class:Eigen::BlockImpl
BlockType	include/Eigen/src/SparseCore/SparseBlock.h	/^  typedef Block<XprType, BlockRows, BlockCols, InnerPanel> BlockType;$/;"	t	class:Eigen::BlockImpl
BothDirections	include/Eigen/src/Core/util/Constants.h	/^  BothDirections $/;"	e	enum:Eigen::DirectionType
BottomLeft	include/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:Eigen::CornerType
BottomLeft	include/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeft=0, BottomRight=1,$/;"	e	enum:Eigen::AlignedBox::CornerType
BottomLeftCeil	include/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftCeil=4, BottomRightCeil=5,$/;"	e	enum:Eigen::AlignedBox::CornerType
BottomLeftFloor	include/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftFloor=0, BottomRightFloor=1,$/;"	e	enum:Eigen::AlignedBox::CornerType
BottomRight	include/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:Eigen::CornerType
BottomRight	include/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeft=0, BottomRight=1,$/;"	e	enum:Eigen::AlignedBox::CornerType
BottomRightCeil	include/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftCeil=4, BottomRightCeil=5,$/;"	e	enum:Eigen::AlignedBox::CornerType
BottomRightFloor	include/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftFloor=0, BottomRightFloor=1,$/;"	e	enum:Eigen::AlignedBox::CornerType
BuildType	include/Eigen/src/Core/BandMatrix.h	/^      typedef Block<CoefficientsType,1, DiagonalSize> BuildType;$/;"	t	struct:Eigen::internal::BandMatrixBase::DiagonalIntReturnType
BuiltIn	include/Eigen/src/Core/util/Constants.h	/^  BuiltIn$/;"	e	enum:Eigen::__anon267
CJMADD	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	1101;"	d
COEFFICIENT_WRITE_ACCESS_TO_SELFADJOINT_NOT_SUPPORTED	include/Eigen/src/Core/util/StaticAssert.h	/^        COEFFICIENT_WRITE_ACCESS_TO_SELFADJOINT_NOT_SUPPORTED,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
COLAMDOrdering	include/Eigen/src/OrderingMethods/Ordering.h	/^class COLAMDOrdering$/;"	c	namespace:Eigen
COLAMD_ASSERT	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	246;"	d
COLAMD_DEBUG0	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	240;"	d
COLAMD_DEBUG1	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	241;"	d
COLAMD_DEBUG2	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	242;"	d
COLAMD_DEBUG3	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	243;"	d
COLAMD_DEBUG4	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	244;"	d
COLAMD_DEFRAG_COUNT	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	76;"	d
COLAMD_DENSE_COL	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	73;"	d
COLAMD_DENSE_ROW	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	70;"	d
COLAMD_EMPTY	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	112;"	d
COLAMD_ERROR_A_not_present	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	89;"	d
COLAMD_ERROR_A_too_small	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	95;"	d
COLAMD_ERROR_col_length_negative	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	96;"	d
COLAMD_ERROR_internal_error	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	99;"	d
COLAMD_ERROR_ncol_negative	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	92;"	d
COLAMD_ERROR_nnz_negative	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	93;"	d
COLAMD_ERROR_nrow_negative	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	91;"	d
COLAMD_ERROR_out_of_memory	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	98;"	d
COLAMD_ERROR_p0_nonzero	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	94;"	d
COLAMD_ERROR_p_not_present	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	90;"	d
COLAMD_ERROR_row_index_out_of_bounds	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	97;"	d
COLAMD_INFO1	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	82;"	d
COLAMD_INFO2	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	83;"	d
COLAMD_INFO3	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	84;"	d
COLAMD_KNOBS	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	64;"	d
COLAMD_MAX	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	105;"	d
COLAMD_MIN	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	106;"	d
COLAMD_NDEBUG	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	57;"	d
COLAMD_OK	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	87;"	d
COLAMD_OK_BUT_JUMBLED	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	88;"	d
COLAMD_STATS	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	67;"	d
COLAMD_STATUS	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	79;"	d
COL_IS_ALIVE	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	127;"	d
COL_IS_DEAD	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	126;"	d
COL_IS_DEAD_PRINCIPAL	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	128;"	d
CanVectorizeInner	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeInner =    SameType$/;"	e	enum:Eigen::internal::traits::__anon197
CanVectorizeInner	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeInner = internal::traits<CoeffBasedProduct>::CanVectorizeInner$/;"	e	enum:Eigen::CoeffBasedProduct::__anon198
CanVectorizeLhs	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeLhs = (!LhsRowMajor) && (LhsFlags & PacketAccessBit)$/;"	e	enum:Eigen::internal::traits::__anon197
CanVectorizeRhs	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeRhs = RhsRowMajor && (RhsFlags & PacketAccessBit)$/;"	e	enum:Eigen::internal::traits::__anon197
CholMatrixType	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef MatrixType CholMatrixType;$/;"	t	class:Eigen::CholmodBase
CholMatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> CholMatrixType;$/;"	t	class:Eigen::SimplicialCholesky
CholMatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> CholMatrixType;$/;"	t	class:Eigen::SimplicialCholeskyBase
CholMatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> CholMatrixType;$/;"	t	class:Eigen::SimplicialLDLT
CholMatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> CholMatrixType;$/;"	t	class:Eigen::SimplicialLLT
CholMatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SparseMatrix<Scalar, ColMajor, Index>                   CholMatrixType;$/;"	t	struct:Eigen::internal::traits
CholMatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SparseMatrix<Scalar, ColMajor, Index>               CholMatrixType;$/;"	t	struct:Eigen::internal::traits
CholmodAuto	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:Eigen::CholmodMode
CholmodBase	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodBase()$/;"	f	class:Eigen::CholmodBase
CholmodBase	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodBase(const MatrixType& matrix)$/;"	f	class:Eigen::CholmodBase
CholmodBase	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^class CholmodBase : internal::noncopyable$/;"	c	namespace:Eigen
CholmodDecomposition	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodDecomposition() : Base() { init(); }$/;"	f	class:Eigen::CholmodDecomposition
CholmodDecomposition	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodDecomposition(const MatrixType& matrix) : Base()$/;"	f	class:Eigen::CholmodDecomposition
CholmodDecomposition	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^class CholmodDecomposition : public CholmodBase<_MatrixType, _UpLo, CholmodDecomposition<_MatrixType, _UpLo> >$/;"	c	namespace:Eigen
CholmodLDLt	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:Eigen::CholmodMode
CholmodMode	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^enum CholmodMode {$/;"	g	namespace:Eigen
CholmodSimplicialLDLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodSimplicialLDLT() : Base() { init(); }$/;"	f	class:Eigen::CholmodSimplicialLDLT
CholmodSimplicialLDLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodSimplicialLDLT(const MatrixType& matrix) : Base()$/;"	f	class:Eigen::CholmodSimplicialLDLT
CholmodSimplicialLDLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^class CholmodSimplicialLDLT : public CholmodBase<_MatrixType, _UpLo, CholmodSimplicialLDLT<_MatrixType, _UpLo> >$/;"	c	namespace:Eigen
CholmodSimplicialLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodSimplicialLLT() : Base() { init(); }$/;"	f	class:Eigen::CholmodSimplicialLLT
CholmodSimplicialLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodSimplicialLLT(const MatrixType& matrix) : Base()$/;"	f	class:Eigen::CholmodSimplicialLLT
CholmodSimplicialLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^class CholmodSimplicialLLT : public CholmodBase<_MatrixType, _UpLo, CholmodSimplicialLLT<_MatrixType, _UpLo> >$/;"	c	namespace:Eigen
CholmodSimplicialLLt	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:Eigen::CholmodMode
CholmodSupernodalLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodSupernodalLLT() : Base() { init(); }$/;"	f	class:Eigen::CholmodSupernodalLLT
CholmodSupernodalLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    CholmodSupernodalLLT(const MatrixType& matrix) : Base()$/;"	f	class:Eigen::CholmodSupernodalLLT
CholmodSupernodalLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^class CholmodSupernodalLLT : public CholmodBase<_MatrixType, _UpLo, CholmodSupernodalLLT<_MatrixType, _UpLo> >$/;"	c	namespace:Eigen
CholmodSupernodalLLt	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:Eigen::CholmodMode
CoeffBasedProduct	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    inline CoeffBasedProduct(const CoeffBasedProduct& other)$/;"	f	class:Eigen::CoeffBasedProduct
CoeffBasedProduct	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    inline CoeffBasedProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:Eigen::CoeffBasedProduct
CoeffBasedProduct	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^class CoeffBasedProduct$/;"	c	namespace:Eigen
CoeffBasedProductMode	include/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e	enum:Eigen::__anon271
CoeffReadCost	include/Eigen/src/Core/BandMatrix.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
CoeffReadCost	include/Eigen/src/Core/BandMatrix.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:Eigen::internal::traits::__anon47
CoeffReadCost	include/Eigen/src/Core/BandMatrix.h	/^    CoeffReadCost = internal::traits<_CoefficientsType>::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon48
CoeffReadCost	include/Eigen/src/Core/CwiseBinaryOp.h	/^    CoeffReadCost = LhsCoeffReadCost + RhsCoeffReadCost + functor_traits<BinaryOp>::Cost$/;"	e	enum:Eigen::internal::traits::__anon54
CoeffReadCost	include/Eigen/src/Core/CwiseNullaryOp.h	/^    CoeffReadCost = functor_traits<NullaryOp>::Cost$/;"	e	enum:Eigen::internal::traits::__anon55
CoeffReadCost	include/Eigen/src/Core/CwiseUnaryOp.h	/^    CoeffReadCost = _XprTypeNested::CoeffReadCost + functor_traits<UnaryOp>::Cost$/;"	e	enum:Eigen::internal::traits::__anon56
CoeffReadCost	include/Eigen/src/Core/CwiseUnaryView.h	/^    CoeffReadCost = traits<_MatrixTypeNested>::CoeffReadCost + functor_traits<ViewOp>::Cost,$/;"	e	enum:Eigen::internal::traits::__anon57
CoeffReadCost	include/Eigen/src/Core/DenseBase.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:Eigen::DenseBase::__anon58
CoeffReadCost	include/Eigen/src/Core/Diagonal.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon64
CoeffReadCost	include/Eigen/src/Core/DiagonalProduct.h	/^    CoeffReadCost = NumTraits<Scalar>::MulCost + MatrixType::CoeffReadCost + DiagonalType::DiagonalVectorType::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon69
CoeffReadCost	include/Eigen/src/Core/Matrix.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:Eigen::internal::traits::__anon184
CoeffReadCost	include/Eigen/src/Core/PermutationMatrix.h	/^      CoeffReadCost = Traits::CoeffReadCost,$/;"	e	enum:Eigen::PermutationBase::__anon189
CoeffReadCost	include/Eigen/src/Core/PermutationMatrix.h	/^      CoeffReadCost = Traits::CoeffReadCost,$/;"	e	enum:Eigen::Transpose::__anon191
CoeffReadCost	include/Eigen/src/Core/PermutationMatrix.h	/^    CoeffReadCost = _IndicesType::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon190
CoeffReadCost	include/Eigen/src/Core/ProductBase.h	/^    CoeffReadCost = 0 \/\/ FIXME why is it needed ?$/;"	e	enum:Eigen::internal::traits::__anon196
CoeffReadCost	include/Eigen/src/Core/Replicate.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon239
CoeffReadCost	include/Eigen/src/Core/Reverse.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon241
CoeffReadCost	include/Eigen/src/Core/Select.h	/^    CoeffReadCost = traits<typename remove_all<ConditionMatrixNested>::type>::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon243
CoeffReadCost	include/Eigen/src/Core/SelfAdjointView.h	/^    CoeffReadCost = MatrixTypeNestedCleaned::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon244
CoeffReadCost	include/Eigen/src/Core/Transpose.h	/^    CoeffReadCost = MatrixTypeNestedPlain::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon253
CoeffReadCost	include/Eigen/src/Core/TriangularMatrix.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:Eigen::TriangularBase::__anon256
CoeffReadCost	include/Eigen/src/Core/TriangularMatrix.h	/^    CoeffReadCost = MatrixTypeNestedCleaned::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon257
CoeffReadCost	include/Eigen/src/Core/VectorwiseOp.h	/^    CoeffReadCost = TraversalSize==Dynamic ? Dynamic$/;"	e	enum:Eigen::internal::traits::__anon331
CoeffReadCost	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CoeffReadCost = InnerSize == Dynamic ? Dynamic$/;"	e	enum:Eigen::internal::traits::__anon197
CoeffReadCost	include/Eigen/src/Eigen2Support/Minor.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost \/\/ minor is used typically on tiny matrices,$/;"	e	enum:Eigen::internal::traits::__anon357
CoeffReadCost	include/Eigen/src/Geometry/Homogeneous.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost$/;"	e	enum:Eigen::internal::traits::__anon370
CoeffReadCost	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    CoeffReadCost = LhsCoeffReadCost + RhsCoeffReadCost + NumTraits<Scalar>::MulCost$/;"	e	enum:Eigen::internal::traits::__anon432
CoeffReadCost	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    CoeffReadCost = Dynamic$/;"	e	enum:Eigen::internal::traits::__anon433
CoeffReadCost	include/Eigen/src/SparseCore/SparseMatrix.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:Eigen::internal::traits::__anon436
CoeffReadCost	include/Eigen/src/SparseCore/SparseMatrix.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost*10$/;"	e	enum:Eigen::internal::traits::__anon437
CoeffReadCost	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
CoeffReadCost	include/Eigen/src/SparseCore/SparseProduct.h	/^    CoeffReadCost = Dynamic$/;"	e	enum:Eigen::internal::traits::__anon443
CoeffReadCost	include/Eigen/src/SparseCore/SparseVector.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:Eigen::internal::traits::__anon447
CoeffReturnType	include/Eigen/src/Core/ArrayBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:Eigen::ArrayBase
CoeffReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:Eigen::DenseBase
CoeffReturnType	include/Eigen/src/Core/DenseCoeffsBase.h	/^                     >::type CoeffReturnType;$/;"	t	class:Eigen::DenseCoeffsBase
CoeffReturnType	include/Eigen/src/Core/MapBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:Eigen::MapBase
CoeffReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:Eigen::MatrixBase
CoeffReturnType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef typename internal::conditional<_HasDirectAccess, const Scalar&, Scalar>::type CoeffReturnType;$/;"	t	class:Eigen::SparseMatrixBase
CoeffVectorType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef Matrix<Scalar, SizeMinusOne, 1, Options & ~RowMajor, MaxSizeMinusOne, 1> CoeffVectorType;$/;"	t	class:Eigen::HessenbergDecomposition
CoeffVectorType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef Matrix<Scalar, SizeMinusOne, 1, Options & ~RowMajor, MaxSizeMinusOne, 1> CoeffVectorType;$/;"	t	class:Eigen::Tridiagonalization
CoeffVectorType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename Tridiagonalization<MatrixType>::CoeffVectorType CoeffVectorType;$/;"	t	struct:Eigen::internal::tridiagonalization_inplace_selector
Coefficients	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^                        : int(AmbientDimAtCompileTime)+1,1> Coefficients;$/;"	t	class:Eigen::Hyperplane
Coefficients	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef Matrix<Scalar, 4, 1> Coefficients;$/;"	t	class:Eigen::Quaternion
Coefficients	include/Eigen/src/Geometry/Hyperplane.h	/^                        : Index(AmbientDimAtCompileTime)+1,1,Options> Coefficients;$/;"	t	class:Eigen::Hyperplane
Coefficients	include/Eigen/src/Geometry/Quaternion.h	/^    typedef Map<Matrix<_Scalar,4,1>, _Options> Coefficients;$/;"	t	struct:Eigen::internal::traits
Coefficients	include/Eigen/src/Geometry/Quaternion.h	/^    typedef Map<const Matrix<_Scalar,4,1>, _Options> Coefficients;$/;"	t	struct:Eigen::internal::traits
Coefficients	include/Eigen/src/Geometry/Quaternion.h	/^    typedef typename internal::traits<Map>::Coefficients Coefficients;$/;"	t	class:Eigen::Map
Coefficients	include/Eigen/src/Geometry/Quaternion.h	/^  typedef Matrix<_Scalar,4,1,_Options> Coefficients;$/;"	t	struct:Eigen::internal::traits
Coefficients	include/Eigen/src/Geometry/Quaternion.h	/^  typedef typename internal::traits<Derived>::Coefficients Coefficients;$/;"	t	class:Eigen::QuaternionBase
Coefficients	include/Eigen/src/Geometry/Quaternion.h	/^  typedef typename internal::traits<Quaternion>::Coefficients Coefficients;$/;"	t	class:Eigen::Quaternion
CoefficientsType	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrix>::CoefficientsType CoefficientsType;$/;"	t	class:Eigen::internal::BandMatrix
CoefficientsType	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrixWrapper>::CoefficientsType CoefficientsType;$/;"	t	class:Eigen::internal::BandMatrixWrapper
CoefficientsType	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<Derived>::CoefficientsType CoefficientsType;$/;"	t	class:Eigen::internal::BandMatrixBase
CoefficientsType	include/Eigen/src/Core/BandMatrix.h	/^  typedef Matrix<Scalar,DataRowsAtCompileTime,ColsAtCompileTime,Options&RowMajor?RowMajor:ColMajor> CoefficientsType;$/;"	t	struct:Eigen::internal::traits
CoefficientsType	include/Eigen/src/Core/BandMatrix.h	/^  typedef _CoefficientsType CoefficientsType;$/;"	t	struct:Eigen::internal::traits
CoherentAccessPattern	include/Eigen/src/SparseCore/SparseUtil.h	/^const int CoherentAccessPattern     = 0x1;$/;"	m	namespace:Eigen
ColMajor	include/Eigen/src/Core/util/Constants.h	/^  ColMajor = 0,$/;"	e	enum:Eigen::__anon268
ColPivHouseholderQR	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR()$/;"	f	class:Eigen::ColPivHouseholderQR
ColPivHouseholderQR	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR(Index rows, Index cols)$/;"	f	class:Eigen::ColPivHouseholderQR
ColPivHouseholderQR	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR(const MatrixType& matrix)$/;"	f	class:Eigen::ColPivHouseholderQR
ColPivHouseholderQR	include/Eigen/src/QR/ColPivHouseholderQR.h	/^template<typename _MatrixType> class ColPivHouseholderQR$/;"	c	namespace:Eigen
ColPivHouseholderQRPreconditioner	include/Eigen/src/Core/util/Constants.h	/^  ColPivHouseholderQRPreconditioner,$/;"	e	enum:Eigen::QRPreconditioners
ColSpMatrix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef SparseMatrix<Scalar, ColMajor> ColSpMatrix;$/;"	t	class:Eigen::PastixBase
ColSpMatrix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename Base::ColSpMatrix ColSpMatrix;$/;"	t	class:Eigen::PastixLDLT
ColSpMatrix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename Base::ColSpMatrix ColSpMatrix;$/;"	t	class:Eigen::PastixLLT
ColSpMatrix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename Base::ColSpMatrix ColSpMatrix;$/;"	t	class:Eigen::PastixLU
ColType	include/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename internal::plain_col_type<MatrixType>::type ColType;$/;"	t	class:Eigen::JacobiSVD
ColVector	include/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, 1> ColVector;$/;"	t	class:Eigen::SVD
ColVectorType	include/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, 1, MatrixType::Options, MatrixType::MaxRowsAtCompileTime, 1> ColVectorType;$/;"	t	class:Eigen::LU
ColVectorType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename internal::plain_col_type<MatrixType>::type ColVectorType;$/;"	t	class:Eigen::FullPivHouseholderQR
ColVectorType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, 1> ColVectorType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
ColXpr	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::ColXpr ColXpr;$/;"	t	class:Eigen::MatrixBase
ColXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> ColXpr;$/;"	t
Colamd_Row	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^struct Colamd_Row$/;"	s	namespace:internal
Cols	include/Eigen/src/Core/GeneralProduct.h	/^    Cols  = _Rhs::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::product_type::__anon145
ColsAtCompileTime	include/Eigen/src/Cholesky/LDLT.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::LDLT::__anon1
ColsAtCompileTime	include/Eigen/src/Cholesky/LLT.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::LLT::__anon2
ColsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
ColsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    ColsAtCompileTime = _Cols,$/;"	e	enum:Eigen::internal::traits::__anon47
ColsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    ColsAtCompileTime = _Cols,$/;"	e	enum:Eigen::internal::traits::__anon48
ColsAtCompileTime	include/Eigen/src/Core/Block.h	/^    ColsAtCompileTime = MatrixCols == 0 ? 0 : BlockCols,$/;"	e	enum:Eigen::internal::traits::__anon49
ColsAtCompileTime	include/Eigen/src/Core/CwiseBinaryOp.h	/^    ColsAtCompileTime = traits<Ancestor>::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon53
ColsAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:Eigen::DenseBase::__anon58
ColsAtCompileTime	include/Eigen/src/Core/Diagonal.h	/^    ColsAtCompileTime = 1,$/;"	e	enum:Eigen::internal::traits::__anon64
ColsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^      ColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:Eigen::DiagonalBase::__anon66
ColsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^    ColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon68
ColsAtCompileTime	include/Eigen/src/Core/DiagonalProduct.h	/^    ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon69
ColsAtCompileTime	include/Eigen/src/Core/MapBase.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:Eigen::MapBase::__anon178
ColsAtCompileTime	include/Eigen/src/Core/Matrix.h	/^    ColsAtCompileTime = _Cols,$/;"	e	enum:Eigen::internal::traits::__anon184
ColsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      ColsAtCompileTime = Traits::ColsAtCompileTime,$/;"	e	enum:Eigen::PermutationBase::__anon189
ColsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      ColsAtCompileTime = Traits::ColsAtCompileTime,$/;"	e	enum:Eigen::Transpose::__anon191
ColsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^    ColsAtCompileTime = _IndicesType::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon190
ColsAtCompileTime	include/Eigen/src/Core/ProductBase.h	/^    ColsAtCompileTime = traits<Rhs>::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon196
ColsAtCompileTime	include/Eigen/src/Core/Replicate.h	/^    ColsAtCompileTime = ColFactor==Dynamic || int(MatrixType::ColsAtCompileTime)==Dynamic$/;"	e	enum:Eigen::internal::traits::__anon239
ColsAtCompileTime	include/Eigen/src/Core/Reverse.h	/^    ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon241
ColsAtCompileTime	include/Eigen/src/Core/Select.h	/^    ColsAtCompileTime = ConditionMatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon243
ColsAtCompileTime	include/Eigen/src/Core/Transpose.h	/^    ColsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon253
ColsAtCompileTime	include/Eigen/src/Core/TriangularMatrix.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:Eigen::TriangularBase::__anon256
ColsAtCompileTime	include/Eigen/src/Core/VectorwiseOp.h	/^    ColsAtCompileTime = Direction==Horizontal ? 1 : MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon330
ColsAtCompileTime	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      ColsAtCompileTime = _RhsNested::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon197
ColsAtCompileTime	include/Eigen/src/Eigen2Support/Minor.h	/^    ColsAtCompileTime = (MatrixType::ColsAtCompileTime != Dynamic) ?$/;"	e	enum:Eigen::internal::traits::__anon357
ColsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::ComplexEigenSolver::__anon359
ColsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::ComplexSchur::__anon360
ColsAtCompileTime	include/Eigen/src/Eigenvalues/EigenSolver.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::EigenSolver::__anon361
ColsAtCompileTime	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::GeneralizedEigenSolver::__anon362
ColsAtCompileTime	include/Eigen/src/Eigenvalues/RealQZ.h	/^        ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::RealQZ::__anon364
ColsAtCompileTime	include/Eigen/src/Eigenvalues/RealSchur.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::RealSchur::__anon365
ColsAtCompileTime	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::SelfAdjointEigenSolver::__anon366
ColsAtCompileTime	include/Eigen/src/Geometry/Homogeneous.h	/^    ColsAtCompileTime = Direction==Horizontal ? ColsPlusOne : MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon370
ColsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^      ColsAtCompileTime = internal::traits<HouseholderSequence>::ColsAtCompileTime,$/;"	e	enum:Eigen::HouseholderSequence::__anon393
ColsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^    ColsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon392
ColsAtCompileTime	include/Eigen/src/LU/FullPivLU.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::FullPivLU::__anon397
ColsAtCompileTime	include/Eigen/src/LU/PartialPivLU.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::PartialPivLU::__anon400
ColsAtCompileTime	include/Eigen/src/QR/ColPivHouseholderQR.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::ColPivHouseholderQR::__anon412
ColsAtCompileTime	include/Eigen/src/QR/FullPivHouseholderQR.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::FullPivHouseholderQR::__anon413
ColsAtCompileTime	include/Eigen/src/QR/HouseholderQR.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::HouseholderQR::__anon414
ColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::JacobiSVD::__anon465
ColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon462
ColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon463
ColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon464
ColsAtCompileTime	include/Eigen/src/SVD/UpperBidiagonalization.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::UpperBidiagonalization::__anon466
ColsAtCompileTime	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    ColsAtCompileTime    = Tr ? int(traits<Lhs>::ColsAtCompileTime)     : int(traits<Rhs>::ColsAtCompileTime),$/;"	e	enum:Eigen::internal::traits::__anon432
ColsAtCompileTime	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    ColsAtCompileTime = _Rhs::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon433
ColsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    ColsAtCompileTime = 1,$/;"	e	enum:Eigen::internal::traits::__anon437
ColsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    ColsAtCompileTime = Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon436
ColsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
ColsAtCompileTime	include/Eigen/src/SparseCore/SparseProduct.h	/^    ColsAtCompileTime    = _RhsNested::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon443
ColsAtCompileTime	include/Eigen/src/SparseCore/SparseVector.h	/^    ColsAtCompileTime = IsColVector ? 1 : Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon447
ColsAtCompileTimeMinusOne	include/Eigen/src/SVD/UpperBidiagonalization.h	/^      ColsAtCompileTimeMinusOne = internal::decrement_size<ColsAtCompileTime>::ret$/;"	e	enum:Eigen::internal::UpperBidiagonalization::__anon466
ColsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMajor> ColsBlockXpr;$/;"	t
ColsPlusOne	include/Eigen/src/Geometry/Homogeneous.h	/^    ColsPlusOne = (MatrixType::ColsAtCompileTime != Dynamic) ?$/;"	e	enum:Eigen::internal::traits::__anon370
ColumnVectorType	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ColumnVectorType;$/;"	t	class:Eigen::EigenSolver
ColumnVectorType	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ColumnVectorType;$/;"	t	class:Eigen::GeneralizedEigenSolver
ColumnVectorType	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ColumnVectorType;$/;"	t	class:Eigen::RealQZ
ColumnVectorType	include/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ColumnVectorType;$/;"	t	class:Eigen::RealSchur
ColwiseReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef VectorwiseOp<Derived, Vertical> ColwiseReturnType;$/;"	t	class:Eigen::DenseBase
CommaInitializer	include/Eigen/src/Core/CommaInitializer.h	/^  inline CommaInitializer(XprType& xpr, const DenseBase<OtherDerived>& other)$/;"	f	struct:Eigen::CommaInitializer
CommaInitializer	include/Eigen/src/Core/CommaInitializer.h	/^  inline CommaInitializer(XprType& xpr, const Scalar& s)$/;"	f	struct:Eigen::CommaInitializer
CommaInitializer	include/Eigen/src/Core/CommaInitializer.h	/^  inline CommaInitializer(const CommaInitializer& o)$/;"	f	struct:Eigen::CommaInitializer
CommaInitializer	include/Eigen/src/Core/CommaInitializer.h	/^struct CommaInitializer$/;"	s	namespace:Eigen
CompleteUnrolling	include/Eigen/src/Core/util/Constants.h	/^  CompleteUnrolling$/;"	e	enum:Eigen::__anon266
ComplexEigenSolver	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      ComplexEigenSolver(const MatrixType& matrix, bool computeEigenvectors = true)$/;"	f	class:Eigen::ComplexEigenSolver
ComplexEigenSolver	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComplexEigenSolver()$/;"	f	class:Eigen::ComplexEigenSolver
ComplexEigenSolver	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComplexEigenSolver(Index size)$/;"	f	class:Eigen::ComplexEigenSolver
ComplexEigenSolver	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^template<typename _MatrixType> class ComplexEigenSolver$/;"	c	namespace:Eigen
ComplexMatrixType	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> ComplexMatrixType;$/;"	t	class:Eigen::ComplexSchur
ComplexScalar	include/Eigen/src/Core/util/ForwardDeclarations.h	/^  typedef std::complex<typename NumTraits<Scalar>::Real> ComplexScalar;$/;"	t	struct:Eigen::internal::stem_function
ComplexScalar	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef std::complex<RealScalar> ComplexScalar;$/;"	t	class:Eigen::ComplexEigenSolver
ComplexScalar	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef std::complex<RealScalar> ComplexScalar;$/;"	t	class:Eigen::ComplexSchur
ComplexScalar	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef std::complex<RealScalar> ComplexScalar;$/;"	t	class:Eigen::EigenSolver
ComplexScalar	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef std::complex<RealScalar> ComplexScalar;$/;"	t	class:Eigen::GeneralizedEigenSolver
ComplexScalar	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef std::complex<typename NumTraits<Scalar>::Real> ComplexScalar;$/;"	t	class:Eigen::RealQZ
ComplexScalar	include/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef std::complex<typename NumTraits<Scalar>::Real> ComplexScalar;$/;"	t	class:Eigen::RealSchur
ComplexSchur	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexSchur(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime)$/;"	f	class:Eigen::ComplexSchur
ComplexSchur	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexSchur(const MatrixType& matrix, bool computeU = true)$/;"	f	class:Eigen::ComplexSchur
ComplexSchur	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^template<typename _MatrixType> class ComplexSchur$/;"	c	namespace:Eigen
ComplexVectorType	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ComplexVectorType;$/;"	t	class:Eigen::GeneralizedEigenSolver
CompressedStorage	include/Eigen/src/SparseCore/CompressedStorage.h	/^    CompressedStorage()$/;"	f	class:Eigen::internal::CompressedStorage
CompressedStorage	include/Eigen/src/SparseCore/CompressedStorage.h	/^    CompressedStorage(const CompressedStorage& other)$/;"	f	class:Eigen::internal::CompressedStorage
CompressedStorage	include/Eigen/src/SparseCore/CompressedStorage.h	/^    CompressedStorage(size_t size)$/;"	f	class:Eigen::internal::CompressedStorage
CompressedStorage	include/Eigen/src/SparseCore/CompressedStorage.h	/^class CompressedStorage$/;"	c	namespace:Eigen::internal
ComputationInfo	include/Eigen/src/Core/util/Constants.h	/^enum ComputationInfo {$/;"	g	namespace:Eigen
ComputeEigenvectors	include/Eigen/src/Core/util/Constants.h	/^  ComputeEigenvectors = 0x80,$/;"	e	enum:Eigen::DecompositionOptions
ComputeFullU	include/Eigen/src/Core/util/Constants.h	/^  ComputeFullU        = 0x04,$/;"	e	enum:Eigen::DecompositionOptions
ComputeFullV	include/Eigen/src/Core/util/Constants.h	/^  ComputeFullV        = 0x10,$/;"	e	enum:Eigen::DecompositionOptions
ComputeThinU	include/Eigen/src/Core/util/Constants.h	/^  ComputeThinU        = 0x08,$/;"	e	enum:Eigen::DecompositionOptions
ComputeThinV	include/Eigen/src/Core/util/Constants.h	/^  ComputeThinV        = 0x20,$/;"	e	enum:Eigen::DecompositionOptions
ConditionMatrixNested	include/Eigen/src/Core/Select.h	/^  typedef typename ConditionMatrixType::Nested ConditionMatrixNested;$/;"	t	struct:Eigen::internal::traits
Conj	include/Eigen/src/Core/Functors.h	/^    Conj = NumTraits<LhsScalar>::IsComplex$/;"	e	enum:Eigen::internal::scalar_conj_product_op::__anon74
ConjLhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjLhs = _ConjLhs,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
ConjLhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjLhs = _ConjLhs,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
ConjLhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjLhs = _ConjLhs,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
ConjLhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjLhs = false,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
ConjRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjRhs = _ConjRhs,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
ConjRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjRhs = _ConjRhs,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
ConjRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjRhs = _ConjRhs,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
ConjRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjRhs = false,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
Conjugate	include/Eigen/src/Core/BandMatrix.h	/^        Conjugate = ReturnOpposite && NumTraits<Scalar>::IsComplex,$/;"	e	enum:Eigen::internal::BandMatrixBase::DiagonalIntReturnType::__anon46
ConjugateGradient	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  ConjugateGradient() : Base() {}$/;"	f	class:Eigen::ConjugateGradient
ConjugateGradient	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  ConjugateGradient(const MatrixType& A) : Base(A) {}$/;"	f	class:Eigen::ConjugateGradient
ConjugateGradient	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^class ConjugateGradient : public IterativeSolverBase<ConjugateGradient<_MatrixType,_UpLo,_Preconditioner> >$/;"	c	namespace:Eigen
ConjugateReturnType	include/Eigen/src/Householder/HouseholderSequence.h	/^    > ConjugateReturnType;$/;"	t	class:Eigen::HouseholderSequence
ConjugateReturnType	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^                  >::type ConjugateReturnType;$/;"	t
ConstAffinePart	include/Eigen/src/Geometry/Transform.h	/^                              const Block<const MatrixType,Dim,HDim> >::type ConstAffinePart;$/;"	t	class:Eigen::Transform
ConstAffinePart	include/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::ConstAffinePart ConstAffinePart;$/;"	t	struct:Eigen::internal::transform_take_affine_part
ConstAlignedMapType	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef const Eigen::Map<const Derived, Aligned> ConstAlignedMapType;$/;"	t	class:Eigen::PlainObjectBase
ConstBlockType	include/Eigen/src/SparseCore/SparseBlock.h	/^    typedef Block<const SparseMatrixType, BlockRows, BlockCols, true> ConstBlockType;$/;"	t	class:Eigen::BlockImpl
ConstColXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> ConstColXpr;$/;"	t
ConstColsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMajor> ConstColsBlockXpr;$/;"	t
ConstColwiseReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef const VectorwiseOp<const Derived, Vertical> ConstColwiseReturnType;$/;"	t	class:Eigen::DenseBase
ConstDiagonalDynamicIndexReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::add_const<Diagonal<const Derived,DynamicIndex> >::type ConstDiagonalDynamicIndexReturnType;$/;"	t	class:Eigen::MatrixBase
ConstDiagonalIndexReturnType	include/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct ConstDiagonalIndexReturnType { typedef const Diagonal<const Derived,Index> Type; };$/;"	s	class:Eigen::MatrixBase
ConstDiagonalReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::add_const<Diagonal<const Derived> >::type ConstDiagonalReturnType;$/;"	t	class:Eigen::MatrixBase
ConstFixedSegmentReturnType	include/Eigen/src/plugins/BlockMethods.h	/^template<int Size> struct ConstFixedSegmentReturnType { typedef const VectorBlock<const Derived, Size> Type; };$/;"	s
ConstInnerVectorReturnType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef Block<const Derived,IsRowMajor?1:Dynamic,IsRowMajor?Dynamic:1,true> ConstInnerVectorReturnType;$/;"	t	class:Eigen::SparseMatrixBase
ConstLinearPart	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef const Block<const MatrixType,Dim,Dim> ConstLinearPart;$/;"	t	class:Eigen::Transform
ConstLinearPart	include/Eigen/src/Geometry/Transform.h	/^  typedef const Block<ConstMatrixType,Dim,Dim,int(Mode)==(AffineCompact) && (Options&RowMajor)==0> ConstLinearPart;$/;"	t	class:Eigen::Transform
ConstMapType	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef const Eigen::Map<const Derived, Unaligned> ConstMapType;$/;"	t	class:Eigen::PlainObjectBase
ConstMatrixType	include/Eigen/src/Geometry/Transform.h	/^  typedef const MatrixType ConstMatrixType;$/;"	t	class:Eigen::Transform
ConstNColsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNColsBlockXpr { typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	s
ConstNRowsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNRowsBlockXpr { typedef const Block<const Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	s
ConstNormalReturnType	include/Eigen/src/Geometry/Hyperplane.h	/^  typedef const Block<const Coefficients,AmbientDimAtCompileTime,1> ConstNormalReturnType;$/;"	t	class:Eigen::Hyperplane
ConstReverseReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef const Reverse<const Derived, BothDirections> ConstReverseReturnType;$/;"	t	class:Eigen::DenseBase
ConstRowXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> ConstRowXpr;$/;"	t
ConstRowsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> ConstRowsBlockXpr;$/;"	t
ConstRowwiseReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef const VectorwiseOp<const Derived, Horizontal> ConstRowwiseReturnType;$/;"	t	class:Eigen::DenseBase
ConstSegmentReturnType	include/Eigen/src/plugins/BlockMethods.h	/^typedef const VectorBlock<const Derived> ConstSegmentReturnType;$/;"	t
ConstSelfAdjointViewReturnType	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SelfAdjointView<const Derived, UpLo> Type; };$/;"	s	class:Eigen::MatrixBase
ConstStartMinusOne	include/Eigen/src/Core/MatrixBase.h	/^                  internal::traits<Derived>::ColsAtCompileTime==1 ? 1 : SizeMinusOne> ConstStartMinusOne;$/;"	t	class:Eigen::MatrixBase
ConstTranslationPart	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef const Block<const MatrixType,Dim,1> ConstTranslationPart;$/;"	t	class:Eigen::Transform
ConstTranslationPart	include/Eigen/src/Geometry/Transform.h	/^  typedef const Block<ConstMatrixType,Dim,1,int(Mode)==(AffineCompact)> ConstTranslationPart;$/;"	t	class:Eigen::Transform
ConstTransposeReturnType	include/Eigen/src/Core/DenseBase.h	/^	typedef typename internal::add_const<Transpose<const Derived> >::type ConstTransposeReturnType;$/;"	t	class:Eigen::DenseBase
ConstTransposeReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::ConstTransposeReturnType ConstTransposeReturnType;$/;"	t	class:Eigen::MatrixBase
ConstTriangularViewReturnType	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct ConstTriangularViewReturnType { typedef const TriangularView<const Derived, Mode> Type; };$/;"	s	class:Eigen::MatrixBase
Constant	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Constant(Index nbRows, Index nbCols, const Scalar& value)$/;"	f	class:Eigen::DenseBase
Constant	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Constant(Index size, const Scalar& value)$/;"	f	class:Eigen::DenseBase
Constant	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Constant(const Scalar& value)$/;"	f	class:Eigen::DenseBase
ConstantReturnType	include/Eigen/src/Core/ArrayBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Derived> ConstantReturnType;$/;"	t	class:Eigen::ArrayBase
ConstantReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Derived> ConstantReturnType;$/;"	t	class:Eigen::DenseBase
ConstantReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Derived> ConstantReturnType;$/;"	t	class:Eigen::MatrixBase
ConstantReturnType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Matrix<Scalar,Dynamic,Dynamic> > ConstantReturnType;$/;"	t	class:Eigen::SparseMatrixBase
CornerType	include/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	g	namespace:Eigen
CornerType	include/Eigen/src/Geometry/AlignedBox.h	/^  enum CornerType$/;"	g	class:Eigen::AlignedBox
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = (NumTraits<LhsScalar>::MulCost + NumTraits<RhsScalar>::MulCost), \/\/ rough estimate!$/;"	e	enum:Eigen::internal::functor_traits::__anon82
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = (NumTraits<LhsScalar>::MulCost + NumTraits<RhsScalar>::MulCost)\/2, \/\/ rough estimate!$/;"	e	enum:Eigen::internal::functor_traits::__anon73
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = 5 * NumTraits<Scalar>::MulCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon109
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = 5 * NumTraits<Scalar>::MulCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon110
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = 5 * NumTraits<Scalar>::MulCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon111
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = 5 * NumTraits<Scalar>::MulCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon112
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = 5 * NumTraits<Scalar>::MulCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon113
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = 5 * NumTraits<Scalar>::MulCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon114
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<LhsScalar>::MulCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon75
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon71
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon76
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon77
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon80
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon85
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon86
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::IsComplex ? NumTraits<Scalar>::AddCost : 0,$/;"	e	enum:Eigen::internal::functor_traits::__anon88
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<bool>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon83
Cost	include/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<bool>::AddCost,$/;"	e	enum:Eigen::internal::functor_traits::__anon84
Cost	include/Eigen/src/Core/Functors.h	/^  enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false };$/;"	e	enum:Eigen::internal::functor_traits::__anon79
Cost	include/Eigen/src/Core/Functors.h	/^  enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess=0 };$/;"	e	enum:Eigen::internal::functor_traits::__anon78
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon137
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon138
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon139
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon140
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon90
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon91
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon92
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon93
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1 + functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon135
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1 + functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon136
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon124
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon125
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon126
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon127
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon128
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon129
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon130
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon131
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon132
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::HasSetLinear, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon101
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::Vectorizable, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon99
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasDiv }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon98
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2*NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon118
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon115
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasExp }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon94
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasLog }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon95
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar1>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon97
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = false, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon100
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = packet_traits<Scalar>::HasAdd }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon108
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasAbs2 }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon87
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasDiv }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon116
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon117
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon96
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon121
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon122
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon123
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon119
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon120
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost + functor_traits<T2>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon142
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon141
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon133
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon134
Cost	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon89
Cost	include/Eigen/src/Core/Random.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false, IsRepeatable = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon225
Cost	include/Eigen/src/Core/Redux.h	/^    Cost = (  Derived::SizeAtCompileTime == Dynamic$/;"	e	enum:Eigen::internal::redux_traits::__anon229
Cost	include/Eigen/src/Core/VectorwiseOp.h	/^  template<typename _Scalar, int Size> struct Cost$/;"	s	struct:Eigen::internal::member_redux
Cost	include/Eigen/src/Core/Visitor.h	/^    Cost = NumTraits<Scalar>::AddCost$/;"	e	enum:Eigen::internal::functor_traits::__anon336
Cost	include/Eigen/src/Core/Visitor.h	/^    Cost = NumTraits<Scalar>::AddCost$/;"	e	enum:Eigen::internal::functor_traits::__anon337
CostOpType	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MemberOp::template Cost<InputScalar,TraversalSize> CostOpType;$/;"	t	struct:Eigen::internal::traits
CostOpType	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MemberOp::template Cost<InputScalar,int(TraversalSize)> CostOpType;$/;"	t	struct:Eigen::internal::traits
CrossReturnType	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::PlainObject CrossReturnType;$/;"	t	class:Eigen::VectorwiseOp
Cwise	include/Eigen/src/Eigen2Support/Cwise.h	/^    inline Cwise(const ExpressionType& matrix) : m_matrix(matrix) {}$/;"	f	class:Eigen::Cwise
Cwise	include/Eigen/src/Eigen2Support/Cwise.h	/^template<typename ExpressionType> class Cwise$/;"	c	namespace:Eigen
CwiseBinaryOp	include/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())$/;"	f	class:Eigen::CwiseBinaryOp
CwiseBinaryOp	include/Eigen/src/Core/CwiseBinaryOp.h	/^class CwiseBinaryOp : internal::no_assignment_operator,$/;"	c	namespace:Eigen
CwiseBinaryOpImpl	include/Eigen/src/Core/CwiseBinaryOp.h	/^class CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Dense>$/;"	c	namespace:Eigen
CwiseBinaryOpImpl	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    CwiseBinaryOpImpl()$/;"	f	class:Eigen::CwiseBinaryOpImpl
CwiseBinaryOpImpl	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^class CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Sparse>$/;"	c	namespace:Eigen
CwiseBinaryXpr	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryFunc, Lhs, Rhs> CwiseBinaryXpr;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
CwiseBinaryXpr	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> CwiseBinaryXpr;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
CwiseNullaryOp	include/Eigen/src/Core/CwiseNullaryOp.h	/^    CwiseNullaryOp(Index nbRows, Index nbCols, const NullaryOp& func = NullaryOp())$/;"	f	class:Eigen::CwiseNullaryOp
CwiseNullaryOp	include/Eigen/src/Core/CwiseNullaryOp.h	/^class CwiseNullaryOp : internal::no_assignment_operator,$/;"	c	namespace:Eigen
CwiseUnaryOp	include/Eigen/src/Core/CwiseUnaryOp.h	/^    inline CwiseUnaryOp(const XprType& xpr, const UnaryOp& func = UnaryOp())$/;"	f	class:Eigen::CwiseUnaryOp
CwiseUnaryOp	include/Eigen/src/Core/CwiseUnaryOp.h	/^class CwiseUnaryOp : internal::no_assignment_operator,$/;"	c	namespace:Eigen
CwiseUnaryOpImpl	include/Eigen/src/Core/CwiseUnaryOp.h	/^class CwiseUnaryOpImpl<UnaryOp,XprType,Dense>$/;"	c	namespace:Eigen
CwiseUnaryOpImpl	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^class CwiseUnaryOpImpl<UnaryOp,MatrixType,Sparse>$/;"	c	namespace:Eigen
CwiseUnaryView	include/Eigen/src/Core/CwiseUnaryView.h	/^    inline CwiseUnaryView(const MatrixType& mat, const ViewOp& func = ViewOp())$/;"	f	class:Eigen::CwiseUnaryView
CwiseUnaryView	include/Eigen/src/Core/CwiseUnaryView.h	/^class CwiseUnaryView : public CwiseUnaryViewImpl<ViewOp, MatrixType, typename internal::traits<MatrixType>::StorageKind>$/;"	c	namespace:Eigen
CwiseUnaryViewImpl	include/Eigen/src/Core/CwiseUnaryView.h	/^class CwiseUnaryViewImpl<ViewOp,MatrixType,Dense>$/;"	c	namespace:Eigen
CwiseUnaryViewImpl	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^class CwiseUnaryViewImpl<ViewOp,MatrixType,Sparse>$/;"	c	namespace:Eigen
DEAD	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	116;"	d
DEAD_NON_PRINCIPAL	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	120;"	d
DEAD_PRINCIPAL	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	119;"	d
DECL_GSISX	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	51;"	d
DECL_GSSVX	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	15;"	d
DEGREE_H	centrality/degree.h	2;"	d
DST_CHAN	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	55;"	d
DST_CTRL	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	56;"	d
DataRowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^      DataRowsAtCompileTime = ((Supers!=Dynamic) && (Subs!=Dynamic))$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon45
DataRowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    DataRowsAtCompileTime = ((Supers!=Dynamic) && (Subs!=Dynamic)) ? 1 + Supers + Subs : Dynamic$/;"	e	enum:Eigen::internal::traits::__anon47
DataRowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    DataRowsAtCompileTime = ((Supers!=Dynamic) && (Subs!=Dynamic)) ? 1 + Supers + Subs : Dynamic$/;"	e	enum:Eigen::internal::traits::__anon48
Dec	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  typedef CholmodBase<_MatrixType,_UpLo,Derived> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  typedef CholmodBase<_MatrixType,_UpLo,Derived> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^  typedef DiagonalPreconditioner<_MatrixType> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef BiCGSTAB<_MatrixType, _Preconditioner> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef ConjugateGradient<_MatrixType,_UpLo,_Preconditioner> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^  typedef IncompleteLUT<_MatrixType> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  typedef IterativeSolverBase<Derived> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  typedef PastixBase<_MatrixType> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  typedef PastixBase<_MatrixType> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  typedef PardisoImpl<Derived> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  typedef PardisoImpl<_Derived> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  typedef SPQR<_MatrixType> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SimplicialCholeskyBase<Derived> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SimplicialCholeskyBase<Derived> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/SparseLU/SparseLU.h	/^  typedef SparseLU<_MatrixType,Derived> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/SparseLU/SparseLU.h	/^  typedef SparseLU<_MatrixType,Derived> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef SparseQR<_MatrixType, OrderingType> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef SparseQR<_MatrixType,OrderingType> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  typedef SuperLUBase<_MatrixType,Derived> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  typedef SuperLUBase<_MatrixType,Derived> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
Dec	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^  typedef UmfPackLU<_MatrixType> Dec;$/;"	t	struct:Eigen::internal::solve_retval
Dec	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^  typedef UmfPackLU<_MatrixType> Dec;$/;"	t	struct:Eigen::internal::sparse_solve_retval
DecompositionOptions	include/Eigen/src/Core/util/Constants.h	/^enum DecompositionOptions {$/;"	g	namespace:Eigen
DecompositionType	include/Eigen/src/misc/Image.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:Eigen::internal::image_retval_base
DecompositionType	include/Eigen/src/misc/Kernel.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:Eigen::internal::kernel_retval_base
DecompositionType	include/Eigen/src/misc/Solve.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:Eigen::internal::solve_retval_base
DecompositionType	include/Eigen/src/misc/SparseSolve.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:Eigen::internal::sparse_solve_retval_base
Default	include/Eigen/src/Core/util/Constants.h	/^enum Default_t    { Default };$/;"	e	enum:Eigen::Default_t
DefaultTraversal	include/Eigen/src/Core/util/Constants.h	/^  DefaultTraversal,$/;"	e	enum:Eigen::__anon265
Default_t	include/Eigen/src/Core/util/Constants.h	/^enum Default_t    { Default };$/;"	g	namespace:Eigen
Defined	include/Eigen/src/Core/util/Meta.h	/^    Defined = 1$/;"	e	enum:Eigen::scalar_product_traits::__anon321
Defined	include/Eigen/src/Core/util/Meta.h	/^    Defined = 1$/;"	e	enum:Eigen::scalar_product_traits::__anon322
Defined	include/Eigen/src/Core/util/Meta.h	/^    Defined = 1$/;"	e	enum:Eigen::scalar_product_traits::__anon323
Defined	include/Eigen/src/Core/util/Meta.h	/^  enum { Defined = 0 };$/;"	e	enum:Eigen::scalar_product_traits::__anon320
Dense	include/Eigen/src/Core/util/Constants.h	/^struct Dense {};$/;"	s	namespace:Eigen
DenseBase	include/Eigen/src/Core/DenseBase.h	/^    DenseBase()$/;"	f	class:Eigen::DenseBase
DenseBase	include/Eigen/src/Core/DenseBase.h	/^template<typename Derived> class DenseBase$/;"	c	namespace:Eigen
DenseCoeffsBase	include/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived, DirectAccessors> : public DenseCoeffsBase<Derived, ReadOnlyAccessors>$/;"	c	namespace:Eigen
DenseCoeffsBase	include/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived, DirectWriteAccessors>$/;"	c	namespace:Eigen
DenseCoeffsBase	include/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived, WriteAccessors> : public DenseCoeffsBase<Derived, ReadOnlyAccessors>$/;"	c	namespace:Eigen
DenseCoeffsBase	include/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived,ReadOnlyAccessors> : public EigenBase<Derived>$/;"	c	namespace:Eigen
DenseIndex	include/Eigen/src/Core/util/XprHelper.h	/^typedef EIGEN_DEFAULT_DENSE_INDEX_TYPE DenseIndex;$/;"	t	namespace:Eigen
DenseMatrix	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef Matrix<Scalar,Dynamic,Dynamic> DenseMatrix;$/;"	t	struct:Eigen::SparseQRMatrixQReturnType
DenseMatrixType	include/Eigen/src/Core/BandMatrix.h	/^    typedef Matrix<Scalar,RowsAtCompileTime,ColsAtCompileTime> DenseMatrixType;$/;"	t	class:Eigen::internal::BandMatrixBase
DenseMatrixType	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, ColsAtCompileTime, 0, MaxRowsAtCompileTime, MaxColsAtCompileTime> DenseMatrixType;$/;"	t	class:Eigen::DiagonalBase
DenseMatrixType	include/Eigen/src/Core/PermutationMatrix.h	/^            DenseMatrixType;$/;"	t	class:Eigen::PermutationBase
DenseMatrixType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Derived::DenseMatrixType DenseMatrixType;$/;"	t	class:Eigen::Transpose
DenseMatrixType	include/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename MatrixType::PlainObject DenseMatrixType;$/;"	t	struct:Eigen::internal::traits
DenseMatrixType	include/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename TriangularView<MatrixType,Mode>::DenseMatrixType DenseMatrixType;$/;"	t	struct:Eigen::TriangularView::eigen2_product_return_type
DenseMatrixType	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::DenseMatrixType DenseMatrixType;$/;"	t	class:Eigen::TriangularBase
DenseMatrixType	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::DenseMatrixType DenseMatrixType;$/;"	t	class:Eigen::TriangularView
DenseMatrixType	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename MatrixType::PlainObject DenseMatrixType;$/;"	t	struct:Eigen::internal::traits
DenseSparseProductReturnType	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs, int InnerSize> struct DenseSparseProductReturnType$/;"	s	namespace:Eigen
DenseSparseProductReturnType	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs> struct DenseSparseProductReturnType<Lhs,Rhs,1>$/;"	s	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage() : m_cols(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage() : m_data(0), m_cols(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage() : m_data(0), m_rows(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage() : m_data(0), m_rows(0), m_cols(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage() : m_rows(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage() : m_rows(0), m_cols(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage() {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex size, DenseIndex nbRows, DenseIndex nbCols)$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex size, DenseIndex nbRows, DenseIndex) : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_rows(nbRows)$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex size, DenseIndex, DenseIndex nbCols) : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_cols(nbCols)$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex, DenseIndex nbRows, DenseIndex nbCols) : m_rows(nbRows), m_cols(nbCols) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex, DenseIndex nbRows, DenseIndex) : m_rows(nbRows) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex, DenseIndex, DenseIndex nbCols) : m_cols(nbCols) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex,DenseIndex,DenseIndex) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_cols(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_rows(0) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert) {}$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert)$/;"	f	class:Eigen::DenseStorage
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Cols, int _Options> class DenseStorage<T, Size, Dynamic, _Cols, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Options> class DenseStorage<T, Size, Dynamic, Dynamic, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Rows, int _Options> class DenseStorage<T, Size, _Rows, Dynamic, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Cols, int _Options> class DenseStorage<T, 0, Dynamic, _Cols, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Cols, int _Options> class DenseStorage<T, Dynamic, Dynamic, _Cols, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Options> class DenseStorage<T, 0, Dynamic, Dynamic, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Options> class DenseStorage<T, Dynamic, Dynamic, Dynamic, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Rows, int _Cols, int _Options> class DenseStorage<T, 0, _Rows, _Cols, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Rows, int _Options> class DenseStorage<T, 0, _Rows, Dynamic, _Options>$/;"	c	namespace:Eigen
DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Rows, int _Options> class DenseStorage<T, Dynamic, _Rows, Dynamic, _Options>$/;"	c	namespace:Eigen
DenseTimeSparseProduct	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    DenseTimeSparseProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:Eigen::DenseTimeSparseProduct
DenseTimeSparseProduct	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^class DenseTimeSparseProduct$/;"	c	namespace:Eigen
DenseTimeSparseSelfAdjointProduct	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    DenseTimeSparseSelfAdjointProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:Eigen::DenseTimeSparseSelfAdjointProduct
DenseTimeSparseSelfAdjointProduct	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^class DenseTimeSparseSelfAdjointProduct$/;"	c	namespace:Eigen
DenseType	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef DenseMatrixType DenseType;$/;"	t	class:Eigen::DiagonalBase
DenseType	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef Derived DenseType;$/;"	t	class:Eigen::PlainObjectBase
DenseType	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef DenseMatrixType DenseType;$/;"	t	class:Eigen::TriangularBase
Depth	include/Eigen/src/Core/GeneralProduct.h	/^    Depth = EIGEN_SIZE_MIN_PREFER_FIXED(_Lhs::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::product_type::__anon145
Derived	include/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> Derived;$/;"	t	class:Eigen::CwiseBinaryOpImpl
Derived	include/Eigen/src/Core/CwiseUnaryOp.h	/^    typedef CwiseUnaryOp<UnaryOp, XprType> Derived;$/;"	t	class:Eigen::CwiseUnaryOpImpl
Derived	include/Eigen/src/Core/CwiseUnaryView.h	/^    typedef CwiseUnaryView<ViewOp, MatrixType> Derived;$/;"	t	class:Eigen::CwiseUnaryViewImpl
Derived	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> Derived;$/;"	t	class:Eigen::CwiseBinaryOpImpl
Derived	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef CwiseUnaryOp<UnaryOp, MatrixType> Derived;$/;"	t	class:Eigen::CwiseUnaryOpImpl
Derived	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef CwiseUnaryView<ViewOp, MatrixType> Derived;$/;"	t	class:Eigen::CwiseUnaryViewImpl
DiagIndex	include/Eigen/src/Core/Diagonal.h	/^    enum { DiagIndex = _DiagIndex };$/;"	e	enum:Eigen::Diagonal::__anon65
DiagSizeAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^      DiagSizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime,ColsAtCompileTime),$/;"	e	enum:Eigen::JacobiSVD::__anon465
DiagVectorType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1> DiagVectorType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
Diagonal	include/Eigen/src/Core/Diagonal.h	/^    inline Diagonal(MatrixType& matrix, Index a_index = DiagIndex) : m_matrix(matrix), m_index(a_index) {}$/;"	f	class:Eigen::Diagonal
Diagonal	include/Eigen/src/Core/Diagonal.h	/^template<typename MatrixType, int _DiagIndex> class Diagonal$/;"	c	namespace:Eigen
DiagonalBase	include/Eigen/src/Core/DiagonalMatrix.h	/^class DiagonalBase : public EigenBase<Derived>$/;"	c	namespace:Eigen
DiagonalDynamicIndexReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef Diagonal<Derived,DynamicIndex> DiagonalDynamicIndexReturnType;$/;"	t	class:Eigen::MatrixBase
DiagonalIndexReturnType	include/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct DiagonalIndexReturnType { typedef Diagonal<Derived,Index> Type; };$/;"	s	class:Eigen::MatrixBase
DiagonalIntReturnType	include/Eigen/src/Core/BandMatrix.h	/^    template<int Index> struct DiagonalIntReturnType {$/;"	s	class:Eigen::internal::BandMatrixBase
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    explicit inline DiagonalMatrix(const MatrixBase<OtherDerived>& other) : m_diagonal(other)$/;"	f	class:Eigen::DiagonalMatrix
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix() {}$/;"	f	class:Eigen::DiagonalMatrix
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(Index dim) : m_diagonal(dim) {}$/;"	f	class:Eigen::DiagonalMatrix
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const DiagonalBase<OtherDerived>& other) : m_diagonal(other.diagonal()) {}$/;"	f	class:Eigen::DiagonalMatrix
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const DiagonalMatrix& other) : m_diagonal(other.diagonal()) {}$/;"	f	class:Eigen::DiagonalMatrix
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const Scalar& x, const Scalar& y) : m_diagonal(x,y) {}$/;"	f	class:Eigen::DiagonalMatrix
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const Scalar& x, const Scalar& y, const Scalar& z) : m_diagonal(x,y,z) {}$/;"	f	class:Eigen::DiagonalMatrix
DiagonalMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^class DiagonalMatrix$/;"	c	namespace:Eigen
DiagonalPreconditioner	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    DiagonalPreconditioner() : m_isInitialized(false) {}$/;"	f	class:Eigen::DiagonalPreconditioner
DiagonalPreconditioner	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    DiagonalPreconditioner(const MatType& mat) : m_invdiag(mat.cols())$/;"	f	class:Eigen::DiagonalPreconditioner
DiagonalPreconditioner	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^class DiagonalPreconditioner$/;"	c	namespace:Eigen
DiagonalProduct	include/Eigen/src/Core/DiagonalProduct.h	/^    inline DiagonalProduct(const MatrixType& matrix, const DiagonalType& diagonal)$/;"	f	class:Eigen::DiagonalProduct
DiagonalProduct	include/Eigen/src/Core/DiagonalProduct.h	/^class DiagonalProduct : internal::no_assignment_operator,$/;"	c	namespace:Eigen
DiagonalReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef Diagonal<Derived> DiagonalReturnType;$/;"	t	class:Eigen::MatrixBase
DiagonalReturnType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^            >::type DiagonalReturnType;$/;"	t	class:Eigen::Tridiagonalization
DiagonalSize	include/Eigen/src/Core/BandMatrix.h	/^        DiagonalSize = (RowsAtCompileTime==Dynamic || ColsAtCompileTime==Dynamic)$/;"	e	enum:Eigen::internal::BandMatrixBase::DiagonalIntReturnType::__anon46
DiagonalType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename internal::plain_col_type<MatrixType, RealScalar>::type DiagonalType;$/;"	t	class:Eigen::Tridiagonalization
DiagonalVectorType	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef _DiagonalVectorType DiagonalVectorType;$/;"	t	class:Eigen::DiagonalWrapper
DiagonalVectorType	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<Derived>::DiagonalVectorType DiagonalVectorType;$/;"	t	class:Eigen::DiagonalBase
DiagonalVectorType	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<DiagonalMatrix>::DiagonalVectorType DiagonalVectorType;$/;"	t	class:Eigen::DiagonalMatrix
DiagonalVectorType	include/Eigen/src/Core/DiagonalMatrix.h	/^  typedef Matrix<_Scalar,SizeAtCompileTime,1,0,MaxSizeAtCompileTime,1> DiagonalVectorType;$/;"	t	struct:Eigen::internal::traits
DiagonalVectorType	include/Eigen/src/Core/DiagonalMatrix.h	/^  typedef _DiagonalVectorType DiagonalVectorType;$/;"	t	struct:Eigen::internal::traits
DiagonalWrapper	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalWrapper(DiagonalVectorType& a_diagonal) : m_diagonal(a_diagonal) {}$/;"	f	class:Eigen::DiagonalWrapper
DiagonalWrapper	include/Eigen/src/Core/DiagonalMatrix.h	/^class DiagonalWrapper$/;"	c	namespace:Eigen
Dim	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  enum { Dim = 3 };$/;"	e	enum:Eigen::AngleAxis::__anon339
Dim	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  enum { Dim = 2 };$/;"	e	enum:Eigen::Rotation2D::__anon342
Dim	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    enum { Dim = _Dim };$/;"	e	enum:Eigen::RotationBase::__anon343
Dim	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  enum { Dim = _Dim };$/;"	e	enum:Eigen::Scaling::__anon344
Dim	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^    Dim = _Dim,     \/\/\/< space dimension in which the transformation holds$/;"	e	enum:Eigen::Transform::__anon345
Dim	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  enum { Dim = _Dim };$/;"	e	enum:Eigen::Translation::__anon346
Dim	include/Eigen/src/Geometry/AngleAxis.h	/^  enum { Dim = 3 };$/;"	e	enum:Eigen::AngleAxis::__anon369
Dim	include/Eigen/src/Geometry/Rotation2D.h	/^  enum { Dim = 2 };$/;"	e	enum:Eigen::Rotation2D::__anon378
Dim	include/Eigen/src/Geometry/RotationBase.h	/^    enum { Dim = _Dim };$/;"	e	enum:Eigen::RotationBase::__anon379
Dim	include/Eigen/src/Geometry/RotationBase.h	/^  enum { Dim = RotationDerived::Dim };$/;"	e	enum:Eigen::internal::rotation_base_generic_product_selector::__anon380
Dim	include/Eigen/src/Geometry/RotationBase.h	/^  enum { Dim = RotationDerived::Dim };$/;"	e	enum:Eigen::internal::rotation_base_generic_product_selector::__anon381
Dim	include/Eigen/src/Geometry/Transform.h	/^    Dim = Transform::Dim,$/;"	e	enum:Eigen::internal::transform_traits::__anon382
Dim	include/Eigen/src/Geometry/Transform.h	/^    Dim = TransformType::Dim, $/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon386
Dim	include/Eigen/src/Geometry/Transform.h	/^    Dim = TransformType::Dim, $/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon387
Dim	include/Eigen/src/Geometry/Transform.h	/^    Dim = _Dim,     \/\/\/< space dimension in which the transformation holds$/;"	e	enum:Eigen::Transform::__anon383
Dim	include/Eigen/src/Geometry/Translation.h	/^  enum { Dim = _Dim };$/;"	e	enum:Eigen::Translation::__anon389
DirectAccessBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int DirectAccessBit = 0x40;$/;"	m	namespace:Eigen
DirectAccessors	include/Eigen/src/Core/util/Constants.h	/^  DirectAccessors, $/;"	e	enum:Eigen::AccessorLevels
DirectLinearAccessType	include/Eigen/src/Core/util/BlasUtil.h	/^    >::type DirectLinearAccessType;$/;"	t	struct:Eigen::internal::blas_traits
DirectWriteAccessors	include/Eigen/src/Core/util/Constants.h	/^  DirectWriteAccessors$/;"	e	enum:Eigen::AccessorLevels
Direction	include/Eigen/src/Geometry/Homogeneous.h	/^    enum { Direction = _Direction };$/;"	e	enum:Eigen::Homogeneous::__anon371
DirectionType	include/Eigen/src/Core/util/Constants.h	/^enum DirectionType { $/;"	g	namespace:Eigen
DontAlign	include/Eigen/src/Core/util/Constants.h	/^  DontAlign = 0x2$/;"	e	enum:Eigen::__anon268
DontAlignCols	include/Eigen/src/Core/IO.h	/^enum { DontAlignCols = 1 };$/;"	e	enum:Eigen::__anon174
DoublePacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  struct DoublePacket$/;"	s	class:Eigen::internal::gebp_traits
DstHasDirectAccess	include/Eigen/src/Core/Assign.h	/^    DstHasDirectAccess = Derived::Flags & DirectAccessBit,$/;"	e	enum:Eigen::internal::assign_traits::__anon33
DstHasDirectAccess	include/Eigen/src/Core/Assign_MKL.h	/^      DstHasDirectAccess = Dst::Flags & DirectAccessBit,$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
DstIsAligned	include/Eigen/src/Core/Assign.h	/^    DstIsAligned = Derived::Flags & AlignedBit,$/;"	e	enum:Eigen::internal::assign_traits::__anon33
DynPlainObject	include/Eigen/src/Core/ProductBase.h	/^    typedef Matrix<Scalar,RowsAtCompileTime==1?1:Dynamic,ColsAtCompileTime==1?1:Dynamic,BasePlainObject::Options> DynPlainObject;$/;"	t	class:Eigen::ProductBase
Dynamic	include/Eigen/src/Core/util/Constants.h	/^const int Dynamic = -1;$/;"	m	namespace:Eigen
DynamicIndex	include/Eigen/src/Core/util/Constants.h	/^const int DynamicIndex = 0xffffff;$/;"	m	namespace:Eigen
EIGEN2_GEOMETRY_MODULE_H	include/Eigen/src/Eigen2Support/Geometry/All.h	2;"	d
EIGEN2_LEASTSQUARES_H	include/Eigen/src/Eigen2Support/LeastSquares.h	11;"	d
EIGEN2_LU_H	include/Eigen/src/Eigen2Support/LU.h	11;"	d
EIGEN2_MACROS_H	include/Eigen/src/Eigen2Support/Macros.h	11;"	d
EIGEN2_MATH_FUNCTIONS_H	include/Eigen/src/Eigen2Support/MathFunctions.h	11;"	d
EIGEN2_MEMORY_H	include/Eigen/src/Eigen2Support/Memory.h	11;"	d
EIGEN2_META_H	include/Eigen/src/Eigen2Support/Meta.h	11;"	d
EIGEN2_QR_H	include/Eigen/src/Eigen2Support/QR.h	12;"	d
EIGEN2_SVD_H	include/Eigen/src/Eigen2Support/SVD.h	11;"	d
EIGEN2_VECTORBLOCK_H	include/Eigen/src/Eigen2Support/VectorBlock.h	12;"	d
EIGEN_ALIGN	include/Eigen/src/Core/util/Macros.h	73;"	d
EIGEN_ALIGN	include/Eigen/src/Core/util/Macros.h	75;"	d
EIGEN_ALIGN16	include/Eigen/src/Core/util/Macros.h	281;"	d
EIGEN_ALIGNEDBOX_H	include/Eigen/src/Geometry/AlignedBox.h	11;"	d
EIGEN_ALIGNED_ALLOCA	include/Eigen/src/Core/util/Memory.h	583;"	d
EIGEN_ALIGNED_ALLOCATOR	include/Eigen/src/StlSupport/details.h	15;"	d
EIGEN_ALIGN_128	include/Eigen/src/Eigen2Support/Macros.h	16;"	d
EIGEN_ALIGN_STATICALLY	include/Eigen/src/Core/util/Macros.h	81;"	d
EIGEN_ALIGN_STATICALLY	include/Eigen/src/Core/util/Macros.h	83;"	d
EIGEN_ALIGN_TO_BOUNDARY	include/Eigen/src/Core/util/Macros.h	271;"	d
EIGEN_ALLANDANY_H	include/Eigen/src/Core/BooleanRedux.h	11;"	d
EIGEN_ALLOCA	include/Eigen/src/Core/util/Memory.h	527;"	d
EIGEN_ALLOCA	include/Eigen/src/Core/util/Memory.h	529;"	d
EIGEN_ALWAYS_INLINE	include/Eigen/src/Core/util/Macros.h	142;"	d
EIGEN_ALWAYS_INLINE	include/Eigen/src/Core/util/Macros.h	144;"	d
EIGEN_AMBIVECTOR_H	include/Eigen/src/SparseCore/AmbiVector.h	11;"	d
EIGEN_ANGLEAXIS_H	include/Eigen/src/Geometry/AngleAxis.h	11;"	d
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	27;"	d
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	include/Eigen/src/Core/arch/Default/Settings.h	46;"	d
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	include/Eigen/src/Core/arch/NEON/PacketMath.h	26;"	d
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	include/Eigen/src/Core/arch/SSE/PacketMath.h	22;"	d
EIGEN_ARCH_WANTS_ALIGNMENT	include/Eigen/src/Eigen2Support/Macros.h	18;"	d
EIGEN_ARCH_WANTS_STACK_ALIGNMENT	include/Eigen/src/Core/util/Macros.h	64;"	d
EIGEN_ARCH_WANTS_STACK_ALIGNMENT	include/Eigen/src/Core/util/Macros.h	66;"	d
EIGEN_ARM_PREFETCH	include/Eigen/src/Core/arch/NEON/PacketMath.h	55;"	d
EIGEN_ARM_PREFETCH	include/Eigen/src/Core/arch/NEON/PacketMath.h	57;"	d
EIGEN_ARM_PREFETCH	include/Eigen/src/Core/arch/NEON/PacketMath.h	59;"	d
EIGEN_ARM_PREFETCH	include/Eigen/src/Core/arch/NEON/PacketMath.h	62;"	d
EIGEN_ARRAYBASE_H	include/Eigen/src/Core/ArrayBase.h	11;"	d
EIGEN_ARRAYWRAPPER_H	include/Eigen/src/Core/ArrayWrapper.h	11;"	d
EIGEN_ARRAY_CWISE_OPERATORS_H	include/Eigen/src/Eigen2Support/CwiseOperators.h	11;"	d
EIGEN_ARRAY_DECLARE_GLOBAL_EIGEN_UNARY	include/Eigen/src/Core/GlobalFunctions.h	21;"	d
EIGEN_ARRAY_DECLARE_GLOBAL_UNARY	include/Eigen/src/Core/GlobalFunctions.h	14;"	d
EIGEN_ARRAY_H	include/Eigen/src/Core/Array.h	11;"	d
EIGEN_ASM_COMMENT	include/Eigen/src/Core/util/Macros.h	257;"	d
EIGEN_ASSIGN_H	include/Eigen/src/Core/Assign.h	13;"	d
EIGEN_ASSIGN_VML_H	include/Eigen/src/Core/Assign_MKL.h	34;"	d
EIGEN_AVOID_CUSTOM_UNALIGNED_LOADS	include/Eigen/src/Core/arch/SSE/PacketMath.h	250;"	d
EIGEN_AVOID_CUSTOM_UNALIGNED_LOADS	include/Eigen/src/Core/arch/SSE/PacketMath.h	253;"	d
EIGEN_AVOID_CUSTOM_UNALIGNED_LOADS	include/Eigen/src/Core/arch/SSE/PacketMath.h	255;"	d
EIGEN_BANDMATRIX_H	include/Eigen/src/Core/BandMatrix.h	11;"	d
EIGEN_BASIC_PRECONDITIONERS_H	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	11;"	d
EIGEN_BICGSTAB_H	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	12;"	d
EIGEN_BIDIAGONALIZATION_H	include/Eigen/src/SVD/UpperBidiagonalization.h	11;"	d
EIGEN_BLASUTIL_H	include/Eigen/src/Core/util/BlasUtil.h	11;"	d
EIGEN_BLOCK2_H	include/Eigen/src/Eigen2Support/Block.h	12;"	d
EIGEN_BLOCK_H	include/Eigen/src/Core/Block.h	12;"	d
EIGEN_BLOCK_HOUSEHOLDER_H	include/Eigen/src/Householder/BlockHouseholder.h	12;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	18;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	include/Eigen/src/Core/arch/Default/Settings.h	31;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	include/Eigen/src/Core/arch/NEON/PacketMath.h	20;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	include/Eigen/src/Core/arch/SSE/PacketMath.h	18;"	d
EIGEN_CAT	include/Eigen/src/Core/util/Macros.h	119;"	d
EIGEN_CAT2	include/Eigen/src/Core/util/Macros.h	118;"	d
EIGEN_CENTRAL_H	centrality/eigen.h	2;"	d
EIGEN_CHECK_BINARY_COMPATIBILIY	include/Eigen/src/Core/CwiseBinaryOp.h	96;"	d
EIGEN_CHOLMODSUPPORT_H	include/Eigen/src/CholmodSupport/CholmodSupport.h	11;"	d
EIGEN_COEFFBASED_PRODUCT_H	include/Eigen/src/Core/products/CoeffBasedProduct.h	12;"	d
EIGEN_COLAMD_H	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	52;"	d
EIGEN_COLPIVOTINGHOUSEHOLDERQR_H	include/Eigen/src/QR/ColPivHouseholderQR.h	12;"	d
EIGEN_COLPIVOTINGHOUSEHOLDERQR_MKL_H	include/Eigen/src/QR/ColPivHouseholderQR_MKL.h	35;"	d
EIGEN_COMMAINITIALIZER_H	include/Eigen/src/Core/CommaInitializer.h	12;"	d
EIGEN_COMPLEX_ALTIVEC_H	include/Eigen/src/Core/arch/AltiVec/Complex.h	11;"	d
EIGEN_COMPLEX_EIGEN_SOLVER_H	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	13;"	d
EIGEN_COMPLEX_NEON_H	include/Eigen/src/Core/arch/NEON/Complex.h	11;"	d
EIGEN_COMPLEX_SCHUR_H	include/Eigen/src/Eigenvalues/ComplexSchur.h	13;"	d
EIGEN_COMPLEX_SCHUR_MKL_H	include/Eigen/src/Eigenvalues/ComplexSchur_MKL.h	34;"	d
EIGEN_COMPLEX_SSE_H	include/Eigen/src/Core/arch/SSE/Complex.h	11;"	d
EIGEN_COMPRESSED_STORAGE_H	include/Eigen/src/SparseCore/CompressedStorage.h	11;"	d
EIGEN_CONJUGATE_GRADIENT_H	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	11;"	d
EIGEN_CONSERVATIVESPARSESPARSEPRODUCT_H	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	11;"	d
EIGEN_CONSTANTS_H	include/Eigen/src/Core/util/Constants.h	12;"	d
EIGEN_COREITERATORS_H	include/Eigen/src/Core/CoreIterators.h	11;"	d
EIGEN_CPUID	include/Eigen/src/Core/util/Memory.h	757;"	d
EIGEN_CPUID	include/Eigen/src/Core/util/Memory.h	762;"	d
EIGEN_CPUID	include/Eigen/src/Core/util/Memory.h	766;"	d
EIGEN_CPUID	include/Eigen/src/Core/util/Memory.h	771;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/Core/ArrayBase.h	106;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/Core/ArrayBase.h	116;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/Core/DenseBase.h	476;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/Core/DenseBase.h	481;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/Core/MatrixBase.h	135;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/Core/MatrixBase.h	143;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/SparseCore/SparseMatrixBase.h	137;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/SparseCore/SparseMatrixBase.h	146;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	include/Eigen/src/SparseCore/SparseMatrixBase.h	147;"	d
EIGEN_CWISE_BINARY_OP_H	include/Eigen/src/Core/CwiseBinaryOp.h	12;"	d
EIGEN_CWISE_BINOP_RETURN_TYPE	include/Eigen/src/Eigen2Support/Cwise.h	18;"	d
EIGEN_CWISE_COMP_TO_SCALAR_RETURN_TYPE	include/Eigen/src/Eigen2Support/Cwise.h	28;"	d
EIGEN_CWISE_H	include/Eigen/src/Eigen2Support/Cwise.h	12;"	d
EIGEN_CWISE_NULLARY_OP_H	include/Eigen/src/Core/CwiseNullaryOp.h	11;"	d
EIGEN_CWISE_PRODUCT_RETURN_TYPE	include/Eigen/src/Core/util/Macros.h	421;"	d
EIGEN_CWISE_UNARY_OP_H	include/Eigen/src/Core/CwiseUnaryOp.h	12;"	d
EIGEN_CWISE_UNARY_VIEW_H	include/Eigen/src/Core/CwiseUnaryView.h	11;"	d
EIGEN_CWISE_UNOP_RETURN_TYPE	include/Eigen/src/Eigen2Support/Cwise.h	23;"	d
EIGEN_DBG_SPARSE	include/Eigen/src/SparseCore/SparseUtil.h	16;"	d
EIGEN_DEBUG_ALIGNED_LOAD	include/Eigen/src/Core/GenericPacketMath.h	27;"	d
EIGEN_DEBUG_ALIGNED_STORE	include/Eigen/src/Core/GenericPacketMath.h	35;"	d
EIGEN_DEBUG_UNALIGNED_LOAD	include/Eigen/src/Core/GenericPacketMath.h	31;"	d
EIGEN_DEBUG_UNALIGNED_STORE	include/Eigen/src/Core/GenericPacketMath.h	39;"	d
EIGEN_DEBUG_VAR	include/Eigen/src/Core/util/Macros.h	115;"	d
EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS	include/Eigen/src/Core/util/Macros.h	165;"	d
EIGEN_DEFAULT_DENSE_INDEX_TYPE	include/Eigen/src/Core/util/Macros.h	96;"	d
EIGEN_DEFAULT_IO_FORMAT	include/Eigen/src/Core/util/Macros.h	307;"	d
EIGEN_DEFAULT_MATRIX_STORAGE_ORDER_OPTION	include/Eigen/src/Core/util/Macros.h	90;"	d
EIGEN_DEFAULT_MATRIX_STORAGE_ORDER_OPTION	include/Eigen/src/Core/util/Macros.h	92;"	d
EIGEN_DEFAULT_SETTINGS_H	include/Eigen/src/Core/arch/Default/Settings.h	17;"	d
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS	include/Eigen/src/Core/util/Macros.h	166;"	d
EIGEN_DEFINE_STL_DEQUE_SPECIALIZATION	include/Eigen/src/StlSupport/StdDeque.h	28;"	d
EIGEN_DEFINE_STL_LIST_SPECIALIZATION	include/Eigen/src/StlSupport/StdList.h	27;"	d
EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION	include/Eigen/src/StlSupport/StdVector.h	21;"	d
EIGEN_DENSEBASE_H	include/Eigen/src/Core/DenseBase.h	12;"	d
EIGEN_DENSECOEFFSBASE_H	include/Eigen/src/Core/DenseCoeffsBase.h	11;"	d
EIGEN_DENSESTORAGEBASE_H	include/Eigen/src/Core/PlainObjectBase.h	12;"	d
EIGEN_DENSE_PUBLIC_INTERFACE	include/Eigen/src/Core/util/Macros.h	362;"	d
EIGEN_DEPRECATED	include/Eigen/src/Core/util/Macros.h	231;"	d
EIGEN_DETERMINANT_H	include/Eigen/src/LU/Determinant.h	11;"	d
EIGEN_DIAGONALMATRIX_H	include/Eigen/src/Core/DiagonalMatrix.h	12;"	d
EIGEN_DIAGONALPRODUCT_H	include/Eigen/src/Core/DiagonalProduct.h	12;"	d
EIGEN_DIAGONAL_H	include/Eigen/src/Core/Diagonal.h	12;"	d
EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT	include/Eigen/src/Core/util/Macros.h	85;"	d
EIGEN_DONT_ALIGN_STATICALLY	include/Eigen/src/Core/util/Macros.h	71;"	d
EIGEN_DONT_INLINE	include/Eigen/src/Core/util/Macros.h	148;"	d
EIGEN_DONT_INLINE	include/Eigen/src/Core/util/Macros.h	150;"	d
EIGEN_DONT_INLINE	include/Eigen/src/Core/util/Macros.h	152;"	d
EIGEN_DOT_H	include/Eigen/src/Core/Dot.h	11;"	d
EIGEN_EIGENBASE_H	include/Eigen/src/Core/EigenBase.h	12;"	d
EIGEN_EIGENSOLVER_H	include/Eigen/src/Eigenvalues/EigenSolver.h	12;"	d
EIGEN_EMPTY	include/Eigen/src/Core/util/Macros.h	314;"	d
EIGEN_EMPTY_STRUCT_CTOR	include/Eigen/src/Core/util/XprHelper.h	18;"	d
EIGEN_EMPTY_STRUCT_CTOR	include/Eigen/src/Core/util/XprHelper.h	22;"	d
EIGEN_EULERANGLES_H	include/Eigen/src/Geometry/EulerAngles.h	11;"	d
EIGEN_EXPLICIT_STL_DEQUE_INSTANTIATION	include/Eigen/src/StlSupport/StdDeque.h	18;"	d
EIGEN_EXPLICIT_STL_DEQUE_INSTANTIATION	include/Eigen/src/StlSupport/StdDeque.h	20;"	d
EIGEN_EXPLICIT_STL_LIST_INSTANTIATION	include/Eigen/src/StlSupport/StdList.h	17;"	d
EIGEN_EXPLICIT_STL_LIST_INSTANTIATION	include/Eigen/src/StlSupport/StdList.h	19;"	d
EIGEN_FAST_MATH	include/Eigen/src/Core/util/Macros.h	112;"	d
EIGEN_FLAGGED_H	include/Eigen/src/Core/Flagged.h	11;"	d
EIGEN_FORCEALIGNEDACCESS_H	include/Eigen/src/Core/ForceAlignedAccess.h	11;"	d
EIGEN_FORWARDDECLARATIONS_H	include/Eigen/src/Core/util/ForwardDeclarations.h	12;"	d
EIGEN_FREEBSD_MALLOC_ALREADY_ALIGNED	include/Eigen/src/Core/util/Memory.h	45;"	d
EIGEN_FREEBSD_MALLOC_ALREADY_ALIGNED	include/Eigen/src/Core/util/Memory.h	47;"	d
EIGEN_FULLPIVOTINGHOUSEHOLDERQR_H	include/Eigen/src/QR/FullPivHouseholderQR.h	12;"	d
EIGEN_FUNCTORS_H	include/Eigen/src/Core/Functors.h	11;"	d
EIGEN_FUZZY_H	include/Eigen/src/Core/Fuzzy.h	12;"	d
EIGEN_GCC3_OR_OLDER	include/Eigen/src/Core/util/Macros.h	41;"	d
EIGEN_GCC3_OR_OLDER	include/Eigen/src/Core/util/Macros.h	43;"	d
EIGEN_GCC_AND_ARCH_DOESNT_WANT_STACK_ALIGNMENT	include/Eigen/src/Core/util/Macros.h	54;"	d
EIGEN_GCC_AND_ARCH_DOESNT_WANT_STACK_ALIGNMENT	include/Eigen/src/Core/util/Macros.h	56;"	d
EIGEN_GENERALIZEDEIGENSOLVER_H	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	12;"	d
EIGEN_GENERALIZEDSELFADJOINTEIGENSOLVER_H	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	12;"	d
EIGEN_GENERAL_BLOCK_PANEL_H	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	11;"	d
EIGEN_GENERAL_MATRIX_MATRIX_H	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	11;"	d
EIGEN_GENERAL_MATRIX_MATRIX_MKL_H	include/Eigen/src/Core/products/GeneralMatrixMatrix_MKL.h	34;"	d
EIGEN_GENERAL_MATRIX_MATRIX_TRIANGULAR_H	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	11;"	d
EIGEN_GENERAL_MATRIX_MATRIX_TRIANGULAR_MKL_H	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular_MKL.h	34;"	d
EIGEN_GENERAL_MATRIX_VECTOR_H	include/Eigen/src/Core/products/GeneralMatrixVector.h	11;"	d
EIGEN_GENERAL_MATRIX_VECTOR_MKL_H	include/Eigen/src/Core/products/GeneralMatrixVector_MKL.h	34;"	d
EIGEN_GENERAL_PRODUCT_H	include/Eigen/src/Core/GeneralProduct.h	12;"	d
EIGEN_GENERIC_PACKET_MATH_H	include/Eigen/src/Core/GenericPacketMath.h	12;"	d
EIGEN_GENERIC_PUBLIC_INTERFACE	include/Eigen/src/Core/util/Macros.h	346;"	d
EIGEN_GEOMETRY_SSE_H	include/Eigen/src/Geometry/arch/Geometry_SSE.h	12;"	d
EIGEN_GLIBC_MALLOC_ALREADY_ALIGNED	include/Eigen/src/Core/util/Memory.h	35;"	d
EIGEN_GLIBC_MALLOC_ALREADY_ALIGNED	include/Eigen/src/Core/util/Memory.h	37;"	d
EIGEN_GLOBAL_FUNCTIONS_H	include/Eigen/src/Core/GlobalFunctions.h	12;"	d
EIGEN_GNUC_AT_LEAST	include/Eigen/src/Core/util/Macros.h	22;"	d
EIGEN_GNUC_AT_LEAST	include/Eigen/src/Core/util/Macros.h	24;"	d
EIGEN_GNUC_AT_MOST	include/Eigen/src/Core/util/Macros.h	28;"	d
EIGEN_GNUC_AT_MOST	include/Eigen/src/Core/util/Macros.h	30;"	d
EIGEN_HAS_BUILTIN	include/Eigen/src/Core/util/Macros.h	101;"	d
EIGEN_HAS_BUILTIN	include/Eigen/src/Core/util/Macros.h	103;"	d
EIGEN_HAS_FUSE_CJMADD	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	22;"	d
EIGEN_HAS_MM_MALLOC	include/Eigen/src/Core/util/Memory.h	76;"	d
EIGEN_HAS_MM_MALLOC	include/Eigen/src/Core/util/Memory.h	78;"	d
EIGEN_HAS_POSIX_MEMALIGN	include/Eigen/src/Core/util/Memory.h	67;"	d
EIGEN_HAS_POSIX_MEMALIGN	include/Eigen/src/Core/util/Memory.h	72;"	d
EIGEN_HESSENBERGDECOMPOSITION_H	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	12;"	d
EIGEN_HOMOGENEOUS_H	include/Eigen/src/Geometry/Homogeneous.h	11;"	d
EIGEN_HOUSEHOLDER_H	include/Eigen/src/Householder/Householder.h	12;"	d
EIGEN_HOUSEHOLDER_SEQUENCE_H	include/Eigen/src/Householder/HouseholderSequence.h	12;"	d
EIGEN_HYPERPLANE_H	include/Eigen/src/Geometry/Hyperplane.h	12;"	d
EIGEN_IMPLIES	include/Eigen/src/Core/util/Macros.h	410;"	d
EIGEN_INCOMPLETE_LUT_H	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	11;"	d
EIGEN_INHERIT_ASSIGNMENT_EQUAL_OPERATOR	include/Eigen/src/Core/util/Macros.h	317;"	d
EIGEN_INHERIT_ASSIGNMENT_OPERATORS	include/Eigen/src/Core/util/Macros.h	335;"	d
EIGEN_INITIALIZE_COEFFS	include/Eigen/src/Core/PlainObjectBase.h	15;"	d
EIGEN_INITIALIZE_COEFFS	include/Eigen/src/Core/PlainObjectBase.h	18;"	d
EIGEN_INITIALIZE_COEFFS	include/Eigen/src/Core/PlainObjectBase.h	21;"	d
EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED	include/Eigen/src/Core/PlainObjectBase.h	16;"	d
EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED	include/Eigen/src/Core/PlainObjectBase.h	19;"	d
EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED	include/Eigen/src/Core/PlainObjectBase.h	22;"	d
EIGEN_INIT_NEON_PACKET2	include/Eigen/src/Core/arch/NEON/PacketMath.h	44;"	d
EIGEN_INIT_NEON_PACKET2	include/Eigen/src/Core/arch/NEON/PacketMath.h	48;"	d
EIGEN_INIT_NEON_PACKET4	include/Eigen/src/Core/arch/NEON/PacketMath.h	45;"	d
EIGEN_INIT_NEON_PACKET4	include/Eigen/src/Core/arch/NEON/PacketMath.h	49;"	d
EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MADE_A_PROGRAMMING_MISTAKE	include/Eigen/src/Core/util/StaticAssert.h	/^        EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MADE_A_PROGRAMMING_MISTAKE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN	include/Eigen/src/Core/DenseStorage.h	16;"	d
EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN	include/Eigen/src/Core/DenseStorage.h	18;"	d
EIGEN_INTERNAL_ERROR_PLEASE_FILE_A_BUG_REPORT	include/Eigen/src/Core/util/StaticAssert.h	/^        EIGEN_INTERNAL_ERROR_PLEASE_FILE_A_BUG_REPORT,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
EIGEN_INVERSE_H	include/Eigen/src/LU/Inverse.h	11;"	d
EIGEN_INVERSE_SSE_H	include/Eigen/src/LU/arch/Inverse_SSE.h	28;"	d
EIGEN_IO_H	include/Eigen/src/Core/IO.h	12;"	d
EIGEN_ITERATIVE_SOLVER_BASE_H	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	11;"	d
EIGEN_JACOBISVD_H	include/Eigen/src/SVD/JacobiSVD.h	11;"	d
EIGEN_JACOBISVD_MKL_H	include/Eigen/src/SVD/JacobiSVD_MKL.h	34;"	d
EIGEN_JACOBI_H	include/Eigen/src/Jacobi/Jacobi.h	12;"	d
EIGEN_LAZY_H	include/Eigen/src/Eigen2Support/Lazy.h	11;"	d
EIGEN_LDLT_H	include/Eigen/src/Cholesky/LDLT.h	14;"	d
EIGEN_LLT_H	include/Eigen/src/Cholesky/LLT.h	11;"	d
EIGEN_LLT_MKL_H	include/Eigen/src/Cholesky/LLT_MKL.h	34;"	d
EIGEN_LOGICAL_XOR	include/Eigen/src/Core/util/Macros.h	408;"	d
EIGEN_LU_H	include/Eigen/src/LU/FullPivLU.h	11;"	d
EIGEN_LU_STRUCTS	include/Eigen/src/SparseLU/SparseLU_Structs.h	70;"	d
EIGEN_MACROS_H	include/Eigen/src/Core/util/Macros.h	12;"	d
EIGEN_MAJOR_VERSION	include/Eigen/src/Core/util/Macros.h	15;"	d
EIGEN_MAKESTRING	include/Eigen/src/Core/util/Macros.h	123;"	d
EIGEN_MAKESTRING2	include/Eigen/src/Core/util/Macros.h	122;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	include/Eigen/src/Core/util/Memory.h	650;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF	include/Eigen/src/Core/util/Memory.h	624;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE	include/Eigen/src/Core/util/Memory.h	651;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_NOTHROW	include/Eigen/src/Core/util/Memory.h	612;"	d
EIGEN_MAKE_ARRAY_FIXED_TYPEDEFS	include/Eigen/src/Core/Array.h	262;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS	include/Eigen/src/Core/Array.h	256;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS	include/Eigen/src/Core/Array.h	284;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS_ALL_SIZES	include/Eigen/src/Core/Array.h	268;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS_ALL_SIZES	include/Eigen/src/Core/Array.h	283;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS_LARGE	include/Eigen/src/Core/Array.h	286;"	d
EIGEN_MAKE_CWISE_BINARY_OP	include/Eigen/src/Core/util/Macros.h	412;"	d
EIGEN_MAKE_FIXED_TYPEDEFS	include/Eigen/src/Core/Matrix.h	378;"	d
EIGEN_MAKE_FIXED_TYPEDEFS	include/Eigen/src/Core/Matrix.h	401;"	d
EIGEN_MAKE_IMAGE_HELPERS	include/Eigen/src/misc/Image.h	68;"	d
EIGEN_MAKE_KERNEL_HELPERS	include/Eigen/src/misc/Kernel.h	67;"	d
EIGEN_MAKE_SCALAR_CWISE_UNARY_OP	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	189;"	d
EIGEN_MAKE_SOLVE_HELPERS	include/Eigen/src/misc/Solve.h	61;"	d
EIGEN_MAKE_SPARSE_SOLVE_HELPERS	include/Eigen/src/misc/SparseSolve.h	71;"	d
EIGEN_MAKE_TYPEDEFS	include/Eigen/src/Core/Matrix.h	370;"	d
EIGEN_MAKE_TYPEDEFS	include/Eigen/src/Core/Matrix.h	400;"	d
EIGEN_MAKE_TYPEDEFS	include/Eigen/src/Geometry/AlignedBox.h	355;"	d
EIGEN_MAKE_TYPEDEFS	include/Eigen/src/Geometry/AlignedBox.h	371;"	d
EIGEN_MAKE_TYPEDEFS_ALL_SIZES	include/Eigen/src/Core/Matrix.h	384;"	d
EIGEN_MAKE_TYPEDEFS_ALL_SIZES	include/Eigen/src/Core/Matrix.h	399;"	d
EIGEN_MAKE_TYPEDEFS_ALL_SIZES	include/Eigen/src/Geometry/AlignedBox.h	359;"	d
EIGEN_MAKE_TYPEDEFS_ALL_SIZES	include/Eigen/src/Geometry/AlignedBox.h	370;"	d
EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT	include/Eigen/src/Core/DenseStorage.h	59;"	d
EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT	include/Eigen/src/Core/DenseStorage.h	66;"	d
EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT	include/Eigen/src/Core/DenseStorage.h	72;"	d
EIGEN_MALLOC_ALREADY_ALIGNED	include/Eigen/src/Core/util/Memory.h	54;"	d
EIGEN_MALLOC_ALREADY_ALIGNED	include/Eigen/src/Core/util/Memory.h	56;"	d
EIGEN_MAPBASE_H	include/Eigen/src/Core/MapBase.h	12;"	d
EIGEN_MAPPED_SPARSEMATRIX_H	include/Eigen/src/SparseCore/MappedSparseMatrix.h	11;"	d
EIGEN_MAP_H	include/Eigen/src/Core/Map.h	12;"	d
EIGEN_MATHFUNCTIONS_H	include/Eigen/src/Core/MathFunctions.h	11;"	d
EIGEN_MATHFUNC_IMPL	include/Eigen/src/Core/MathFunctions.h	54;"	d
EIGEN_MATHFUNC_RETVAL	include/Eigen/src/Core/MathFunctions.h	55;"	d
EIGEN_MATH_FUNCTIONS_SSE_H	include/Eigen/src/Core/arch/SSE/MathFunctions.h	16;"	d
EIGEN_MATRIXBASEEIGENVALUES_H	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	12;"	d
EIGEN_MATRIXBASE_H	include/Eigen/src/Core/MatrixBase.h	12;"	d
EIGEN_MATRIXSTORAGE_H	include/Eigen/src/Core/DenseStorage.h	13;"	d
EIGEN_MATRIX_H	include/Eigen/src/Core/Matrix.h	12;"	d
EIGEN_MEMBER_FUNCTOR	include/Eigen/src/Core/VectorwiseOp.h	105;"	d
EIGEN_MEMORY_H	include/Eigen/src/Core/util/Memory.h	20;"	d
EIGEN_META_H	include/Eigen/src/Core/util/Meta.h	12;"	d
EIGEN_MINOR_H	include/Eigen/src/Eigen2Support/Minor.h	11;"	d
EIGEN_MINOR_VERSION	include/Eigen/src/Core/util/Macros.h	16;"	d
EIGEN_MISC_IMAGE_H	include/Eigen/src/misc/Image.h	11;"	d
EIGEN_MISC_KERNEL_H	include/Eigen/src/misc/Kernel.h	11;"	d
EIGEN_MISC_SOLVE_H	include/Eigen/src/misc/Solve.h	11;"	d
EIGEN_MKL_EIG_SELFADJ	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver_MKL.h	42;"	d
EIGEN_MKL_GEMV_SPECIALIZATION	include/Eigen/src/Core/products/GeneralMatrixVector_MKL.h	89;"	d
EIGEN_MKL_GEMV_SPECIALIZE	include/Eigen/src/Core/products/GeneralMatrixVector_MKL.h	53;"	d
EIGEN_MKL_HEMM_L	include/Eigen/src/Core/products/SelfadjointMatrixMatrix_MKL.h	95;"	d
EIGEN_MKL_HEMM_R	include/Eigen/src/Core/products/SelfadjointMatrixMatrix_MKL.h	221;"	d
EIGEN_MKL_LLT	include/Eigen/src/Cholesky/LLT_MKL.h	45;"	d
EIGEN_MKL_LU_PARTPIV	include/Eigen/src/LU/PartialPivLU_MKL.h	44;"	d
EIGEN_MKL_QR_COLPIV	include/Eigen/src/QR/ColPivHouseholderQR_MKL.h	43;"	d
EIGEN_MKL_QR_NOPIV	include/Eigen/src/QR/HouseholderQR_MKL.h	45;"	d
EIGEN_MKL_RANKUPDATE_C	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular_MKL.h	99;"	d
EIGEN_MKL_RANKUPDATE_R	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular_MKL.h	74;"	d
EIGEN_MKL_RANKUPDATE_SPECIALIZE	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular_MKL.h	47;"	d
EIGEN_MKL_SCHUR_COMPLEX	include/Eigen/src/Eigenvalues/ComplexSchur_MKL.h	42;"	d
EIGEN_MKL_SCHUR_REAL	include/Eigen/src/Eigenvalues/RealSchur_MKL.h	42;"	d
EIGEN_MKL_SUPPORT_H	include/Eigen/src/Core/util/MKL_support.h	34;"	d
EIGEN_MKL_SVD	include/Eigen/src/SVD/JacobiSVD_MKL.h	42;"	d
EIGEN_MKL_SYMM_L	include/Eigen/src/Core/products/SelfadjointMatrixMatrix_MKL.h	43;"	d
EIGEN_MKL_SYMM_R	include/Eigen/src/Core/products/SelfadjointMatrixMatrix_MKL.h	170;"	d
EIGEN_MKL_SYMV_SPECIALIZATION	include/Eigen/src/Core/products/SelfadjointMatrixVector_MKL.h	74;"	d
EIGEN_MKL_SYMV_SPECIALIZE	include/Eigen/src/Core/products/SelfadjointMatrixVector_MKL.h	50;"	d
EIGEN_MKL_TRMM_L	include/Eigen/src/Core/products/TriangularMatrixMatrix_MKL.h	78;"	d
EIGEN_MKL_TRMM_R	include/Eigen/src/Core/products/TriangularMatrixMatrix_MKL.h	192;"	d
EIGEN_MKL_TRMM_SPECIALIZE	include/Eigen/src/Core/products/TriangularMatrixMatrix_MKL.h	53;"	d
EIGEN_MKL_TRMV_CM	include/Eigen/src/Core/products/TriangularMatrixVector_MKL.h	74;"	d
EIGEN_MKL_TRMV_RM	include/Eigen/src/Core/products/TriangularMatrixVector_MKL.h	159;"	d
EIGEN_MKL_TRMV_SPECIALIZE	include/Eigen/src/Core/products/TriangularMatrixVector_MKL.h	50;"	d
EIGEN_MKL_TRSM_L	include/Eigen/src/Core/products/TriangularSolverMatrix_MKL.h	41;"	d
EIGEN_MKL_TRSM_R	include/Eigen/src/Core/products/TriangularSolverMatrix_MKL.h	96;"	d
EIGEN_MKL_VML_DECLARE_POW_CALL	include/Eigen/src/Core/Assign_MKL.h	162;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALL	include/Eigen/src/Core/Assign_MKL.h	143;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALLS	include/Eigen/src/Core/Assign_MKL.h	182;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALLS_COMPLEX	include/Eigen/src/Core/Assign_MKL.h	178;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALLS_COMPLEX_LA	include/Eigen/src/Core/Assign_MKL.h	191;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALLS_LA	include/Eigen/src/Core/Assign_MKL.h	195;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL	include/Eigen/src/Core/Assign_MKL.h	174;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL_LA	include/Eigen/src/Core/Assign_MKL.h	187;"	d
EIGEN_MKL_VML_DECLARE_UNARY_CALL_LA	include/Eigen/src/Core/Assign_MKL.h	152;"	d
EIGEN_MKL_VML_MODE	include/Eigen/src/Core/Assign_MKL.h	138;"	d
EIGEN_MKL_VML_SPECIALIZE_ASSIGN	include/Eigen/src/Core/Assign_MKL.h	116;"	d
EIGEN_MKL_VML_THRESHOLD	include/Eigen/src/Core/util/MKL_support.h	77;"	d
EIGEN_NESTBYVALUE_H	include/Eigen/src/Core/NestByValue.h	12;"	d
EIGEN_NOALIAS_H	include/Eigen/src/Core/NoAlias.h	11;"	d
EIGEN_NO_DEBUG	include/Eigen/src/Core/util/Macros.h	170;"	d
EIGEN_NUMTRAITS_H	include/Eigen/src/Core/NumTraits.h	11;"	d
EIGEN_ONLY_USED_FOR_DEBUG	include/Eigen/src/Core/util/Macros.h	224;"	d
EIGEN_ORDERING_H	include/Eigen/src/OrderingMethods/Ordering.h	12;"	d
EIGEN_ORTHOMETHODS_H	include/Eigen/src/Geometry/OrthoMethods.h	12;"	d
EIGEN_PACKET_MATH_ALTIVEC_H	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	11;"	d
EIGEN_PACKET_MATH_NEON_H	include/Eigen/src/Core/arch/NEON/PacketMath.h	13;"	d
EIGEN_PACKET_MATH_SSE_H	include/Eigen/src/Core/arch/SSE/PacketMath.h	11;"	d
EIGEN_PARALLELIZER_H	include/Eigen/src/Core/products/Parallelizer.h	11;"	d
EIGEN_PARAMETRIZEDLINE_H	include/Eigen/src/Geometry/ParametrizedLine.h	12;"	d
EIGEN_PARDISOSUPPORT_H	include/Eigen/src/PardisoSupport/PardisoSupport.h	33;"	d
EIGEN_PARTIALLU_H	include/Eigen/src/LU/PartialPivLU.h	12;"	d
EIGEN_PARTIALLU_LAPACK_H	include/Eigen/src/LU/PartialPivLU_MKL.h	34;"	d
EIGEN_PARTIAL_REDUX_H	include/Eigen/src/Core/VectorwiseOp.h	12;"	d
EIGEN_PASTIXSUPPORT_H	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	11;"	d
EIGEN_PERMISSIVE_EXPR	include/Eigen/src/Core/util/Macros.h	156;"	d
EIGEN_PERMISSIVE_EXPR	include/Eigen/src/Core/util/Macros.h	158;"	d
EIGEN_PERMUTATIONMATRIX_H	include/Eigen/src/Core/PermutationMatrix.h	12;"	d
EIGEN_PLAIN_ENUM_MAX	include/Eigen/src/Core/util/Macros.h	384;"	d
EIGEN_PLAIN_ENUM_MIN	include/Eigen/src/Core/util/Macros.h	383;"	d
EIGEN_PREDICATE_SAME_MATRIX_SIZE	include/Eigen/src/Core/util/StaticAssert.h	160;"	d
EIGEN_PRODUCTBASE_H	include/Eigen/src/Core/ProductBase.h	11;"	d
EIGEN_PRODUCT_PUBLIC_INTERFACE	include/Eigen/src/Core/ProductBase.h	46;"	d
EIGEN_QR_H	include/Eigen/src/QR/HouseholderQR.h	13;"	d
EIGEN_QR_MKL_H	include/Eigen/src/QR/HouseholderQR_MKL.h	35;"	d
EIGEN_QUATERNION_H	include/Eigen/src/Geometry/Quaternion.h	12;"	d
EIGEN_RANDOM_H	include/Eigen/src/Core/Random.h	11;"	d
EIGEN_REAL_QZ_H	include/Eigen/src/Eigenvalues/RealQZ.h	11;"	d
EIGEN_REAL_SCHUR_H	include/Eigen/src/Eigenvalues/RealSchur.h	12;"	d
EIGEN_REAL_SCHUR_MKL_H	include/Eigen/src/Eigenvalues/RealSchur_MKL.h	34;"	d
EIGEN_REDUX_H	include/Eigen/src/Core/Redux.h	12;"	d
EIGEN_REF_H	include/Eigen/src/Core/Ref.h	11;"	d
EIGEN_REPLICATE_H	include/Eigen/src/Core/Replicate.h	11;"	d
EIGEN_RESTRICT	include/Eigen/src/Core/util/Macros.h	292;"	d
EIGEN_RESTRICT	include/Eigen/src/Core/util/Macros.h	295;"	d
EIGEN_RETURNBYVALUE_H	include/Eigen/src/Core/ReturnByValue.h	12;"	d
EIGEN_REVERSE_H	include/Eigen/src/Core/Reverse.h	13;"	d
EIGEN_ROTATION2D_H	include/Eigen/src/Geometry/Rotation2D.h	11;"	d
EIGEN_ROTATIONBASE_H	include/Eigen/src/Geometry/RotationBase.h	11;"	d
EIGEN_SAEIGENSOLVER_MKL_H	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver_MKL.h	34;"	d
EIGEN_SAFE_TO_USE_STANDARD_ASSERT_MACRO	include/Eigen/src/Core/util/Macros.h	35;"	d
EIGEN_SAFE_TO_USE_STANDARD_ASSERT_MACRO	include/Eigen/src/Core/util/Macros.h	37;"	d
EIGEN_SCALING_H	include/Eigen/src/Geometry/Scaling.h	11;"	d
EIGEN_SELECT_H	include/Eigen/src/Core/Select.h	11;"	d
EIGEN_SELFADJOINTEIGENSOLVER_H	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	12;"	d
EIGEN_SELFADJOINTMATRIX_H	include/Eigen/src/Core/SelfAdjointView.h	11;"	d
EIGEN_SELFADJOINTRANK2UPTADE_H	include/Eigen/src/Core/products/SelfadjointRank2Update.h	11;"	d
EIGEN_SELFADJOINT_MATRIX_MATRIX_H	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	11;"	d
EIGEN_SELFADJOINT_MATRIX_MATRIX_MKL_H	include/Eigen/src/Core/products/SelfadjointMatrixMatrix_MKL.h	34;"	d
EIGEN_SELFADJOINT_MATRIX_VECTOR_H	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	11;"	d
EIGEN_SELFADJOINT_MATRIX_VECTOR_MKL_H	include/Eigen/src/Core/products/SelfadjointMatrixVector_MKL.h	34;"	d
EIGEN_SELFADJOINT_PRODUCT_H	include/Eigen/src/Core/products/SelfadjointProduct.h	11;"	d
EIGEN_SELFCWISEBINARYOP_H	include/Eigen/src/Core/SelfCwiseBinaryOp.h	11;"	d
EIGEN_SIMPLICIAL_CHOLESKY_H	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	11;"	d
EIGEN_SIMPLICIAL_CHOLESKY_IMPL_H	include/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h	46;"	d
EIGEN_SIZE_MAX	include/Eigen/src/Core/util/Macros.h	405;"	d
EIGEN_SIZE_MIN_PREFER_DYNAMIC	include/Eigen/src/Core/util/Macros.h	389;"	d
EIGEN_SIZE_MIN_PREFER_FIXED	include/Eigen/src/Core/util/Macros.h	397;"	d
EIGEN_SOLVETRIANGULAR_H	include/Eigen/src/Core/SolveTriangular.h	11;"	d
EIGEN_SPARSEDENSEPRODUCT_H	include/Eigen/src/SparseCore/SparseDenseProduct.h	11;"	d
EIGEN_SPARSELU_GEMM_KERNEL_H	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	11;"	d
EIGEN_SPARSELU_MEMORY	include/Eigen/src/SparseLU/SparseLU_Memory.h	32;"	d
EIGEN_SPARSELU_SUPERNODAL_MATRIX_H	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	12;"	d
EIGEN_SPARSELU_UTILS_H	include/Eigen/src/SparseLU/SparseLU_Utils.h	12;"	d
EIGEN_SPARSEMATRIXBASE_H	include/Eigen/src/SparseCore/SparseMatrixBase.h	11;"	d
EIGEN_SPARSEMATRIX_H	include/Eigen/src/SparseCore/SparseMatrix.h	11;"	d
EIGEN_SPARSEPRODUCT_H	include/Eigen/src/SparseCore/SparseProduct.h	11;"	d
EIGEN_SPARSEREDUX_H	include/Eigen/src/SparseCore/SparseRedux.h	11;"	d
EIGEN_SPARSESPARSEPRODUCTWITHPRUNING_H	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	11;"	d
EIGEN_SPARSETRANSPOSE_H	include/Eigen/src/SparseCore/SparseTranspose.h	11;"	d
EIGEN_SPARSETRIANGULARSOLVER_H	include/Eigen/src/SparseCore/TriangularSolver.h	11;"	d
EIGEN_SPARSEUTIL_H	include/Eigen/src/SparseCore/SparseUtil.h	11;"	d
EIGEN_SPARSEVECTOR_H	include/Eigen/src/SparseCore/SparseVector.h	11;"	d
EIGEN_SPARSEVIEW_H	include/Eigen/src/SparseCore/SparseView.h	12;"	d
EIGEN_SPARSE_AMD_H	include/Eigen/src/OrderingMethods/Amd.h	32;"	d
EIGEN_SPARSE_BLOCK_H	include/Eigen/src/SparseCore/SparseBlock.h	11;"	d
EIGEN_SPARSE_CWISE_BINARY_OP_H	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	11;"	d
EIGEN_SPARSE_CWISE_PRODUCT_RETURN_TYPE	include/Eigen/src/SparseCore/SparseMatrixBase.h	320;"	d
EIGEN_SPARSE_CWISE_UNARY_OP_H	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	11;"	d
EIGEN_SPARSE_DIAGONAL_PRODUCT_H	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	11;"	d
EIGEN_SPARSE_DOT_H	include/Eigen/src/SparseCore/SparseDot.h	11;"	d
EIGEN_SPARSE_FUZZY_H	include/Eigen/src/SparseCore/SparseFuzzy.h	11;"	d
EIGEN_SPARSE_INHERIT_ASSIGNMENT_OPERATOR	include/Eigen/src/SparseCore/SparseUtil.h	21;"	d
EIGEN_SPARSE_INHERIT_ASSIGNMENT_OPERATORS	include/Eigen/src/SparseCore/SparseUtil.h	39;"	d
EIGEN_SPARSE_INHERIT_SCALAR_ASSIGNMENT_OPERATOR	include/Eigen/src/SparseCore/SparseUtil.h	32;"	d
EIGEN_SPARSE_LU_H	include/Eigen/src/SparseLU/SparseLU.h	13;"	d
EIGEN_SPARSE_PERMUTATION_H	include/Eigen/src/SparseCore/SparsePermutation.h	11;"	d
EIGEN_SPARSE_PUBLIC_INTERFACE	include/Eigen/src/SparseCore/SparseUtil.h	62;"	d
EIGEN_SPARSE_QR_H	include/Eigen/src/SparseQR/SparseQR.h	12;"	d
EIGEN_SPARSE_SELFADJOINTVIEW_H	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	11;"	d
EIGEN_SPARSE_SOLVE_H	include/Eigen/src/misc/SparseSolve.h	11;"	d
EIGEN_SPARSE_TRIANGULARVIEW_H	include/Eigen/src/SparseCore/SparseTriangularView.h	12;"	d
EIGEN_STABLENORM_H	include/Eigen/src/Core/StableNorm.h	11;"	d
EIGEN_STACK_ALLOCATION_LIMIT	include/Eigen/src/Core/util/Macros.h	300;"	d
EIGEN_STATIC_ASSERT	include/Eigen/src/Core/util/StaticAssert.h	108;"	d
EIGEN_STATIC_ASSERT	include/Eigen/src/Core/util/StaticAssert.h	32;"	d
EIGEN_STATIC_ASSERT_ARRAYXPR	include/Eigen/src/Core/util/StaticAssert.h	197;"	d
EIGEN_STATIC_ASSERT_DYNAMIC_SIZE	include/Eigen/src/Core/util/StaticAssert.h	138;"	d
EIGEN_STATIC_ASSERT_FIXED_SIZE	include/Eigen/src/Core/util/StaticAssert.h	133;"	d
EIGEN_STATIC_ASSERT_H	include/Eigen/src/Core/util/StaticAssert.h	12;"	d
EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS	include/Eigen/src/Core/MapBase.h	14;"	d
EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS	include/Eigen/src/Core/MapBase.h	243;"	d
EIGEN_STATIC_ASSERT_LVALUE	include/Eigen/src/Core/util/StaticAssert.h	193;"	d
EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE	include/Eigen/src/Core/util/StaticAssert.h	148;"	d
EIGEN_STATIC_ASSERT_NON_INTEGER	include/Eigen/src/Core/util/StaticAssert.h	174;"	d
EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE	include/Eigen/src/Core/util/StaticAssert.h	183;"	d
EIGEN_STATIC_ASSERT_SAME_VECTOR_SIZE	include/Eigen/src/Core/util/StaticAssert.h	153;"	d
EIGEN_STATIC_ASSERT_SAME_XPR_KIND	include/Eigen/src/Core/util/StaticAssert.h	201;"	d
EIGEN_STATIC_ASSERT_SIZE_1x1	include/Eigen/src/Core/util/StaticAssert.h	188;"	d
EIGEN_STATIC_ASSERT_VECTOR_ONLY	include/Eigen/src/Core/util/StaticAssert.h	128;"	d
EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE	include/Eigen/src/Core/util/StaticAssert.h	143;"	d
EIGEN_STDDEQUE_H	include/Eigen/src/StlSupport/StdDeque.h	12;"	d
EIGEN_STDLIST_H	include/Eigen/src/StlSupport/StdList.h	11;"	d
EIGEN_STDVECTOR_H	include/Eigen/src/StlSupport/StdVector.h	12;"	d
EIGEN_STD_DEQUE_SPECIALIZATION_BODY	include/Eigen/src/StlSupport/StdDeque.h	60;"	d
EIGEN_STD_LIST_SPECIALIZATION_BODY	include/Eigen/src/StlSupport/StdList.h	60;"	d
EIGEN_STD_VECTOR_SPECIALIZATION_BODY	include/Eigen/src/StlSupport/StdVector.h	49;"	d
EIGEN_STL_DETAILS_H	include/Eigen/src/StlSupport/details.h	12;"	d
EIGEN_STRIDE_H	include/Eigen/src/Core/Stride.h	11;"	d
EIGEN_STRONG_INLINE	include/Eigen/src/Core/util/Macros.h	129;"	d
EIGEN_STRONG_INLINE	include/Eigen/src/Core/util/Macros.h	131;"	d
EIGEN_SUITESPARSEQRSUPPORT_H	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	11;"	d
EIGEN_SUPERLUSUPPORT_H	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	11;"	d
EIGEN_SUPERLU_HAS_ILU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	45;"	d
EIGEN_SUPERLU_HAS_ILU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	801;"	d
EIGEN_SWAP_H	include/Eigen/src/Core/Swap.h	11;"	d
EIGEN_TRANSFORM_H	include/Eigen/src/Geometry/Transform.h	13;"	d
EIGEN_TRANSLATION_H	include/Eigen/src/Geometry/Translation.h	11;"	d
EIGEN_TRANSPOSE_H	include/Eigen/src/Core/Transpose.h	12;"	d
EIGEN_TRANSPOSITIONS_H	include/Eigen/src/Core/Transpositions.h	11;"	d
EIGEN_TRIANGULARMATRIXVECTOR_H	include/Eigen/src/Core/products/TriangularMatrixVector.h	11;"	d
EIGEN_TRIANGULARMATRIX_H	include/Eigen/src/Core/TriangularMatrix.h	12;"	d
EIGEN_TRIANGULAR_MATRIX_MATRIX_H	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	11;"	d
EIGEN_TRIANGULAR_MATRIX_MATRIX_MKL_H	include/Eigen/src/Core/products/TriangularMatrixMatrix_MKL.h	34;"	d
EIGEN_TRIANGULAR_MATRIX_VECTOR_MKL_H	include/Eigen/src/Core/products/TriangularMatrixVector_MKL.h	34;"	d
EIGEN_TRIANGULAR_SOLVER2_H	include/Eigen/src/Eigen2Support/TriangularSolver.h	11;"	d
EIGEN_TRIANGULAR_SOLVER_MATRIX_H	include/Eigen/src/Core/products/TriangularSolverMatrix.h	11;"	d
EIGEN_TRIANGULAR_SOLVER_MATRIX_MKL_H	include/Eigen/src/Core/products/TriangularSolverMatrix_MKL.h	34;"	d
EIGEN_TRIANGULAR_SOLVER_VECTOR_H	include/Eigen/src/Core/products/TriangularSolverVector.h	11;"	d
EIGEN_TRIDIAGONALIZATION_H	include/Eigen/src/Eigenvalues/Tridiagonalization.h	12;"	d
EIGEN_TUNE_TRIANGULAR_PANEL_WIDTH	include/Eigen/src/Core/arch/Default/Settings.h	38;"	d
EIGEN_UMEYAMA_H	include/Eigen/src/Geometry/Umeyama.h	11;"	d
EIGEN_UMFPACKSUPPORT_H	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	11;"	d
EIGEN_UNROLLING_LIMIT	include/Eigen/src/Core/arch/Default/Settings.h	24;"	d
EIGEN_UNUSED	include/Eigen/src/Core/util/Macros.h	242;"	d
EIGEN_UNUSED_VARIABLE	include/Eigen/src/Core/util/Macros.h	253;"	d
EIGEN_USER_ALIGN16	include/Eigen/src/Core/util/Macros.h	285;"	d
EIGEN_USER_ALIGN_TO_BOUNDARY	include/Eigen/src/Core/util/Macros.h	284;"	d
EIGEN_USE_BLAS	include/Eigen/src/Core/util/MKL_support.h	38;"	d
EIGEN_USE_BLAS	include/Eigen/src/Core/util/MKL_support.h	67;"	d
EIGEN_USE_LAPACKE	include/Eigen/src/Core/util/MKL_support.h	41;"	d
EIGEN_USE_LAPACKE	include/Eigen/src/Core/util/MKL_support.h	49;"	d
EIGEN_USE_LAPACKE	include/Eigen/src/Core/util/MKL_support.h	68;"	d
EIGEN_USE_LAPACKE	include/Eigen/src/Core/util/MKL_support.h	71;"	d
EIGEN_USE_LAPACKE_STRICT	include/Eigen/src/Core/util/MKL_support.h	70;"	d
EIGEN_USE_MKL	include/Eigen/src/Core/util/MKL_support.h	53;"	d
EIGEN_USE_MKL	include/Eigen/src/Core/util/MKL_support.h	60;"	d
EIGEN_USE_MKL	include/Eigen/src/Core/util/MKL_support.h	62;"	d
EIGEN_USE_MKL_ALL	include/Eigen/src/Core/util/MKL_support.h	66;"	d
EIGEN_USE_MKL_VML	include/Eigen/src/Core/util/MKL_support.h	44;"	d
EIGEN_USE_MKL_VML	include/Eigen/src/Core/util/MKL_support.h	69;"	d
EIGEN_USING_ARRAY_TYPEDEFS	include/Eigen/src/Core/Array.h	299;"	d
EIGEN_USING_ARRAY_TYPEDEFS_FOR_TYPE	include/Eigen/src/Core/Array.h	293;"	d
EIGEN_USING_ARRAY_TYPEDEFS_FOR_TYPE_AND_SIZE	include/Eigen/src/Core/Array.h	288;"	d
EIGEN_VECTORBLOCK_H	include/Eigen/src/Core/VectorBlock.h	12;"	d
EIGEN_VERSION_AT_LEAST	include/Eigen/src/Core/util/Macros.h	18;"	d
EIGEN_VISITOR_H	include/Eigen/src/Core/Visitor.h	11;"	d
EIGEN_WARNINGS_DISABLED	include/Eigen/src/Core/util/DisableStupidWarnings.h	2;"	d
EIGEN_WARNINGS_DISABLED	include/Eigen/src/Core/util/ReenableStupidWarnings.h	2;"	d
EIGEN_WORKAROUND_MSVC_STL_SUPPORT	include/Eigen/src/StlSupport/details.h	54;"	d
EIGEN_WORLD_VERSION	include/Eigen/src/Core/util/Macros.h	14;"	d
EIGEN_XPRHELPER_H	include/Eigen/src/Core/util/XprHelper.h	12;"	d
EigVecMask	include/Eigen/src/Core/util/Constants.h	/^  EigVecMask = EigenvaluesOnly | ComputeEigenvectors,$/;"	e	enum:Eigen::DecompositionOptions
Eigen	include/Eigen/src/Cholesky/LDLT.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Cholesky/LLT.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Cholesky/LLT_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Array.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/ArrayBase.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/ArrayWrapper.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Assign.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/Assign_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/BandMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Block.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/BooleanRedux.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/CommaInitializer.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/CoreIterators.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/CwiseBinaryOp.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/CwiseNullaryOp.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/CwiseUnaryOp.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/CwiseUnaryView.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/DenseBase.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/DenseCoeffsBase.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/DenseStorage.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/Diagonal.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/DiagonalMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/DiagonalProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Dot.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/EigenBase.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/Flagged.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/ForceAlignedAccess.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/Functors.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/Fuzzy.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/GeneralProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/GenericPacketMath.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/GlobalFunctions.h	/^namespace Eigen$/;"	n
Eigen	include/Eigen/src/Core/IO.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Map.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/MapBase.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/MathFunctions.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/Matrix.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/MatrixBase.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/NestByValue.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/NoAlias.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/NumTraits.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/PermutationMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/PlainObjectBase.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/ProductBase.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Random.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Redux.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Ref.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Replicate.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/ReturnByValue.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/Reverse.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Select.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/SelfAdjointView.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/SolveTriangular.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/StableNorm.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Stride.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Swap.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Transpose.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Transpositions.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/TriangularMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/VectorBlock.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/VectorwiseOp.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/Visitor.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/arch/NEON/Complex.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/arch/SSE/Complex.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/GeneralMatrixMatrix_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/GeneralMatrixVector_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/Parallelizer.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/SelfadjointMatrixMatrix_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/SelfadjointMatrixVector_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/SelfadjointProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/SelfadjointRank2Update.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/TriangularMatrixMatrix_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/TriangularMatrixVector_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/products/TriangularSolverMatrix_MKL.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/products/TriangularSolverVector.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Core/util/BlasUtil.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/Constants.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/ForwardDeclarations.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/MKL_support.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/Macros.h	/^    namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/Macros.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/Memory.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/Meta.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/StaticAssert.h	/^    namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Core/util/XprHelper.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Eigen2Support/Block.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Cwise.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/LU.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Lazy.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/LeastSquares.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/MathFunctions.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Memory.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Meta.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/Minor.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/QR.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/SVD.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigen2Support/VectorBlock.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/ComplexSchur_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/EigenSolver.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/RealQZ.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/Eigenvalues/RealSchur.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/RealSchur_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/AlignedBox.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/AngleAxis.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/EulerAngles.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Homogeneous.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Hyperplane.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/OrthoMethods.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/ParametrizedLine.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Quaternion.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Rotation2D.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/RotationBase.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Scaling.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Transform.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Translation.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/Umeyama.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Householder/BlockHouseholder.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Householder/Householder.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Householder/HouseholderSequence.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/Jacobi/Jacobi.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/LU/Determinant.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/LU/FullPivLU.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/LU/Inverse.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/LU/PartialPivLU.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/LU/PartialPivLU_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/LU/arch/Inverse_SSE.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/MetisSupport/MetisSupport.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/OrderingMethods/Amd.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/OrderingMethods/Ordering.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/QR/ColPivHouseholderQR.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/QR/ColPivHouseholderQR_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/QR/FullPivHouseholderQR.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/QR/HouseholderQR.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/QR/HouseholderQR_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SVD/JacobiSVD.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SVD/JacobiSVD_MKL.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SVD/UpperBidiagonalization.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseCore/AmbiVector.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/CompressedStorage.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseBlock.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseColEtree.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseDot.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseMatrix.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparsePermutation.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseProduct.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseRedux.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseTranspose.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseTriangularView.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseUtil.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseVector.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/SparseView.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseCore/TriangularSolver.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLUImpl.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_Utils.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_column_bmod.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_copy_to_ucol.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_heap_relax_snode.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_kernel_bmod.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_panel_bmod.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_pivotL.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_pruneL.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseLU/SparseLU_relax_snode.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SparseQR/SparseQR.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/StlSupport/details.h	/^namespace Eigen {$/;"	n
Eigen	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/misc/Image.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/misc/Kernel.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/misc/Solve.h	/^namespace Eigen { $/;"	n
Eigen	include/Eigen/src/misc/SparseSolve.h	/^namespace Eigen { $/;"	n
EigenBase	include/Eigen/src/Core/EigenBase.h	/^template<typename Derived> struct EigenBase$/;"	s	namespace:Eigen
EigenSolver	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    EigenSolver(Index size)$/;"	f	class:Eigen::EigenSolver
EigenSolver	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    EigenSolver(const MatrixType& matrix, bool computeEigenvectors = true)$/;"	f	class:Eigen::EigenSolver
EigenSolver	include/Eigen/src/Eigenvalues/EigenSolver.h	/^ EigenSolver() : m_eivec(), m_eivalues(), m_isInitialized(false), m_realSchur(), m_matT(), m_tmp() {}$/;"	f	class:Eigen::EigenSolver
EigenSolver	include/Eigen/src/Eigenvalues/EigenSolver.h	/^template<typename _MatrixType> class EigenSolver$/;"	c	namespace:Eigen
Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl	include/Eigen/src/Core/ArrayBase.h	/^    typedef ArrayBase Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl;$/;"	t	class:Eigen::ArrayBase
EigenvalueType	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options&(~RowMajor), MaxColsAtCompileTime, 1> EigenvalueType;$/;"	t	class:Eigen::ComplexEigenSolver
EigenvalueType	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> EigenvalueType;$/;"	t	class:Eigen::EigenSolver
EigenvalueType	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef CwiseBinaryOp<internal::scalar_quotient_op<ComplexScalar,Scalar>,ComplexVectorType,VectorType> EigenvalueType;$/;"	t	class:Eigen::GeneralizedEigenSolver
EigenvalueType	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> EigenvalueType;$/;"	t	class:Eigen::RealQZ
EigenvalueType	include/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> EigenvalueType;$/;"	t	class:Eigen::RealSchur
EigenvaluesOnly	include/Eigen/src/Core/util/Constants.h	/^  EigenvaluesOnly     = 0x40,$/;"	e	enum:Eigen::DecompositionOptions
EigenvaluesReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef Matrix<typename NumTraits<typename internal::traits<Derived>::Scalar>::Real, internal::traits<Derived>::ColsAtCompileTime, 1> EigenvaluesReturnType;$/;"	t	class:Eigen::DenseBase
EigenvaluesReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef Matrix<std::complex<RealScalar>, internal::traits<Derived>::ColsAtCompileTime, 1, ColMajor> EigenvaluesReturnType;$/;"	t	class:Eigen::MatrixBase
EigenvaluesReturnType	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef Matrix<RealScalar, internal::traits<MatrixType>::ColsAtCompileTime, 1> EigenvaluesReturnType;$/;"	t	class:Eigen::SelfAdjointView
EigenvectorType	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> EigenvectorType;$/;"	t	class:Eigen::ComplexEigenSolver
EigenvectorsType	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> EigenvectorsType;$/;"	t	class:Eigen::EigenSolver
EigenvectorsType	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> EigenvectorsType;$/;"	t	class:Eigen::GeneralizedEigenSolver
ElseMatrixNested	include/Eigen/src/Core/Select.h	/^  typedef typename ElseMatrixType::Nested ElseMatrixNested;$/;"	t	struct:Eigen::internal::traits
EssentialVectorType	include/Eigen/src/Householder/HouseholderSequence.h	/^    typedef typename internal::hseq_side_dependent_impl<VectorsType,CoeffsType,Side>::EssentialVectorType EssentialVectorType;$/;"	t	class:Eigen::HouseholderSequence
EssentialVectorType	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef Block<const VectorsType, Dynamic, 1> EssentialVectorType;$/;"	t	struct:Eigen::internal::hseq_side_dependent_impl
EssentialVectorType	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef Transpose<Block<const VectorsType, 1, Dynamic> > EssentialVectorType;$/;"	t	struct:Eigen::internal::hseq_side_dependent_impl
EvalBeforeAssigningBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int EvalBeforeAssigningBit = 0x4;$/;"	m	namespace:Eigen
EvalBeforeNestingBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int EvalBeforeNestingBit = 0x2;$/;"	m	namespace:Eigen
EvalReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::add_const_on_value_type<typename internal::eval<Derived>::type>::type EvalReturnType;$/;"	t	class:Eigen::DenseBase
EvalToRowMajor	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      EvalToRowMajor = (MaxRowsAtCompileTime==1&&MaxColsAtCompileTime!=1) ? 1$/;"	e	enum:Eigen::internal::traits::__anon197
EvalToRowMajor	include/Eigen/src/SparseCore/SparseProduct.h	/^    EvalToRowMajor = (RhsFlags & LhsFlags & RowMajorBit),$/;"	e	enum:Eigen::internal::traits::__anon443
ExpandMem	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  enum { ExpandMem = true };$/;"	e	enum:Eigen::internal::column_dfs_traits::__anon452
ExpandMem	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^  enum { ExpandMem = false };$/;"	e	enum:Eigen::internal::panel_dfs_traits::__anon455
ExpressionType	include/Eigen/src/Core/SelfAdjointView.h	/^  typedef MatrixType ExpressionType;$/;"	t	struct:Eigen::internal::traits
ExpressionType	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef MatrixType ExpressionType;$/;"	t	struct:Eigen::internal::traits
ExpressionTypeNested	include/Eigen/src/Core/Flagged.h	/^        ExpressionType, const ExpressionType&>::type ExpressionTypeNested;$/;"	t	class:Eigen::Flagged
ExpressionTypeNested	include/Eigen/src/Core/VectorwiseOp.h	/^        ExpressionType, ExpressionType&>::type ExpressionTypeNested;$/;"	t	class:Eigen::VectorwiseOp
ExpressionTypeNested	include/Eigen/src/Eigen2Support/Cwise.h	/^        ExpressionType, const ExpressionType&>::type ExpressionTypeNested;$/;"	t	class:Eigen::Cwise
ExpressionTypeNestedCleaned	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::remove_all<ExpressionTypeNested>::type ExpressionTypeNestedCleaned;$/;"	t	class:Eigen::VectorwiseOp
ExtendedType	include/Eigen/src/Core/VectorwiseOp.h	/^    template<typename OtherDerived> struct ExtendedType {$/;"	s	class:Eigen::VectorwiseOp
ExtractType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef Transpose<const typename Base::_ExtractType>  ExtractType; \/\/ const to get rid of a compile error; anyway blas traits are only used on the RHS$/;"	t	struct:Eigen::internal::blas_traits
ExtractType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef const XprType& ExtractType;$/;"	t	struct:Eigen::internal::blas_traits
ExtractType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef typename Base::ExtractType ExtractType;$/;"	t	struct:Eigen::internal::blas_traits
FLOATING_POINT_ARGUMENT_PASSED__INTEGER_WAS_EXPECTED	include/Eigen/src/Core/util/StaticAssert.h	/^        FLOATING_POINT_ARGUMENT_PASSED__INTEGER_WAS_EXPECTED,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
Factor	include/Eigen/src/Core/Replicate.h	/^    Factor = (RowFactor==Dynamic || ColFactor==Dynamic) ? Dynamic : RowFactor*ColFactor$/;"	e	enum:Eigen::internal::traits::__anon238
FactorType	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    typedef SparseMatrix<Scalar,RowMajor> FactorType;$/;"	t	class:Eigen::IncompleteLUT
FixedSegmentReturnType	include/Eigen/src/plugins/BlockMethods.h	/^template<int Size> struct FixedSegmentReturnType { typedef VectorBlock<Derived, Size> Type; };$/;"	s
Flagged	include/Eigen/src/Core/Flagged.h	/^    inline Flagged(const ExpressionType& matrix) : m_matrix(matrix) {}$/;"	f	class:Eigen::Flagged
Flagged	include/Eigen/src/Core/Flagged.h	/^template<typename ExpressionType, unsigned int Added, unsigned int Removed> class Flagged$/;"	c	namespace:Eigen
Flags	include/Eigen/src/Core/ArrayWrapper.h	/^    Flags = Flags0 & ~NestByRefBit$/;"	e	enum:Eigen::internal::traits::__anon31
Flags	include/Eigen/src/Core/ArrayWrapper.h	/^    Flags = Flags0 & ~NestByRefBit$/;"	e	enum:Eigen::internal::traits::__anon32
Flags	include/Eigen/src/Core/BandMatrix.h	/^      Flags = internal::traits<Derived>::Flags,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
Flags	include/Eigen/src/Core/BandMatrix.h	/^    Flags = LvalueBit,$/;"	e	enum:Eigen::internal::traits::__anon47
Flags	include/Eigen/src/Core/BandMatrix.h	/^    Flags = LvalueBit,$/;"	e	enum:Eigen::internal::traits::__anon48
Flags	include/Eigen/src/Core/Block.h	/^    Flags = Flags0 | FlagsLinearAccessBit | FlagsLvalueBit | FlagsRowMajorBit$/;"	e	enum:Eigen::internal::traits::__anon49
Flags	include/Eigen/src/Core/CwiseBinaryOp.h	/^    Flags = (Flags0 & ~RowMajorBit) | (LhsFlags & RowMajorBit),$/;"	e	enum:Eigen::internal::traits::__anon54
Flags	include/Eigen/src/Core/CwiseNullaryOp.h	/^    Flags = (traits<PlainObjectType>::Flags$/;"	e	enum:Eigen::internal::traits::__anon55
Flags	include/Eigen/src/Core/CwiseUnaryOp.h	/^    Flags = _XprTypeNested::Flags & ($/;"	e	enum:Eigen::internal::traits::__anon56
Flags	include/Eigen/src/Core/CwiseUnaryView.h	/^    Flags = (traits<_MatrixTypeNested>::Flags & (HereditaryBits | LvalueBit | LinearAccessBit | DirectAccessBit)),$/;"	e	enum:Eigen::internal::traits::__anon57
Flags	include/Eigen/src/Core/DenseBase.h	/^      Flags = internal::traits<Derived>::Flags,$/;"	e	enum:Eigen::DenseBase::__anon58
Flags	include/Eigen/src/Core/Diagonal.h	/^    Flags = (unsigned int)_MatrixTypeNested::Flags & (HereditaryBits | LinearAccessBit | MaskLvalueBit | DirectAccessBit) & ~RowMajorBit,$/;"	e	enum:Eigen::internal::traits::__anon64
Flags	include/Eigen/src/Core/DiagonalMatrix.h	/^      Flags = 0$/;"	e	enum:Eigen::DiagonalBase::__anon66
Flags	include/Eigen/src/Core/DiagonalMatrix.h	/^    Flags =  traits<DiagonalVectorType>::Flags & LvalueBit$/;"	e	enum:Eigen::internal::traits::__anon68
Flags	include/Eigen/src/Core/DiagonalMatrix.h	/^    Flags = LvalueBit$/;"	e	enum:Eigen::internal::traits::__anon67
Flags	include/Eigen/src/Core/DiagonalProduct.h	/^    Flags = ((HereditaryBits|_LinearAccessMask) & (unsigned int)(MatrixType::Flags)) | (_Vectorizable ? PacketAccessBit : 0) | AlignedBit,\/\/(int(MatrixType::Flags)&int(DiagonalType::DiagonalVectorType::Flags)&AlignedBit),$/;"	e	enum:Eigen::internal::traits::__anon69
Flags	include/Eigen/src/Core/Flagged.h	/^  enum { Flags = (ExpressionType::Flags | Added) & ~Removed };$/;"	e	enum:Eigen::internal::traits::__anon70
Flags	include/Eigen/src/Core/Map.h	/^    Flags = KeepsPacketAccess ? int(Flags3) : (int(Flags3) & ~PacketAccessBit)$/;"	e	enum:Eigen::internal::traits::__anon176
Flags	include/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	enum:Eigen::internal::traits::__anon184
Flags	include/Eigen/src/Core/PermutationMatrix.h	/^      Flags = Traits::Flags,$/;"	e	enum:Eigen::PermutationBase::__anon189
Flags	include/Eigen/src/Core/PermutationMatrix.h	/^      Flags = Traits::Flags,$/;"	e	enum:Eigen::Transpose::__anon191
Flags	include/Eigen/src/Core/PermutationMatrix.h	/^    Flags = 0,$/;"	e	enum:Eigen::internal::traits::__anon190
Flags	include/Eigen/src/Core/ProductBase.h	/^    Flags = (MaxRowsAtCompileTime==1 ? RowMajorBit : 0)$/;"	e	enum:Eigen::internal::traits::__anon196
Flags	include/Eigen/src/Core/Ref.h	/^    Flags = traits<Map<_PlainObjectType, _Options, _StrideType> >::Flags | NestByRefBit$/;"	e	enum:Eigen::internal::traits::__anon236
Flags	include/Eigen/src/Core/Replicate.h	/^    Flags = (_MatrixTypeNested::Flags & HereditaryBits & ~RowMajorBit) | (IsRowMajor ? RowMajorBit : 0),$/;"	e	enum:Eigen::internal::traits::__anon239
Flags	include/Eigen/src/Core/ReturnByValue.h	/^    Flags = (traits<typename traits<Derived>::ReturnType>::Flags$/;"	e	enum:Eigen::internal::traits::__anon240
Flags	include/Eigen/src/Core/Reverse.h	/^    Flags = int(_MatrixTypeNested::Flags) & (HereditaryBits | LvalueBit | PacketAccessBit | LinearAccess),$/;"	e	enum:Eigen::internal::traits::__anon241
Flags	include/Eigen/src/Core/Select.h	/^    Flags = (unsigned int)ThenMatrixType::Flags & ElseMatrixType::Flags & HereditaryBits,$/;"	e	enum:Eigen::internal::traits::__anon243
Flags	include/Eigen/src/Core/SelfAdjointView.h	/^    Flags =  MatrixTypeNestedCleaned::Flags & (HereditaryBits)$/;"	e	enum:Eigen::internal::traits::__anon244
Flags	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Flags = traits<CwiseBinaryOp<BinaryOp,Lhs,Rhs> >::Flags | (Lhs::Flags&DirectAccessBit) | (Lhs::Flags&LvalueBit),$/;"	e	enum:Eigen::internal::traits::__anon248
Flags	include/Eigen/src/Core/Transpose.h	/^    Flags = Flags1 ^ RowMajorBit,$/;"	e	enum:Eigen::internal::traits::__anon253
Flags	include/Eigen/src/Core/TriangularMatrix.h	/^    Flags = (MatrixTypeNestedCleaned::Flags & (HereditaryBits) & (~(PacketAccessBit | DirectAccessBit | LinearAccessBit))) | Mode,$/;"	e	enum:Eigen::internal::traits::__anon257
Flags	include/Eigen/src/Core/VectorwiseOp.h	/^    Flags = (Flags0 & ~RowMajorBit) | (RowsAtCompileTime == 1 ? RowMajorBit : 0),$/;"	e	enum:Eigen::internal::traits::__anon330
Flags	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      Flags = ((unsigned int)(LhsFlags | RhsFlags) & HereditaryBits & ~RowMajorBit)$/;"	e	enum:Eigen::internal::traits::__anon197
Flags	include/Eigen/src/Eigen2Support/Minor.h	/^    Flags = _MatrixTypeNested::Flags & (HereditaryBits | LvalueBit),$/;"	e	enum:Eigen::internal::traits::__anon357
Flags	include/Eigen/src/Geometry/Homogeneous.h	/^    Flags = ColsAtCompileTime==1 ? (TmpFlags & ~RowMajorBit)$/;"	e	enum:Eigen::internal::traits::__anon370
Flags	include/Eigen/src/Geometry/Quaternion.h	/^      Flags = TraitsBase::Flags & ~LvalueBit$/;"	e	enum:Eigen::internal::traits::__anon377
Flags	include/Eigen/src/Geometry/Quaternion.h	/^    Flags = Eigen::internal::traits<Derived>::Flags$/;"	e	enum:Eigen::QuaternionBase::__anon374
Flags	include/Eigen/src/Geometry/Quaternion.h	/^    Flags = IsAligned ? (AlignedBit | LvalueBit) : LvalueBit$/;"	e	enum:Eigen::internal::traits::__anon375
Flags	include/Eigen/src/Householder/HouseholderSequence.h	/^    Flags = 0$/;"	e	enum:Eigen::internal::traits::__anon392
Flags	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    Flags = Tr ? RowMajorBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon432
Flags	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    Flags = (SparseFlags&RowMajorBit),$/;"	e	enum:Eigen::internal::traits::__anon433
Flags	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Flags = 0,$/;"	e	enum:Eigen::internal::traits::__anon437
Flags	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Flags = _Options | NestByRefBit | LvalueBit,$/;"	e	enum:Eigen::internal::traits::__anon436
Flags	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      Flags = internal::traits<Derived>::Flags,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
Flags	include/Eigen/src/SparseCore/SparseProduct.h	/^    Flags = (int(LhsFlags | RhsFlags) & HereditaryBits & RemovedBits)$/;"	e	enum:Eigen::internal::traits::__anon443
Flags	include/Eigen/src/SparseCore/SparseVector.h	/^    Flags = _Options | NestByRefBit | LvalueBit | (IsColVector ? 0 : RowMajorBit),$/;"	e	enum:Eigen::internal::traits::__anon447
Flags	include/Eigen/src/SparseCore/SparseView.h	/^    Flags = int(traits<MatrixType>::Flags) & (RowMajorBit)$/;"	e	enum:Eigen::internal::traits::__anon451
Flags0	include/Eigen/src/Core/ArrayWrapper.h	/^    Flags0 = traits<typename remove_all<typename ExpressionType::Nested>::type >::Flags,$/;"	e	enum:Eigen::internal::traits::__anon31
Flags0	include/Eigen/src/Core/ArrayWrapper.h	/^    Flags0 = traits<typename remove_all<typename ExpressionType::Nested>::type >::Flags,$/;"	e	enum:Eigen::internal::traits::__anon32
Flags0	include/Eigen/src/Core/Block.h	/^    Flags0 = traits<XprType>::Flags & ( (HereditaryBits & ~RowMajorBit) |$/;"	e	enum:Eigen::internal::traits::__anon49
Flags0	include/Eigen/src/Core/CwiseBinaryOp.h	/^    Flags0 = (int(LhsFlags) | int(RhsFlags)) & ($/;"	e	enum:Eigen::internal::traits::__anon54
Flags0	include/Eigen/src/Core/Map.h	/^    Flags0 = TraitsBase::Flags & (~NestByRefBit),$/;"	e	enum:Eigen::internal::traits::__anon176
Flags0	include/Eigen/src/Core/Transpose.h	/^    Flags0 = MatrixTypeNestedPlain::Flags & ~(LvalueBit | NestByRefBit),$/;"	e	enum:Eigen::internal::traits::__anon253
Flags0	include/Eigen/src/Core/VectorwiseOp.h	/^    Flags0 = (unsigned int)_MatrixTypeNested::Flags & HereditaryBits,$/;"	e	enum:Eigen::internal::traits::__anon330
Flags1	include/Eigen/src/Core/Map.h	/^    Flags1 = IsAligned ? (int(Flags0) | AlignedBit) : (int(Flags0) & ~AlignedBit),$/;"	e	enum:Eigen::internal::traits::__anon176
Flags1	include/Eigen/src/Core/Transpose.h	/^    Flags1 = Flags0 | FlagsLvalueBit,$/;"	e	enum:Eigen::internal::traits::__anon253
Flags2	include/Eigen/src/Core/Map.h	/^    Flags2 = (bool(HasNoStride) || bool(PlainObjectType::IsVectorAtCompileTime))$/;"	e	enum:Eigen::internal::traits::__anon176
Flags3	include/Eigen/src/Core/Map.h	/^    Flags3 = is_lvalue<PlainObjectType>::value ? int(Flags2) : (int(Flags2) & ~LvalueBit),$/;"	e	enum:Eigen::internal::traits::__anon176
FlagsLinearAccessBit	include/Eigen/src/Core/Block.h	/^    FlagsLinearAccessBit = (RowsAtCompileTime == 1 || ColsAtCompileTime == 1 || (InnerPanel && (traits<XprType>::Flags&LinearAccessBit))) ? LinearAccessBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon49
FlagsLvalueBit	include/Eigen/src/Core/Block.h	/^    FlagsLvalueBit = is_lvalue<XprType>::value ? LvalueBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon49
FlagsLvalueBit	include/Eigen/src/Core/Transpose.h	/^    FlagsLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon253
FlagsRowMajorBit	include/Eigen/src/Core/Block.h	/^    FlagsRowMajorBit = IsRowMajor ? RowMajorBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon49
ForceAlignedAccess	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline ForceAlignedAccess(const ExpressionType& matrix) : m_expression(matrix) {}$/;"	f	class:Eigen::ForceAlignedAccess
ForceAlignedAccess	include/Eigen/src/Core/ForceAlignedAccess.h	/^template<typename ExpressionType> class ForceAlignedAccess$/;"	c	namespace:Eigen
FromTwoVectors	include/Eigen/src/Geometry/Quaternion.h	/^Quaternion<Scalar,Options> Quaternion<Scalar,Options>::FromTwoVectors(const MatrixBase<Derived1>& a, const MatrixBase<Derived2>& b)$/;"	f	class:Eigen::Quaternion
FullPivHouseholderQR	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR()$/;"	f	class:Eigen::FullPivHouseholderQR
FullPivHouseholderQR	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR(Index rows, Index cols)$/;"	f	class:Eigen::FullPivHouseholderQR
FullPivHouseholderQR	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR(const MatrixType& matrix)$/;"	f	class:Eigen::FullPivHouseholderQR
FullPivHouseholderQR	include/Eigen/src/QR/FullPivHouseholderQR.h	/^template<typename _MatrixType> class FullPivHouseholderQR$/;"	c	namespace:Eigen
FullPivHouseholderQRMatrixQReturnType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  FullPivHouseholderQRMatrixQReturnType(const MatrixType&       qr,$/;"	f	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
FullPivHouseholderQRMatrixQReturnType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^template<typename MatrixType> struct FullPivHouseholderQRMatrixQReturnType$/;"	s	namespace:Eigen::internal
FullPivHouseholderQRPreconditioner	include/Eigen/src/Core/util/Constants.h	/^  FullPivHouseholderQRPreconditioner$/;"	e	enum:Eigen::QRPreconditioners
FullPivLU	include/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>::FullPivLU()$/;"	f	class:Eigen::FullPivLU
FullPivLU	include/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>::FullPivLU(Index rows, Index cols)$/;"	f	class:Eigen::FullPivLU
FullPivLU	include/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>::FullPivLU(const MatrixType& matrix)$/;"	f	class:Eigen::FullPivLU
FullPivLU	include/Eigen/src/LU/FullPivLU.h	/^template<typename _MatrixType> class FullPivLU$/;"	c	namespace:Eigen
FullPrecision	include/Eigen/src/Core/IO.h	/^       FullPrecision = -2 };$/;"	e	enum:Eigen::__anon175
FullyLazyCoeffBaseProductType	include/Eigen/src/Core/ProductBase.h	/^    typedef CoeffBasedProduct<LhsNested, RhsNested, 0> FullyLazyCoeffBaseProductType;$/;"	t	class:Eigen::ProductBase
FunctorType	include/Eigen/src/Core/util/Meta.h	/^    enum {FunctorType = sizeof(testFunctor(static_cast<Func*>(0)))};$/;"	e	enum:Eigen::internal::result_of::__anon316
FunctorType	include/Eigen/src/Core/util/Meta.h	/^    enum {FunctorType = sizeof(testFunctor(static_cast<Func*>(0)))};$/;"	e	enum:Eigen::internal::result_of::__anon317
GEMM_SPECIALIZATION	include/Eigen/src/Core/products/GeneralMatrixMatrix_MKL.h	49;"	d
GRAPH_H	include/base/graph.h	2;"	d
GRAPH_READER_H	include/base/reader_graph.h	2;"	d
GemmParallelInfo	include/Eigen/src/Core/products/Parallelizer.h	/^  GemmParallelInfo() : sync(-1), users(0), rhs_start(0), rhs_length(0) {}$/;"	f	struct:Eigen::internal::GemmParallelInfo
GemmParallelInfo	include/Eigen/src/Core/products/Parallelizer.h	/^template<typename Index> struct GemmParallelInfo$/;"	s	namespace:Eigen::internal
GemmProduct	include/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e	enum:Eigen::__anon271
GemvProduct	include/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e	enum:Eigen::__anon271
GenEigMask	include/Eigen/src/Core/util/Constants.h	/^  GenEigMask = Ax_lBx | ABx_lx | BAx_lx$/;"	e	enum:Eigen::DecompositionOptions
GeneralProduct	include/Eigen/src/Core/GeneralProduct.h	/^    GeneralProduct(const Lhs& a_lhs, const Rhs& a_rhs) : Base(a_lhs,a_rhs)$/;"	f	class:Eigen::GeneralProduct
GeneralProduct	include/Eigen/src/Core/GeneralProduct.h	/^    GeneralProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:Eigen::GeneralProduct
GeneralProduct	include/Eigen/src/Core/GeneralProduct.h	/^    GeneralProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:Eigen::GeneralProduct
GeneralProduct	include/Eigen/src/Core/GeneralProduct.h	/^class GeneralProduct<Lhs, Rhs, GemvProduct>$/;"	c	namespace:Eigen
GeneralProduct	include/Eigen/src/Core/GeneralProduct.h	/^class GeneralProduct<Lhs, Rhs, InnerProduct>$/;"	c	namespace:Eigen
GeneralProduct	include/Eigen/src/Core/GeneralProduct.h	/^class GeneralProduct<Lhs, Rhs, OuterProduct>$/;"	c	namespace:Eigen
GeneralProduct	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    GeneralProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:Eigen::GeneralProduct
GeneralProduct	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class GeneralProduct<Lhs, Rhs, GemmProduct>$/;"	c	namespace:Eigen
GeneralizedEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    GeneralizedEigenSolver() : m_eivec(), m_alphas(), m_betas(), m_isInitialized(false), m_realQZ(), m_matS(), m_tmp() {}$/;"	f	class:Eigen::GeneralizedEigenSolver
GeneralizedEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    GeneralizedEigenSolver(Index size)$/;"	f	class:Eigen::GeneralizedEigenSolver
GeneralizedEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    GeneralizedEigenSolver(const MatrixType& A, const MatrixType& B, bool computeEigenvectors = true)$/;"	f	class:Eigen::GeneralizedEigenSolver
GeneralizedEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^template<typename _MatrixType> class GeneralizedEigenSolver$/;"	c	namespace:Eigen
GeneralizedSelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    GeneralizedSelfAdjointEigenSolver() : Base() {}$/;"	f	class:Eigen::GeneralizedSelfAdjointEigenSolver
GeneralizedSelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    GeneralizedSelfAdjointEigenSolver(Index size)$/;"	f	class:Eigen::GeneralizedSelfAdjointEigenSolver
GeneralizedSelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    GeneralizedSelfAdjointEigenSolver(const MatrixType& matA, const MatrixType& matB,$/;"	f	class:Eigen::GeneralizedSelfAdjointEigenSolver
GeneralizedSelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^class GeneralizedSelfAdjointEigenSolver : public SelfAdjointEigenSolver<_MatrixType>$/;"	c	namespace:Eigen
Generic	include/Eigen/src/Core/util/Constants.h	/^    Generic = 0x0,$/;"	e	enum:Eigen::Architecture::Type
GenericNumTraits	include/Eigen/src/Core/NumTraits.h	/^template<typename T> struct GenericNumTraits$/;"	s	namespace:Eigen
GetAction	include/Eigen/src/Core/util/Constants.h	/^enum Action {GetAction, SetAction};$/;"	e	enum:Eigen::Action
GlobalLU_t	include/Eigen/src/SparseLU/SparseLUImpl.h	/^    typedef LU_GlobalLU_t<IndexVector, ScalarVector> GlobalLU_t; $/;"	t	class:Eigen::internal::SparseLUImpl
Graph	include/base/graph.h	/^					Graph<T>() : _m_is_directed(false), _m_is_weighted(false) {};$/;"	f	class:msd::base::Graph
Graph	include/base/graph.h	/^					Graph<T>(bool is_directed, bool is_weighted) : $/;"	f	class:msd::base::Graph
Graph	include/base/graph.h	/^					Graph<T>(size_type size, bool is_directed, bool is_weighted) : $/;"	f	class:msd::base::Graph
Graph	include/base/graph.h	/^			class Graph {$/;"	c	namespace:msd::base
GraphReader	include/base/reader_graph.h	/^				GraphReader<T>() : _m_graph(false, false) {};$/;"	f	class:msd::base::GraphReader
GraphReader	include/base/reader_graph.h	/^				GraphReader<T>(const std::string& file_name, $/;"	f	class:msd::base::GraphReader
GraphReader	include/base/reader_graph.h	/^			class GraphReader : Reader<T>$/;"	c	namespace:msd::base
HCoeffsType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_diag_type<MatrixType>::type HCoeffsType;$/;"	t	class:Eigen::ColPivHouseholderQR
HCoeffsType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename internal::plain_diag_type<MatrixType>::type HCoeffsType;$/;"	t	class:Eigen::FullPivHouseholderQR
HCoeffsType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  typedef typename internal::plain_diag_type<MatrixType>::type HCoeffsType;$/;"	t	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
HCoeffsType	include/Eigen/src/QR/HouseholderQR.h	/^    typedef typename internal::plain_diag_type<MatrixType>::type HCoeffsType;$/;"	t	class:Eigen::HouseholderQR
HDim	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^    HDim = _Dim+1   \/\/\/< size of a respective homogeneous vector$/;"	e	enum:Eigen::Transform::__anon345
HDim	include/Eigen/src/Geometry/Transform.h	/^    HDim = Transform::HDim,$/;"	e	enum:Eigen::internal::transform_traits::__anon382
HDim	include/Eigen/src/Geometry/Transform.h	/^    HDim = TransformType::HDim,$/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon386
HDim	include/Eigen/src/Geometry/Transform.h	/^    HDim = TransformType::HDim,$/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon387
HDim	include/Eigen/src/Geometry/Transform.h	/^    HDim = _Dim+1,  \/\/\/< size of a respective homogeneous vector$/;"	e	enum:Eigen::Transform::__anon383
HNormalizedReturnType	include/Eigen/src/Core/MatrixBase.h	/^                const ConstStartMinusOne > HNormalizedReturnType;$/;"	t	class:Eigen::MatrixBase
HNormalizedReturnType	include/Eigen/src/Core/VectorwiseOp.h	/^            HNormalizedReturnType;$/;"	t	class:Eigen::VectorwiseOp
HNormalized_Block	include/Eigen/src/Core/VectorwiseOp.h	/^            HNormalized_Block;$/;"	t	class:Eigen::VectorwiseOp
HNormalized_Factors	include/Eigen/src/Core/VectorwiseOp.h	/^            HNormalized_Factors;$/;"	t	class:Eigen::VectorwiseOp
HNormalized_Size	include/Eigen/src/Core/VectorwiseOp.h	/^      HNormalized_Size = Direction==Vertical ? internal::traits<ExpressionType>::RowsAtCompileTime$/;"	e	enum:Eigen::VectorwiseOp::__anon334
HNormalized_SizeMinusOne	include/Eigen/src/Core/VectorwiseOp.h	/^      HNormalized_SizeMinusOne = HNormalized_Size==Dynamic ? Dynamic : HNormalized_Size-1$/;"	e	enum:Eigen::VectorwiseOp::__anon334
HalfLength	include/Eigen/src/Core/Redux.h	/^    HalfLength = Length\/2$/;"	e	enum:Eigen::internal::redux_novec_unroller::__anon231
HalfLength	include/Eigen/src/Core/Redux.h	/^    HalfLength = Length\/2$/;"	e	enum:Eigen::internal::redux_vec_unroller::__anon233
HasACos	include/Eigen/src/Core/GenericPacketMath.h	/^    HasACos   = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasASin	include/Eigen/src/Core/GenericPacketMath.h	/^    HasASin   = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasATan	include/Eigen/src/Core/GenericPacketMath.h	/^    HasATan   = 0$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasAbs	include/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasAbs	include/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs    = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasAbs	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasAbs    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasAbs	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasAbs    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasAbs	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAbs    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasAbs	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAbs    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasAbs2	include/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs2   = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasAbs2	include/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs2   = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasAbs2	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasAbs2   = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasAbs2	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasAbs2   = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasAbs2	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAbs2   = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasAbs2	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAbs2   = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasAdd	include/Eigen/src/Core/GenericPacketMath.h	/^    HasAdd    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasAdd	include/Eigen/src/Core/GenericPacketMath.h	/^    HasAdd    = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasAdd	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasAdd    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasAdd	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasAdd    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasAdd	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAdd    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasAdd	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAdd    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasConj	include/Eigen/src/Core/GenericPacketMath.h	/^    HasConj   = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasConj	include/Eigen/src/Core/GenericPacketMath.h	/^    HasConj   = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasCos	include/Eigen/src/Core/GenericPacketMath.h	/^    HasCos    = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasCos	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasCos  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon7
HasCos	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasCos  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
HasCos	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasCos  = EIGEN_FAST_MATH,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
HasDirectAccess	include/Eigen/src/Core/Ref.h	/^      HasDirectAccess = internal::has_direct_access<Derived>::ret,$/;"	e	enum:Eigen::internal::traits::match::__anon237
HasDiv	include/Eigen/src/Core/GenericPacketMath.h	/^    HasDiv    = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasDiv	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasDiv    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasDiv	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasDiv    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasDiv	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasDiv  = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
HasDiv	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasDiv    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasDiv	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasDiv    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasDiv	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasDiv  = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
HasDiv	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasDiv  = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon25
HasExp	include/Eigen/src/Core/GenericPacketMath.h	/^    HasExp    = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasExp	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasExp  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon7
HasExp	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasExp  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
HasExp	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasExp  = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
HasExp	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasExp  = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon25
HasLog	include/Eigen/src/Core/GenericPacketMath.h	/^    HasLog    = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasLog	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasLog  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon7
HasLog	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasLog  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
HasLog	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasLog  = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
HasMax	include/Eigen/src/Core/GenericPacketMath.h	/^    HasMax    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasMax	include/Eigen/src/Core/GenericPacketMath.h	/^    HasMax    = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasMax	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasMax    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasMax	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasMax    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasMax	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMax    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasMax	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMax    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasMin	include/Eigen/src/Core/GenericPacketMath.h	/^    HasMin    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasMin	include/Eigen/src/Core/GenericPacketMath.h	/^    HasMin    = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasMin	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasMin    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasMin	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasMin    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasMin	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMin    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasMin	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMin    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasMul	include/Eigen/src/Core/GenericPacketMath.h	/^    HasMul    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasMul	include/Eigen/src/Core/GenericPacketMath.h	/^    HasMul    = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasMul	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasMul    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasMul	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasMul    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasMul	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMul    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasMul	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMul    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasNegate	include/Eigen/src/Core/GenericPacketMath.h	/^    HasNegate = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasNegate	include/Eigen/src/Core/GenericPacketMath.h	/^    HasNegate = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasNegate	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasNegate = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasNegate	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasNegate = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasNegate	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasNegate = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasNegate	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasNegate = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasNoInnerStride	include/Eigen/src/Core/Map.h	/^    HasNoInnerStride = InnerStrideAtCompileTime == 1,$/;"	e	enum:Eigen::internal::traits::__anon176
HasNoOuterStride	include/Eigen/src/Core/Map.h	/^    HasNoOuterStride = StrideType::OuterStrideAtCompileTime == 0,$/;"	e	enum:Eigen::internal::traits::__anon176
HasNoStride	include/Eigen/src/Core/Map.h	/^    HasNoStride = HasNoInnerStride && HasNoOuterStride,$/;"	e	enum:Eigen::internal::traits::__anon176
HasPow	include/Eigen/src/Core/GenericPacketMath.h	/^    HasPow    = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasSameStorageOrderAsXprType	include/Eigen/src/Core/Block.h	/^    HasSameStorageOrderAsXprType = (IsRowMajor == XprTypeIsRowMajor),$/;"	e	enum:Eigen::internal::traits::__anon49
HasSetLinear	include/Eigen/src/Core/GenericPacketMath.h	/^    HasSetLinear = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasSetLinear	include/Eigen/src/Core/GenericPacketMath.h	/^    HasSetLinear = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasSetLinear	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasSetLinear = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasSetLinear	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasSetLinear = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasSetLinear	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasSetLinear = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasSetLinear	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasSetLinear = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasSin	include/Eigen/src/Core/GenericPacketMath.h	/^    HasSin    = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasSin	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasSin  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon7
HasSin	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasSin  = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
HasSin	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasSin  = EIGEN_FAST_MATH,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
HasSqrt	include/Eigen/src/Core/GenericPacketMath.h	/^    HasSqrt   = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasSqrt	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasSqrt = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon7
HasSqrt	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasSqrt = 0$/;"	e	enum:Eigen::internal::packet_traits::__anon13
HasSqrt	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasSqrt = 1$/;"	e	enum:Eigen::internal::packet_traits::__anon24
HasSqrt	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasSqrt = 1$/;"	e	enum:Eigen::internal::packet_traits::__anon25
HasSub	include/Eigen/src/Core/GenericPacketMath.h	/^    HasSub    = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon173
HasSub	include/Eigen/src/Core/GenericPacketMath.h	/^    HasSub    = 1,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasSub	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasSub    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
HasSub	include/Eigen/src/Core/arch/NEON/Complex.h	/^    HasSub    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
HasSub	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasSub    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
HasSub	include/Eigen/src/Core/arch/SSE/Complex.h	/^    HasSub    = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
HasTan	include/Eigen/src/Core/GenericPacketMath.h	/^    HasTan    = 0,$/;"	e	enum:Eigen::internal::default_packet_traits::__anon171
HasUnitDiag	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^    HasUnitDiag = (Mode & UnitDiag)==UnitDiag,$/;"	e	enum:Eigen::internal::triangular_matrix_vector_product::__anon221
HasUnitDiag	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^    HasUnitDiag = (Mode & UnitDiag)==UnitDiag,$/;"	e	enum:Eigen::internal::triangular_matrix_vector_product::__anon222
HasUnitDiag	include/Eigen/src/SparseCore/SparseTriangularView.h	/^           HasUnitDiag = (Mode&UnitDiag) ? 1 : 0$/;"	e	enum:Eigen::SparseTriangularView::__anon444
HasUsableDirectAccess	include/Eigen/src/Core/util/BlasUtil.h	/^    HasUsableDirectAccess = (    (int(XprType::Flags)&DirectAccessBit)$/;"	e	enum:Eigen::internal::blas_traits::__anon260
HasZeroDiag	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^    HasZeroDiag = (Mode & ZeroDiag)==ZeroDiag$/;"	e	enum:Eigen::internal::triangular_matrix_vector_product::__anon221
HasZeroDiag	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^    HasZeroDiag = (Mode & ZeroDiag)==ZeroDiag$/;"	e	enum:Eigen::internal::triangular_matrix_vector_product::__anon222
HereditaryBits	include/Eigen/src/Core/util/Constants.h	/^const unsigned int HereditaryBits = RowMajorBit$/;"	m	namespace:Eigen
HessenbergDecomposition	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecomposition(Index size = Size==Dynamic ? 2 : Size)$/;"	f	class:Eigen::HessenbergDecomposition
HessenbergDecomposition	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecomposition(const MatrixType& matrix)$/;"	f	class:Eigen::HessenbergDecomposition
HessenbergDecomposition	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^template<typename _MatrixType> class HessenbergDecomposition$/;"	c	namespace:Eigen
HessenbergDecompositionMatrixHReturnType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecompositionMatrixHReturnType(const HessenbergDecomposition<MatrixType>& hess) : m_hess(hess) { }$/;"	f	struct:Eigen::internal::HessenbergDecompositionMatrixHReturnType
HessenbergDecompositionMatrixHReturnType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^template<typename MatrixType> struct HessenbergDecompositionMatrixHReturnType$/;"	s	namespace:Eigen::internal
Homogeneous	include/Eigen/src/Geometry/Homogeneous.h	/^    inline Homogeneous(const MatrixType& matrix)$/;"	f	class:Eigen::Homogeneous
Homogeneous	include/Eigen/src/Geometry/Homogeneous.h	/^template<typename MatrixType,int _Direction> class Homogeneous$/;"	c	namespace:Eigen
HomogeneousDimension	include/Eigen/src/Geometry/Umeyama.h	/^    HomogeneousDimension = int(MinRowsAtCompileTime) == Dynamic ? Dynamic : int(MinRowsAtCompileTime)+1$/;"	e	enum:Eigen::internal::umeyama_transform_matrix_type::__anon390
HomogeneousReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef Homogeneous<Derived, HomogeneousReturnTypeDirection> HomogeneousReturnType;$/;"	t	class:Eigen::MatrixBase
HomogeneousReturnTypeDirection	include/Eigen/src/Core/MatrixBase.h	/^    enum { HomogeneousReturnTypeDirection = ColsAtCompileTime==1?Vertical:Horizontal };$/;"	e	enum:Eigen::MatrixBase::__anon186
Horizontal	include/Eigen/src/Core/util/Constants.h	/^  Horizontal, $/;"	e	enum:Eigen::DirectionType
HouseholderQR	include/Eigen/src/QR/HouseholderQR.h	/^    HouseholderQR() : m_qr(), m_hCoeffs(), m_temp(), m_isInitialized(false) {}$/;"	f	class:Eigen::HouseholderQR
HouseholderQR	include/Eigen/src/QR/HouseholderQR.h	/^    HouseholderQR(Index rows, Index cols)$/;"	f	class:Eigen::HouseholderQR
HouseholderQR	include/Eigen/src/QR/HouseholderQR.h	/^    HouseholderQR(const MatrixType& matrix)$/;"	f	class:Eigen::HouseholderQR
HouseholderQR	include/Eigen/src/QR/HouseholderQR.h	/^template<typename _MatrixType> class HouseholderQR$/;"	c	namespace:Eigen
HouseholderQRPreconditioner	include/Eigen/src/Core/util/Constants.h	/^  HouseholderQRPreconditioner,$/;"	e	enum:Eigen::QRPreconditioners
HouseholderSequence	include/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence(const HouseholderSequence& other)$/;"	f	class:Eigen::HouseholderSequence
HouseholderSequence	include/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence(const VectorsType& v, const CoeffsType& h)$/;"	f	class:Eigen::HouseholderSequence
HouseholderSequence	include/Eigen/src/Householder/HouseholderSequence.h	/^template<typename VectorsType, typename CoeffsType, int Side> class HouseholderSequence$/;"	c	namespace:Eigen
HouseholderSequenceType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef HouseholderSequence<MatrixType,typename internal::remove_all<typename CoeffVectorType::ConjugateReturnType>::type> HouseholderSequenceType;$/;"	t	class:Eigen::HessenbergDecomposition
HouseholderSequenceType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef HouseholderSequence<MatrixType,typename internal::remove_all<typename CoeffVectorType::ConjugateReturnType>::type> HouseholderSequenceType;$/;"	t	class:Eigen::Tridiagonalization
HouseholderSequenceType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename Tridiagonalization<MatrixType>::HouseholderSequenceType HouseholderSequenceType;$/;"	t	struct:Eigen::internal::tridiagonalization_inplace_selector
HouseholderSequenceType	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef HouseholderSequence<VectorsType, CoeffsType, OnTheLeft> HouseholderSequenceType;$/;"	t	struct:Eigen::internal::hseq_side_dependent_impl
HouseholderSequenceType	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef HouseholderSequence<VectorsType, CoeffsType, OnTheRight> HouseholderSequenceType;$/;"	t	struct:Eigen::internal::hseq_side_dependent_impl
HouseholderSequenceType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef HouseholderSequence<MatrixType,typename internal::remove_all<typename HCoeffsType::ConjugateReturnType>::type> HouseholderSequenceType;$/;"	t	class:Eigen::ColPivHouseholderQR
HouseholderSequenceType	include/Eigen/src/QR/HouseholderQR.h	/^    typedef HouseholderSequence<MatrixType,typename internal::remove_all<typename HCoeffsType::ConjugateReturnType>::type> HouseholderSequenceType;$/;"	t	class:Eigen::HouseholderQR
HouseholderUSequenceType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^            > HouseholderUSequenceType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
HouseholderVSequenceType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^            > HouseholderVSequenceType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/All.h	112;"	d
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/All.h	57;"	d
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  explicit Hyperplane(const ParametrizedLine<Scalar, AmbientDimAtCompileTime>& parametrized)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane() {}$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, Scalar d)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, const VectorType& e)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(const Hyperplane<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(int _dim) : m_coeffs(_dim+1) {}$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^class Hyperplane$/;"	c	namespace:Eigen
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  Hyperplane(const Hyperplane<Scalar,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  explicit Hyperplane(const ParametrizedLine<Scalar, AmbientDimAtCompileTime>& parametrized)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane() {}$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, const Scalar& d)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, const VectorType& e)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(Index _dim) : m_coeffs(_dim+1) {}$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(const Hyperplane<OtherScalarType,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:Eigen::Hyperplane
Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^class Hyperplane$/;"	c	namespace:Eigen
I	include/Eigen/src/Core/SolveTriangular.h	/^    I = IsLower ? Index : Size - Index - 1,$/;"	e	enum:Eigen::internal::triangular_solver_unroller::__anon251
IMPLICIT_CONVERSION_TO_SCALAR_IS_FOR_INNER_PRODUCT_ONLY	include/Eigen/src/Core/util/StaticAssert.h	/^        IMPLICIT_CONVERSION_TO_SCALAR_IS_FOR_INNER_PRODUCT_ONLY,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
INVALID_MATRIXBASE_TEMPLATE_PARAMETERS	include/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIXBASE_TEMPLATE_PARAMETERS,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
INVALID_MATRIX_PRODUCT	include/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIX_PRODUCT,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION	include/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
INVALID_MATRIX_TEMPLATE_PARAMETERS	include/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIX_TEMPLATE_PARAMETERS,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION	include/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS	include/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
IOFormat	include/Eigen/src/Core/IO.h	/^  IOFormat(int _precision = StreamPrecision, int _flags = 0,$/;"	f	struct:Eigen::IOFormat
IOFormat	include/Eigen/src/Core/IO.h	/^struct IOFormat$/;"	s	namespace:Eigen
Identity	include/Eigen/src/Core/CwiseNullaryOp.h	/^MatrixBase<Derived>::Identity()$/;"	f	class:Eigen::MatrixBase
Identity	include/Eigen/src/Core/CwiseNullaryOp.h	/^MatrixBase<Derived>::Identity(Index nbRows, Index nbCols)$/;"	f	class:Eigen::MatrixBase
Identity	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  static inline Quaternion Identity() { return Quaternion(1, 0, 0, 0); }$/;"	f	class:Eigen::Quaternion
Identity	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  static const typename MatrixType::IdentityReturnType Identity()$/;"	f	class:Eigen::Transform
Identity	include/Eigen/src/Geometry/AngleAxis.h	/^  static inline const AngleAxis Identity() { return AngleAxis(0, Vector3::UnitX()); }$/;"	f	class:Eigen::AngleAxis
Identity	include/Eigen/src/Geometry/Quaternion.h	/^  static inline Quaternion<Scalar> Identity() { return Quaternion<Scalar>(1, 0, 0, 0); }$/;"	f	class:Eigen::QuaternionBase
Identity	include/Eigen/src/Geometry/Rotation2D.h	/^  static inline Rotation2D Identity() { return Rotation2D(0); }$/;"	f	class:Eigen::Rotation2D
Identity	include/Eigen/src/Geometry/Transform.h	/^  static const Transform Identity()$/;"	f	class:Eigen::Transform
Identity	include/Eigen/src/Geometry/Translation.h	/^  static const Translation Identity() { return Translation(VectorType::Zero()); }$/;"	f	class:Eigen::Translation
IdentityPreconditioner	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    IdentityPreconditioner() {}$/;"	f	class:Eigen::IdentityPreconditioner
IdentityPreconditioner	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    IdentityPreconditioner(const MatrixType& ) {}$/;"	f	class:Eigen::IdentityPreconditioner
IdentityPreconditioner	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^class IdentityPreconditioner$/;"	c	namespace:Eigen
IdentityReturnType	include/Eigen/src/Core/MatrixBase.h	/^    typedef CwiseNullaryOp<internal::scalar_identity_op<Scalar>,Derived> IdentityReturnType;$/;"	t	class:Eigen::MatrixBase
ImagReturnType	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryOp<internal::scalar_imag_op<Scalar>, const Derived> ImagReturnType;$/;"	t
ImageResultType	include/Eigen/src/Eigen2Support/LU.h	/^    > ImageResultType;$/;"	t	class:Eigen::LU
Impl	include/Eigen/src/Core/Block.h	/^    typedef BlockImpl<XprType, BlockRows, BlockCols, InnerPanel, typename internal::traits<XprType>::StorageKind> Impl;$/;"	t	class:Eigen::Block
Impl	include/Eigen/src/Core/Block.h	/^    typedef internal::BlockImpl_dense<XprType, BlockRows, BlockCols, InnerPanel> Impl;$/;"	t	class:Eigen::BlockImpl
IncompleteLUT	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    IncompleteLUT()$/;"	f	class:Eigen::IncompleteLUT
IncompleteLUT	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    IncompleteLUT(const MatrixType& mat, const RealScalar& droptol=NumTraits<Scalar>::dummy_precision(), int fillfactor = 10)$/;"	f	class:Eigen::IncompleteLUT
IncompleteLUT	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^class IncompleteLUT : internal::noncopyable$/;"	c	namespace:Eigen
Indefinite	include/Eigen/src/Cholesky/LDLT.h	/^  enum SignMatrix { PositiveSemiDef, NegativeSemiDef, ZeroSign, Indefinite };$/;"	e	enum:Eigen::internal::SignMatrix
Index	include/Eigen/src/Cholesky/LDLT.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::LDLT
Index	include/Eigen/src/Cholesky/LLT.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::LLT
Index	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::CholmodBase
Index	include/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::ArrayBase
Index	include/Eigen/src/Core/Assign.h	/^  typedef typename Derived1::Index Index;$/;"	t	struct:Eigen::internal::assign_impl
Index	include/Eigen/src/Core/Assign_MKL.h	/^  typedef typename Derived1::Index Index;$/;"	t	struct:Eigen::internal::vml_assign_impl
Index	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename Base::Index Index;$/;"	t	class:Eigen::internal::TridiagonalMatrix
Index	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename DenseMatrixType::Index Index;$/;"	t	class:Eigen::internal::BandMatrixBase
Index	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrix>::Index Index;$/;"	t	class:Eigen::internal::BandMatrix
Index	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrixWrapper>::Index Index;$/;"	t	class:Eigen::internal::BandMatrixWrapper
Index	include/Eigen/src/Core/BandMatrix.h	/^  typedef DenseIndex Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/BandMatrix.h	/^  typedef typename _CoefficientsType::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/Block.h	/^    typedef typename XprType::Index Index;$/;"	t	class:Eigen::BlockImpl
Index	include/Eigen/src/Core/CommaInitializer.h	/^  typedef typename XprType::Index Index;$/;"	t	struct:Eigen::CommaInitializer
Index	include/Eigen/src/Core/CoreIterators.h	/^    typedef typename Derived::Index Index;$/;"	t	class:Eigen::DenseBase::InnerIterator
Index	include/Eigen/src/Core/CwiseBinaryOp.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/CwiseNullaryOp.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::setIdentity_impl
Index	include/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::traits<Derived>::Index Index; $/;"	t	class:Eigen::DenseBase
Index	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::DenseCoeffsBase
Index	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::DiagonalBase
Index	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<DiagonalMatrix>::Index Index;$/;"	t	class:Eigen::DiagonalMatrix
Index	include/Eigen/src/Core/DiagonalMatrix.h	/^  typedef DenseIndex Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/DiagonalMatrix.h	/^  typedef typename DiagonalVectorType::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/EigenBase.h	/^  typedef typename internal::traits<Derived>::Index Index;$/;"	t	struct:Eigen::EigenBase
Index	include/Eigen/src/Core/Map.h	/^  typedef typename PlainObjectType::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/MapBase.h	/^    typedef typename Base::Index Index;$/;"	t	class:Eigen::MapBase
Index	include/Eigen/src/Core/MapBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::MapBase
Index	include/Eigen/src/Core/Matrix.h	/^  typedef DenseIndex Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::MatrixBase
Index	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Eigen::Map
Index	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::permut_matrix_product_retval
Index	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::Index Index;$/;"	t	class:Eigen::PermutationBase
Index	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef IndexType Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef typename _IndicesType::Scalar Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::PlainObjectBase
Index	include/Eigen/src/Core/PlainObjectBase.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::conservative_resize_like_impl
Index	include/Eigen/src/Core/ProductBase.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::redux_impl
Index	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SelfAdjointView
Index	include/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename Derived1::Index Index;$/;"	t	struct:Eigen::internal::triangular_assignment_selector
Index	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Base::Index Index;$/;"	t	struct:Eigen::internal::triangular_solve_retval
Index	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Rhs::Index Index;$/;"	t	struct:Eigen::internal::triangular_solver_selector
Index	include/Eigen/src/Core/Stride.h	/^    typedef DenseIndex Index;$/;"	t	class:Eigen::InnerStride
Index	include/Eigen/src/Core/Stride.h	/^    typedef DenseIndex Index;$/;"	t	class:Eigen::OuterStride
Index	include/Eigen/src/Core/Stride.h	/^    typedef DenseIndex Index;$/;"	t	class:Eigen::Stride
Index	include/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Eigen::Map
Index	include/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Eigen::Transpositions
Index	include/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Eigen::TranspositionsBase
Index	include/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Eigen::TranspositionsWrapper
Index	include/Eigen/src/Core/Transpositions.h	/^    typedef typename TranspositionType::Index Index;$/;"	t	struct:Eigen::internal::transposition_matrix_product_retval
Index	include/Eigen/src/Core/Transpositions.h	/^  typedef IndexType Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/Transpositions.h	/^  typedef typename _IndicesType::Scalar Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::TriangularBase
Index	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::Index Index;$/;"	t	class:Eigen::TriangularView
Index	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename Derived1::Index Index;$/;"	t	struct:Eigen::internal::triangular_assignment_selector
Index	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::Index Index;$/;"	t	class:Eigen::VectorwiseOp
Index	include/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::coeff_visitor
Index	include/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::max_coeff_visitor
Index	include/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::min_coeff_visitor
Index	include/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::visitor_impl
Index	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^                                         typename traits<_RhsNested>::Index>::type Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:Eigen::internal::product_coeff_impl
Index	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:Eigen::internal::product_coeff_vectorized_dyn_selector
Index	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:Eigen::internal::product_coeff_vectorized_unroller
Index	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:Eigen::internal::product_packet_impl
Index	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::ComplexEigenSolver
Index	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::ComplexSchur
Index	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::EigenSolver
Index	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::GeneralizedEigenSolver
Index	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    typedef typename Base::Index Index;$/;"	t	class:Eigen::GeneralizedSelfAdjointEigenSolver
Index	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::HessenbergDecomposition
Index	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::HessenbergDecompositionMatrixHReturnType
Index	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::RealQZ
Index	include/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::RealSchur
Index	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SelfAdjointEigenSolver
Index	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::Tridiagonalization
Index	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::TridiagonalizationMatrixTReturnType
Index	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::tridiagonalization_inplace_selector
Index	include/Eigen/src/Geometry/AlignedBox.h	/^  typedef DenseIndex                                Index;$/;"	t	class:Eigen::AlignedBox
Index	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::homogeneous_left_product_impl
Index	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::homogeneous_right_product_impl
Index	include/Eigen/src/Geometry/Hyperplane.h	/^  typedef DenseIndex Index;$/;"	t	class:Eigen::Hyperplane
Index	include/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:Eigen::internal::unitOrthogonal_selector
Index	include/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef DenseIndex Index;$/;"	t	class:Eigen::ParametrizedLine
Index	include/Eigen/src/Geometry/Quaternion.h	/^  typedef DenseIndex Index;$/;"	t	struct:Eigen::internal::quaternionbase_assign_impl
Index	include/Eigen/src/Geometry/Transform.h	/^  typedef DenseIndex Index;$/;"	t	class:Eigen::Transform
Index	include/Eigen/src/Householder/HouseholderSequence.h	/^    typedef typename VectorsType::Index Index;$/;"	t	class:Eigen::HouseholderSequence
Index	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::Index Index;$/;"	t	struct:Eigen::internal::hseq_side_dependent_impl
Index	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    typedef typename Vector::Index Index;$/;"	t	class:Eigen::DiagonalPreconditioner
Index	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::BiCGSTAB
Index	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::ConjugateGradient
Index	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    typedef typename FactorType::Index Index;$/;"	t	class:Eigen::IncompleteLUT
Index	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::IterativeSolverBase
Index	include/Eigen/src/LU/FullPivLU.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::FullPivLU
Index	include/Eigen/src/LU/Inverse.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::inverse_impl
Index	include/Eigen/src/LU/PartialPivLU.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::PartialPivLU
Index	include/Eigen/src/LU/PartialPivLU.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::partial_lu_impl
Index	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::PastixBase
Index	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::PastixLU
Index	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename _MatrixType::Index Index;$/;"	t	struct:Eigen::internal::pastix_traits
Index	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef long long int Index;$/;"	t	struct:Eigen::internal::pardiso_run_selector
Index	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::Index Index;$/;"	t	class:Eigen::PardisoLDLT
Index	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::Index Index;$/;"	t	class:Eigen::PardisoLLT
Index	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Traits::Index Index;$/;"	t	class:Eigen::PardisoImpl
Index	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename _MatrixType::Index Index;    $/;"	t	struct:Eigen::internal::pardiso_traits
Index	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename _MatrixType::Index Index;$/;"	t	struct:Eigen::internal::pardiso_traits
Index	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::ColPivHouseholderQR
Index	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::FullPivHouseholderQR
Index	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
Index	include/Eigen/src/QR/HouseholderQR.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::HouseholderQR
Index	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    typedef UF_long Index ; $/;"	t	class:Eigen::SPQR
Index	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  typedef typename SPQRType::Index Index;$/;"	t	struct:Eigen::SPQR_QProduct
Index	include/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::JacobiSVD
Index	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
Index	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename SVD::Index Index;$/;"	t	struct:Eigen::internal::svd_precondition_2x2_block_to_be_real
Index	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::internal::UpperBidiagonalization
Index	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SimplicialCholesky
Index	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SimplicialCholeskyBase
Index	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SimplicialLDLT
Index	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SimplicialLLT
Index	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef typename MatrixType::Index                              Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef typename MatrixType::Index                          Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/AmbiVector.h	/^    typedef _Index Index;$/;"	t	class:Eigen::internal::AmbiVector
Index	include/Eigen/src/SparseCore/CompressedStorage.h	/^    typedef _Index Index;$/;"	t	class:Eigen::internal::CompressedStorage
Index	include/Eigen/src/SparseCore/SparseBlock.h	/^        typedef typename BlockImpl::Index Index;$/;"	t	class:Eigen::BlockImpl::InnerIterator
Index	include/Eigen/src/SparseCore/SparseBlock.h	/^        typedef typename BlockImpl::Index Index;$/;"	t	class:Eigen::BlockImpl::ReverseInnerIterator
Index	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename Lhs::Index Index;$/;"	t	class:Eigen::CwiseBinaryOpImpl::InnerIterator
Index	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename Lhs::Index Index;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
Index	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef typename SparseDenseOuterProduct::Index Index;$/;"	t	class:Eigen::SparseDenseOuterProduct::InnerIterator
Index	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:Eigen::internal::sparse_time_dense_product_impl
Index	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    typedef typename Lhs::Index Index;$/;"	t	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
Index	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef _Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:Eigen::SparseMatrixBase
Index	include/Eigen/src/SparseCore/SparsePermutation.h	/^    typedef typename MatrixTypeNestedCleaned::Index Index;$/;"	t	struct:Eigen::internal::permut_sparsematrix_product_retval
Index	include/Eigen/src/SparseCore/SparsePermutation.h	/^  typedef typename MatrixTypeNestedCleaned::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/SparseProduct.h	/^                                         typename traits<_RhsNested>::Index>::type Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef typename internal::traits<Lhs>::Index Index;$/;"	t	struct:Eigen::SparseSparseProductReturnType
Index	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SparseSelfAdjointView
Index	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SparseSymmetricPermutationProduct
Index	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typedef typename TransposeImpl::Index Index;$/;"	t	class:Eigen::TransposeImpl::InnerIterator
Index	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typedef typename TransposeImpl::Index Index;$/;"	t	class:Eigen::TransposeImpl::ReverseInnerIterator
Index	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    typedef typename SparseTriangularView::Index Index;$/;"	t	class:Eigen::SparseTriangularView::InnerIterator
Index	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    typedef typename SparseTriangularView::Index Index;$/;"	t	class:Eigen::SparseTriangularView::ReverseInnerIterator
Index	include/Eigen/src/SparseCore/SparseVector.h	/^  typedef _Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/SparseView.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseCore/SparseView.h	/^  typedef typename SparseView::Index Index;$/;"	t	class:Eigen::SparseView::InnerIterator
Index	include/Eigen/src/SparseCore/TriangularSolver.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:Eigen::internal::sparse_solve_triangular_sparse_selector
Index	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef typename MatrixType::Index Index; $/;"	t	class:Eigen::SparseLU
Index	include/Eigen/src/SparseLU/SparseLU.h	/^  typedef typename MappedSupernodalType::Index Index;$/;"	t	struct:Eigen::SparseLUMatrixLReturnType
Index	include/Eigen/src/SparseLU/SparseLU.h	/^  typedef typename MatrixLType::Index Index;$/;"	t	struct:Eigen::SparseLUMatrixUReturnType
Index	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  typedef typename IndexVector::Scalar Index; $/;"	t	struct:Eigen::internal::LU_GlobalLU_t
Index	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    typedef _Index Index;$/;"	t	class:Eigen::internal::MappedSuperNodalMatrix
Index	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  typedef typename IndexVector::Scalar Index;$/;"	t	struct:Eigen::internal::column_dfs_traits
Index	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^  typedef typename IndexVector::Scalar Index;$/;"	t	struct:Eigen::internal::panel_dfs_traits
Index	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SparseQR
Index	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef typename ReturnType::Index Index;$/;"	t	struct:Eigen::internal::traits
Index	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef typename SparseQRType::Index Index;$/;"	t	struct:Eigen::SparseQRMatrixQReturnType
Index	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef typename SparseQRType::Index Index;$/;"	t	struct:Eigen::SparseQR_QProduct
Index	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::Index Index;$/;"	t	class:Eigen::SuperILU
Index	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::Index Index;$/;"	t	class:Eigen::SuperLU
Index	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::SuperLUBase
Index	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Eigen::UmfPackLU
Index	include/Eigen/src/misc/Image.h	/^  typedef typename Base::Index Index;$/;"	t	struct:Eigen::internal::image_retval_base
Index	include/Eigen/src/misc/Kernel.h	/^  typedef typename Base::Index Index;$/;"	t	struct:Eigen::internal::kernel_retval_base
Index	include/Eigen/src/misc/Solve.h	/^  typedef typename Base::Index Index;$/;"	t	struct:Eigen::internal::solve_retval_base
Index	include/Eigen/src/misc/SparseSolve.h	/^  typedef typename Base::Index Index;$/;"	t	struct:Eigen::internal::sparse_solve_retval_base
Index	include/Eigen/src/misc/SparseSolve.h	/^  typedef typename DecompositionType::Index Index;$/;"	t	struct:Eigen::internal::solve_retval_with_guess
IndexVector	include/Eigen/src/MetisSupport/MetisSupport.h	/^  typedef Matrix<Index,Dynamic,1> IndexVector; $/;"	t	class:Eigen::MetisOrdering
IndexVector	include/Eigen/src/OrderingMethods/Ordering.h	/^    typedef Matrix<Index, Dynamic, 1> IndexVector;$/;"	t	class:Eigen::COLAMDOrdering
IndexVector	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef Matrix<Index,Dynamic,1> IndexVector;$/;"	t	class:Eigen::SparseLU
IndexVector	include/Eigen/src/SparseLU/SparseLUImpl.h	/^    typedef Matrix<Index,Dynamic,1> IndexVector; $/;"	t	class:Eigen::internal::SparseLUImpl
IndexVector	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    typedef Matrix<Index,Dynamic,1> IndexVector; $/;"	t	class:Eigen::internal::MappedSuperNodalMatrix
IndexVector	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef Matrix<Index, Dynamic, 1> IndexVector;$/;"	t	class:Eigen::SparseQR
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename PermutationType::IndicesType IndicesType;$/;"	t	class:Eigen::Transpose
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::Map
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::PermutationBase
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::PermutationMatrix
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::PermutationWrapper
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef Map<const Matrix<IndexType, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1>, _PacketAccess> IndicesType;$/;"	t	struct:Eigen::internal::traits
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef Matrix<IndexType, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1> IndicesType;$/;"	t	struct:Eigen::internal::traits
IndicesType	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef _IndicesType IndicesType;$/;"	t	struct:Eigen::internal::traits
IndicesType	include/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::Map
IndicesType	include/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::Transpositions
IndicesType	include/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::TranspositionsBase
IndicesType	include/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Eigen::TranspositionsWrapper
IndicesType	include/Eigen/src/Core/Transpositions.h	/^    typedef typename TranspositionType::IndicesType IndicesType;$/;"	t	class:Eigen::Transpose
IndicesType	include/Eigen/src/Core/Transpositions.h	/^  typedef Map<const Matrix<Index,SizeAtCompileTime,1,0,MaxSizeAtCompileTime,1>, _PacketAccess> IndicesType;$/;"	t	struct:Eigen::internal::traits
IndicesType	include/Eigen/src/Core/Transpositions.h	/^  typedef Matrix<Index, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1> IndicesType;$/;"	t	struct:Eigen::internal::traits
IndicesType	include/Eigen/src/Core/Transpositions.h	/^  typedef _IndicesType IndicesType;$/;"	t	struct:Eigen::internal::traits
Infinity	include/Eigen/src/Core/util/Constants.h	/^const int Infinity = -1;$/;"	m	namespace:Eigen
InnerIterator	include/Eigen/src/Core/CoreIterators.h	/^    EIGEN_STRONG_INLINE InnerIterator(const Derived& expr, Index outer)$/;"	f	class:Eigen::DenseBase::InnerIterator
InnerIterator	include/Eigen/src/Core/CoreIterators.h	/^template<typename Derived> class DenseBase<Derived>::InnerIterator$/;"	c	class:Eigen::DenseBase
InnerIterator	include/Eigen/src/Core/Flagged.h	/^    typedef typename ExpressionType::InnerIterator InnerIterator;$/;"	t	class:Eigen::Flagged
InnerIterator	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    InnerIterator(const MappedSparseMatrix& mat, Index outer)$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^class MappedSparseMatrix<Scalar,_Flags,_Index>::InnerIterator$/;"	c	class:Eigen::MappedSparseMatrix
InnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^        inline InnerIterator(const BlockType& xpr, Index outer)$/;"	f	class:Eigen::BlockImpl::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^      EIGEN_STRONG_INLINE InnerIterator(const BlockType& block, Index outer)$/;"	f	class:Eigen::BlockImpl::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^    class InnerIterator : public _MatrixTypeNested::InnerIterator$/;"	c	class:Eigen::BlockImpl
InnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^    class InnerIterator: public SparseMatrixType::InnerIterator$/;"	c	class:Eigen::BlockImpl
InnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^    class InnerIterator: public XprType::InnerIterator$/;"	c	class:Eigen::BlockImpl
InnerIterator	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator(const CwiseBinaryOpImpl& binOp, typename Lhs::Index outer)$/;"	f	class:Eigen::CwiseBinaryOpImpl::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^class CwiseBinaryOpImpl<BinaryOp,Lhs,Rhs,Sparse>::InnerIterator$/;"	c	class:Eigen::CwiseBinaryOpImpl
InnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator(const CwiseUnaryOpImpl& unaryOp, typename CwiseUnaryOpImpl::Index outer)$/;"	f	class:Eigen::CwiseUnaryOpImpl::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator(const CwiseUnaryViewImpl& unaryOp, typename CwiseUnaryViewImpl::Index outer)$/;"	f	class:Eigen::CwiseUnaryViewImpl::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^class CwiseUnaryOpImpl<UnaryOp,MatrixType,Sparse>::InnerIterator$/;"	c	class:Eigen::CwiseUnaryOpImpl
InnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^class CwiseUnaryViewImpl<ViewOp,MatrixType,Sparse>::InnerIterator$/;"	c	class:Eigen::CwiseUnaryViewImpl
InnerIterator	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE InnerIterator(const SparseDenseOuterProduct& prod, Index outer)$/;"	f	class:Eigen::SparseDenseOuterProduct::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^class SparseDenseOuterProduct<Lhs,Rhs,Transpose>::InnerIterator : public _LhsNested::InnerIterator$/;"	c	class:Eigen::SparseDenseOuterProduct
InnerIterator	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^                      <_LhsNested,_RhsNested,SparseDiagonalProduct,LhsMode,RhsMode> InnerIterator;$/;"	t	class:Eigen::SparseDiagonalProduct
InnerIterator	include/Eigen/src/SparseCore/SparseMatrix.h	/^    InnerIterator(const SparseMatrix& mat, Index outer)$/;"	f	class:Eigen::SparseMatrix::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseMatrix.h	/^class SparseMatrix<Scalar,_Options,_Index>::InnerIterator$/;"	c	class:Eigen::SparseMatrix
InnerIterator	include/Eigen/src/SparseCore/SparseTranspose.h	/^    EIGEN_STRONG_INLINE InnerIterator(const TransposeImpl& trans, typename TransposeImpl<MatrixType,Sparse>::Index outer)$/;"	f	class:Eigen::TransposeImpl::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseTranspose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Sparse>::InnerIterator$/;"	c	class:Eigen::TransposeImpl
InnerIterator	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE InnerIterator(const SparseTriangularView& view, Index outer)$/;"	f	class:Eigen::SparseTriangularView::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseTriangularView.h	/^class SparseTriangularView<MatrixType,Mode>::InnerIterator : public MatrixTypeNestedCleaned::InnerIterator$/;"	c	class:Eigen::SparseTriangularView
InnerIterator	include/Eigen/src/SparseCore/SparseVector.h	/^    InnerIterator(const SparseVector& vec, Index outer=0)$/;"	f	class:Eigen::SparseVector::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseVector.h	/^    InnerIterator(const internal::CompressedStorage<Scalar,Index>& data)$/;"	f	class:Eigen::SparseVector::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseVector.h	/^class SparseVector<Scalar,_Options,_Index>::InnerIterator$/;"	c	class:Eigen::SparseVector
InnerIterator	include/Eigen/src/SparseCore/SparseView.h	/^  InnerIterator(const SparseView& view, Index outer) :$/;"	f	class:Eigen::SparseView::InnerIterator
InnerIterator	include/Eigen/src/SparseCore/SparseView.h	/^class SparseView<MatrixType>::InnerIterator : public _MatrixTypeNested::InnerIterator$/;"	c	class:Eigen::SparseView
InnerIterator	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^     InnerIterator(const MappedSuperNodalMatrix& mat, Index outer)$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
InnerIterator	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^class MappedSuperNodalMatrix<Scalar,Index>::InnerIterator$/;"	c	class:Eigen::internal::MappedSuperNodalMatrix
InnerMaxSize	include/Eigen/src/Core/Assign.h	/^    InnerMaxSize = int(Derived::IsVectorAtCompileTime) ? int(Derived::MaxSizeAtCompileTime)$/;"	e	enum:Eigen::internal::assign_traits::__anon34
InnerMaxSize	include/Eigen/src/Core/Assign_MKL.h	/^      InnerMaxSize  = int(Dst::IsVectorAtCompileTime) ? int(Dst::MaxSizeAtCompileTime)$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
InnerMaxSize	include/Eigen/src/Core/Redux.h	/^    InnerMaxSize = int(Derived::IsRowMajor)$/;"	e	enum:Eigen::internal::redux_traits::__anon226
InnerProduct	include/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e	enum:Eigen::__anon271
InnerRandomAccessPattern	include/Eigen/src/SparseCore/SparseUtil.h	/^const int InnerRandomAccessPattern  = 0x2 | CoherentAccessPattern;$/;"	m	namespace:Eigen
InnerSize	include/Eigen/src/Core/Assign.h	/^    InnerSize = int(Derived::IsVectorAtCompileTime) ? int(Derived::SizeAtCompileTime)$/;"	e	enum:Eigen::internal::assign_traits::__anon34
InnerSize	include/Eigen/src/Core/Assign_MKL.h	/^      InnerSize = int(Dst::IsVectorAtCompileTime) ? int(Dst::SizeAtCompileTime)$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
InnerSize	include/Eigen/src/Core/Block.h	/^    InnerSize = IsRowMajor ? int(ColsAtCompileTime) : int(RowsAtCompileTime),$/;"	e	enum:Eigen::internal::traits::__anon49
InnerSize	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      InnerSize  = internal::traits<CoeffBasedProduct>::InnerSize,$/;"	e	enum:Eigen::CoeffBasedProduct::__anon198
InnerSize	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      InnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(_LhsNested::ColsAtCompileTime, _RhsNested::RowsAtCompileTime),$/;"	e	enum:Eigen::internal::traits::__anon197
InnerSize	include/Eigen/src/SparseCore/SparseProduct.h	/^    InnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(_LhsNested::ColsAtCompileTime, _RhsNested::RowsAtCompileTime),$/;"	e	enum:Eigen::internal::traits::__anon443
InnerSizeAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime)$/;"	e	enum:Eigen::DenseBase::__anon58
InnerSizeAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime)$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
InnerStride	include/Eigen/src/Core/Stride.h	/^    InnerStride() : Base() {}$/;"	f	class:Eigen::InnerStride
InnerStride	include/Eigen/src/Core/Stride.h	/^    InnerStride(Index v) : Base(0, v) {}$/;"	f	class:Eigen::InnerStride
InnerStride	include/Eigen/src/Core/Stride.h	/^class InnerStride : public Stride<0, Value>$/;"	c	namespace:Eigen
InnerStrideAtCompileTime	include/Eigen/src/Core/Block.h	/^    InnerStrideAtCompileTime = HasSameStorageOrderAsXprType$/;"	e	enum:Eigen::internal::traits::__anon49
InnerStrideAtCompileTime	include/Eigen/src/Core/CwiseUnaryView.h	/^    InnerStrideAtCompileTime = MatrixTypeInnerStride == Dynamic$/;"	e	enum:Eigen::internal::traits::__anon57
InnerStrideAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      InnerStrideAtCompileTime = internal::inner_stride_at_compile_time<Derived>::ret,$/;"	e	enum:Eigen::DenseBase::__anon58
InnerStrideAtCompileTime	include/Eigen/src/Core/Diagonal.h	/^    InnerStrideAtCompileTime = MatrixTypeOuterStride == Dynamic ? Dynamic : MatrixTypeOuterStride+1,$/;"	e	enum:Eigen::internal::traits::__anon64
InnerStrideAtCompileTime	include/Eigen/src/Core/Map.h	/^    InnerStrideAtCompileTime = StrideType::InnerStrideAtCompileTime == 0$/;"	e	enum:Eigen::internal::traits::__anon176
InnerStrideAtCompileTime	include/Eigen/src/Core/Matrix.h	/^    InnerStrideAtCompileTime = 1,$/;"	e	enum:Eigen::internal::traits::__anon184
InnerStrideAtCompileTime	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    InnerStrideAtCompileTime = Lhs::InnerStrideAtCompileTime$/;"	e	enum:Eigen::internal::traits::__anon248
InnerStrideAtCompileTime	include/Eigen/src/Core/Stride.h	/^      InnerStrideAtCompileTime = _InnerStrideAtCompileTime,$/;"	e	enum:Eigen::Stride::__anon252
InnerStrideAtCompileTime	include/Eigen/src/Core/Transpose.h	/^    InnerStrideAtCompileTime = inner_stride_at_compile_time<MatrixType>::ret,$/;"	e	enum:Eigen::internal::traits::__anon253
InnerStrideMatch	include/Eigen/src/Core/Ref.h	/^      InnerStrideMatch = int(StrideType::InnerStrideAtCompileTime)==int(Dynamic)$/;"	e	enum:Eigen::internal::traits::match::__anon237
InnerUnrolling	include/Eigen/src/Core/util/Constants.h	/^  InnerUnrolling,$/;"	e	enum:Eigen::__anon266
InnerVectorReturnType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef Block<Derived,IsRowMajor?1:Dynamic,IsRowMajor?Dynamic:1,true>       InnerVectorReturnType;$/;"	t	class:Eigen::SparseMatrixBase
InnerVectorizedTraversal	include/Eigen/src/Core/util/Constants.h	/^  InnerVectorizedTraversal,$/;"	e	enum:Eigen::__anon265
InputScalar	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MatrixType::Scalar InputScalar;$/;"	t	struct:Eigen::internal::traits
IntColVectorType	include/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<int, MatrixType::RowsAtCompileTime, 1, MatrixType::Options, MatrixType::MaxRowsAtCompileTime, 1> IntColVectorType;$/;"	t	class:Eigen::LU
IntColVectorType	include/Eigen/src/LU/FullPivLU.h	/^    typedef typename internal::plain_col_type<MatrixType, Index>::type IntColVectorType;$/;"	t	class:Eigen::FullPivLU
IntColVectorType	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef Matrix<Index, MatrixType::RowsAtCompileTime, 1> IntColVectorType;$/;"	t	class:Eigen::PardisoImpl
IntColVectorType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef Matrix<int, MatrixType::RowsAtCompileTime, 1> IntColVectorType;    $/;"	t	class:Eigen::SuperLUBase
IntColVectorType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::IntColVectorType IntColVectorType;    $/;"	t	class:Eigen::SuperLU
IntColVectorType	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef Matrix<int, MatrixType::RowsAtCompileTime, 1> IntColVectorType;$/;"	t	class:Eigen::UmfPackLU
IntDiagSizeVectorType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^                   EIGEN_SIZE_MIN_PREFER_FIXED(MaxColsAtCompileTime,MaxRowsAtCompileTime)> IntDiagSizeVectorType;$/;"	t	class:Eigen::FullPivHouseholderQR
IntDiagSizeVectorType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  typedef typename FullPivHouseholderQR<MatrixType>::IntDiagSizeVectorType IntDiagSizeVectorType;$/;"	t	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
IntRowVectorType	include/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<int, 1, MatrixType::ColsAtCompileTime, MatrixType::Options, 1, MatrixType::MaxColsAtCompileTime> IntRowVectorType;$/;"	t	class:Eigen::LU
IntRowVectorType	include/Eigen/src/LU/FullPivLU.h	/^    typedef typename internal::plain_row_type<MatrixType, Index>::type IntRowVectorType;$/;"	t	class:Eigen::FullPivLU
IntRowVectorType	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef Matrix<Index, 1, MatrixType::ColsAtCompileTime> IntRowVectorType;$/;"	t	class:Eigen::PardisoImpl
IntRowVectorType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType, Index>::type IntRowVectorType;$/;"	t	class:Eigen::ColPivHouseholderQR
IntRowVectorType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef Matrix<int, 1, MatrixType::ColsAtCompileTime> IntRowVectorType;$/;"	t	class:Eigen::SuperLUBase
IntRowVectorType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::IntRowVectorType IntRowVectorType;$/;"	t	class:Eigen::SuperLU
IntRowVectorType	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef Matrix<int, 1, MatrixType::ColsAtCompileTime> IntRowVectorType;$/;"	t	class:Eigen::UmfPackLU
InvalidInput	include/Eigen/src/Core/util/Constants.h	/^  InvalidInput = 3$/;"	e	enum:Eigen::ComputationInfo
InvalidTraversal	include/Eigen/src/Core/util/Constants.h	/^  InvalidTraversal,$/;"	e	enum:Eigen::__anon265
IsAligned	include/Eigen/src/Core/Map.h	/^    IsAligned = bool(EIGEN_ALIGN) && ((int(MapOptions)&Aligned)==Aligned),$/;"	e	enum:Eigen::internal::traits::__anon176
IsAligned	include/Eigen/src/Geometry/Quaternion.h	/^    IsAligned = internal::traits<Coefficients>::Flags & AlignedBit,$/;"	e	enum:Eigen::internal::traits::__anon375
IsAligned	include/Eigen/src/Geometry/Quaternion.h	/^  enum { IsAligned = internal::traits<Quaternion>::IsAligned };$/;"	e	enum:Eigen::Quaternion::__anon376
IsColMajor	include/Eigen/src/Core/Reverse.h	/^      IsColMajor = !IsRowMajor,$/;"	e	enum:Eigen::Reverse::__anon242
IsColVector	include/Eigen/src/Core/VectorBlock.h	/^      IsColVector = !(internal::traits<VectorType>::Flags & RowMajorBit)$/;"	e	enum:Eigen::VectorBlock::__anon329
IsColVector	include/Eigen/src/SparseCore/SparseVector.h	/^    IsColVector = (_Options & RowMajorBit) ? 0 : 1,$/;"	e	enum:Eigen::internal::traits::__anon447
IsColVector	include/Eigen/src/SparseCore/SparseVector.h	/^    enum { IsColVector = internal::traits<SparseVector>::IsColVector };$/;"	e	enum:Eigen::SparseVector::__anon449
IsComplex	include/Eigen/src/Core/NumTraits.h	/^    IsComplex = 0,$/;"	e	enum:Eigen::GenericNumTraits::__anon188
IsComplex	include/Eigen/src/Core/util/BlasUtil.h	/^    IsComplex = NumTraits<Scalar>::IsComplex,$/;"	e	enum:Eigen::internal::blas_traits::__anon260
IsComplex	include/Eigen/src/Core/util/BlasUtil.h	/^    IsComplex = NumTraits<Scalar>::IsComplex,$/;"	e	enum:Eigen::internal::blas_traits::__anon261
IsDense	include/Eigen/src/Core/util/Constants.h	/^  IsDense         = 0,$/;"	e	enum:Eigen::__anon270
IsDynamicSize	include/Eigen/src/Core/Map.h	/^    IsDynamicSize = PlainObjectType::SizeAtCompileTime==Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon176
IsHorizontal	include/Eigen/src/Core/VectorwiseOp.h	/^      IsHorizontal = (Direction==Horizontal) ? 1 : 0$/;"	e	enum:Eigen::VectorwiseOp::__anon333
IsInteger	include/Eigen/src/Core/NumTraits.h	/^    IsInteger = std::numeric_limits<T>::is_integer,$/;"	e	enum:Eigen::GenericNumTraits::__anon188
IsLower	include/Eigen/src/Core/SolveTriangular.h	/^    IsLower = ((Mode&Lower)==Lower),$/;"	e	enum:Eigen::internal::triangular_solver_unroller::__anon251
IsLower	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    IsLower = (Mode&Lower) == Lower,$/;"	e	enum:Eigen::internal::product_triangular_matrix_matrix::__anon219
IsLower	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    IsLower = (Mode&Lower) == Lower,$/;"	e	enum:Eigen::internal::product_triangular_matrix_matrix::__anon220
IsLower	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^    IsLower = ((Mode&Lower)==Lower),$/;"	e	enum:Eigen::internal::triangular_matrix_vector_product::__anon221
IsLower	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^    IsLower = ((Mode&Lower)==Lower),$/;"	e	enum:Eigen::internal::triangular_matrix_vector_product::__anon222
IsLower	include/Eigen/src/Core/products/TriangularSolverVector.h	/^    IsLower = ((Mode&Lower)==Lower)$/;"	e	enum:Eigen::internal::triangular_solve_vector::__anon223
IsLower	include/Eigen/src/Core/products/TriangularSolverVector.h	/^    IsLower = ((Mode&Lower)==Lower)$/;"	e	enum:Eigen::internal::triangular_solve_vector::__anon224
IsProjective	include/Eigen/src/Geometry/Transform.h	/^    IsProjective = (int(Mode)==int(Projective))$/;"	e	enum:Eigen::internal::transform_traits::__anon382
IsRepeatable	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::HasSetLinear, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon101
IsRepeatable	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::Vectorizable, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon99
IsRepeatable	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = false, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon100
IsRepeatable	include/Eigen/src/Core/Random.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false, IsRepeatable = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon225
IsRowMajor	include/Eigen/src/Core/Block.h	/^    IsRowMajor = (MaxRowsAtCompileTime==1&&MaxColsAtCompileTime!=1) ? 1$/;"	e	enum:Eigen::internal::traits::__anon49
IsRowMajor	include/Eigen/src/Core/CoreIterators.h	/^    enum { IsRowMajor = (Derived::Flags&RowMajorBit)==RowMajorBit };$/;"	e	enum:Eigen::DenseBase::InnerIterator::__anon52
IsRowMajor	include/Eigen/src/Core/DenseBase.h	/^      IsRowMajor = int(Flags) & RowMajorBit, \/**< True if this expression has row-major storage order. *\/$/;"	e	enum:Eigen::DenseBase::__anon58
IsRowMajor	include/Eigen/src/Core/GeneralProduct.h	/^    template<typename T> struct IsRowMajor : internal::conditional<(int(T::Flags)&RowMajorBit), internal::true_type, internal::false_type>::type {};$/;"	s	class:Eigen::GeneralProduct
IsRowMajor	include/Eigen/src/Core/Replicate.h	/^    IsRowMajor = MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1 ? 1$/;"	e	enum:Eigen::internal::traits::__anon239
IsRowMajor	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    enum { IsRowMajor = Base::IsRowMajor };$/;"	e	enum:Eigen::MappedSparseMatrix::__anon422
IsRowMajor	include/Eigen/src/SparseCore/SparseBlock.h	/^    enum { IsRowMajor = internal::traits<BlockType>::IsRowMajor };$/;"	e	enum:Eigen::BlockImpl::__anon423
IsRowMajor	include/Eigen/src/SparseCore/SparseBlock.h	/^    enum { IsRowMajor = internal::traits<BlockType>::IsRowMajor };$/;"	e	enum:Eigen::BlockImpl::__anon425
IsRowMajor	include/Eigen/src/SparseCore/SparseBlock.h	/^    enum { IsRowMajor = internal::traits<BlockType>::IsRowMajor };$/;"	e	enum:Eigen::BlockImpl::__anon427
IsRowMajor	include/Eigen/src/SparseCore/SparseBlock.h	/^    enum { IsRowMajor = internal::traits<BlockType>::IsRowMajor };$/;"	e	enum:Eigen::BlockImpl::__anon429
IsRowMajor	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    enum { IsRowMajor = (int(Lhs::Flags)&RowMajorBit)==RowMajorBit };$/;"	e	enum:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector::__anon430
IsRowMajor	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    enum { IsRowMajor = (int(Rhs::Flags)&RowMajorBit)==RowMajorBit };$/;"	e	enum:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector::__anon431
IsRowMajor	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      IsRowMajor = Flags&RowMajorBit ? 1 : 0,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
IsSigned	include/Eigen/src/Core/NumTraits.h	/^    IsSigned = std::numeric_limits<T>::is_signed,$/;"	e	enum:Eigen::GenericNumTraits::__anon188
IsSparse	include/Eigen/src/Core/util/Constants.h	/^  IsSparse$/;"	e	enum:Eigen::__anon270
IsSupported	include/Eigen/src/Core/Assign_MKL.h	/^{ enum { IsSupported = 0 }; };$/;"	e	enum:Eigen::internal::vml_call::__anon41
IsTransposed	include/Eigen/src/Core/util/BlasUtil.h	/^    IsTransposed = Base::IsTransposed ? 0 : 1$/;"	e	enum:Eigen::internal::blas_traits::__anon262
IsTransposed	include/Eigen/src/Core/util/BlasUtil.h	/^    IsTransposed = false,$/;"	e	enum:Eigen::internal::blas_traits::__anon260
IsVectorAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      IsVectorAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime == 1$/;"	e	enum:Eigen::DenseBase::__anon58
IsVectorAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^      IsVectorAtCompileTime = 0,$/;"	e	enum:Eigen::DiagonalBase::__anon66
IsVectorAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      IsVectorAtCompileTime = RowsAtCompileTime == 1 || ColsAtCompileTime == 1,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
IsVertical	include/Eigen/src/Core/VectorwiseOp.h	/^      IsVertical   = (Direction==Vertical) ? 1 : 0,$/;"	e	enum:Eigen::VectorwiseOp::__anon333
Isometry	include/Eigen/src/Core/util/Constants.h	/^  Isometry      = 0x1,$/;"	e	enum:Eigen::TransformTraits
Isometry2d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,Isometry> Isometry2d;$/;"	t	namespace:Eigen
Isometry2f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,Isometry> Isometry2f;$/;"	t	namespace:Eigen
Isometry3d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,Isometry> Isometry3d;$/;"	t	namespace:Eigen
Isometry3f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,Isometry> Isometry3f;$/;"	t	namespace:Eigen
IsometryTransformType	include/Eigen/src/Geometry/Translation.h	/^  typedef Transform<Scalar,Dim,Isometry> IsometryTransformType;$/;"	t	class:Eigen::Translation
IterBase	include/Eigen/src/SparseCore/SparseView.h	/^  typedef typename _MatrixTypeNested::InnerIterator IterBase;$/;"	t	class:Eigen::SparseView::InnerIterator
IterativeSolverBase	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  IterativeSolverBase()$/;"	f	class:Eigen::IterativeSolverBase
IterativeSolverBase	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  IterativeSolverBase(const MatrixType& A)$/;"	f	class:Eigen::IterativeSolverBase
IterativeSolverBase	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^class IterativeSolverBase : internal::noncopyable$/;"	c	namespace:Eigen
Iterator	include/Eigen/src/SparseCore/AmbiVector.h	/^    Iterator(const AmbiVector& vec, const RealScalar& epsilon = 0)$/;"	f	class:Eigen::internal::AmbiVector::Iterator
Iterator	include/Eigen/src/SparseCore/AmbiVector.h	/^class AmbiVector<_Scalar,_Index>::Iterator$/;"	c	class:Eigen::internal::AmbiVector
JRs	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef JacobiRotation<Scalar> JRs;$/;"	t	class:Eigen::RealQZ
JacobiRotation	include/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation() {}$/;"	f	class:Eigen::JacobiRotation
JacobiRotation	include/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation(const Scalar& c, const Scalar& s) : m_c(c), m_s(s) {}$/;"	f	class:Eigen::JacobiRotation
JacobiRotation	include/Eigen/src/Jacobi/Jacobi.h	/^template<typename Scalar> class JacobiRotation$/;"	c	namespace:Eigen
JacobiSVD	include/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD()$/;"	f	class:Eigen::JacobiSVD
JacobiSVD	include/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD(Index rows, Index cols, unsigned int computationOptions = 0)$/;"	f	class:Eigen::JacobiSVD
JacobiSVD	include/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD(const MatrixType& matrix, unsigned int computationOptions = 0)$/;"	f	class:Eigen::JacobiSVD
JacobiSVD	include/Eigen/src/SVD/JacobiSVD.h	/^template<typename _MatrixType, int QRPreconditioner> class JacobiSVD$/;"	c	namespace:Eigen
JacobiSVDType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef JacobiSVD<_MatrixType, QRPreconditioner> JacobiSVDType;$/;"	t	struct:Eigen::internal::solve_retval
JointAlignment	include/Eigen/src/Core/Assign.h	/^    JointAlignment = assign_traits<Derived1,Derived2>::JointAlignment$/;"	e	enum:Eigen::internal::assign_innervec_CompleteUnrolling::__anon40
JointAlignment	include/Eigen/src/Core/Assign.h	/^    JointAlignment = bool(DstIsAligned) && bool(SrcIsAligned) ? Aligned : Unaligned$/;"	e	enum:Eigen::internal::assign_traits::__anon33
KILL_NON_PRINCIPAL_COL	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	131;"	d
KILL_PRINCIPAL_COL	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	130;"	d
KILL_ROW	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	129;"	d
KMADD	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	107;"	d
KMADD	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	273;"	d
KeepsPacketAccess	include/Eigen/src/Core/Map.h	/^    KeepsPacketAccess = bool(HasNoInnerStride)$/;"	e	enum:Eigen::internal::traits::__anon176
KernelResultType	include/Eigen/src/Eigen2Support/LU.h	/^    > KernelResultType;$/;"	t	class:Eigen::LU
LDLT	include/Eigen/src/Cholesky/LDLT.h	/^    LDLT() $/;"	f	class:Eigen::LDLT
LDLT	include/Eigen/src/Cholesky/LDLT.h	/^    LDLT(Index size)$/;"	f	class:Eigen::LDLT
LDLT	include/Eigen/src/Cholesky/LDLT.h	/^    LDLT(const MatrixType& matrix)$/;"	f	class:Eigen::LDLT
LDLT	include/Eigen/src/Cholesky/LDLT.h	/^template<typename _MatrixType, int _UpLo> class LDLT$/;"	c	namespace:Eigen
LDLTTraits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef internal::traits<SimplicialLDLT<MatrixType,UpLo> > LDLTTraits;$/;"	t	class:Eigen::SimplicialCholesky
LDLTType	include/Eigen/src/Cholesky/LDLT.h	/^  typedef LDLT<_MatrixType,_UpLo> LDLTType;$/;"	t	struct:Eigen::internal::solve_retval
LDLT_Traits	include/Eigen/src/Cholesky/LDLT.h	/^template<typename MatrixType> struct LDLT_Traits<MatrixType,Lower>$/;"	s	namespace:Eigen::internal
LDLT_Traits	include/Eigen/src/Cholesky/LDLT.h	/^template<typename MatrixType> struct LDLT_Traits<MatrixType,Upper>$/;"	s	namespace:Eigen::internal
LLT	include/Eigen/src/Cholesky/LLT.h	/^    LLT() : m_matrix(), m_isInitialized(false) {}$/;"	f	class:Eigen::LLT
LLT	include/Eigen/src/Cholesky/LLT.h	/^    LLT(Index size) : m_matrix(size, size),$/;"	f	class:Eigen::LLT
LLT	include/Eigen/src/Cholesky/LLT.h	/^    LLT(const MatrixType& matrix)$/;"	f	class:Eigen::LLT
LLT	include/Eigen/src/Cholesky/LLT.h	/^template<typename _MatrixType, int _UpLo> class LLT$/;"	c	namespace:Eigen
LLTTraits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef internal::traits<SimplicialLLT<MatrixType,UpLo>  > LLTTraits;$/;"	t	class:Eigen::SimplicialCholesky
LLTType	include/Eigen/src/Cholesky/LLT.h	/^  typedef LLT<_MatrixType,UpLo> LLTType;$/;"	t	struct:Eigen::internal::solve_retval
LLT_Traits	include/Eigen/src/Cholesky/LLT.h	/^template<typename MatrixType> struct LLT_Traits<MatrixType,Lower>$/;"	s	namespace:Eigen::internal
LLT_Traits	include/Eigen/src/Cholesky/LLT.h	/^template<typename MatrixType> struct LLT_Traits<MatrixType,Upper>$/;"	s	namespace:Eigen::internal
LLVL	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^typedef enum {LUSUP, UCOL, LSUB, USUB, LLVL, ULVL} MemType; $/;"	e	enum:Eigen::internal::__anon456
LMatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef TriangularView<LUMatrixType, Lower|UnitDiag>  LMatrixType;$/;"	t	class:Eigen::SuperLU
LSUB	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^typedef enum {LUSUP, UCOL, LSUB, USUB, LLVL, ULVL} MemType; $/;"	e	enum:Eigen::internal::__anon456
LU	include/Eigen/src/Eigen2Support/LU.h	/^    explicit LU(const T& t) : Base(t), m_originalMatrix(t) {}$/;"	f	class:Eigen::LU
LU	include/Eigen/src/Eigen2Support/LU.h	/^class LU : public FullPivLU<MatrixType>$/;"	c	namespace:Eigen
LUMatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef SparseMatrix<Scalar> LUMatrixType;$/;"	t	class:Eigen::SuperLUBase
LUMatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::LUMatrixType LUMatrixType;$/;"	t	class:Eigen::SuperLU
LUMatrixType	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef SparseMatrix<Scalar> LUMatrixType;$/;"	t	class:Eigen::UmfPackLU
LUNoMarker	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^enum { LUNoMarker = 3 };$/;"	e	enum:Eigen::internal::__anon453
LUSUP	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^typedef enum {LUSUP, UCOL, LSUB, USUB, LLVL, ULVL} MemType; $/;"	e	enum:Eigen::internal::__anon456
LUTempSpace	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^inline Index LUTempSpace(Index&m, Index& w)$/;"	f	namespace:Eigen::internal
LU_GlobalLU_t	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^struct LU_GlobalLU_t {$/;"	s	namespace:Eigen::internal
LU_kernel_bmod	include/Eigen/src/SparseLU/SparseLU_kernel_bmod.h	/^template <> struct LU_kernel_bmod<1>$/;"	s	namespace:Eigen::internal
LU_kernel_bmod	include/Eigen/src/SparseLU/SparseLU_kernel_bmod.h	/^template <int SegSizeAtCompileTime> struct LU_kernel_bmod$/;"	s	namespace:Eigen::internal
LUnumTempV	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^inline Index LUnumTempV(Index& m, Index& w, Index& t, Index& b)$/;"	f	namespace:Eigen::internal
Large	include/Eigen/src/Core/GeneralProduct.h	/^  Large = 2,$/;"	e	enum:Eigen::__anon143
LargeEnough	include/Eigen/src/Core/Assign_MKL.h	/^      LargeEnough = VmlSize==Dynamic || VmlSize>=EIGEN_MKL_VML_THRESHOLD,$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
LargeThreshold	include/Eigen/src/Core/GeneralProduct.h	/^    LargeThreshold = EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD$/;"	e	enum:Eigen::internal::product_type::__anon145
LazyCoeffBasedProductMode	include/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e	enum:Eigen::__anon271
LazyCoeffBasedProductType	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef CoeffBasedProduct<LhsNested,RhsNested,NestByRefBit> LazyCoeffBasedProductType;$/;"	t	class:Eigen::CoeffBasedProduct
LazyProductReturnType	include/Eigen/src/Core/GeneralProduct.h	/^struct LazyProductReturnType : public ProductReturnType<Lhs,Rhs,LazyCoeffBasedProductMode>$/;"	s	namespace:Eigen
Lhs	include/Eigen/src/Core/ProductBase.h	/^  typedef typename remove_all<_Lhs>::type Lhs;$/;"	t	struct:Eigen::internal::traits
Lhs	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,AffineCompact,LhsOptions> Lhs;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
Lhs	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,LhsMode,LhsOptions> Lhs;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
Lhs	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,Projective,LhsOptions> Lhs;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
Lhs	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename internal::remove_all<SparseLhsType>::type Lhs;$/;"	t	struct:Eigen::internal::sparse_time_dense_product_impl
LhsBlasTraits	include/Eigen/src/Core/ProductBase.h	/^    typedef internal::blas_traits<_LhsNested> LhsBlasTraits;$/;"	t	class:Eigen::ProductBase
LhsCleaned	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^  typedef typename remove_all<Lhs>::type LhsCleaned;$/;"	t	struct:Eigen::internal::conservative_sparse_sparse_product_selector
LhsCoeffReadCost	include/Eigen/src/Core/CwiseBinaryOp.h	/^    LhsCoeffReadCost = _LhsNested::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon54
LhsCoeffReadCost	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      LhsCoeffReadCost = _LhsNested::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon197
LhsCoeffReadCost	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    LhsCoeffReadCost = traits<_LhsNested>::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon432
LhsCoeffReadCost	include/Eigen/src/SparseCore/SparseProduct.h	/^    LhsCoeffReadCost = _LhsNested::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon443
LhsFlags	include/Eigen/src/Core/CwiseBinaryOp.h	/^    LhsFlags = _LhsNested::Flags,$/;"	e	enum:Eigen::internal::traits::__anon54
LhsFlags	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      LhsFlags = _LhsNested::Flags,$/;"	e	enum:Eigen::internal::traits::__anon197
LhsFlags	include/Eigen/src/SparseCore/SparseProduct.h	/^    LhsFlags = _LhsNested::Flags,$/;"	e	enum:Eigen::internal::traits::__anon443
LhsInnerIterator	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename Lhs::InnerIterator LhsInnerIterator;$/;"	t	struct:Eigen::internal::sparse_time_dense_product_impl
LhsIsSelfAdjoint	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    LhsIsSelfAdjoint = (LhsMode&SelfAdjoint)==SelfAdjoint,$/;"	e	enum:Eigen::SelfadjointProductMatrix::__anon216
LhsIsUpper	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    LhsIsUpper = (LhsMode&(Upper|Lower))==Upper,$/;"	e	enum:Eigen::SelfadjointProductMatrix::__anon216
LhsIterator	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename _LhsNested::InnerIterator LhsIterator;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
LhsMatrixType	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename take_matrix_for_product<Lhs>::type LhsMatrixType;$/;"	t	struct:Eigen::internal::traits
LhsMatrixType	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename traits<homogeneous_left_product_impl>::LhsMatrixType LhsMatrixType;$/;"	t	struct:Eigen::internal::homogeneous_left_product_impl
LhsMatrixTypeCleaned	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<LhsMatrixType>::type LhsMatrixTypeCleaned;$/;"	t	struct:Eigen::internal::homogeneous_left_product_impl
LhsMatrixTypeCleaned	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<LhsMatrixType>::type LhsMatrixTypeCleaned;$/;"	t	struct:Eigen::internal::traits
LhsMatrixTypeNested	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<typename LhsMatrixTypeCleaned::Nested>::type LhsMatrixTypeNested;$/;"	t	struct:Eigen::internal::homogeneous_left_product_impl
LhsMode	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^      LhsMode = internal::is_diagonal<_LhsNested>::ret ? internal::SDP_IsDiagonal$/;"	e	enum:Eigen::SparseDiagonalProduct::__anon435
LhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::nested<Lhs>::type LhsNested;$/;"	t	class:Eigen::CwiseBinaryOp
LhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename Lhs::Nested LhsNested;$/;"	t	struct:Eigen::internal::traits
LhsNested	include/Eigen/src/Core/GeneralProduct.h	/^  typedef typename internal::nested<Lhs, Rhs::ColsAtCompileTime, typename internal::plain_matrix_type<Lhs>::type >::type LhsNested;$/;"	t	struct:Eigen::ProductReturnType
LhsNested	include/Eigen/src/Core/ProductBase.h	/^    typedef typename Lhs::Nested LhsNested;$/;"	t	class:Eigen::ProductBase
LhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef typename Traits::LhsNested LhsNested;$/;"	t	class:Eigen::SparseDenseOuterProduct
LhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename Lhs::Nested LhsNested;$/;"	t	struct:Eigen::internal::traits
LhsNested	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    typedef typename Lhs::Nested LhsNested;$/;"	t	class:Eigen::SparseDiagonalProduct
LhsNested	include/Eigen/src/SparseCore/SparseProduct.h	/^    typename internal::nested<Lhs,Rhs::RowsAtCompileTime>::type>::type LhsNested;$/;"	t	struct:Eigen::SparseSparseProductReturnType
LhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::LhsPacket LhsPacket;$/;"	t	struct:Eigen::internal::gebp_kernel
LhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,RealPacket,  Scalar>::type LhsPacket;$/;"	t	class:Eigen::internal::gebp_traits
LhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;$/;"	t	class:Eigen::internal::gebp_traits
LhsPacket	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;$/;"	t	struct:Eigen::internal::general_matrix_vector_product
LhsPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsPacketSize = Vectorizable ? packet_traits<LhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
LhsPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsPacketSize = Vectorizable ? packet_traits<LhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
LhsPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsPacketSize = Vectorizable ? packet_traits<LhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
LhsPacketSize	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  LhsPacketSize = Vectorizable ? packet_traits<LhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon213
LhsPacketSize	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  LhsPacketSize = Vectorizable ? packet_traits<LhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon214
LhsProductTraits	include/Eigen/src/Core/SolveTriangular.h	/^  typedef blas_traits<Lhs> LhsProductTraits;$/;"	t	struct:Eigen::internal::triangular_solver_selector
LhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress   = Traits::LhsProgress,$/;"	e	enum:Eigen::internal::gebp_kernel::__anon205
LhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress = LhsPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
LhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress = LhsPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
LhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress = ResPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
LhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress = ResPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
LhsRowMajor	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      LhsRowMajor = LhsFlags & RowMajorBit,$/;"	e	enum:Eigen::internal::traits::__anon197
LhsRowMajor	include/Eigen/src/SparseCore/SparseProduct.h	/^    LhsRowMajor = internal::traits<Lhs>::Flags & RowMajorBit,$/;"	e	enum:Eigen::SparseSparseProductReturnType::__anon442
LhsScalar	include/Eigen/src/Core/GeneralProduct.h	/^    typedef typename Lhs::Scalar LhsScalar;$/;"	t	class:Eigen::GeneralProduct
LhsScalar	include/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::traits<Lhs>::Scalar LhsScalar;$/;"	t	class:Eigen::ProductBase
LhsScalar	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Lhs::Scalar LhsScalar;$/;"	t	struct:Eigen::internal::triangular_solver_selector
LhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef RealScalar  LhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
LhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef _LhsScalar LhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
LhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  LhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
LhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar> LhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
LhsScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef _LhsScalar LhsScalar;$/;"	t	class:Eigen::internal::level3_blocking
LhsScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename  Lhs::Scalar LhsScalar;$/;"	t	class:Eigen::GeneralProduct
LhsScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename conditional<Transpose,_RhsScalar,_LhsScalar>::type LhsScalar;$/;"	t	class:Eigen::internal::gemm_blocking_space
LhsUpLo	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^    LhsUpLo = LhsMode&(Upper|Lower)$/;"	e	enum:Eigen::SelfadjointProductMatrix::__anon217
LinSpaced	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(Index size, const Scalar& low, const Scalar& high)$/;"	f	class:Eigen::DenseBase
LinSpaced	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(Sequential_t, Index size, const Scalar& low, const Scalar& high)$/;"	f	class:Eigen::DenseBase
LinSpaced	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(Sequential_t, const Scalar& low, const Scalar& high)$/;"	f	class:Eigen::DenseBase
LinSpaced	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(const Scalar& low, const Scalar& high)$/;"	f	class:Eigen::DenseBase
LinearAccess	include/Eigen/src/Core/Reverse.h	/^    LinearAccess = ( (Direction==BothDirections) && (int(_MatrixTypeNested::Flags)&PacketAccessBit) )$/;"	e	enum:Eigen::internal::traits::__anon241
LinearAccessBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int LinearAccessBit = 0x10;$/;"	m	namespace:Eigen
LinearMatrixType	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Eigen::Scaling
LinearMatrixType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Eigen::Transform
LinearMatrixType	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Eigen::Translation
LinearMatrixType	include/Eigen/src/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,Dim,Options> LinearMatrixType;$/;"	t	class:Eigen::Transform
LinearMatrixType	include/Eigen/src/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Eigen::Translation
LinearPart	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,Dim> LinearPart;$/;"	t	class:Eigen::Transform
LinearPart	include/Eigen/src/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,Dim,int(Mode)==(AffineCompact) && (Options&RowMajor)==0> LinearPart;$/;"	t	class:Eigen::Transform
LinearTraversal	include/Eigen/src/Core/util/Constants.h	/^  LinearTraversal,$/;"	e	enum:Eigen::__anon265
LinearVectorizedTraversal	include/Eigen/src/Core/util/Constants.h	/^  LinearVectorizedTraversal,$/;"	e	enum:Eigen::__anon265
ListEl	include/Eigen/src/SparseCore/AmbiVector.h	/^    struct ListEl$/;"	s	class:Eigen::internal::AmbiVector
Lower	include/Eigen/src/Core/util/Constants.h	/^  Lower=0x1,                      $/;"	e	enum:Eigen::__anon263
LowerTriangular	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int LowerTriangular = Lower;$/;"	m	namespace:Eigen
LowerTriangularBit	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int LowerTriangularBit = Lower;$/;"	m	namespace:Eigen
LvalueBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int LvalueBit = 0x20;$/;"	m	namespace:Eigen
MADD	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	106;"	d
MADD	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	131;"	d
METIS_SUPPORT_H	include/Eigen/src/MetisSupport/MetisSupport.h	10;"	d
M_PI	include/Eigen/src/Eigen2Support/Geometry/All.h	7;"	d
Map	include/Eigen/src/Core/Map.h	/^    inline Map(PointerArgType dataPtr, Index a_size, const StrideType& a_stride = StrideType())$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Core/Map.h	/^    inline Map(PointerArgType dataPtr, Index nbRows, Index nbCols, const StrideType& a_stride = StrideType())$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Core/Map.h	/^    inline Map(PointerArgType dataPtr, const StrideType& a_stride = StrideType())$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Core/Map.h	/^template<typename PlainObjectType, int MapOptions, typename StrideType> class Map$/;"	c	namespace:Eigen
Map	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Map(const Index* indicesPtr)$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Map(const Index* indicesPtr, Index size)$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Core/PermutationMatrix.h	/^class Map<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType>,_PacketAccess>$/;"	c	namespace:Eigen
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline ConstMapType Map(const Scalar* data)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline ConstMapType Map(const Scalar* data, Index rows, Index cols)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline ConstMapType Map(const Scalar* data, Index size)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline MapType Map(Scalar* data)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline MapType Map(Scalar* data, Index rows, Index cols)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline MapType Map(Scalar* data, Index size)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
Map	include/Eigen/src/Core/Transpositions.h	/^    inline Map(const Index* indicesPtr)$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Core/Transpositions.h	/^    inline Map(const Index* indicesPtr, Index size)$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Core/Transpositions.h	/^class Map<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType>,PacketAccess>$/;"	c	namespace:Eigen
Map	include/Eigen/src/Geometry/Quaternion.h	/^    EIGEN_STRONG_INLINE Map(Scalar* coeffs) : m_coeffs(coeffs) {}$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Geometry/Quaternion.h	/^    EIGEN_STRONG_INLINE Map(const Scalar* coeffs) : m_coeffs(coeffs) {}$/;"	f	class:Eigen::Map
Map	include/Eigen/src/Geometry/Quaternion.h	/^class Map<Quaternion<_Scalar>, _Options >$/;"	c	namespace:Eigen
Map	include/Eigen/src/Geometry/Quaternion.h	/^class Map<const Quaternion<_Scalar>, _Options >$/;"	c	namespace:Eigen
Map	include/Eigen/src/SparseCore/CompressedStorage.h	/^    static CompressedStorage Map(Index* indices, Scalar* values, size_t size)$/;"	f	class:Eigen::internal::CompressedStorage
Map	include/Eigen/src/SparseCore/SparseMatrix.h	/^    typedef MappedSparseMatrix<Scalar,Flags> Map;$/;"	t	class:Eigen::SparseMatrix
Map	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  static SluMatrix Map(MatrixBase<MatrixType>& _mat)$/;"	f	struct:Eigen::SluMatrix
Map	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  static SluMatrix Map(SparseMatrixBase<MatrixType>& mat)$/;"	f	struct:Eigen::SluMatrix
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline AlignedMapType MapAligned(Scalar* data)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline AlignedMapType MapAligned(Scalar* data, Index rows, Index cols)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline AlignedMapType MapAligned(Scalar* data, Index size)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline ConstAlignedMapType MapAligned(const Scalar* data)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline ConstAlignedMapType MapAligned(const Scalar* data, Index rows, Index cols)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline ConstAlignedMapType MapAligned(const Scalar* data, Index size)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
MapAligned	include/Eigen/src/Core/PlainObjectBase.h	/^    static inline typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:Eigen::PlainObjectBase
MapBase	include/Eigen/src/Core/MapBase.h	/^    explicit inline MapBase(PointerType dataPtr) : Base(dataPtr) {}$/;"	f	class:Eigen::MapBase
MapBase	include/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType dataPtr) : m_data(dataPtr), m_rows(RowsAtCompileTime), m_cols(ColsAtCompileTime)$/;"	f	class:Eigen::MapBase
MapBase	include/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType dataPtr, Index nbRows, Index nbCols) : Base(dataPtr, nbRows, nbCols) {}$/;"	f	class:Eigen::MapBase
MapBase	include/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType dataPtr, Index nbRows, Index nbCols)$/;"	f	class:Eigen::MapBase
MapBase	include/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType dataPtr, Index vecSize) : Base(dataPtr, vecSize) {}$/;"	f	class:Eigen::MapBase
MapBase	include/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType dataPtr, Index vecSize)$/;"	f	class:Eigen::MapBase
MapBase	include/Eigen/src/Core/MapBase.h	/^template<typename Derived> class MapBase<Derived, ReadOnlyAccessors>$/;"	c	namespace:Eigen
MapBase	include/Eigen/src/Core/MapBase.h	/^template<typename Derived> class MapBase<Derived, WriteAccessors>$/;"	c	namespace:Eigen
MapLU	include/Eigen/src/LU/PartialPivLU.h	/^  typedef Map<Matrix<Scalar, Dynamic, Dynamic, StorageOrder> > MapLU;$/;"	t	struct:Eigen::internal::partial_lu_impl
MapType	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef Eigen::Map<Derived, Unaligned>  MapType;$/;"	t	class:Eigen::PlainObjectBase
MappedRhs	include/Eigen/src/Core/SolveTriangular.h	/^  typedef Map<Matrix<RhsScalar,Dynamic,1>, Aligned> MappedRhs;$/;"	t	struct:Eigen::internal::triangular_solver_selector
MappedSparseMatrix	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline MappedSparseMatrix(Index rows, Index cols, Index nnz, Index* outerIndexPtr, Index* innerIndexPtr, Scalar* valuePtr)$/;"	f	class:Eigen::MappedSparseMatrix
MappedSparseMatrix	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^class MappedSparseMatrix$/;"	c	namespace:Eigen
MappedSuperNodalMatrix	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    MappedSuperNodalMatrix()$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
MappedSuperNodalMatrix	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    MappedSuperNodalMatrix(Index m, Index n,  ScalarVector& nzval, IndexVector& nzval_colptr, IndexVector& rowind, $/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
MappedSuperNodalMatrix	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^class MappedSuperNodalMatrix$/;"	c	namespace:Eigen::internal
MaskAlignedBit	include/Eigen/src/Core/Block.h	/^    MaskAlignedBit = (InnerPanel && (OuterStrideAtCompileTime!=Dynamic) && (((OuterStrideAtCompileTime * int(sizeof(Scalar))) % 16) == 0)) ? AlignedBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon49
MaskLvalueBit	include/Eigen/src/Core/Diagonal.h	/^    MaskLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon64
MaskPacketAccessBit	include/Eigen/src/Core/Block.h	/^    MaskPacketAccessBit = (InnerSize == Dynamic || (InnerSize % packet_traits<Scalar>::size) == 0)$/;"	e	enum:Eigen::internal::traits::__anon49
MatchAtCompileTime	include/Eigen/src/Core/Ref.h	/^      MatchAtCompileTime = HasDirectAccess && StorageOrderMatch && InnerStrideMatch && OuterStrideMatch && AlignmentMatch$/;"	e	enum:Eigen::internal::traits::match::__anon237
Matrix	include/Eigen/src/Core/Map.h	/^  ::Matrix(const Scalar *data)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix() : Base()$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const Matrix& other)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const T0& x, const T1& y)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE explicit Matrix(Index dim)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^    Matrix(internal::constructor_without_unaligned_array_assert)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Core/Matrix.h	/^class Matrix$/;"	c	namespace:Eigen
Matrix	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^::Matrix(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Eigen::Matrix
Matrix	include/Eigen/src/Geometry/RotationBase.h	/^::Matrix(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Eigen::Matrix
Matrix2	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,2> Matrix2;$/;"	t	class:Eigen::Rotation2D
Matrix2	include/Eigen/src/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,2> Matrix2;$/;"	t	class:Eigen::Rotation2D
Matrix2s	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef Matrix<Scalar,2,2> Matrix2s;$/;"	t	class:Eigen::RealQZ
Matrix3	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:Eigen::AngleAxis
Matrix3	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:Eigen::Quaternion
Matrix3	include/Eigen/src/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:Eigen::AngleAxis
Matrix3	include/Eigen/src/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:Eigen::QuaternionBase
MatrixAlignment	include/Eigen/src/LU/arch/Inverse_SSE.h	/^    MatrixAlignment     = bool(MatrixType::Flags&AlignedBit),$/;"	e	enum:Eigen::internal::compute_inverse_size4::__anon395
MatrixAlignment	include/Eigen/src/LU/arch/Inverse_SSE.h	/^    MatrixAlignment = bool(MatrixType::Flags&AlignedBit),$/;"	e	enum:Eigen::internal::compute_inverse_size4::__anon396
MatrixBase	include/Eigen/src/Core/MatrixBase.h	/^    MatrixBase() : Base() {}$/;"	f	class:Eigen::MatrixBase
MatrixBase	include/Eigen/src/Core/MatrixBase.h	/^template<typename Derived> class MatrixBase$/;"	c	namespace:Eigen
MatrixCols	include/Eigen/src/Core/Block.h	/^    MatrixCols = traits<XprType>::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon49
MatrixConjugateReturnType	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::remove_all<typename MatrixType::ConjugateReturnType>::type MatrixConjugateReturnType;$/;"	t	class:Eigen::TriangularView
MatrixHReturnType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef internal::HessenbergDecompositionMatrixHReturnType<MatrixType> MatrixHReturnType;$/;"	t	class:Eigen::HessenbergDecomposition
MatrixL	include/Eigen/src/Cholesky/LDLT.h	/^  typedef const TriangularView<const MatrixType, UnitLower> MatrixL;$/;"	t	struct:Eigen::internal::LDLT_Traits
MatrixL	include/Eigen/src/Cholesky/LDLT.h	/^  typedef const TriangularView<const typename MatrixType::AdjointReturnType, UnitLower> MatrixL;$/;"	t	struct:Eigen::internal::LDLT_Traits
MatrixL	include/Eigen/src/Cholesky/LLT.h	/^  typedef const TriangularView<const MatrixType, Lower> MatrixL;$/;"	t	struct:Eigen::internal::LLT_Traits
MatrixL	include/Eigen/src/Cholesky/LLT.h	/^  typedef const TriangularView<const typename MatrixType::AdjointReturnType, Lower> MatrixL;$/;"	t	struct:Eigen::internal::LLT_Traits
MatrixL	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename Traits::MatrixL  MatrixL;$/;"	t	class:Eigen::SimplicialLDLT
MatrixL	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename Traits::MatrixL  MatrixL;$/;"	t	class:Eigen::SimplicialLLT
MatrixL	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SparseTriangularView<CholMatrixType, Eigen::Lower>  MatrixL;$/;"	t	struct:Eigen::internal::traits
MatrixL	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SparseTriangularView<CholMatrixType, Eigen::UnitLower>  MatrixL;$/;"	t	struct:Eigen::internal::traits
MatrixOptions	include/Eigen/src/SVD/JacobiSVD.h	/^      MatrixOptions = MatrixType::Options$/;"	e	enum:Eigen::JacobiSVD::__anon465
MatrixQReturnType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef internal::FullPivHouseholderQRMatrixQReturnType<MatrixType> MatrixQReturnType;$/;"	t	class:Eigen::FullPivHouseholderQR
MatrixQType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, RowsAtCompileTime, Options, MaxRowsAtCompileTime, MaxRowsAtCompileTime> MatrixQType;$/;"	t	class:Eigen::ColPivHouseholderQR
MatrixQType	include/Eigen/src/QR/HouseholderQR.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, RowsAtCompileTime, (MatrixType::Flags&RowMajorBit) ? RowMajor : ColMajor, MaxRowsAtCompileTime, MaxRowsAtCompileTime> MatrixQType;$/;"	t	class:Eigen::HouseholderQR
MatrixRBlockType	include/Eigen/src/Eigen2Support/QR.h	/^    typedef Block<const MatrixType, MatrixType::ColsAtCompileTime, MatrixType::ColsAtCompileTime> MatrixRBlockType;$/;"	t	class:Eigen::QR
MatrixRows	include/Eigen/src/Core/Block.h	/^    MatrixRows = traits<XprType>::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon49
MatrixTReturnType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef internal::TridiagonalizationMatrixTReturnType<MatrixTypeRealView> MatrixTReturnType;$/;"	t	class:Eigen::Tridiagonalization
MatrixType	include/Eigen/src/Cholesky/LDLT.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::LDLT
MatrixType	include/Eigen/src/Cholesky/LLT.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::LLT
MatrixType	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::CholmodBase
MatrixType	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::CholmodDecomposition
MatrixType	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::CholmodSimplicialLDLT
MatrixType	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::CholmodSimplicialLLT
MatrixType	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::CholmodSupernodalLLT
MatrixType	include/Eigen/src/Core/GeneralProduct.h	/^    typedef typename internal::conditional<int(Side)==OnTheRight,_LhsNested,_RhsNested>::type MatrixType;$/;"	t	class:Eigen::GeneralProduct
MatrixType	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::TriangularView
MatrixType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,HDim,HDim> MatrixType;$/;"	t	class:Eigen::Transform
MatrixType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef typename TransformType::MatrixType MatrixType;$/;"	t	struct:Eigen::ei_transform_product_impl
MatrixType	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::ComplexEigenSolver
MatrixType	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::ComplexSchur
MatrixType	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::EigenSolver
MatrixType	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::GeneralizedEigenSolver
MatrixType	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::GeneralizedSelfAdjointEigenSolver
MatrixType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::HessenbergDecomposition
MatrixType	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef _MatrixType MatrixType;$/;"	t	class:Eigen::RealQZ
MatrixType	include/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::RealSchur
MatrixType	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SelfAdjointEigenSolver
MatrixType	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^  typedef typename SolverType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::direct_selfadjoint_eigenvalues
MatrixType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::Tridiagonalization
MatrixType	include/Eigen/src/Geometry/Transform.h	/^  typedef typename Transform<Scalar,Dim,AffineCompact,Options>::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::transform_take_affine_part
MatrixType	include/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::transform_left_product_impl
MatrixType	include/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::transform_take_affine_part
MatrixType	include/Eigen/src/Geometry/Transform.h	/^  typedef typename internal::make_proper_matrix_type<Scalar,Rows,HDim,Options>::type MatrixType;$/;"	t	class:Eigen::Transform
MatrixType	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    typedef Matrix<Scalar,Dynamic,Dynamic> MatrixType;$/;"	t	class:Eigen::DiagonalPreconditioner
MatrixType	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef _MatrixType MatrixType;$/;"	t	class:Eigen::BiCGSTAB
MatrixType	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef _MatrixType MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixType	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef _MatrixType MatrixType;$/;"	t	class:Eigen::ConjugateGradient
MatrixType	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef _MatrixType MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixType	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    typedef Matrix<Scalar,Dynamic,Dynamic> MatrixType;$/;"	t	class:Eigen::IncompleteLUT
MatrixType	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  typedef typename internal::traits<Derived>::MatrixType MatrixType;$/;"	t	class:Eigen::IterativeSolverBase
MatrixType	include/Eigen/src/LU/FullPivLU.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::FullPivLU
MatrixType	include/Eigen/src/LU/PartialPivLU.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::PartialPivLU
MatrixType	include/Eigen/src/LU/PartialPivLU.h	/^  typedef Block<MapLU, Dynamic, Dynamic> MatrixType;$/;"	t	struct:Eigen::internal::partial_lu_impl
MatrixType	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::PastixBase
MatrixType	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::PastixLDLT
MatrixType	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::PastixLLT
MatrixType	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::PastixLU
MatrixType	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	struct:Eigen::internal::pastix_traits
MatrixType	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	struct:Eigen::internal::pardiso_traits
MatrixType	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Traits::MatrixType MatrixType;$/;"	t	class:Eigen::PardisoImpl
MatrixType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::ColPivHouseholderQR
MatrixType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::FullPivHouseholderQR
MatrixType	include/Eigen/src/QR/HouseholderQR.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::HouseholderQR
MatrixType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    typedef SparseMatrix<Scalar, ColMajor, Index> MatrixType;$/;"	t	class:Eigen::SPQR
MatrixType	include/Eigen/src/SVD/JacobiSVD.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::JacobiSVD
MatrixType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
MatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SimplicialCholesky
MatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SimplicialLDLT
MatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SimplicialLLT
MatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename internal::traits<Derived>::MatrixType MatrixType;$/;"	t	class:Eigen::SimplicialCholeskyBase
MatrixType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef _MatrixType MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixType	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef SparseMatrix<_Scalar, _Options, _Index> MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixType	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef _MatrixType MatrixType; $/;"	t	class:Eigen::SparseLU
MatrixType	include/Eigen/src/SparseLU/SparseLUImpl.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> MatrixType; $/;"	t	class:Eigen::internal::SparseLUImpl
MatrixType	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SparseQR
MatrixType	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef typename SparseQRType::QRMatrixType MatrixType;$/;"	t	struct:Eigen::SparseQR_QProduct
MatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SuperILU
MatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SuperLU
MatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::SuperLUBase
MatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  typedef Derived MatrixType;$/;"	t	struct:Eigen::SluMatrixMapHelper
MatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  typedef Matrix<Scalar,Rows,Cols,Options,MRows,MCols> MatrixType;$/;"	t	struct:Eigen::SluMatrixMapHelper
MatrixType	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Eigen::UmfPackLU
MatrixType	include/Eigen/src/misc/Image.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::image_retval_base
MatrixType	include/Eigen/src/misc/Image.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixType	include/Eigen/src/misc/Kernel.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixType	include/Eigen/src/misc/Solve.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixType	include/Eigen/src/misc/SparseSolve.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:Eigen::internal::traits
MatrixTypeCleaned	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<MatrixType>::type MatrixTypeCleaned;$/;"	t	struct:Eigen::internal::traits
MatrixTypeInnerStride	include/Eigen/src/Core/CwiseUnaryView.h	/^    MatrixTypeInnerStride =  inner_stride_at_compile_time<MatrixType>::ret,$/;"	e	enum:Eigen::internal::traits::__anon57
MatrixTypeIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename _MatrixTypeNested::InnerIterator MatrixTypeIterator;$/;"	t	class:Eigen::CwiseUnaryOpImpl
MatrixTypeIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename _MatrixTypeNested::InnerIterator MatrixTypeIterator;$/;"	t	class:Eigen::CwiseUnaryViewImpl
MatrixTypeNested	include/Eigen/src/Core/CwiseUnaryView.h	/^  typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Core/Diagonal.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Core/Replicate.h	/^    typedef typename internal::traits<Replicate>::MatrixTypeNested MatrixTypeNested;$/;"	t	class:Eigen::Replicate
MatrixTypeNested	include/Eigen/src/Core/Replicate.h	/^  typedef typename nested<MatrixType,Factor>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Core/Reverse.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename internal::traits<SelfAdjointView>::MatrixTypeNested MatrixTypeNested;$/;"	t	class:Eigen::SelfAdjointView
MatrixTypeNested	include/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Core/Transpose.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::MatrixTypeNested MatrixTypeNested;$/;"	t	class:Eigen::TriangularView
MatrixTypeNested	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::traits<PartialReduxExpr>::MatrixTypeNested MatrixTypeNested;$/;"	t	class:Eigen::PartialReduxExpr
MatrixTypeNested	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Eigen2Support/Minor.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/LU/Inverse.h	/^  typedef typename internal::eval<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::inverse_impl
MatrixTypeNested	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNested	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	class:Eigen::SparseSelfAdjointView
MatrixTypeNested	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	class:Eigen::SparseSymmetricPermutationProduct
MatrixTypeNested	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	class:Eigen::SparseTriangularView
MatrixTypeNested	include/Eigen/src/SparseCore/SparseView.h	/^  typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	class:Eigen::SparseView
MatrixTypeNestedCleaned	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename remove_all<typename MatrixType::Nested>::type MatrixTypeNestedCleaned;$/;"	t	struct:Eigen::internal::permut_matrix_product_retval
MatrixTypeNestedCleaned	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename internal::traits<SelfAdjointView>::MatrixTypeNestedCleaned MatrixTypeNestedCleaned;$/;"	t	class:Eigen::SelfAdjointView
MatrixTypeNestedCleaned	include/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNestedCleaned	include/Eigen/src/Core/Transpositions.h	/^    typedef typename remove_all<typename MatrixType::Nested>::type MatrixTypeNestedCleaned;$/;"	t	struct:Eigen::internal::transposition_matrix_product_retval
MatrixTypeNestedCleaned	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::MatrixTypeNestedCleaned MatrixTypeNestedCleaned;$/;"	t	class:Eigen::TriangularView
MatrixTypeNestedCleaned	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNestedCleaned	include/Eigen/src/LU/Inverse.h	/^  typedef typename remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned;$/;"	t	struct:Eigen::internal::inverse_impl
MatrixTypeNestedCleaned	include/Eigen/src/SparseCore/SparsePermutation.h	/^    typedef typename remove_all<typename MatrixType::Nested>::type MatrixTypeNestedCleaned;$/;"	t	struct:Eigen::internal::permut_sparsematrix_product_retval
MatrixTypeNestedCleaned	include/Eigen/src/SparseCore/SparsePermutation.h	/^  typedef typename remove_all<typename MatrixType::Nested>::type MatrixTypeNestedCleaned;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNestedCleaned	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    typedef typename internal::remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned;$/;"	t	class:Eigen::SparseTriangularView
MatrixTypeNestedNonRef	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::MatrixTypeNestedNonRef MatrixTypeNestedNonRef;$/;"	t	class:Eigen::TriangularView
MatrixTypeNestedNonRef	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename remove_reference<MatrixTypeNested>::type MatrixTypeNestedNonRef;$/;"	t	struct:Eigen::internal::traits
MatrixTypeNestedNonRef	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    typedef typename internal::remove_reference<MatrixTypeNested>::type MatrixTypeNestedNonRef;$/;"	t	class:Eigen::SparseTriangularView
MatrixTypeNestedPlain	include/Eigen/src/Core/Transpose.h	/^  typedef typename remove_reference<MatrixTypeNested>::type MatrixTypeNestedPlain;$/;"	t	struct:Eigen::internal::traits
MatrixTypeOuterStride	include/Eigen/src/Core/Diagonal.h	/^    MatrixTypeOuterStride = outer_stride_at_compile_time<MatrixType>::ret,$/;"	e	enum:Eigen::internal::traits::__anon64
MatrixTypeRealView	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename internal::remove_all<typename MatrixType::RealReturnType>::type MatrixTypeRealView;$/;"	t	class:Eigen::Tridiagonalization
MatrixTypeReverseIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename _MatrixTypeNested::ReverseInnerIterator MatrixTypeReverseIterator;$/;"	t	class:Eigen::CwiseUnaryOpImpl
MatrixTypeReverseIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename _MatrixTypeNested::ReverseInnerIterator MatrixTypeReverseIterator;$/;"	t	class:Eigen::CwiseUnaryViewImpl
MatrixU	include/Eigen/src/Cholesky/LDLT.h	/^  typedef const TriangularView<const MatrixType, UnitUpper> MatrixU;$/;"	t	struct:Eigen::internal::LDLT_Traits
MatrixU	include/Eigen/src/Cholesky/LDLT.h	/^  typedef const TriangularView<const typename MatrixType::AdjointReturnType, UnitUpper> MatrixU;$/;"	t	struct:Eigen::internal::LDLT_Traits
MatrixU	include/Eigen/src/Cholesky/LLT.h	/^  typedef const TriangularView<const MatrixType, Upper> MatrixU;$/;"	t	struct:Eigen::internal::LLT_Traits
MatrixU	include/Eigen/src/Cholesky/LLT.h	/^  typedef const TriangularView<const typename MatrixType::AdjointReturnType, Upper> MatrixU;$/;"	t	struct:Eigen::internal::LLT_Traits
MatrixU	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename Traits::MatrixU  MatrixU;$/;"	t	class:Eigen::SimplicialLDLT
MatrixU	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename Traits::MatrixU  MatrixU;$/;"	t	class:Eigen::SimplicialLLT
MatrixU	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SparseTriangularView<typename CholMatrixType::AdjointReturnType, Eigen::UnitUpper> MatrixU;$/;"	t	struct:Eigen::internal::traits
MatrixU	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef SparseTriangularView<typename CholMatrixType::AdjointReturnType, Eigen::Upper>   MatrixU;$/;"	t	struct:Eigen::internal::traits
MatrixUType	include/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, MinSize> MatrixUType;$/;"	t	class:Eigen::SVD
MatrixUType	include/Eigen/src/SVD/JacobiSVD.h	/^            MatrixUType;$/;"	t	class:Eigen::JacobiSVD
MatrixVType	include/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::ColsAtCompileTime, MatrixType::ColsAtCompileTime> MatrixVType;$/;"	t	class:Eigen::SVD
MatrixVType	include/Eigen/src/SVD/JacobiSVD.h	/^            MatrixVType;$/;"	t	class:Eigen::JacobiSVD
MatrixWrapper	include/Eigen/src/Core/ArrayWrapper.h	/^    inline MatrixWrapper(ExpressionType& a_matrix) : m_expression(a_matrix) {}$/;"	f	class:Eigen::MatrixWrapper
MatrixWrapper	include/Eigen/src/Core/ArrayWrapper.h	/^class MatrixWrapper : public MatrixBase<MatrixWrapper<ExpressionType> >$/;"	c	namespace:Eigen
MatrixXpr	include/Eigen/src/Core/util/Constants.h	/^struct MatrixXpr {};$/;"	s	namespace:Eigen
Max	include/Eigen/src/Geometry/AlignedBox.h	/^    Min=0, Max=1,$/;"	e	enum:Eigen::AlignedBox::CornerType
MaxCols	include/Eigen/src/Core/GeneralProduct.h	/^    MaxCols  = _Rhs::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::product_type::__anon145
MaxColsAtCompileTime	include/Eigen/src/Cholesky/LDLT.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::LDLT::__anon1
MaxColsAtCompileTime	include/Eigen/src/Cholesky/LLT.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::LLT::__anon2
MaxColsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^      MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
MaxColsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    MaxColsAtCompileTime = _Cols,$/;"	e	enum:Eigen::internal::traits::__anon47
MaxColsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    MaxColsAtCompileTime = _Cols,$/;"	e	enum:Eigen::internal::traits::__anon48
MaxColsAtCompileTime	include/Eigen/src/Core/Block.h	/^    MaxColsAtCompileTime = BlockCols==0 ? 0$/;"	e	enum:Eigen::internal::traits::__anon49
MaxColsAtCompileTime	include/Eigen/src/Core/CwiseBinaryOp.h	/^    MaxColsAtCompileTime = traits<Ancestor>::MaxColsAtCompileTime$/;"	e	enum:Eigen::internal::traits::__anon53
MaxColsAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,$/;"	e	enum:Eigen::DenseBase::__anon58
MaxColsAtCompileTime	include/Eigen/src/Core/Diagonal.h	/^    MaxColsAtCompileTime = 1,$/;"	e	enum:Eigen::internal::traits::__anon64
MaxColsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^      MaxColsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,$/;"	e	enum:Eigen::DiagonalBase::__anon66
MaxColsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^    MaxColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon68
MaxColsAtCompileTime	include/Eigen/src/Core/DiagonalProduct.h	/^    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon69
MaxColsAtCompileTime	include/Eigen/src/Core/Matrix.h	/^    MaxColsAtCompileTime = _MaxCols,$/;"	e	enum:Eigen::internal::traits::__anon184
MaxColsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      MaxColsAtCompileTime = Traits::MaxColsAtCompileTime$/;"	e	enum:Eigen::PermutationBase::__anon189
MaxColsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      MaxColsAtCompileTime = Traits::MaxColsAtCompileTime$/;"	e	enum:Eigen::Transpose::__anon191
MaxColsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^    MaxColsAtCompileTime = IndicesType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon190
MaxColsAtCompileTime	include/Eigen/src/Core/ProductBase.h	/^    MaxColsAtCompileTime = traits<Rhs>::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon196
MaxColsAtCompileTime	include/Eigen/src/Core/Replicate.h	/^    MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon239
MaxColsAtCompileTime	include/Eigen/src/Core/Reverse.h	/^    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon241
MaxColsAtCompileTime	include/Eigen/src/Core/Select.h	/^    MaxColsAtCompileTime = ConditionMatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon243
MaxColsAtCompileTime	include/Eigen/src/Core/Transpose.h	/^    MaxColsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon253
MaxColsAtCompileTime	include/Eigen/src/Core/TriangularMatrix.h	/^      MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime$/;"	e	enum:Eigen::TriangularBase::__anon256
MaxColsAtCompileTime	include/Eigen/src/Core/VectorwiseOp.h	/^    MaxColsAtCompileTime = Direction==Horizontal ? 1 : MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon330
MaxColsAtCompileTime	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      MaxColsAtCompileTime = _RhsNested::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon197
MaxColsAtCompileTime	include/Eigen/src/Eigen2Support/Minor.h	/^    MaxColsAtCompileTime = (MatrixType::MaxColsAtCompileTime != Dynamic) ?$/;"	e	enum:Eigen::internal::traits::__anon357
MaxColsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::ComplexEigenSolver::__anon359
MaxColsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::ComplexSchur::__anon360
MaxColsAtCompileTime	include/Eigen/src/Eigenvalues/EigenSolver.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::EigenSolver::__anon361
MaxColsAtCompileTime	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::GeneralizedEigenSolver::__anon362
MaxColsAtCompileTime	include/Eigen/src/Eigenvalues/RealQZ.h	/^        MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::RealQZ::__anon364
MaxColsAtCompileTime	include/Eigen/src/Eigenvalues/RealSchur.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::RealSchur::__anon365
MaxColsAtCompileTime	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::SelfAdjointEigenSolver::__anon366
MaxColsAtCompileTime	include/Eigen/src/Geometry/Homogeneous.h	/^    MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon370
MaxColsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^      MaxColsAtCompileTime = internal::traits<HouseholderSequence>::MaxColsAtCompileTime$/;"	e	enum:Eigen::HouseholderSequence::__anon393
MaxColsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^    MaxColsAtCompileTime = MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon392
MaxColsAtCompileTime	include/Eigen/src/LU/FullPivLU.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::FullPivLU::__anon397
MaxColsAtCompileTime	include/Eigen/src/LU/PartialPivLU.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::PartialPivLU::__anon400
MaxColsAtCompileTime	include/Eigen/src/QR/ColPivHouseholderQR.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::ColPivHouseholderQR::__anon412
MaxColsAtCompileTime	include/Eigen/src/QR/FullPivHouseholderQR.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::FullPivHouseholderQR::__anon413
MaxColsAtCompileTime	include/Eigen/src/QR/HouseholderQR.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:Eigen::HouseholderQR::__anon414
MaxColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::JacobiSVD::__anon465
MaxColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon462
MaxColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon463
MaxColsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon464
MaxColsAtCompileTime	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    MaxColsAtCompileTime = Tr ? int(traits<Lhs>::MaxColsAtCompileTime)  : int(traits<Rhs>::MaxColsAtCompileTime),$/;"	e	enum:Eigen::internal::traits::__anon432
MaxColsAtCompileTime	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    MaxColsAtCompileTime = _Rhs::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon433
MaxColsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    MaxColsAtCompileTime = 1,$/;"	e	enum:Eigen::internal::traits::__anon437
MaxColsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    MaxColsAtCompileTime = Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon436
MaxColsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
MaxColsAtCompileTime	include/Eigen/src/SparseCore/SparseProduct.h	/^    MaxColsAtCompileTime = _RhsNested::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon443
MaxColsAtCompileTime	include/Eigen/src/SparseCore/SparseVector.h	/^    MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon447
MaxDepth	include/Eigen/src/Core/GeneralProduct.h	/^    MaxDepth = EIGEN_SIZE_MIN_PREFER_FIXED(_Lhs::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::product_type::__anon145
MaxDepthAtCompileTime	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      MaxDepthAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED(Lhs::MaxColsAtCompileTime,Rhs::MaxRowsAtCompileTime)$/;"	e	enum:Eigen::GeneralProduct::__anon211
MaxDiagSizeAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^      MaxDiagSizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED(MaxRowsAtCompileTime,MaxColsAtCompileTime),$/;"	e	enum:Eigen::JacobiSVD::__anon465
MaxRows	include/Eigen/src/Core/GeneralProduct.h	/^    MaxRows  = _Lhs::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::product_type::__anon145
MaxRowsAtCompileTime	include/Eigen/src/Cholesky/LDLT.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::LDLT::__anon1
MaxRowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^      MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
MaxRowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    MaxRowsAtCompileTime = _Rows,$/;"	e	enum:Eigen::internal::traits::__anon47
MaxRowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    MaxRowsAtCompileTime = _Rows,$/;"	e	enum:Eigen::internal::traits::__anon48
MaxRowsAtCompileTime	include/Eigen/src/Core/Block.h	/^    MaxRowsAtCompileTime = BlockRows==0 ? 0$/;"	e	enum:Eigen::internal::traits::__anon49
MaxRowsAtCompileTime	include/Eigen/src/Core/CwiseBinaryOp.h	/^    MaxRowsAtCompileTime = traits<Ancestor>::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon53
MaxRowsAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::DenseBase::__anon58
MaxRowsAtCompileTime	include/Eigen/src/Core/Diagonal.h	/^    MaxRowsAtCompileTime = int(MatrixType::MaxSizeAtCompileTime) == Dynamic ? Dynamic$/;"	e	enum:Eigen::internal::traits::__anon64
MaxRowsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^      MaxRowsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,$/;"	e	enum:Eigen::DiagonalBase::__anon66
MaxRowsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^    MaxRowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon68
MaxRowsAtCompileTime	include/Eigen/src/Core/DiagonalProduct.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon69
MaxRowsAtCompileTime	include/Eigen/src/Core/Matrix.h	/^    MaxRowsAtCompileTime = _MaxRows,$/;"	e	enum:Eigen::internal::traits::__anon184
MaxRowsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      MaxRowsAtCompileTime = Traits::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::PermutationBase::__anon189
MaxRowsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      MaxRowsAtCompileTime = Traits::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::Transpose::__anon191
MaxRowsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^    MaxRowsAtCompileTime = IndicesType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon190
MaxRowsAtCompileTime	include/Eigen/src/Core/ProductBase.h	/^    MaxRowsAtCompileTime = traits<Lhs>::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon196
MaxRowsAtCompileTime	include/Eigen/src/Core/Replicate.h	/^    MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon239
MaxRowsAtCompileTime	include/Eigen/src/Core/Reverse.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon241
MaxRowsAtCompileTime	include/Eigen/src/Core/Select.h	/^    MaxRowsAtCompileTime = ConditionMatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon243
MaxRowsAtCompileTime	include/Eigen/src/Core/Transpose.h	/^    MaxRowsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon253
MaxRowsAtCompileTime	include/Eigen/src/Core/TriangularMatrix.h	/^      MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::TriangularBase::__anon256
MaxRowsAtCompileTime	include/Eigen/src/Core/VectorwiseOp.h	/^    MaxRowsAtCompileTime = Direction==Vertical   ? 1 : MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon330
MaxRowsAtCompileTime	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      MaxRowsAtCompileTime = _LhsNested::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon197
MaxRowsAtCompileTime	include/Eigen/src/Eigen2Support/Minor.h	/^    MaxRowsAtCompileTime = (MatrixType::MaxRowsAtCompileTime != Dynamic) ?$/;"	e	enum:Eigen::internal::traits::__anon357
MaxRowsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::ComplexEigenSolver::__anon359
MaxRowsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::ComplexSchur::__anon360
MaxRowsAtCompileTime	include/Eigen/src/Eigenvalues/EigenSolver.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::EigenSolver::__anon361
MaxRowsAtCompileTime	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::GeneralizedEigenSolver::__anon362
MaxRowsAtCompileTime	include/Eigen/src/Eigenvalues/RealQZ.h	/^        MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::RealQZ::__anon364
MaxRowsAtCompileTime	include/Eigen/src/Eigenvalues/RealSchur.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::RealSchur::__anon365
MaxRowsAtCompileTime	include/Eigen/src/Geometry/Homogeneous.h	/^    MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon370
MaxRowsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^      MaxRowsAtCompileTime = internal::traits<HouseholderSequence>::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::HouseholderSequence::__anon393
MaxRowsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^    MaxRowsAtCompileTime = Side==OnTheLeft ? traits<VectorsType>::MaxRowsAtCompileTime$/;"	e	enum:Eigen::internal::traits::__anon392
MaxRowsAtCompileTime	include/Eigen/src/LU/FullPivLU.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::FullPivLU::__anon397
MaxRowsAtCompileTime	include/Eigen/src/LU/PartialPivLU.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::PartialPivLU::__anon400
MaxRowsAtCompileTime	include/Eigen/src/QR/ColPivHouseholderQR.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::ColPivHouseholderQR::__anon412
MaxRowsAtCompileTime	include/Eigen/src/QR/FullPivHouseholderQR.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::FullPivHouseholderQR::__anon413
MaxRowsAtCompileTime	include/Eigen/src/QR/HouseholderQR.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::HouseholderQR::__anon414
MaxRowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::JacobiSVD::__anon465
MaxRowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon461
MaxRowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon462
MaxRowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon463
MaxRowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon464
MaxRowsAtCompileTime	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    MaxRowsAtCompileTime = Tr ? int(traits<Rhs>::MaxRowsAtCompileTime)  : int(traits<Lhs>::MaxRowsAtCompileTime),$/;"	e	enum:Eigen::internal::traits::__anon432
MaxRowsAtCompileTime	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    MaxRowsAtCompileTime = _Lhs::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon433
MaxRowsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    MaxRowsAtCompileTime = Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon436
MaxRowsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    MaxRowsAtCompileTime = Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon437
MaxRowsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
MaxRowsAtCompileTime	include/Eigen/src/SparseCore/SparseProduct.h	/^    MaxRowsAtCompileTime = _LhsNested::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon443
MaxRowsAtCompileTime	include/Eigen/src/SparseCore/SparseVector.h	/^    MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon447
MaxSize	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      MaxSize = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::HessenbergDecomposition::__anon363
MaxSize	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      MaxSize = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::Tridiagonalization::__anon367
MaxSizeAtCompileTime	include/Eigen/src/Core/Assign.h	/^    MaxSizeAtCompileTime = Derived::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::assign_traits::__anon34
MaxSizeAtCompileTime	include/Eigen/src/Core/Assign_MKL.h	/^      MaxSizeAtCompileTime = Dst::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
MaxSizeAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      MaxSizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:Eigen::DenseBase::__anon58
MaxSizeAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      MaxSizeAtCompileTime = (internal::size_at_compile_time<MaxRowsAtCompileTime,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
MaxSizeMinusOne	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      MaxSizeMinusOne = MaxSize == Dynamic ? Dynamic : MaxSize - 1$/;"	e	enum:Eigen::HessenbergDecomposition::__anon363
MaxSizeMinusOne	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      MaxSizeMinusOne = MaxSize == Dynamic ? Dynamic : (MaxSize > 1 ? MaxSize - 1 : 1)$/;"	e	enum:Eigen::Tridiagonalization::__anon367
MaxSmallDimAtCompileTime	include/Eigen/src/LU/FullPivLU.h	/^  enum { MaxSmallDimAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED($/;"	e	enum:Eigen::internal::image_retval::__anon399
MaxSmallDimAtCompileTime	include/Eigen/src/LU/FullPivLU.h	/^  enum { MaxSmallDimAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED($/;"	e	enum:Eigen::internal::kernel_retval::__anon398
MayEnableVml	include/Eigen/src/Core/Assign_MKL.h	/^      MayEnableVml = MightEnableVml && LargeEnough,$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
MayInnerVectorize	include/Eigen/src/Core/Assign.h	/^    MayInnerVectorize  = MightVectorize && int(InnerSize)!=Dynamic && int(InnerSize)%int(PacketSize)==0$/;"	e	enum:Eigen::internal::assign_traits::__anon35
MayLinearVectorize	include/Eigen/src/Core/Assign.h	/^    MayLinearVectorize = MightVectorize && MayLinearize && DstHasDirectAccess$/;"	e	enum:Eigen::internal::assign_traits::__anon35
MayLinearVectorize	include/Eigen/src/Core/Redux.h	/^    MayLinearVectorize = MightVectorize && (int(Derived::Flags)&LinearAccessBit),$/;"	e	enum:Eigen::internal::redux_traits::__anon227
MayLinearize	include/Eigen/src/Core/Assign.h	/^    MayLinearize = StorageOrdersAgree && (int(Derived::Flags) & int(OtherDerived::Flags) & LinearAccessBit),$/;"	e	enum:Eigen::internal::assign_traits::__anon35
MayLinearize	include/Eigen/src/Core/Assign_MKL.h	/^      MayLinearize = MayEnableVml && MightLinearize$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
MaySliceVectorize	include/Eigen/src/Core/Assign.h	/^    MaySliceVectorize  = MightVectorize && DstHasDirectAccess$/;"	e	enum:Eigen::internal::assign_traits::__anon35
MaySliceVectorize	include/Eigen/src/Core/Redux.h	/^    MaySliceVectorize  = MightVectorize && int(InnerMaxSize)>=3*PacketSize$/;"	e	enum:Eigen::internal::redux_traits::__anon227
MayUnrollCompletely	include/Eigen/src/Core/Assign.h	/^    MayUnrollCompletely = int(Derived::SizeAtCompileTime) != Dynamic$/;"	e	enum:Eigen::internal::assign_traits::__anon37
MayUnrollInner	include/Eigen/src/Core/Assign.h	/^    MayUnrollInner      = int(InnerSize) != Dynamic$/;"	e	enum:Eigen::internal::assign_traits::__anon37
MemType	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^typedef enum {LUSUP, UCOL, LSUB, USUB, LLVL, ULVL} MemType; $/;"	t	namespace:Eigen::internal	typeref:enum:Eigen::internal::__anon456
MetisOrdering	include/Eigen/src/MetisSupport/MetisSupport.h	/^class MetisOrdering$/;"	c	namespace:Eigen
MightEnableVml	include/Eigen/src/Core/Assign_MKL.h	/^      MightEnableVml =  vml_call<UnaryOp>::IsSupported && StorageOrdersAgree && DstHasDirectAccess && SrcHasDirectAccess$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
MightLinearize	include/Eigen/src/Core/Assign_MKL.h	/^      MightLinearize = MightEnableVml && (int(Dst::Flags) & int(Src::Flags) & LinearAccessBit),$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
MightVectorize	include/Eigen/src/Core/Assign.h	/^    MightVectorize = StorageOrdersAgree$/;"	e	enum:Eigen::internal::assign_traits::__anon35
MightVectorize	include/Eigen/src/Core/Redux.h	/^    MightVectorize = (int(Derived::Flags)&ActualPacketAccessBit)$/;"	e	enum:Eigen::internal::redux_traits::__anon227
Min	include/Eigen/src/Geometry/AlignedBox.h	/^    Min=0, Max=1,$/;"	e	enum:Eigen::AlignedBox::CornerType
MinRowsAtCompileTime	include/Eigen/src/Geometry/Umeyama.h	/^    MinRowsAtCompileTime = EIGEN_SIZE_MIN_PREFER_DYNAMIC(MatrixType::RowsAtCompileTime, OtherMatrixType::RowsAtCompileTime),$/;"	e	enum:Eigen::internal::umeyama_transform_matrix_type::__anon390
MinSize	include/Eigen/src/Eigen2Support/SVD.h	/^      MinSize = EIGEN_SIZE_MIN_PREFER_DYNAMIC(MatrixType::RowsAtCompileTime, MatrixType::ColsAtCompileTime)$/;"	e	enum:Eigen::SVD::__anon358
Minor	include/Eigen/src/Eigen2Support/Minor.h	/^    inline Minor(const MatrixType& matrix,$/;"	f	class:Eigen::Minor
Minor	include/Eigen/src/Eigen2Support/Minor.h	/^template<typename MatrixType> class Minor$/;"	c	namespace:Eigen
Mode	include/Eigen/src/Core/SelfAdjointView.h	/^      Mode = internal::traits<SelfAdjointView>::Mode$/;"	e	enum:Eigen::SelfAdjointView::__anon245
Mode	include/Eigen/src/Core/SelfAdjointView.h	/^    Mode = UpLo | SelfAdjoint,$/;"	e	enum:Eigen::internal::traits::__anon244
Mode	include/Eigen/src/Core/TriangularMatrix.h	/^      Mode = _Mode,$/;"	e	enum:Eigen::TriangularView::__anon258
Mode	include/Eigen/src/Core/TriangularMatrix.h	/^      Mode = internal::traits<Derived>::Mode,$/;"	e	enum:Eigen::TriangularBase::__anon256
Mode	include/Eigen/src/Core/TriangularMatrix.h	/^    Mode = _Mode,$/;"	e	enum:Eigen::internal::traits::__anon257
Mode	include/Eigen/src/Geometry/Transform.h	/^    Mode = Transform::Mode,$/;"	e	enum:Eigen::internal::transform_traits::__anon382
Mode	include/Eigen/src/Geometry/Transform.h	/^    Mode = _Mode,$/;"	e	enum:Eigen::Transform::__anon383
Mode	include/Eigen/src/Geometry/Transform.h	/^    Mode =$/;"	e	enum:Eigen::internal::transform_product_result::__anon385
MoveOuter	include/Eigen/src/SparseCore/SparsePermutation.h	/^      MoveOuter = SrcStorageOrder==RowMajor ? Side==OnTheLeft : Side==OnTheRight$/;"	e	enum:Eigen::internal::permut_sparsematrix_product_retval::__anon441
MoveOuter	include/Eigen/src/SparseCore/SparsePermutation.h	/^    MoveOuter = SrcStorageOrder==RowMajor ? Side==OnTheLeft : Side==OnTheRight$/;"	e	enum:Eigen::internal::traits::__anon440
MulCost	include/Eigen/src/Core/NumTraits.h	/^    MulCost = 1$/;"	e	enum:Eigen::GenericNumTraits::__anon188
NCMatrix	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> NCMatrix;$/;"	t	class:Eigen::SparseLU
NColsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NColsBlockXpr { typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	s
NRowsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NRowsBlockXpr { typedef Block<Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	s
NUMERIC_TYPE_MUST_BE_REAL	include/Eigen/src/Core/util/StaticAssert.h	/^        NUMERIC_TYPE_MUST_BE_REAL,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
NaturalOrdering	include/Eigen/src/OrderingMethods/Ordering.h	/^class NaturalOrdering$/;"	c	namespace:Eigen
NeedToConjugate	include/Eigen/src/Core/util/BlasUtil.h	/^    NeedToConjugate = Base::NeedToConjugate ? 0 : IsComplex$/;"	e	enum:Eigen::internal::blas_traits::__anon261
NeedToConjugate	include/Eigen/src/Core/util/BlasUtil.h	/^    NeedToConjugate = false,$/;"	e	enum:Eigen::internal::blas_traits::__anon260
NeedsToAlign	include/Eigen/src/Core/PlainObjectBase.h	/^    enum { NeedsToAlign = SizeAtCompileTime != Dynamic && (internal::traits<Derived>::Flags & AlignedBit) != 0 };$/;"	e	enum:Eigen::PlainObjectBase::__anon193
NegativeSemiDef	include/Eigen/src/Cholesky/LDLT.h	/^  enum SignMatrix { PositiveSemiDef, NegativeSemiDef, ZeroSign, Indefinite };$/;"	e	enum:Eigen::internal::SignMatrix
NestByRefBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int NestByRefBit = 0x100;$/;"	m	namespace:Eigen
NestByValue	include/Eigen/src/Core/NestByValue.h	/^    inline NestByValue(const ExpressionType& matrix) : m_expression(matrix) {}$/;"	f	class:Eigen::NestByValue
NestByValue	include/Eigen/src/Core/NestByValue.h	/^template<typename ExpressionType> class NestByValue$/;"	c	namespace:Eigen
Nested	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef DiagonalWrapper Nested;$/;"	t	class:Eigen::DiagonalWrapper
Nested	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef const DiagonalMatrix& Nested;$/;"	t	class:Eigen::DiagonalMatrix
NestedExpressionType	include/Eigen/src/Core/ArrayWrapper.h	/^    typedef typename internal::nested<ExpressionType>::type NestedExpressionType;$/;"	t	class:Eigen::ArrayWrapper
NestedExpressionType	include/Eigen/src/Core/ArrayWrapper.h	/^    typedef typename internal::nested<ExpressionType>::type NestedExpressionType;$/;"	t	class:Eigen::MatrixWrapper
NewInf	include/Eigen/src/Core/util/Meta.h	/^      NewInf = int(TakeInf) ? InfX : int(MidX),$/;"	m	namespace:Eigen::internal
NewInf	include/Eigen/src/Eigen2Support/Meta.h	/^      NewInf = int(TakeInf) ? InfX : int(MidX),$/;"	m	namespace:Eigen
NewSup	include/Eigen/src/Core/util/Meta.h	/^      NewSup = int(TakeInf) ? int(MidX) : SupX$/;"	m	namespace:Eigen::internal
NewSup	include/Eigen/src/Eigen2Support/Meta.h	/^      NewSup = int(TakeInf) ? int(MidX) : SupX$/;"	m	namespace:Eigen
NoAlias	include/Eigen/src/Core/NoAlias.h	/^    NoAlias(ExpressionType& expression) : m_expression(expression) {}$/;"	f	class:Eigen::NoAlias
NoAlias	include/Eigen/src/Core/NoAlias.h	/^class NoAlias$/;"	c	namespace:Eigen
NoChange	include/Eigen/src/Core/util/Constants.h	/^enum NoChange_t   { NoChange };$/;"	e	enum:Eigen::NoChange_t
NoChange_t	include/Eigen/src/Core/util/Constants.h	/^enum NoChange_t   { NoChange };$/;"	g	namespace:Eigen
NoConvergence	include/Eigen/src/Core/util/Constants.h	/^  NoConvergence = 2,$/;"	e	enum:Eigen::ComputationInfo
NoPivoting	include/Eigen/src/Core/util/Constants.h	/^  NoPivoting          = 0x02, $/;"	e	enum:Eigen::DecompositionOptions
NoQRPreconditioner	include/Eigen/src/Core/util/Constants.h	/^  NoQRPreconditioner,$/;"	e	enum:Eigen::QRPreconditioners
NoUnrolling	include/Eigen/src/Core/util/Constants.h	/^  NoUnrolling,$/;"	e	enum:Eigen::__anon266
NonConstImagReturnType	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryView<internal::scalar_imag_ref_op<Scalar>, Derived> NonConstImagReturnType;$/;"	t
NonConstRealReturnType	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^                  >::type NonConstRealReturnType;$/;"	t
NonInteger	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::NonInteger NonInteger;$/;"	t	struct:Eigen::internal::random_default_impl
NonInteger	include/Eigen/src/Geometry/AlignedBox.h	/^  typedef typename ScalarTraits::NonInteger      NonInteger;$/;"	t	class:Eigen::AlignedBox
NormalReturnType	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef Block<Coefficients,AmbientDimAtCompileTime,1> NormalReturnType;$/;"	t	class:Eigen::Hyperplane
NormalReturnType	include/Eigen/src/Geometry/Hyperplane.h	/^  typedef Block<Coefficients,AmbientDimAtCompileTime,1> NormalReturnType;$/;"	t	class:Eigen::Hyperplane
NullaryExpr	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::NullaryExpr(Index rows, Index cols, const CustomNullaryOp& func)$/;"	f	class:Eigen::DenseBase
NullaryExpr	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::NullaryExpr(Index size, const CustomNullaryOp& func)$/;"	f	class:Eigen::DenseBase
NullaryExpr	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::NullaryExpr(const CustomNullaryOp& func)$/;"	f	class:Eigen::DenseBase
NumberOfRegisters	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
NumberOfRegisters	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
NumberOfRegisters	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
NumericalIssue	include/Eigen/src/Core/util/Constants.h	/^  NumericalIssue = 1, $/;"	e	enum:Eigen::ComputationInfo
OBJECT_ALLOCATED_ON_STACK_IS_TOO_BIG	include/Eigen/src/Core/util/StaticAssert.h	/^        OBJECT_ALLOCATED_ON_STACK_IS_TOO_BIG,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
ONES_COMPLEMENT	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	108;"	d
OffsetCol	include/Eigen/src/Core/Reverse.h	/^      OffsetCol  = ReverseCol && IsRowMajor ? PacketSize : 1,$/;"	e	enum:Eigen::Reverse::__anon242
OffsetRow	include/Eigen/src/Core/Reverse.h	/^      OffsetRow  = ReverseRow && IsColMajor ? PacketSize : 1,$/;"	e	enum:Eigen::Reverse::__anon242
OnTheLeft	include/Eigen/src/Core/util/Constants.h	/^  OnTheLeft = 1,  $/;"	e	enum:Eigen::__anon269
OnTheRight	include/Eigen/src/Core/util/Constants.h	/^  OnTheRight = 2  $/;"	e	enum:Eigen::__anon269
Ones	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Ones()$/;"	f	class:Eigen::DenseBase
Ones	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Ones(Index nbRows, Index nbCols)$/;"	f	class:Eigen::DenseBase
Ones	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Ones(Index newSize)$/;"	f	class:Eigen::DenseBase
OppositeExtendedType	include/Eigen/src/Core/VectorwiseOp.h	/^    template<typename OtherDerived> struct OppositeExtendedType {$/;"	s	class:Eigen::VectorwiseOp
Options	include/Eigen/src/Cholesky/LDLT.h	/^      Options = MatrixType::Options & ~RowMajorBit, \/\/ these are the options for the TmpMatrixType, we need a ColMajor matrix here!$/;"	e	enum:Eigen::LDLT::__anon1
Options	include/Eigen/src/Cholesky/LLT.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::LLT::__anon2
Options	include/Eigen/src/Core/Array.h	/^    enum { Options = _Options };$/;"	e	enum:Eigen::Array::__anon30
Options	include/Eigen/src/Core/BandMatrix.h	/^      Options = internal::traits<Derived>::Options$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
Options	include/Eigen/src/Core/BandMatrix.h	/^    Options = _Options,$/;"	e	enum:Eigen::internal::traits::__anon47
Options	include/Eigen/src/Core/BandMatrix.h	/^    Options = _Options,$/;"	e	enum:Eigen::internal::traits::__anon48
Options	include/Eigen/src/Core/Map.h	/^  enum { Options }; \/\/ Expressions don't have Options$/;"	e	enum:Eigen::internal::traits::__anon177
Options	include/Eigen/src/Core/Matrix.h	/^    Options = _Options,$/;"	e	enum:Eigen::internal::traits::__anon184
Options	include/Eigen/src/Core/Matrix.h	/^    enum { Options = _Options };$/;"	e	enum:Eigen::Matrix::__anon185
Options	include/Eigen/src/Core/PlainObjectBase.h	/^    enum { Options = internal::traits<Derived>::Options };$/;"	e	enum:Eigen::PlainObjectBase::__anon192
Options	include/Eigen/src/Core/Ref.h	/^    Options = _Options,$/;"	e	enum:Eigen::internal::traits::__anon236
Options	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::ComplexEigenSolver::__anon359
Options	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::ComplexSchur::__anon360
Options	include/Eigen/src/Eigenvalues/EigenSolver.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::EigenSolver::__anon361
Options	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::GeneralizedEigenSolver::__anon362
Options	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::HessenbergDecomposition::__anon363
Options	include/Eigen/src/Eigenvalues/RealQZ.h	/^        Options = MatrixType::Options,$/;"	e	enum:Eigen::RealQZ::__anon364
Options	include/Eigen/src/Eigenvalues/RealSchur.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::RealSchur::__anon365
Options	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::SelfAdjointEigenSolver::__anon366
Options	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::Tridiagonalization::__anon367
Options	include/Eigen/src/Geometry/Hyperplane.h	/^    Options = _Options$/;"	e	enum:Eigen::Hyperplane::__anon372
Options	include/Eigen/src/Geometry/ParametrizedLine.h	/^    Options = _Options$/;"	e	enum:Eigen::ParametrizedLine::__anon373
Options	include/Eigen/src/Geometry/Transform.h	/^    Options = _Options,$/;"	e	enum:Eigen::Transform::__anon383
Options	include/Eigen/src/LU/FullPivLU.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::FullPivLU::__anon397
Options	include/Eigen/src/LU/PartialPivLU.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::PartialPivLU::__anon400
Options	include/Eigen/src/QR/ColPivHouseholderQR.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::ColPivHouseholderQR::__anon412
Options	include/Eigen/src/QR/FullPivHouseholderQR.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::FullPivHouseholderQR::__anon413
Options	include/Eigen/src/QR/HouseholderQR.h	/^      Options = MatrixType::Options,$/;"	e	enum:Eigen::HouseholderQR::__anon414
Options	include/Eigen/src/SVD/JacobiSVD.h	/^    Options = MatrixType::Options$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon462
Options	include/Eigen/src/SVD/JacobiSVD.h	/^    Options = MatrixType::Options$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon463
Options	include/Eigen/src/SVD/JacobiSVD.h	/^    Options = MatrixType::Options$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon464
Options	include/Eigen/src/SparseCore/SparseMatrix.h	/^      Options = _Options$/;"	e	enum:Eigen::SparseMatrix::__anon438
Options	include/Eigen/src/SparseCore/SparseVector.h	/^      Options = _Options$/;"	e	enum:Eigen::SparseVector::__anon450
OrderingType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename internal::traits<Derived>::OrderingType OrderingType;$/;"	t	class:Eigen::SimplicialCholeskyBase
OrderingType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef _Ordering OrderingType;$/;"	t	struct:Eigen::internal::traits
OrderingType	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef _OrderingType OrderingType;$/;"	t	class:Eigen::SparseLU
OrderingType	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef _OrderingType OrderingType;$/;"	t	class:Eigen::SparseQR
OtherCols	include/Eigen/src/Geometry/Transform.h	/^    OtherCols = MatrixType::ColsAtCompileTime$/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon386
OtherCols	include/Eigen/src/Geometry/Transform.h	/^    OtherCols = MatrixType::ColsAtCompileTime$/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon387
OtherPlainObject	include/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename OtherDerived::PlainObject::DenseType OtherPlainObject;$/;"	t	struct:Eigen::TriangularView::eigen2_product_return_type
OtherRows	include/Eigen/src/Geometry/Transform.h	/^    OtherRows = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon386
OtherRows	include/Eigen/src/Geometry/Transform.h	/^    OtherRows = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::transform_right_product_impl::__anon387
OuterProduct	include/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e	enum:Eigen::__anon271
OuterRandomAccessPattern	include/Eigen/src/SparseCore/SparseUtil.h	/^const int OuterRandomAccessPattern  = 0x4 | CoherentAccessPattern;$/;"	m	namespace:Eigen
OuterSize	include/Eigen/src/SparseCore/SparseBlock.h	/^    enum { OuterSize = IsRowMajor ? BlockRows : BlockCols };$/;"	e	enum:Eigen::BlockImpl::__anon424
OuterSize	include/Eigen/src/SparseCore/SparseBlock.h	/^    enum { OuterSize = IsRowMajor ? BlockRows : BlockCols };$/;"	e	enum:Eigen::BlockImpl::__anon426
OuterSize	include/Eigen/src/SparseCore/SparseBlock.h	/^    enum { OuterSize = IsRowMajor ? BlockRows : BlockCols };$/;"	e	enum:Eigen::BlockImpl::__anon428
OuterStride	include/Eigen/src/Core/Stride.h	/^    OuterStride() : Base() {}$/;"	f	class:Eigen::OuterStride
OuterStride	include/Eigen/src/Core/Stride.h	/^    OuterStride(Index v) : Base(v,0) {}$/;"	f	class:Eigen::OuterStride
OuterStride	include/Eigen/src/Core/Stride.h	/^class OuterStride : public Stride<Value, 0>$/;"	c	namespace:Eigen
OuterStrideAtCompileTime	include/Eigen/src/Core/Block.h	/^    OuterStrideAtCompileTime = HasSameStorageOrderAsXprType$/;"	e	enum:Eigen::internal::traits::__anon49
OuterStrideAtCompileTime	include/Eigen/src/Core/CwiseUnaryView.h	/^    OuterStrideAtCompileTime = outer_stride_at_compile_time<MatrixType>::ret == Dynamic$/;"	e	enum:Eigen::internal::traits::__anon57
OuterStrideAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      OuterStrideAtCompileTime = internal::outer_stride_at_compile_time<Derived>::ret$/;"	e	enum:Eigen::DenseBase::__anon58
OuterStrideAtCompileTime	include/Eigen/src/Core/Diagonal.h	/^    OuterStrideAtCompileTime = 0$/;"	e	enum:Eigen::internal::traits::__anon64
OuterStrideAtCompileTime	include/Eigen/src/Core/Map.h	/^    OuterStrideAtCompileTime = StrideType::OuterStrideAtCompileTime == 0$/;"	e	enum:Eigen::internal::traits::__anon176
OuterStrideAtCompileTime	include/Eigen/src/Core/Matrix.h	/^    OuterStrideAtCompileTime = (Options&RowMajor) ? ColsAtCompileTime : RowsAtCompileTime$/;"	e	enum:Eigen::internal::traits::__anon184
OuterStrideAtCompileTime	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    OuterStrideAtCompileTime = Lhs::OuterStrideAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon248
OuterStrideAtCompileTime	include/Eigen/src/Core/Stride.h	/^      OuterStrideAtCompileTime = _OuterStrideAtCompileTime$/;"	e	enum:Eigen::Stride::__anon252
OuterStrideAtCompileTime	include/Eigen/src/Core/Transpose.h	/^    OuterStrideAtCompileTime = outer_stride_at_compile_time<MatrixType>::ret$/;"	e	enum:Eigen::internal::traits::__anon253
OuterStrideMatch	include/Eigen/src/Core/Ref.h	/^      OuterStrideMatch = Derived::IsVectorAtCompileTime$/;"	e	enum:Eigen::internal::traits::match::__anon237
PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1	include/Eigen/src/Core/util/StaticAssert.h	/^        PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
PALIGN_NEON	include/Eigen/src/Core/arch/NEON/PacketMath.h	393;"	d
PALIGN_NEON	include/Eigen/src/Core/arch/NEON/PacketMath.h	413;"	d
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::linspaced_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::linspaced_op_impl
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_acos_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_add_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_asin_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_constant_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_cos_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_exp_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_log_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_multiple_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_quotient1_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_sin_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_sqrt_op
Packet	include/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::scalar_tan_op
Packet	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    typedef typename internal::packet_traits<Scalar>::type Packet;$/;"	t	class:Eigen::SelfCwiseBinaryOp
Packet	include/Eigen/src/Core/Swap.h	/^    typedef typename internal::packet_traits<Scalar>::type Packet;$/;"	t	class:Eigen::SwapWrapper
Packet	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::PacketScalar Packet;$/;"	t	struct:Eigen::internal::product_coeff_impl
Packet	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:Eigen::internal::gemm_pack_rhs
Packet16uc	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector unsigned char  Packet16uc;$/;"	t	namespace:Eigen::internal
Packet1cd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd() {}$/;"	f	struct:Eigen::internal::Packet1cd
Packet1cd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet1cd(const __m128d& a) : v(a) {}$/;"	f	struct:Eigen::internal::Packet1cd
Packet1cd	include/Eigen/src/Core/arch/SSE/Complex.h	/^struct Packet1cd$/;"	s	namespace:Eigen::internal
Packet2cf	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf() {}$/;"	f	struct:Eigen::internal::Packet2cf
Packet2cf	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet2cf(const Packet4f& a) : v(a) {}$/;"	f	struct:Eigen::internal::Packet2cf
Packet2cf	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^struct Packet2cf$/;"	s	namespace:Eigen::internal
Packet2cf	include/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf() {}$/;"	f	struct:Eigen::internal::Packet2cf
Packet2cf	include/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet2cf(const Packet4f& a) : v(a) {}$/;"	f	struct:Eigen::internal::Packet2cf
Packet2cf	include/Eigen/src/Core/arch/NEON/Complex.h	/^struct Packet2cf$/;"	s	namespace:Eigen::internal
Packet2cf	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf() {}$/;"	f	struct:Eigen::internal::Packet2cf
Packet2cf	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet2cf(const __m128& a) : v(a) {}$/;"	f	struct:Eigen::internal::Packet2cf
Packet2cf	include/Eigen/src/Core/arch/SSE/Complex.h	/^struct Packet2cf$/;"	s	namespace:Eigen::internal
Packet2d	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^typedef __m128d Packet2d;$/;"	t	namespace:Eigen::internal
Packet4bi	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector __bool int     Packet4bi;$/;"	t	namespace:Eigen::internal
Packet4f	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector float          Packet4f;$/;"	t	namespace:Eigen::internal
Packet4f	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^typedef float32x4_t Packet4f;$/;"	t	namespace:Eigen::internal
Packet4f	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^typedef __m128  Packet4f;$/;"	t	namespace:Eigen::internal
Packet4i	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector int            Packet4i;$/;"	t	namespace:Eigen::internal
Packet4i	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^typedef int32x4_t   Packet4i;$/;"	t	namespace:Eigen::internal
Packet4i	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^typedef __m128i Packet4i;$/;"	t	namespace:Eigen::internal
Packet4ui	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector unsigned int   Packet4ui;$/;"	t	namespace:Eigen::internal
Packet4ui	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^typedef uint32x4_t  Packet4ui;$/;"	t	namespace:Eigen::internal
Packet8i	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector short int      Packet8i;$/;"	t	namespace:Eigen::internal
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = false$/;"	e	enum:Eigen::internal::functor_traits::__anon83
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = false$/;"	e	enum:Eigen::internal::functor_traits::__anon84
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMul$/;"	e	enum:Eigen::internal::functor_traits::__anon75
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasACos$/;"	e	enum:Eigen::internal::functor_traits::__anon113
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasASin$/;"	e	enum:Eigen::internal::functor_traits::__anon114
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasAbs$/;"	e	enum:Eigen::internal::functor_traits::__anon86
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasAdd$/;"	e	enum:Eigen::internal::functor_traits::__anon71
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasConj$/;"	e	enum:Eigen::internal::functor_traits::__anon88
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasCos$/;"	e	enum:Eigen::internal::functor_traits::__anon110
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasMax$/;"	e	enum:Eigen::internal::functor_traits::__anon77
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasMin$/;"	e	enum:Eigen::internal::functor_traits::__anon76
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasNegate };$/;"	e	enum:Eigen::internal::functor_traits::__anon85
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasSin$/;"	e	enum:Eigen::internal::functor_traits::__anon111
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasSqrt$/;"	e	enum:Eigen::internal::functor_traits::__anon109
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasSub$/;"	e	enum:Eigen::internal::functor_traits::__anon80
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasTan$/;"	e	enum:Eigen::internal::functor_traits::__anon112
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = scalar_product_op<LhsScalar,RhsScalar>::Vectorizable$/;"	e	enum:Eigen::internal::functor_traits::__anon73
PacketAccess	include/Eigen/src/Core/Functors.h	/^    PacketAccess = scalar_quotient_op<LhsScalar,RhsScalar>::Vectorizable$/;"	e	enum:Eigen::internal::functor_traits::__anon82
PacketAccess	include/Eigen/src/Core/Functors.h	/^  enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false };$/;"	e	enum:Eigen::internal::functor_traits::__anon79
PacketAccess	include/Eigen/src/Core/Functors.h	/^  enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess=0 };$/;"	e	enum:Eigen::internal::functor_traits::__anon78
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon137
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon138
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon139
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon140
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon90
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon91
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon92
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon93
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1 + functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon135
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1 + functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon136
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon124
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon125
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon126
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon127
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon128
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon129
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon130
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon131
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon132
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::HasSetLinear, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon101
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::Vectorizable, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon99
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasDiv }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon98
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2*NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon118
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon115
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasExp }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon94
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasLog }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon95
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar1>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon97
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = false, IsRepeatable = true }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon100
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = packet_traits<Scalar>::HasAdd }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon108
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasAbs2 }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon87
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasDiv }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon116
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon117
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon96
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon121
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon122
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon123
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon119
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::MulCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon120
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost + functor_traits<T2>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon142
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon141
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon133
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon134
PacketAccess	include/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon89
PacketAccess	include/Eigen/src/Core/Random.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false, IsRepeatable = false }; };$/;"	e	enum:Eigen::internal::functor_traits::__anon225
PacketAccessBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int PacketAccessBit = 0x8;$/;"	m	namespace:Eigen
PacketReturnType	include/Eigen/src/Core/DenseCoeffsBase.h	/^                     >::type PacketReturnType;$/;"	t	class:Eigen::DenseCoeffsBase
PacketReturnType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^                     >::type PacketReturnType;$/;"	t	class:Eigen::SparseMatrixBase
PacketScalar	include/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:Eigen::ArrayBase
PacketScalar	include/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:Eigen::DenseBase
PacketScalar	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:Eigen::DenseCoeffsBase
PacketScalar	include/Eigen/src/Core/MapBase.h	/^    typedef typename Base::PacketScalar PacketScalar;$/;"	t	class:Eigen::MapBase
PacketScalar	include/Eigen/src/Core/MapBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:Eigen::MapBase
PacketScalar	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:Eigen::MatrixBase
PacketScalar	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:Eigen::PlainObjectBase
PacketScalar	include/Eigen/src/Core/Redux.h	/^  typedef typename packet_traits<Scalar>::type PacketScalar;$/;"	t	struct:Eigen::internal::redux_impl
PacketScalar	include/Eigen/src/Core/Redux.h	/^  typedef typename packet_traits<Scalar>::type PacketScalar;$/;"	t	struct:Eigen::internal::redux_vec_unroller
PacketScalar	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:Eigen::SparseMatrixBase
PacketSize	include/Eigen/src/Cholesky/LLT.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:Eigen::LLT::__anon3
PacketSize	include/Eigen/src/Core/Assign.h	/^    PacketSize = packet_traits<typename Derived::Scalar>::size$/;"	e	enum:Eigen::internal::assign_traits::__anon34
PacketSize	include/Eigen/src/Core/Redux.h	/^    PacketSize = packet_traits<Scalar>::size,$/;"	e	enum:Eigen::internal::redux_impl::__anon235
PacketSize	include/Eigen/src/Core/Redux.h	/^    PacketSize = packet_traits<typename Derived::Scalar>::size,$/;"	e	enum:Eigen::internal::redux_traits::__anon226
PacketSize	include/Eigen/src/Core/Redux.h	/^    PacketSize = packet_traits<typename Derived::Scalar>::size,$/;"	e	enum:Eigen::internal::redux_vec_unroller::__anon233
PacketSize	include/Eigen/src/Core/Reverse.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:Eigen::Reverse::__anon242
PacketSize	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:Eigen::CoeffBasedProduct::__anon198
PacketSize	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  enum { PacketSize = packet_traits<typename Lhs::Scalar>::size };$/;"	e	enum:Eigen::internal::product_coeff_impl::__anon200
PacketSize	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  enum { PacketSize = packet_traits<typename Lhs::Scalar>::size };$/;"	e	enum:Eigen::internal::product_coeff_vectorized_unroller::__anon199
PacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  enum { PacketSize = packet_traits<Scalar>::size };$/;"	e	enum:Eigen::internal::gemm_pack_rhs::__anon206
PacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  enum { PacketSize = packet_traits<Scalar>::size };$/;"	e	enum:Eigen::internal::gemm_pack_rhs::__anon207
PacketSize	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  enum { PacketSize = packet_traits<Scalar>::size };$/;"	e	enum:Eigen::internal::symm_pack_rhs::__anon215
PacketSize	include/Eigen/src/Eigen2Support/SVD.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:Eigen::SVD::__anon358
ParameterType	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef Array<Index,64,1,DontAlign> ParameterType;$/;"	t	class:Eigen::PardisoImpl
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/All.h	113;"	d
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/All.h	58;"	d
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  ParametrizedLine(const VectorType& origin, const VectorType& direction)$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline ParametrizedLine() {}$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(const ParametrizedLine<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(int _dim) : m_origin(_dim), m_direction(_dim) {}$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^class ParametrizedLine$/;"	c	namespace:Eigen
ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^inline ParametrizedLine<_Scalar, _AmbientDim>::ParametrizedLine(const Hyperplane<_Scalar, _AmbientDim>& hyperplane)$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^  ParametrizedLine(const ParametrizedLine<Scalar,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^  ParametrizedLine(const VectorType& origin, const VectorType& direction)$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^  inline ParametrizedLine() {}$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(Index _dim) : m_origin(_dim), m_direction(_dim) {}$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(const ParametrizedLine<OtherScalarType,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:Eigen::ParametrizedLine
ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^class ParametrizedLine$/;"	c	namespace:Eigen
ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^inline ParametrizedLine<_Scalar, _AmbientDim,_Options>::ParametrizedLine(const Hyperplane<_Scalar, _AmbientDim,OtherOptions>& hyperplane)$/;"	f	class:Eigen::ParametrizedLine
PardisoImpl	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoImpl()$/;"	f	class:Eigen::PardisoImpl
PardisoImpl	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoImpl(PardisoImpl &) {}$/;"	f	class:Eigen::PardisoImpl
PardisoImpl	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^class PardisoImpl$/;"	c	namespace:Eigen
PardisoLDLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLDLT()$/;"	f	class:Eigen::PardisoLDLT
PardisoLDLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLDLT(PardisoLDLT& ) {}$/;"	f	class:Eigen::PardisoLDLT
PardisoLDLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLDLT(const MatrixType& matrix)$/;"	f	class:Eigen::PardisoLDLT
PardisoLDLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^class PardisoLDLT : public PardisoImpl< PardisoLDLT<MatrixType,Options> >$/;"	c	namespace:Eigen
PardisoLLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLLT()$/;"	f	class:Eigen::PardisoLLT
PardisoLLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLLT(PardisoLLT& ) {}$/;"	f	class:Eigen::PardisoLLT
PardisoLLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLLT(const MatrixType& matrix)$/;"	f	class:Eigen::PardisoLLT
PardisoLLT	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^class PardisoLLT : public PardisoImpl< PardisoLLT<MatrixType,_UpLo> >$/;"	c	namespace:Eigen
PardisoLU	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLU()$/;"	f	class:Eigen::PardisoLU
PardisoLU	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLU(PardisoLU& ) {}$/;"	f	class:Eigen::PardisoLU
PardisoLU	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    PardisoLU(const MatrixType& matrix)$/;"	f	class:Eigen::PardisoLU
PardisoLU	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^class PardisoLU : public PardisoImpl< PardisoLU<MatrixType> >$/;"	c	namespace:Eigen
PartialPivLU	include/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>::PartialPivLU()$/;"	f	class:Eigen::PartialPivLU
PartialPivLU	include/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>::PartialPivLU(Index size)$/;"	f	class:Eigen::PartialPivLU
PartialPivLU	include/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>::PartialPivLU(const MatrixType& matrix)$/;"	f	class:Eigen::PartialPivLU
PartialPivLU	include/Eigen/src/LU/PartialPivLU.h	/^template<typename _MatrixType> class PartialPivLU$/;"	c	namespace:Eigen
PartialReduxExpr	include/Eigen/src/Core/VectorwiseOp.h	/^    PartialReduxExpr(const MatrixType& mat, const MemberOp& func = MemberOp())$/;"	f	class:Eigen::PartialReduxExpr
PartialReduxExpr	include/Eigen/src/Core/VectorwiseOp.h	/^class PartialReduxExpr : internal::no_assignment_operator,$/;"	c	namespace:Eigen
PastixBase	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    PastixBase() : m_initisOk(false), m_analysisIsOk(false), m_factorizationIsOk(false), m_isInitialized(false), m_pastixdata(0), m_size(0)$/;"	f	class:Eigen::PastixBase
PastixBase	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^class PastixBase : internal::noncopyable$/;"	c	namespace:Eigen
PastixLDLT	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    PastixLDLT():Base()$/;"	f	class:Eigen::PastixLDLT
PastixLDLT	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    PastixLDLT(const MatrixType& matrix):Base()$/;"	f	class:Eigen::PastixLDLT
PastixLDLT	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^class PastixLDLT : public PastixBase< PastixLDLT<_MatrixType, _UpLo> >$/;"	c	namespace:Eigen
PastixLLT	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    PastixLLT() : Base()$/;"	f	class:Eigen::PastixLLT
PastixLLT	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    PastixLLT(const MatrixType& matrix):Base()$/;"	f	class:Eigen::PastixLLT
PastixLLT	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^class PastixLLT : public PastixBase< PastixLLT<_MatrixType, _UpLo> >$/;"	c	namespace:Eigen
PastixLU	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    PastixLU() : Base()$/;"	f	class:Eigen::PastixLU
PastixLU	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    PastixLU(const MatrixType& matrix):Base()$/;"	f	class:Eigen::PastixLU
PastixLU	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^class PastixLU : public PastixBase< PastixLU<_MatrixType> >$/;"	c	namespace:Eigen
Perm	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef PermutationMatrix<Dynamic,Dynamic,Index> Perm;$/;"	t	class:Eigen::SparseSymmetricPermutationProduct
PermIndexType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename PermutationType::Index PermIndexType;$/;"	t	class:Eigen::ColPivHouseholderQR
PermPermProduct	include/Eigen/src/Core/PermutationMatrix.h	/^enum PermPermProduct_t {PermPermProduct};$/;"	e	enum:Eigen::internal::PermPermProduct_t
PermPermProduct_t	include/Eigen/src/Core/PermutationMatrix.h	/^enum PermPermProduct_t {PermPermProduct};$/;"	g	namespace:Eigen::internal
PermutType	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    typedef SparseMatrix<Scalar,ColMajor> PermutType;$/;"	t	class:Eigen::IncompleteLUT
PermutationBase	include/Eigen/src/Core/PermutationMatrix.h	/^class PermutationBase : public EigenBase<Derived>$/;"	c	namespace:Eigen
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix(const Transpose<PermutationBase<Other> >& other)$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix(internal::PermPermProduct_t, const Lhs& lhs, const Rhs& rhs)$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    explicit PermutationMatrix(const TranspositionsBase<Other>& tr)$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    explicit inline PermutationMatrix(const MatrixBase<Other>& a_indices) : m_indices(a_indices)$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix()$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix(const PermutationBase<OtherDerived>& other)$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix(const PermutationMatrix& other) : m_indices(other.indices()) {}$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix(int size) : m_indices(size)$/;"	f	class:Eigen::PermutationMatrix
PermutationMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^class PermutationMatrix : public PermutationBase<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType> >$/;"	c	namespace:Eigen
PermutationPType	include/Eigen/src/LU/FullPivLU.h	/^    typedef PermutationMatrix<RowsAtCompileTime, MaxRowsAtCompileTime> PermutationPType;$/;"	t	class:Eigen::FullPivLU
PermutationQType	include/Eigen/src/LU/FullPivLU.h	/^    typedef PermutationMatrix<ColsAtCompileTime, MaxColsAtCompileTime> PermutationQType;$/;"	t	class:Eigen::FullPivLU
PermutationStorage	include/Eigen/src/Core/PermutationMatrix.h	/^struct PermutationStorage {};$/;"	s	namespace:Eigen
PermutationType	include/Eigen/src/Cholesky/LDLT.h	/^    typedef PermutationMatrix<RowsAtCompileTime, MaxRowsAtCompileTime> PermutationType;$/;"	t	class:Eigen::LDLT
PermutationType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef Derived PermutationType;$/;"	t	class:Eigen::Transpose
PermutationType	include/Eigen/src/LU/PartialPivLU.h	/^    typedef PermutationMatrix<RowsAtCompileTime, MaxRowsAtCompileTime> PermutationType;$/;"	t	class:Eigen::PartialPivLU
PermutationType	include/Eigen/src/MetisSupport/MetisSupport.h	/^  typedef PermutationMatrix<Dynamic,Dynamic,Index> PermutationType;$/;"	t	class:Eigen::MetisOrdering
PermutationType	include/Eigen/src/OrderingMethods/Ordering.h	/^    typedef PermutationMatrix<Dynamic, Dynamic, Index> PermutationType; $/;"	t	class:Eigen::COLAMDOrdering
PermutationType	include/Eigen/src/OrderingMethods/Ordering.h	/^    typedef PermutationMatrix<Dynamic, Dynamic, Index> PermutationType;$/;"	t	class:Eigen::AMDOrdering
PermutationType	include/Eigen/src/OrderingMethods/Ordering.h	/^    typedef PermutationMatrix<Dynamic, Dynamic, Index> PermutationType;$/;"	t	class:Eigen::NaturalOrdering
PermutationType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef PermutationMatrix<ColsAtCompileTime, MaxColsAtCompileTime> PermutationType;$/;"	t	class:Eigen::ColPivHouseholderQR
PermutationType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef PermutationMatrix<ColsAtCompileTime, MaxColsAtCompileTime> PermutationType;$/;"	t	class:Eigen::FullPivHouseholderQR
PermutationType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    typedef PermutationMatrix<Dynamic, Dynamic> PermutationType;$/;"	t	class:Eigen::SPQR
PermutationType	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef PermutationMatrix<Dynamic, Dynamic, Index> PermutationType;$/;"	t	class:Eigen::SparseLU
PermutationType	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef PermutationMatrix<Dynamic, Dynamic, Index> PermutationType;$/;"	t	class:Eigen::SparseQR
PermutationWrapper	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationWrapper(const IndicesType& a_indices)$/;"	f	class:Eigen::PermutationWrapper
PermutationWrapper	include/Eigen/src/Core/PermutationMatrix.h	/^class PermutationWrapper : public PermutationBase<PermutationWrapper<_IndicesType> >$/;"	c	namespace:Eigen
Pivoting	include/Eigen/src/Core/util/Constants.h	/^  Pivoting            = 0x01, $/;"	e	enum:Eigen::DecompositionOptions
PlainObject	include/Eigen/src/Core/Array.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:Eigen::Array
PlainObject	include/Eigen/src/Core/ArrayBase.h	/^          > PlainObject;$/;"	t	class:Eigen::ArrayBase
PlainObject	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef DiagonalMatrix<Scalar,DiagonalVectorType::SizeAtCompileTime,DiagonalVectorType::MaxSizeAtCompileTime> PlainObject;$/;"	t	class:Eigen::DiagonalBase
PlainObject	include/Eigen/src/Core/Matrix.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:Eigen::Matrix
PlainObject	include/Eigen/src/Core/MatrixBase.h	/^          > PlainObject;$/;"	t	class:Eigen::MatrixBase
PlainObject	include/Eigen/src/Core/ProductBase.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:ScaledProduct
PlainObject	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename MatrixType::PlainObject PlainObject;$/;"	t	class:Eigen::SelfAdjointView
PlainObject	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef DenseMatrixType PlainObject;$/;"	t	class:Eigen::TriangularView
PlainObject	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:Eigen::CoeffBasedProduct
PlainObject	include/Eigen/src/Geometry/Quaternion.h	/^  typedef Quaternion<_Scalar,_Options> PlainObject;$/;"	t	struct:Eigen::internal::traits
PlainObject	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef SparseMatrix<Scalar, Flags&RowMajorBit ? RowMajor : ColMajor, Index> PlainObject;$/;"	t	class:Eigen::SparseMatrixBase
PlainObjectBase	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()$/;"	f	class:Eigen::PlainObjectBase
PlainObjectBase	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PlainObjectBase(Index a_size, Index nbRows, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
PlainObjectBase	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PlainObjectBase(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::PlainObjectBase
PlainObjectBase	include/Eigen/src/Core/PlainObjectBase.h	/^    PlainObjectBase(internal::constructor_without_unaligned_array_assert)$/;"	f	class:Eigen::PlainObjectBase
PlainObjectBase	include/Eigen/src/Core/PlainObjectBase.h	/^class PlainObjectBase : public internal::dense_xpr_base_dispatcher_for_doxygen<Derived>$/;"	c	namespace:Eigen
PlainObjectType	include/Eigen/src/Core/Ref.h	/^  typedef _PlainObjectType PlainObjectType;$/;"	t	struct:Eigen::internal::traits
PlainObjectType	include/Eigen/src/Core/Ref.h	/^  typedef typename internal::traits<Derived>::PlainObjectType PlainObjectType;$/;"	t	class:Eigen::RefBase
PlainPermutationType	include/Eigen/src/Core/PermutationMatrix.h	/^            PlainPermutationType;$/;"	t	class:Eigen::PermutationBase
PlainPermutationType	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename PermutationType::PlainPermutationType PlainPermutationType;$/;"	t	class:Eigen::Transpose
PointerArgType	include/Eigen/src/Core/Map.h	/^    typedef PointerType PointerArgType;$/;"	t	class:Eigen::Map
PointerArgType	include/Eigen/src/Core/Map.h	/^    typedef const Scalar* PointerArgType;$/;"	t	class:Eigen::Map
PointerType	include/Eigen/src/Core/Map.h	/^    typedef typename Base::PointerType PointerType;$/;"	t	class:Eigen::Map
PointerType	include/Eigen/src/Core/MapBase.h	/^                     PointerType;$/;"	t	class:Eigen::MapBase
PointerType	include/Eigen/src/Core/MapBase.h	/^    typedef typename Base::PointerType PointerType;$/;"	t	class:Eigen::MapBase
PositiveSemiDef	include/Eigen/src/Cholesky/LDLT.h	/^  enum SignMatrix { PositiveSemiDef, NegativeSemiDef, ZeroSign, Indefinite };$/;"	e	enum:Eigen::internal::SignMatrix
PreconditionIfMoreColsThanRows	include/Eigen/src/SVD/JacobiSVD.h	/^enum { PreconditionIfMoreColsThanRows, PreconditionIfMoreRowsThanCols };$/;"	e	enum:Eigen::internal::__anon459
PreconditionIfMoreRowsThanCols	include/Eigen/src/SVD/JacobiSVD.h	/^enum { PreconditionIfMoreColsThanRows, PreconditionIfMoreRowsThanCols };$/;"	e	enum:Eigen::internal::__anon459
Preconditioner	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef _Preconditioner Preconditioner;$/;"	t	class:Eigen::BiCGSTAB
Preconditioner	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef _Preconditioner Preconditioner;$/;"	t	struct:Eigen::internal::traits
Preconditioner	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef _Preconditioner Preconditioner;$/;"	t	class:Eigen::ConjugateGradient
Preconditioner	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef _Preconditioner Preconditioner;$/;"	t	struct:Eigen::internal::traits
Preconditioner	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  typedef typename internal::traits<Derived>::Preconditioner Preconditioner;$/;"	t	class:Eigen::IterativeSolverBase
ProdRetType	include/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename ProductReturnType<DenseMatrixType, OtherPlainObject>::Type ProdRetType;$/;"	t	struct:Eigen::TriangularView::eigen2_product_return_type
ProductBase	include/Eigen/src/Core/ProductBase.h	/^class ProductBase : public MatrixBase<Derived>$/;"	c	namespace:Eigen
ProductReturnType	include/Eigen/src/Core/GeneralProduct.h	/^struct ProductReturnType$/;"	s	namespace:Eigen
ProductReturnType	include/Eigen/src/Core/GeneralProduct.h	/^struct ProductReturnType<Lhs,Rhs,CoeffBasedProductMode>$/;"	s	namespace:Eigen
ProductReturnType	include/Eigen/src/Core/GeneralProduct.h	/^struct ProductReturnType<Lhs,Rhs,LazyCoeffBasedProductMode>$/;"	s	namespace:Eigen
ProductType	include/Eigen/src/Geometry/Transform.h	/^    typedef internal::transform_transform_product_impl<Transform,Transform<Scalar,Dim,OtherMode,OtherOptions> > ProductType;$/;"	t	struct:Eigen::Transform::icc_11_workaround
Projective	include/Eigen/src/Core/util/Constants.h	/^  Projective    = 0x20$/;"	e	enum:Eigen::TransformTraits
Projective2d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,Projective> Projective2d;$/;"	t	namespace:Eigen
Projective2f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,Projective> Projective2f;$/;"	t	namespace:Eigen
Projective3d	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,Projective> Projective3d;$/;"	t	namespace:Eigen
Projective3f	include/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,Projective> Projective3f;$/;"	t	namespace:Eigen
QR	include/Eigen/src/Eigen2Support/QR.h	/^    QR() : Base() {}$/;"	f	class:Eigen::QR
QR	include/Eigen/src/Eigen2Support/QR.h	/^    explicit QR(const T& t) : Base(t) {}$/;"	f	class:Eigen::QR
QR	include/Eigen/src/Eigen2Support/QR.h	/^class QR : public HouseholderQR<MatrixType>$/;"	c	namespace:Eigen
QRMatrixType	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> QRMatrixType;$/;"	t	class:Eigen::SparseQR
QRPreconditioners	include/Eigen/src/Core/util/Constants.h	/^enum QRPreconditioners {$/;"	g	namespace:Eigen
QRType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef ColPivHouseholderQR<MatrixType> QRType;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
QRType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef ColPivHouseholderQR<TransposeTypeWithSameStorageOrder> QRType;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
QRType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef FullPivHouseholderQR<MatrixType> QRType;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
QRType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef FullPivHouseholderQR<TransposeTypeWithSameStorageOrder> QRType;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
QRType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef HouseholderQR<MatrixType> QRType;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
QRType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef HouseholderQR<TransposeTypeWithSameStorageOrder> QRType;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
Quaternion	include/Eigen/src/Eigen2Support/Geometry/All.h	29;"	d
Quaternion	include/Eigen/src/Eigen2Support/Geometry/All.h	84;"	d
Quaternion	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  explicit inline Quaternion(const AngleAxisType& aa) { *this = aa; }$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  explicit inline Quaternion(const MatrixBase<Derived>& other) { *this = other; }$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion() {}$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion(Scalar w, Scalar x, Scalar y, Scalar z)$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion(const Quaternion& other) { m_coeffs = other.m_coeffs; }$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline explicit Quaternion(const Quaternion<OtherScalarType>& other)$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^class Quaternion : public RotationBase<Quaternion<_Scalar>,3>$/;"	c	namespace:Eigen
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^  explicit inline Quaternion(const AngleAxisType& aa) { *this = aa; }$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^  explicit inline Quaternion(const MatrixBase<Derived>& other) { *this = other; }$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^  explicit inline Quaternion(const Quaternion<OtherScalar, OtherOptions>& other)$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion() {}$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion(const Scalar& w, const Scalar& x, const Scalar& y, const Scalar& z) : m_coeffs(x, y, z, w){}$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion(const Scalar* data) : m_coeffs(data) {}$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^  template<class Derived> EIGEN_STRONG_INLINE Quaternion(const QuaternionBase<Derived>& other) { this->Base::operator=(other); }$/;"	f	class:Eigen::Quaternion
Quaternion	include/Eigen/src/Geometry/Quaternion.h	/^class Quaternion : public QuaternionBase<Quaternion<_Scalar,_Options> >$/;"	c	namespace:Eigen
QuaternionBase	include/Eigen/src/Geometry/Quaternion.h	/^class QuaternionBase : public RotationBase<Derived, 3>$/;"	c	namespace:Eigen
QuaternionMapAlignedd	include/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<double>, Aligned>  QuaternionMapAlignedd;$/;"	t	namespace:Eigen
QuaternionMapAlignedf	include/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<float>, Aligned>   QuaternionMapAlignedf;$/;"	t	namespace:Eigen
QuaternionMapd	include/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<double>, 0>        QuaternionMapd;$/;"	t	namespace:Eigen
QuaternionMapf	include/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<float>, 0>         QuaternionMapf;$/;"	t	namespace:Eigen
QuaternionType	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef Quaternion<Scalar> QuaternionType;$/;"	t	class:Eigen::AngleAxis
QuaternionType	include/Eigen/src/Geometry/AngleAxis.h	/^  typedef Quaternion<Scalar> QuaternionType;$/;"	t	class:Eigen::AngleAxis
Quaterniond	include/Eigen/src/Eigen2Support/Geometry/All.h	31;"	d
Quaterniond	include/Eigen/src/Eigen2Support/Geometry/All.h	86;"	d
Quaterniond	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^typedef Quaternion<double> Quaterniond;$/;"	t	namespace:Eigen
Quaterniond	include/Eigen/src/Geometry/Quaternion.h	/^typedef Quaternion<double> Quaterniond;$/;"	t	namespace:Eigen
Quaternionf	include/Eigen/src/Eigen2Support/Geometry/All.h	30;"	d
Quaternionf	include/Eigen/src/Eigen2Support/Geometry/All.h	85;"	d
Quaternionf	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^typedef Quaternion<float> Quaternionf;$/;"	t	namespace:Eigen
Quaternionf	include/Eigen/src/Geometry/Quaternion.h	/^typedef Quaternion<float> Quaternionf;$/;"	t	namespace:Eigen
QuickSplit	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^Index QuickSplit(VectorV &row, VectorI &ind, Index ncut)$/;"	f	namespace:Eigen::internal
READER_H	include/base/reader.h	2;"	d
ROW_IS_ALIVE	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	125;"	d
ROW_IS_DEAD	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	123;"	d
ROW_IS_MARKED_DEAD	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	124;"	d
Random	include/Eigen/src/Core/Random.h	/^DenseBase<Derived>::Random()$/;"	f	class:Eigen::DenseBase
Random	include/Eigen/src/Core/Random.h	/^DenseBase<Derived>::Random(Index rows, Index cols)$/;"	f	class:Eigen::DenseBase
Random	include/Eigen/src/Core/Random.h	/^DenseBase<Derived>::Random(Index size)$/;"	f	class:Eigen::DenseBase
RandomAccessLinSpacedReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef CwiseNullaryOp<internal::linspaced_op<Scalar,true>,Derived> RandomAccessLinSpacedReturnType;$/;"	t	class:Eigen::DenseBase
RandomAccessPattern	include/Eigen/src/SparseCore/SparseUtil.h	/^const int RandomAccessPattern       = 0x8 | OuterRandomAccessPattern | InnerRandomAccessPattern;$/;"	m	namespace:Eigen
ReadCost	include/Eigen/src/Core/NumTraits.h	/^    ReadCost = 1,$/;"	e	enum:Eigen::GenericNumTraits::__anon188
ReadOnlyAccessors	include/Eigen/src/Core/util/Constants.h	/^  ReadOnlyAccessors, $/;"	e	enum:Eigen::AccessorLevels
ReadOnlyMapBase	include/Eigen/src/Core/MapBase.h	/^    typedef MapBase<Derived, ReadOnlyAccessors> ReadOnlyMapBase;$/;"	t	class:Eigen::MapBase
Reader	include/base/reader.h	/^					Reader<T>() : _m_delim('\\n'), _m_file_read(false) {};$/;"	f	class:msd::base::Reader
Reader	include/base/reader.h	/^					Reader<T>(const std::string& file_name, char delim, bool file_read) : $/;"	f	class:msd::base::Reader
Reader	include/base/reader.h	/^			class Reader$/;"	c	namespace:msd::base
Real	include/Eigen/src/Core/NumTraits.h	/^  typedef T Real;$/;"	t	struct:Eigen::GenericNumTraits
RealPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<RealScalar>::type RealPacket;$/;"	t	class:Eigen::internal::gebp_traits
RealPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RealPacketSize  = Vectorizable ? packet_traits<RealScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
RealQZ	include/Eigen/src/Eigenvalues/RealQZ.h	/^      RealQZ(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime) : $/;"	f	class:Eigen::RealQZ
RealQZ	include/Eigen/src/Eigenvalues/RealQZ.h	/^      RealQZ(const MatrixType& A, const MatrixType& B, bool computeQZ = true) :$/;"	f	class:Eigen::RealQZ
RealQZ	include/Eigen/src/Eigenvalues/RealQZ.h	/^  template<typename _MatrixType> class RealQZ$/;"	c	namespace:Eigen
RealReturnType	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^                  >::type RealReturnType;$/;"	t
RealRowVectorType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType, RealScalar>::type RealRowVectorType;$/;"	t	class:Eigen::ColPivHouseholderQR
RealScalar	include/Eigen/src/Cholesky/LDLT.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:Eigen::LDLT
RealScalar	include/Eigen/src/Cholesky/LLT.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:Eigen::LLT
RealScalar	include/Eigen/src/Cholesky/LLT.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::llt_inplace
RealScalar	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::CholmodBase
RealScalar	include/Eigen/src/Core/ArrayBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::ArrayBase
RealScalar	include/Eigen/src/Core/DenseBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::DenseBase
RealScalar	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::DenseCoeffsBase
RealScalar	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename DiagonalVectorType::RealScalar RealScalar;$/;"	t	class:Eigen::DiagonalBase
RealScalar	include/Eigen/src/Core/Dot.h	/^  typedef typename NumTraits<typename traits<Derived>::Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::lpNorm_selector
RealScalar	include/Eigen/src/Core/IO.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::significant_decimals_default_impl
RealScalar	include/Eigen/src/Core/MapBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::MapBase
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef bool RealScalar;$/;"	t	struct:Eigen::internal::scalar_fuzzy_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::abs2_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::atanh2_default_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::hypot_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::imag_default_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::imag_ref_default_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::norm1_default_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::real_default_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::real_ref_impl
RealScalar	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::scalar_fuzzy_default_impl
RealScalar	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::MatrixBase
RealScalar	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::PlainObjectBase
RealScalar	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::SelfAdjointView
RealScalar	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::RealScalar RealScalar;$/;"	t	class:Eigen::VectorwiseOp
RealScalar	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::AlignedBox
RealScalar	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::Hyperplane
RealScalar	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::ParametrizedLine
RealScalar	include/Eigen/src/Eigen2Support/LU.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:Eigen::LU
RealScalar	include/Eigen/src/Eigen2Support/SVD.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:Eigen::SVD
RealScalar	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::ComplexEigenSolver
RealScalar	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::ComplexSchur
RealScalar	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::EigenSolver
RealScalar	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::GeneralizedEigenSolver
RealScalar	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::HessenbergDecomposition
RealScalar	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::SelfAdjointEigenSolver
RealScalar	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::Tridiagonalization
RealScalar	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	struct:Eigen::internal::tridiagonalization_inplace_selector
RealScalar	include/Eigen/src/Geometry/AlignedBox.h	/^  typedef typename ScalarTraits::Real               RealScalar;$/;"	t	class:Eigen::AlignedBox
RealScalar	include/Eigen/src/Geometry/Hyperplane.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::Hyperplane
RealScalar	include/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:Eigen::internal::unitOrthogonal_selector
RealScalar	include/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::ParametrizedLine
RealScalar	include/Eigen/src/Geometry/Quaternion.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::QuaternionBase
RealScalar	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::BiCGSTAB
RealScalar	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::ConjugateGradient
RealScalar	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::IncompleteLUT
RealScalar	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::IterativeSolverBase
RealScalar	include/Eigen/src/Jacobi/Jacobi.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::JacobiRotation
RealScalar	include/Eigen/src/LU/FullPivLU.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:Eigen::FullPivLU
RealScalar	include/Eigen/src/LU/PartialPivLU.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:Eigen::PartialPivLU
RealScalar	include/Eigen/src/LU/PartialPivLU.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	struct:Eigen::internal::partial_lu_impl
RealScalar	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::PastixBase
RealScalar	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename _MatrixType::RealScalar RealScalar;$/;"	t	struct:Eigen::internal::pastix_traits
RealScalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:Eigen::PardisoLDLT
RealScalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:Eigen::PardisoLLT
RealScalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:Eigen::PardisoLU
RealScalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Traits::RealScalar RealScalar;$/;"	t	class:Eigen::PardisoImpl
RealScalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename _MatrixType::RealScalar RealScalar;$/;"	t	struct:Eigen::internal::pardiso_traits
RealScalar	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::ColPivHouseholderQR
RealScalar	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::FullPivHouseholderQR
RealScalar	include/Eigen/src/QR/HouseholderQR.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::HouseholderQR
RealScalar	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    typedef typename _MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::SPQR
RealScalar	include/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:Eigen::JacobiSVD
RealScalar	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	struct:Eigen::internal::svd_precondition_2x2_block_to_be_real
RealScalar	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::internal::UpperBidiagonalization
RealScalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::SimplicialCholesky
RealScalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::SimplicialCholeskyBase
RealScalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::SimplicialLDLT
RealScalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::SimplicialLLT
RealScalar	include/Eigen/src/SparseCore/AmbiVector.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::internal::AmbiVector
RealScalar	include/Eigen/src/SparseCore/AmbiVector.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::internal::AmbiVector::Iterator
RealScalar	include/Eigen/src/SparseCore/CompressedStorage.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::internal::CompressedStorage
RealScalar	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Eigen::SparseMatrixBase
RealScalar	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^  typedef typename ResultType::RealScalar RealScalar;$/;"	t	struct:Eigen::internal::sparse_sparse_product_with_pruning_selector
RealScalar	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef typename MatrixType::RealScalar RealScalar; $/;"	t	class:Eigen::SparseLU
RealScalar	include/Eigen/src/SparseLU/SparseLUImpl.h	/^    typedef typename ScalarVector::RealScalar RealScalar; $/;"	t	class:Eigen::internal::SparseLUImpl
RealScalar	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::SparseQR
RealScalar	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:Eigen::SuperILU
RealScalar	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:Eigen::SuperLU
RealScalar	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::SuperLUBase
RealScalar	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:Eigen::UmfPackLU
RealSchur	include/Eigen/src/Eigenvalues/RealSchur.h	/^    RealSchur(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime)$/;"	f	class:Eigen::RealSchur
RealSchur	include/Eigen/src/Eigenvalues/RealSchur.h	/^    RealSchur(const MatrixType& matrix, bool computeU = true)$/;"	f	class:Eigen::RealSchur
RealSchur	include/Eigen/src/Eigenvalues/RealSchur.h	/^template<typename _MatrixType> class RealSchur$/;"	c	namespace:Eigen
RealVectorType	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename internal::plain_col_type<MatrixType, RealScalar>::type RealVectorType;$/;"	t	class:Eigen::SelfAdjointEigenSolver
ReduxReturnType	include/Eigen/src/Core/VectorwiseOp.h	/^    template<typename BinaryOp> struct ReduxReturnType$/;"	s	class:Eigen::VectorwiseOp
Ref	include/Eigen/src/Core/Ref.h	/^    inline Ref(PlainObjectBase<Derived>& expr)$/;"	f	class:Eigen::Ref
Ref	include/Eigen/src/Core/Ref.h	/^    inline Ref(const DenseBase<Derived>& expr)$/;"	f	class:Eigen::Ref
Ref	include/Eigen/src/Core/Ref.h	/^template<typename PlainObjectType, int Options, typename StrideType> class Ref$/;"	c	namespace:Eigen
Ref	include/Eigen/src/Core/Ref.h	/^template<typename TPlainObjectType, int Options, typename StrideType> class Ref<const TPlainObjectType, Options, StrideType>$/;"	c	namespace:Eigen
RefBase	include/Eigen/src/Core/Ref.h	/^  RefBase()$/;"	f	class:Eigen::RefBase
RefBase	include/Eigen/src/Core/Ref.h	/^template<typename Derived> class RefBase$/;"	c	namespace:Eigen
RemovedBits	include/Eigen/src/SparseCore/SparseProduct.h	/^    RemovedBits = ~(EvalToRowMajor ? 0 : RowMajorBit),$/;"	e	enum:Eigen::internal::traits::__anon443
Replicate	include/Eigen/src/Core/Replicate.h	/^    inline Replicate(const OriginalMatrixType& a_matrix, Index rowFactor, Index colFactor)$/;"	f	class:Eigen::Replicate
Replicate	include/Eigen/src/Core/Replicate.h	/^    inline explicit Replicate(const OriginalMatrixType& a_matrix)$/;"	f	class:Eigen::Replicate
Replicate	include/Eigen/src/Core/Replicate.h	/^template<typename MatrixType,int RowFactor,int ColFactor> class Replicate$/;"	c	namespace:Eigen
ReplicateReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef Replicate<Derived,Dynamic,Dynamic> ReplicateReturnType;$/;"	t	class:Eigen::DenseBase
ReplicateReturnType	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef Replicate<ExpressionType,Direction==Vertical?Dynamic:1,Direction==Horizontal?Dynamic:1> ReplicateReturnType;$/;"	t	class:Eigen::VectorwiseOp
RequireInitialization	include/Eigen/src/Core/NumTraits.h	/^    RequireInitialization = internal::is_arithmetic<T>::value ? 0 : 1,$/;"	e	enum:Eigen::GenericNumTraits::__anon188
Res	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename internal::remove_all<DenseResType>::type Res;$/;"	t	struct:Eigen::internal::sparse_time_dense_product_impl
ResPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::ResPacket ResPacket;$/;"	t	struct:Eigen::internal::gebp_kernel
ResPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,ScalarPacket,Scalar>::type ResPacket;$/;"	t	class:Eigen::internal::gebp_traits
ResPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;$/;"	t	class:Eigen::internal::gebp_traits
ResPacket	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;$/;"	t	struct:Eigen::internal::general_matrix_vector_product
ResPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize   = Vectorizable ? packet_traits<ResScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
ResPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize = Traits::ResPacketSize$/;"	e	enum:Eigen::internal::gebp_kernel::__anon205
ResPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize = Vectorizable ? packet_traits<ResScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
ResPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize = Vectorizable ? packet_traits<ResScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
ResPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize = Vectorizable ? packet_traits<ResScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
ResPacketSize	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  ResPacketSize = Vectorizable ? packet_traits<ResScalar>::size : 1$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon213
ResPacketSize	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  ResPacketSize = Vectorizable ? packet_traits<ResScalar>::size : 1$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon214
ResScalar	include/Eigen/src/Core/Dot.h	/^  typedef typename scalar_product_traits<typename traits<T>::Scalar,typename traits<U>::Scalar>::ReturnType ResScalar;$/;"	t	struct:Eigen::internal::dot_nocheck
ResScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef Scalar      ResScalar;$/;"	t	class:Eigen::internal::gebp_traits
ResScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  ResScalar;$/;"	t	class:Eigen::internal::gebp_traits
ResScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::ResScalar ResScalar;$/;"	t	struct:Eigen::internal::gebp_kernel
ResScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	class:Eigen::internal::gebp_traits
ResScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef           Scalar      ResScalar;$/;"	t	class:Eigen::GeneralProduct
ResScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:Eigen::internal::general_matrix_matrix_product
ResScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:Eigen::internal::general_matrix_matrix_product
ResScalar	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  typedef typename Traits::ResScalar ResScalar;$/;"	t	struct:Eigen::internal::tribb_kernel
ResScalar	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:Eigen::internal::general_matrix_matrix_triangular_product
ResScalar	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:Eigen::internal::general_matrix_vector_product
ResScalar	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:Eigen::internal::triangular_matrix_vector_product
ResultAlignment	include/Eigen/src/LU/arch/Inverse_SSE.h	/^    ResultAlignment     = bool(ResultType::Flags&AlignedBit),$/;"	e	enum:Eigen::internal::compute_inverse_size4::__anon395
ResultAlignment	include/Eigen/src/LU/arch/Inverse_SSE.h	/^    ResultAlignment = bool(ResultType::Flags&AlignedBit),$/;"	e	enum:Eigen::internal::compute_inverse_size4::__anon396
ResultMode	include/Eigen/src/Geometry/Transform.h	/^  enum { ResultMode = transform_product_result<LhsMode,RhsMode>::Mode };$/;"	e	enum:Eigen::internal::transform_transform_product_impl::__anon388
ResultScalar	include/Eigen/src/Householder/HouseholderSequence.h	/^    ResultScalar;$/;"	t	struct:Eigen::internal::matrix_type_times_scalar_type
ResultType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,1> ResultType;$/;"	t	struct:Eigen::ei_transform_product_impl
ResultType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef TransformType ResultType;$/;"	t	struct:Eigen::ei_transform_product_impl
ResultType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef typename ProductReturnType<MatrixType,Other>::Type ResultType;$/;"	t	struct:Eigen::ei_transform_product_impl
ResultType	include/Eigen/src/Geometry/Transform.h	/^    typedef typename ProductType::ResultType ResultType;$/;"	t	struct:Eigen::Transform::icc_11_workaround
ResultType	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,Projective> ResultType;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
ResultType	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,ResultMode,LhsOptions> ResultType;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
ResultType	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim,Projective,Options> ResultType;$/;"	t	struct:Eigen::internal::transform_left_product_impl
ResultType	include/Eigen/src/Geometry/Transform.h	/^  typedef TransformType ResultType;$/;"	t	struct:Eigen::internal::transform_left_product_impl
ResultType	include/Eigen/src/Geometry/Transform.h	/^  typedef typename MatrixType::PlainObject ResultType;$/;"	t	struct:Eigen::internal::transform_right_product_impl
ReturnByValue	include/Eigen/src/Core/ReturnByValue.h	/^template<typename Derived> class ReturnByValue$/;"	c	namespace:Eigen
ReturnOpposite	include/Eigen/src/Core/BandMatrix.h	/^        ReturnOpposite = (Options&SelfAdjoint) && (((Index)>0 && Supers==0) || ((Index)<0 && Subs==0)),$/;"	e	enum:Eigen::internal::BandMatrixBase::DiagonalIntReturnType::__anon46
ReturnType	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/Core/ReturnByValue.h	/^    typedef typename internal::traits<Derived>::ReturnType ReturnType;$/;"	t	class:Eigen::ReturnByValue
ReturnType	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename internal::plain_matrix_type_column_major<Rhs>::type ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/Core/Transpositions.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/Core/VectorwiseOp.h	/^                      typename Scalar=typename internal::traits<ExpressionType>::Scalar> struct ReturnType$/;"	s	class:Eigen::VectorwiseOp
ReturnType	include/Eigen/src/Core/util/Meta.h	/^  typedef T ReturnType;$/;"	t	struct:Eigen::scalar_product_traits
ReturnType	include/Eigen/src/Core/util/Meta.h	/^  typedef std::complex<T> ReturnType;$/;"	t	struct:Eigen::scalar_product_traits
ReturnType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^  typedef MatrixType ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/Geometry/Homogeneous.h	/^                 MatrixTypeCleaned::MaxColsAtCompileTime>::type ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/Geometry/Homogeneous.h	/^                 Rhs::MaxColsAtCompileTime>::type ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/Geometry/RotationBase.h	/^  typedef Matrix<typename RotationDerived::Scalar,Dim,1> ReturnType;$/;"	t	struct:Eigen::internal::rotation_base_generic_product_selector
ReturnType	include/Eigen/src/Geometry/RotationBase.h	/^  typedef Matrix<typename RotationDerived::Scalar,Dim,Dim> ReturnType;$/;"	t	struct:Eigen::internal::rotation_base_generic_product_selector
ReturnType	include/Eigen/src/Geometry/RotationBase.h	/^  typedef Transform<Scalar,Dim,Affine> ReturnType;$/;"	t	struct:Eigen::internal::rotation_base_generic_product_selector
ReturnType	include/Eigen/src/LU/Inverse.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^      typedef typename Derived::PlainObject ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^      typedef typename SPQRType::MatrixType ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/SparseCore/SparsePermutation.h	/^        SparseMatrix<Scalar,int(SrcStorageOrder)==RowMajor?ColMajor:RowMajor,Index> >::type ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef typename Derived::PlainObject ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef typename SparseQRType::MatrixType ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/misc/Image.h	/^  > ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/misc/Kernel.h	/^  > ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/misc/Solve.h	/^                 Rhs::MaxColsAtCompileTime> ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/misc/SparseSolve.h	/^                 Rhs::MaxColsAtCompileTime> ReturnType;$/;"	t	struct:Eigen::internal::traits
ReturnType	include/Eigen/src/misc/SparseSolve.h	/^  typedef SparseMatrix<typename Rhs::Scalar, Rhs::Options, typename Rhs::Index> ReturnType;$/;"	t	struct:Eigen::internal::traits
Reverse	include/Eigen/src/Core/Reverse.h	/^    inline Reverse(const MatrixType& matrix) : m_matrix(matrix) { }$/;"	f	class:Eigen::Reverse
Reverse	include/Eigen/src/Core/Reverse.h	/^template<typename MatrixType, int Direction> class Reverse$/;"	c	namespace:Eigen
ReverseCol	include/Eigen/src/Core/Reverse.h	/^      ReverseCol = (Direction == Horizontal) || (Direction == BothDirections),$/;"	e	enum:Eigen::Reverse::__anon242
ReverseInnerIterator	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    ReverseInnerIterator(const MappedSparseMatrix& mat, Index outer)$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^class MappedSparseMatrix<Scalar,_Flags,_Index>::ReverseInnerIterator$/;"	c	class:Eigen::MappedSparseMatrix
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^        inline ReverseInnerIterator(const BlockType& xpr, Index outer)$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^      EIGEN_STRONG_INLINE ReverseInnerIterator(const BlockType& block, Index outer)$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^    class ReverseInnerIterator : public _MatrixTypeNested::ReverseInnerIterator$/;"	c	class:Eigen::BlockImpl
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^    class ReverseInnerIterator: public SparseMatrixType::ReverseInnerIterator$/;"	c	class:Eigen::BlockImpl
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseBlock.h	/^    class ReverseInnerIterator: public XprType::ReverseInnerIterator$/;"	c	class:Eigen::BlockImpl
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator(const CwiseUnaryOpImpl& unaryOp, typename CwiseUnaryOpImpl::Index outer)$/;"	f	class:Eigen::CwiseUnaryOpImpl::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator(const CwiseUnaryViewImpl& unaryOp, typename CwiseUnaryViewImpl::Index outer)$/;"	f	class:Eigen::CwiseUnaryViewImpl::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^class CwiseUnaryOpImpl<UnaryOp,MatrixType,Sparse>::ReverseInnerIterator$/;"	c	class:Eigen::CwiseUnaryOpImpl
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^class CwiseUnaryViewImpl<ViewOp,MatrixType,Sparse>::ReverseInnerIterator$/;"	c	class:Eigen::CwiseUnaryViewImpl
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseMatrix.h	/^    ReverseInnerIterator(const SparseMatrix& mat, Index outer)$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseMatrix.h	/^class SparseMatrix<Scalar,_Options,_Index>::ReverseInnerIterator$/;"	c	class:Eigen::SparseMatrix
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseTranspose.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator(const TransposeImpl& xpr, typename TransposeImpl<MatrixType,Sparse>::Index outer)$/;"	f	class:Eigen::TransposeImpl::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseTranspose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Sparse>::ReverseInnerIterator$/;"	c	class:Eigen::TransposeImpl
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator(const SparseTriangularView& view, Index outer)$/;"	f	class:Eigen::SparseTriangularView::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseTriangularView.h	/^class SparseTriangularView<MatrixType,Mode>::ReverseInnerIterator : public MatrixTypeNestedCleaned::ReverseInnerIterator$/;"	c	class:Eigen::SparseTriangularView
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseVector.h	/^    ReverseInnerIterator(const SparseVector& vec, Index outer=0)$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseVector.h	/^    ReverseInnerIterator(const internal::CompressedStorage<Scalar,Index>& data)$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
ReverseInnerIterator	include/Eigen/src/SparseCore/SparseVector.h	/^class SparseVector<Scalar,_Options,_Index>::ReverseInnerIterator$/;"	c	class:Eigen::SparseVector
ReversePacket	include/Eigen/src/Core/Reverse.h	/^      ReversePacket = (Direction == BothDirections)$/;"	e	enum:Eigen::Reverse::__anon242
ReverseReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef Reverse<Derived, BothDirections> ReverseReturnType;$/;"	t	class:Eigen::DenseBase
ReverseRow	include/Eigen/src/Core/Reverse.h	/^      ReverseRow = (Direction == Vertical)   || (Direction == BothDirections),$/;"	e	enum:Eigen::Reverse::__anon242
Rhs	include/Eigen/src/Core/ProductBase.h	/^  typedef typename remove_all<_Rhs>::type Rhs;$/;"	t	struct:Eigen::internal::traits
Rhs	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,AffineCompact,RhsOptions> Rhs;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
Rhs	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,Projective,RhsOptions> Rhs;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
Rhs	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,RhsMode,RhsOptions> Rhs;$/;"	t	struct:Eigen::internal::transform_transform_product_impl
Rhs	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename internal::remove_all<DenseRhsType>::type Rhs;$/;"	t	struct:Eigen::internal::sparse_time_dense_product_impl
RhsBlasTraits	include/Eigen/src/Core/ProductBase.h	/^    typedef internal::blas_traits<_RhsNested> RhsBlasTraits;$/;"	t	class:Eigen::ProductBase
RhsCoeffReadCost	include/Eigen/src/Core/CwiseBinaryOp.h	/^    RhsCoeffReadCost = _RhsNested::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon54
RhsCoeffReadCost	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RhsCoeffReadCost = _RhsNested::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon197
RhsCoeffReadCost	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    RhsCoeffReadCost = traits<_RhsNested>::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon432
RhsCoeffReadCost	include/Eigen/src/SparseCore/SparseProduct.h	/^    RhsCoeffReadCost = _RhsNested::CoeffReadCost,$/;"	e	enum:Eigen::internal::traits::__anon443
RhsFlags	include/Eigen/src/Core/CwiseBinaryOp.h	/^    RhsFlags = _RhsNested::Flags,$/;"	e	enum:Eigen::internal::traits::__anon54
RhsFlags	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RhsFlags = _RhsNested::Flags,$/;"	e	enum:Eigen::internal::traits::__anon197
RhsFlags	include/Eigen/src/SparseCore/SparseProduct.h	/^    RhsFlags = _RhsNested::Flags,$/;"	e	enum:Eigen::internal::traits::__anon443
RhsIsSelfAdjoint	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    RhsIsSelfAdjoint = (RhsMode&SelfAdjoint)==SelfAdjoint$/;"	e	enum:Eigen::SelfadjointProductMatrix::__anon216
RhsIsUpper	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    RhsIsUpper = (RhsMode&(Upper|Lower))==Upper,$/;"	e	enum:Eigen::SelfadjointProductMatrix::__anon216
RhsIsVectorAtCompileTime	include/Eigen/src/Core/SolveTriangular.h	/^      RhsIsVectorAtCompileTime = (Side==OnTheLeft ? Rhs::ColsAtCompileTime : Rhs::RowsAtCompileTime)==1$/;"	e	enum:Eigen::internal::trsolve_traits::__anon249
RhsIterator	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename _RhsNested::InnerIterator RhsIterator;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
RhsMode	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^      RhsMode = internal::is_diagonal<_RhsNested>::ret ? internal::SDP_IsDiagonal$/;"	e	enum:Eigen::SparseDiagonalProduct::__anon435
RhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::nested<Rhs>::type RhsNested;$/;"	t	class:Eigen::CwiseBinaryOp
RhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename Rhs::Nested RhsNested;$/;"	t	struct:Eigen::internal::traits
RhsNested	include/Eigen/src/Core/GeneralProduct.h	/^  typedef typename internal::nested<Rhs, Lhs::RowsAtCompileTime, typename internal::plain_matrix_type<Rhs>::type >::type RhsNested;$/;"	t	struct:Eigen::ProductReturnType
RhsNested	include/Eigen/src/Core/ProductBase.h	/^    typedef typename Rhs::Nested RhsNested;$/;"	t	class:Eigen::ProductBase
RhsNested	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNested;$/;"	t	struct:Eigen::internal::homogeneous_right_product_impl
RhsNested	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::RhsNested RhsNested;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
RhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef typename Traits::RhsNested RhsNested;$/;"	t	class:Eigen::SparseDenseOuterProduct
RhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename Rhs::Nested RhsNested;$/;"	t	struct:Eigen::internal::traits
RhsNested	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    typedef typename Rhs::Nested RhsNested;$/;"	t	class:Eigen::SparseDiagonalProduct
RhsNested	include/Eigen/src/SparseCore/SparseProduct.h	/^    typename internal::nested<Rhs,Lhs::RowsAtCompileTime>::type>::type RhsNested;$/;"	t	struct:Eigen::SparseSparseProductReturnType
RhsNestedCleaned	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNestedCleaned;$/;"	t	struct:Eigen::internal::triangular_solve_retval
RhsNestedCleaned	include/Eigen/src/misc/Solve.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNestedCleaned;$/;"	t	struct:Eigen::internal::solve_retval_base
RhsNestedCleaned	include/Eigen/src/misc/SparseSolve.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNestedCleaned;$/;"	t	struct:Eigen::internal::sparse_solve_retval_base
RhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::RhsPacket RhsPacket;$/;"	t	struct:Eigen::internal::gebp_kernel
RhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,DoublePacket,Scalar>::type RhsPacket;$/;"	t	class:Eigen::internal::gebp_traits
RhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;$/;"	t	class:Eigen::internal::gebp_traits
RhsPacket	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;$/;"	t	struct:Eigen::internal::general_matrix_vector_product
RhsPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsPacketSize = Vectorizable ? packet_traits<RhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
RhsPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsPacketSize = Vectorizable ? packet_traits<RhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
RhsPacketSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsPacketSize = Vectorizable ? packet_traits<RhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
RhsPacketSize	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  RhsPacketSize = Vectorizable ? packet_traits<RhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon213
RhsPacketSize	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  RhsPacketSize = Vectorizable ? packet_traits<RhsScalar>::size : 1,$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon214
RhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress   = Traits::RhsProgress,$/;"	e	enum:Eigen::internal::gebp_kernel::__anon205
RhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress = ResPacketSize$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
RhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress = RhsPacketSize$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
RhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress = RhsPacketSize$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
RhsProgress	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress = Vectorizable ? 2*ResPacketSize : 1$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
RhsRowMajor	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RhsRowMajor = RhsFlags & RowMajorBit,$/;"	e	enum:Eigen::internal::traits::__anon197
RhsRowMajor	include/Eigen/src/SparseCore/SparseProduct.h	/^    RhsRowMajor = internal::traits<Rhs>::Flags & RowMajorBit,$/;"	e	enum:Eigen::SparseSparseProductReturnType::__anon442
RhsScalar	include/Eigen/src/Core/GeneralProduct.h	/^    typedef typename Rhs::Scalar RhsScalar;$/;"	t	class:Eigen::GeneralProduct
RhsScalar	include/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::traits<Rhs>::Scalar RhsScalar;$/;"	t	class:Eigen::ProductBase
RhsScalar	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Rhs::Scalar RhsScalar;$/;"	t	struct:Eigen::internal::triangular_solver_selector
RhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef RealScalar RhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
RhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef Scalar      RhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
RhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef _RhsScalar RhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
RhsScalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  RhsScalar;$/;"	t	class:Eigen::internal::gebp_traits
RhsScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef _RhsScalar RhsScalar;$/;"	t	class:Eigen::internal::level3_blocking
RhsScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename  Rhs::Scalar RhsScalar;$/;"	t	class:Eigen::GeneralProduct
RhsScalar	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename conditional<Transpose,_LhsScalar,_RhsScalar>::type RhsScalar;$/;"	t	class:Eigen::internal::gemm_blocking_space
RhsUpLo	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^    RhsUpLo = RhsMode&(Upper|Lower)$/;"	e	enum:Eigen::SelfadjointProductMatrix::__anon218
RhsVectors	include/Eigen/src/Core/SolveTriangular.h	/^      RhsVectors  = RhsIsVectorAtCompileTime ? 1 : Dynamic$/;"	e	enum:Eigen::internal::trsolve_traits::__anon250
Rotation2D	include/Eigen/src/Eigen2Support/Geometry/All.h	25;"	d
Rotation2D	include/Eigen/src/Eigen2Support/Geometry/All.h	80;"	d
Rotation2D	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D(Scalar a) : m_angle(a) {}$/;"	f	class:Eigen::Rotation2D
Rotation2D	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline explicit Rotation2D(const Rotation2D<OtherScalarType>& other)$/;"	f	class:Eigen::Rotation2D
Rotation2D	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^class Rotation2D : public RotationBase<Rotation2D<_Scalar>,2>$/;"	c	namespace:Eigen
Rotation2D	include/Eigen/src/Geometry/Rotation2D.h	/^  Rotation2D() {}$/;"	f	class:Eigen::Rotation2D
Rotation2D	include/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D(const Scalar& a) : m_angle(a) {}$/;"	f	class:Eigen::Rotation2D
Rotation2D	include/Eigen/src/Geometry/Rotation2D.h	/^  inline explicit Rotation2D(const Rotation2D<OtherScalarType>& other)$/;"	f	class:Eigen::Rotation2D
Rotation2D	include/Eigen/src/Geometry/Rotation2D.h	/^class Rotation2D : public RotationBase<Rotation2D<_Scalar>,2>$/;"	c	namespace:Eigen
Rotation2Dd	include/Eigen/src/Eigen2Support/Geometry/All.h	27;"	d
Rotation2Dd	include/Eigen/src/Eigen2Support/Geometry/All.h	82;"	d
Rotation2Dd	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^typedef Rotation2D<double> Rotation2Dd;$/;"	t	namespace:Eigen
Rotation2Dd	include/Eigen/src/Geometry/Rotation2D.h	/^typedef Rotation2D<double> Rotation2Dd;$/;"	t	namespace:Eigen
Rotation2Df	include/Eigen/src/Eigen2Support/Geometry/All.h	26;"	d
Rotation2Df	include/Eigen/src/Eigen2Support/Geometry/All.h	81;"	d
Rotation2Df	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^typedef Rotation2D<float> Rotation2Df;$/;"	t	namespace:Eigen
Rotation2Df	include/Eigen/src/Geometry/Rotation2D.h	/^typedef Rotation2D<float> Rotation2Df;$/;"	t	namespace:Eigen
RotationBase	include/Eigen/src/Eigen2Support/Geometry/All.h	24;"	d
RotationBase	include/Eigen/src/Eigen2Support/Geometry/All.h	79;"	d
RotationBase	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^class RotationBase$/;"	c	namespace:Eigen
RotationBase	include/Eigen/src/Geometry/RotationBase.h	/^class RotationBase$/;"	c	namespace:Eigen
RotationMatrixType	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    typedef Matrix<Scalar,Dim,Dim> RotationMatrixType;$/;"	t	class:Eigen::RotationBase
RotationMatrixType	include/Eigen/src/Geometry/RotationBase.h	/^    typedef Matrix<Scalar,Dim,Dim> RotationMatrixType;$/;"	t	class:Eigen::RotationBase
RowMajor	include/Eigen/src/Core/util/Constants.h	/^  RowMajor = 0x1,  \/\/ it is only a coincidence that this is equal to RowMajorBit -- don't rely on that$/;"	e	enum:Eigen::__anon268
RowMajorBit	include/Eigen/src/Core/util/Constants.h	/^const unsigned int RowMajorBit = 0x1;$/;"	m	namespace:Eigen
RowType	include/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowType;$/;"	t	class:Eigen::JacobiSVD
RowVector	include/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::ColsAtCompileTime, 1> RowVector;$/;"	t	class:Eigen::SVD
RowVectorType	include/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<Scalar, 1, MatrixType::ColsAtCompileTime, MatrixType::Options, 1, MatrixType::MaxColsAtCompileTime> RowVectorType;$/;"	t	class:Eigen::LU
RowVectorType	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowVectorType;$/;"	t	class:Eigen::ColPivHouseholderQR
RowVectorType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowVectorType;$/;"	t	class:Eigen::FullPivHouseholderQR
RowVectorType	include/Eigen/src/QR/HouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowVectorType;$/;"	t	class:Eigen::HouseholderQR
RowVectorType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, 1, ColsAtCompileTime> RowVectorType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
RowXpr	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::RowXpr RowXpr;$/;"	t	class:Eigen::MatrixBase
RowXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowXpr;$/;"	t
Rows	include/Eigen/src/Core/GeneralProduct.h	/^    Rows  = _Lhs::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::product_type::__anon145
Rows	include/Eigen/src/Geometry/Transform.h	/^    Rows = int(Mode)==(AffineCompact) ? Dim : HDim$/;"	e	enum:Eigen::Transform::__anon383
RowsAtCompileTime	include/Eigen/src/Cholesky/LDLT.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::LDLT::__anon1
RowsAtCompileTime	include/Eigen/src/Cholesky/LLT.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::LLT::__anon2
RowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
RowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    RowsAtCompileTime = _Rows,$/;"	e	enum:Eigen::internal::traits::__anon47
RowsAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^    RowsAtCompileTime = _Rows,$/;"	e	enum:Eigen::internal::traits::__anon48
RowsAtCompileTime	include/Eigen/src/Core/Block.h	/^    RowsAtCompileTime = MatrixRows == 0 ? 0 : BlockRows,$/;"	e	enum:Eigen::internal::traits::__anon49
RowsAtCompileTime	include/Eigen/src/Core/CwiseBinaryOp.h	/^    RowsAtCompileTime = traits<Ancestor>::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon53
RowsAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:Eigen::DenseBase::__anon58
RowsAtCompileTime	include/Eigen/src/Core/Diagonal.h	/^    RowsAtCompileTime = (int(DiagIndex) == DynamicIndex || int(MatrixType::SizeAtCompileTime) == Dynamic) ? Dynamic$/;"	e	enum:Eigen::internal::traits::__anon64
RowsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^      RowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:Eigen::DiagonalBase::__anon66
RowsAtCompileTime	include/Eigen/src/Core/DiagonalMatrix.h	/^    RowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon68
RowsAtCompileTime	include/Eigen/src/Core/DiagonalProduct.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon69
RowsAtCompileTime	include/Eigen/src/Core/MapBase.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:Eigen::MapBase::__anon178
RowsAtCompileTime	include/Eigen/src/Core/Matrix.h	/^    RowsAtCompileTime = _Rows,$/;"	e	enum:Eigen::internal::traits::__anon184
RowsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      RowsAtCompileTime = Traits::RowsAtCompileTime,$/;"	e	enum:Eigen::PermutationBase::__anon189
RowsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^      RowsAtCompileTime = Traits::RowsAtCompileTime,$/;"	e	enum:Eigen::Transpose::__anon191
RowsAtCompileTime	include/Eigen/src/Core/PermutationMatrix.h	/^    RowsAtCompileTime = _IndicesType::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon190
RowsAtCompileTime	include/Eigen/src/Core/ProductBase.h	/^    RowsAtCompileTime = traits<Lhs>::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon196
RowsAtCompileTime	include/Eigen/src/Core/Replicate.h	/^    RowsAtCompileTime = RowFactor==Dynamic || int(MatrixType::RowsAtCompileTime)==Dynamic$/;"	e	enum:Eigen::internal::traits::__anon239
RowsAtCompileTime	include/Eigen/src/Core/Reverse.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon241
RowsAtCompileTime	include/Eigen/src/Core/Select.h	/^    RowsAtCompileTime = ConditionMatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon243
RowsAtCompileTime	include/Eigen/src/Core/Transpose.h	/^    RowsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon253
RowsAtCompileTime	include/Eigen/src/Core/TriangularMatrix.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:Eigen::TriangularBase::__anon256
RowsAtCompileTime	include/Eigen/src/Core/VectorwiseOp.h	/^    RowsAtCompileTime = Direction==Vertical   ? 1 : MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon330
RowsAtCompileTime	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RowsAtCompileTime = _LhsNested::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon197
RowsAtCompileTime	include/Eigen/src/Eigen2Support/Minor.h	/^    RowsAtCompileTime = (MatrixType::RowsAtCompileTime != Dynamic) ?$/;"	e	enum:Eigen::internal::traits::__anon357
RowsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::ComplexEigenSolver::__anon359
RowsAtCompileTime	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::ComplexSchur::__anon360
RowsAtCompileTime	include/Eigen/src/Eigenvalues/EigenSolver.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::EigenSolver::__anon361
RowsAtCompileTime	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::GeneralizedEigenSolver::__anon362
RowsAtCompileTime	include/Eigen/src/Eigenvalues/RealQZ.h	/^        RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::RealQZ::__anon364
RowsAtCompileTime	include/Eigen/src/Eigenvalues/RealSchur.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::RealSchur::__anon365
RowsAtCompileTime	include/Eigen/src/Geometry/Homogeneous.h	/^    RowsAtCompileTime = Direction==Vertical  ?  RowsPlusOne : MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon370
RowsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^      RowsAtCompileTime = internal::traits<HouseholderSequence>::RowsAtCompileTime,$/;"	e	enum:Eigen::HouseholderSequence::__anon393
RowsAtCompileTime	include/Eigen/src/Householder/HouseholderSequence.h	/^    RowsAtCompileTime = Side==OnTheLeft ? traits<VectorsType>::RowsAtCompileTime$/;"	e	enum:Eigen::internal::traits::__anon392
RowsAtCompileTime	include/Eigen/src/LU/FullPivLU.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::FullPivLU::__anon397
RowsAtCompileTime	include/Eigen/src/LU/PartialPivLU.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::PartialPivLU::__anon400
RowsAtCompileTime	include/Eigen/src/QR/ColPivHouseholderQR.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::ColPivHouseholderQR::__anon412
RowsAtCompileTime	include/Eigen/src/QR/FullPivHouseholderQR.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::FullPivHouseholderQR::__anon413
RowsAtCompileTime	include/Eigen/src/QR/HouseholderQR.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::HouseholderQR::__anon414
RowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::JacobiSVD::__anon465
RowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon461
RowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon462
RowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon463
RowsAtCompileTime	include/Eigen/src/SVD/JacobiSVD.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::qr_preconditioner_impl::__anon464
RowsAtCompileTime	include/Eigen/src/SVD/UpperBidiagonalization.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::UpperBidiagonalization::__anon466
RowsAtCompileTime	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    RowsAtCompileTime    = Tr ? int(traits<Rhs>::RowsAtCompileTime)     : int(traits<Lhs>::RowsAtCompileTime),$/;"	e	enum:Eigen::internal::traits::__anon432
RowsAtCompileTime	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    RowsAtCompileTime = _Lhs::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon433
RowsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    RowsAtCompileTime = Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon436
RowsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrix.h	/^    RowsAtCompileTime = Dynamic,$/;"	e	enum:Eigen::internal::traits::__anon437
RowsAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
RowsAtCompileTime	include/Eigen/src/SparseCore/SparseProduct.h	/^    RowsAtCompileTime    = _LhsNested::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::traits::__anon443
RowsAtCompileTime	include/Eigen/src/SparseCore/SparseVector.h	/^    RowsAtCompileTime = IsColVector ? Dynamic : 1,$/;"	e	enum:Eigen::internal::traits::__anon447
RowsBlockXpr	include/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowsBlockXpr;$/;"	t
RowsPlusOne	include/Eigen/src/Geometry/Homogeneous.h	/^    RowsPlusOne = (MatrixType::RowsAtCompileTime != Dynamic) ?$/;"	e	enum:Eigen::internal::traits::__anon370
RowwiseReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef VectorwiseOp<Derived, Horizontal> RowwiseReturnType;$/;"	t	class:Eigen::DenseBase
S	include/Eigen/src/Core/SolveTriangular.h	/^    S = IsLower ? 0     : I+1$/;"	e	enum:Eigen::internal::triangular_solver_unroller::__anon251
SCMatrix	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef internal::MappedSuperNodalMatrix<Scalar, Index> SCMatrix; $/;"	t	class:Eigen::SparseLU
SDP_IsDiagonal	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^enum {SDP_IsDiagonal, SDP_IsSparseRowMajor, SDP_IsSparseColMajor};$/;"	e	enum:Eigen::internal::__anon434
SDP_IsSparseColMajor	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^enum {SDP_IsDiagonal, SDP_IsSparseRowMajor, SDP_IsSparseColMajor};$/;"	e	enum:Eigen::internal::__anon434
SDP_IsSparseRowMajor	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^enum {SDP_IsDiagonal, SDP_IsSparseRowMajor, SDP_IsSparseColMajor};$/;"	e	enum:Eigen::internal::__anon434
SPARSELU_COLUMN_BMOD_H	include/Eigen/src/SparseLU/SparseLU_column_bmod.h	32;"	d
SPARSELU_COLUMN_DFS_H	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	31;"	d
SPARSELU_COPY_TO_UCOL_H	include/Eigen/src/SparseLU/SparseLU_copy_to_ucol.h	30;"	d
SPARSELU_HEAP_RELAX_SNODE_H	include/Eigen/src/SparseLU/SparseLU_heap_relax_snode.h	29;"	d
SPARSELU_IMPL_H	include/Eigen/src/SparseLU/SparseLUImpl.h	10;"	d
SPARSELU_KERNEL_BMOD_H	include/Eigen/src/SparseLU/SparseLU_kernel_bmod.h	12;"	d
SPARSELU_PANEL_BMOD_H	include/Eigen/src/SparseLU/SparseLU_panel_bmod.h	32;"	d
SPARSELU_PANEL_DFS_H	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	31;"	d
SPARSELU_PIVOTL_H	include/Eigen/src/SparseLU/SparseLU_pivotL.h	31;"	d
SPARSELU_PRUNEL_H	include/Eigen/src/SparseLU/SparseLU_pruneL.h	31;"	d
SPARSELU_RELAX_SNODE_H	include/Eigen/src/SparseLU/SparseLU_relax_snode.h	29;"	d
SPARSE_COLETREE_H	include/Eigen/src/SparseCore/SparseColEtree.h	32;"	d
SPQR	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    SPQR() $/;"	f	class:Eigen::SPQR
SPQR	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    SPQR(const _MatrixType& matrix) $/;"	f	class:Eigen::SPQR
SPQR	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^class SPQR$/;"	c	namespace:Eigen
SPQRMatrixQReturnType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  SPQRMatrixQReturnType(const SPQRType& spqr) : m_spqr(spqr) {}$/;"	f	struct:Eigen::SPQRMatrixQReturnType
SPQRMatrixQReturnType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^struct SPQRMatrixQReturnType{$/;"	s	namespace:Eigen
SPQRMatrixQTransposeReturnType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  SPQRMatrixQTransposeReturnType(const SPQRType& spqr) : m_spqr(spqr) {}$/;"	f	struct:Eigen::SPQRMatrixQTransposeReturnType
SPQRMatrixQTransposeReturnType	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^struct SPQRMatrixQTransposeReturnType{$/;"	s	namespace:Eigen
SPQR_QProduct	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  SPQR_QProduct(const SPQRType& spqr, const Derived& other, bool transpose) : m_spqr(spqr),m_other(other),m_transpose(transpose) {}$/;"	f	struct:Eigen::SPQR_QProduct
SPQR_QProduct	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^struct SPQR_QProduct : ReturnByValue<SPQR_QProduct<SPQRType,Derived> >$/;"	s	namespace:Eigen
SPQR_free	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    void SPQR_free()$/;"	f	class:Eigen::SPQR
SSE	include/Eigen/src/Core/util/Constants.h	/^    SSE = 0x1,$/;"	e	enum:Eigen::Architecture::Type
STORAGE_LAYOUT_DOES_NOT_MATCH	include/Eigen/src/Core/util/StaticAssert.h	/^        STORAGE_LAYOUT_DOES_NOT_MATCH$/;"	e	enum:Eigen::internal::static_assertion::__anon328
SVA_Inner	include/Eigen/src/SparseCore/SparseVector.h	/^  SVA_Inner,$/;"	e	enum:Eigen::internal::__anon448
SVA_Outer	include/Eigen/src/SparseCore/SparseVector.h	/^  SVA_Outer$/;"	e	enum:Eigen::internal::__anon448
SVA_RuntimeSwitch	include/Eigen/src/SparseCore/SparseVector.h	/^  SVA_RuntimeSwitch,$/;"	e	enum:Eigen::internal::__anon448
SVD	include/Eigen/src/Eigen2Support/SVD.h	/^    SVD() {} \/\/ a user who relied on compiler-generated default compiler reported problems with MSVC in 2.0.7$/;"	f	class:Eigen::SVD
SVD	include/Eigen/src/Eigen2Support/SVD.h	/^    SVD(const MatrixType& matrix)$/;"	f	class:Eigen::SVD
SVD	include/Eigen/src/Eigen2Support/SVD.h	/^template<typename MatrixType> class SVD$/;"	c	namespace:Eigen
SVD	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef JacobiSVD<MatrixType, QRPreconditioner> SVD;$/;"	t	struct:Eigen::internal::svd_precondition_2x2_block_to_be_real
SameType	include/Eigen/src/Core/CwiseBinaryOp.h	/^    SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	enum:Eigen::internal::traits::__anon54
SameType	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	enum:Eigen::internal::traits::__anon197
Scalar	include/Eigen/src/Cholesky/LDLT.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::LDLT
Scalar	include/Eigen/src/Cholesky/LLT.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::LLT
Scalar	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::CholmodBase
Scalar	include/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::ArrayBase
Scalar	include/Eigen/src/Core/Assign_MKL.h	/^  typedef typename Derived1::Scalar Scalar;$/;"	t	struct:Eigen::internal::vml_assign_impl
Scalar	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrix>::Scalar Scalar;$/;"	t	class:Eigen::internal::BandMatrix
Scalar	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrixWrapper>::Scalar Scalar;$/;"	t	class:Eigen::internal::BandMatrixWrapper
Scalar	include/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::internal::BandMatrixBase
Scalar	include/Eigen/src/Core/BandMatrix.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/BandMatrix.h	/^  typedef typename _CoefficientsType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/Block.h	/^  typedef typename traits<XprType>::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/CommaInitializer.h	/^  typedef typename XprType::Scalar Scalar;$/;"	t	struct:Eigen::CommaInitializer
Scalar	include/Eigen/src/Core/CoreIterators.h	/^    typedef typename Derived::Scalar Scalar;$/;"	t	class:Eigen::DenseBase::InnerIterator
Scalar	include/Eigen/src/Core/CwiseBinaryOp.h	/^                   >::type Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/CwiseUnaryOp.h	/^                   >::type Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/CwiseUnaryView.h	/^                   >::type Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::DenseBase
Scalar	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::DenseCoeffsBase
Scalar	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef _Scalar Scalar;$/;"	t	class:Eigen::DiagonalMatrix
Scalar	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename DiagonalVectorType::Scalar Scalar;$/;"	t	class:Eigen::DiagonalBase
Scalar	include/Eigen/src/Core/DiagonalMatrix.h	/^  typedef typename DiagonalVectorType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/DiagonalProduct.h	/^  typedef typename scalar_product_traits<typename MatrixType::Scalar, typename DiagonalType::Scalar>::ReturnType Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/Map.h	/^  typedef typename PlainObjectType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/MapBase.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:Eigen::MapBase
Scalar	include/Eigen/src/Core/MapBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::MapBase
Scalar	include/Eigen/src/Core/Matrix.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/MatrixBase.h	/^      typedef typename internal::scalar_product_traits<typename internal::traits<Derived>::Scalar,typename internal::traits<OtherDerived>::Scalar>::ReturnType Scalar;$/;"	t	struct:Eigen::MatrixBase::cross_product_return_type
Scalar	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::MatrixBase
Scalar	include/Eigen/src/Core/NoAlias.h	/^    typedef typename ExpressionType::Scalar Scalar;$/;"	t	class:Eigen::NoAlias
Scalar	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::Scalar Scalar;$/;"	t	class:Eigen::PermutationBase
Scalar	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::Scalar Scalar;$/;"	t	class:Eigen::Transpose
Scalar	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef typename _IndicesType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::PlainObjectBase
Scalar	include/Eigen/src/Core/ProductBase.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:ScaledProduct
Scalar	include/Eigen/src/Core/ProductBase.h	/^  typedef typename scalar_product_traits<typename Lhs::Scalar, typename Rhs::Scalar>::ReturnType Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:Eigen::internal::redux_impl
Scalar	include/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:Eigen::internal::redux_novec_unroller
Scalar	include/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:Eigen::internal::redux_vec_unroller
Scalar	include/Eigen/src/Core/Replicate.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/Reverse.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/Select.h	/^  typedef typename traits<ThenMatrixType>::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename internal::traits<SelfAdjointView>::Scalar Scalar; $/;"	t	class:Eigen::SelfAdjointView
Scalar	include/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Rhs::Scalar Scalar;$/;"	t	struct:Eigen::internal::triangular_solver_selector
Scalar	include/Eigen/src/Core/Transpose.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::TriangularBase
Scalar	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::Scalar Scalar;$/;"	t	class:Eigen::TriangularView
Scalar	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename Derived1::Scalar Scalar;$/;"	t	struct:Eigen::internal::triangular_assignment_selector
Scalar	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::Scalar Scalar;$/;"	t	class:Eigen::VectorwiseOp
Scalar	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MemberOp::result_type Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:Eigen::internal::coeff_visitor
Scalar	include/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:Eigen::internal::max_coeff_visitor
Scalar	include/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:Eigen::internal::min_coeff_visitor
Scalar	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename scalar_product_traits<typename _LhsNested::Scalar, typename _RhsNested::Scalar>::ReturnType Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  Scalar;$/;"	t	class:Eigen::internal::gebp_traits
Scalar	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef std::complex<RealScalar> Scalar;$/;"	t	struct:Eigen::internal::conj_helper
Scalar	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef typename NestedXpr::Scalar Scalar;$/;"	t	struct:Eigen::internal::blas_traits
Scalar	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef typename traits<XprType>::Scalar Scalar;$/;"	t	struct:Eigen::internal::blas_traits
Scalar	include/Eigen/src/Eigen2Support/Cwise.h	/^    typedef typename internal::traits<ExpressionType>::Scalar Scalar;$/;"	t	class:Eigen::Cwise
Scalar	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::AlignedBox
Scalar	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::AngleAxis
Scalar	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::ei_traits
Scalar	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Hyperplane
Scalar	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::ParametrizedLine
Scalar	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Quaternion
Scalar	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::ei_traits
Scalar	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef typename Other::Scalar Scalar;$/;"	t	struct:Eigen::ei_quaternion_assign_impl
Scalar	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Rotation2D
Scalar	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::ei_traits
Scalar	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    typedef typename ei_traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::RotationBase
Scalar	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Scaling
Scalar	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Transform
Scalar	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef typename Other::Scalar Scalar;$/;"	t	struct:Eigen::ei_transform_product_impl
Scalar	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Translation
Scalar	include/Eigen/src/Eigen2Support/LU.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::LU
Scalar	include/Eigen/src/Eigen2Support/SVD.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SVD
Scalar	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::ComplexEigenSolver
Scalar	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::ComplexSchur
Scalar	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::EigenSolver
Scalar	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::GeneralizedEigenSolver
Scalar	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::HessenbergDecomposition
Scalar	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::RealQZ
Scalar	include/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::RealSchur
Scalar	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SelfAdjointEigenSolver
Scalar	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^  typedef typename SolverType::Scalar Scalar;$/;"	t	struct:Eigen::internal::direct_selfadjoint_eigenvalues
Scalar	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::Tridiagonalization
Scalar	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:Eigen::internal::tridiagonalization_inplace_selector
Scalar	include/Eigen/src/Geometry/AlignedBox.h	/^  typedef _Scalar                                   Scalar;$/;"	t	class:Eigen::AlignedBox
Scalar	include/Eigen/src/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::AngleAxis
Scalar	include/Eigen/src/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Geometry/Hyperplane.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Hyperplane
Scalar	include/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename traits<Derived>::Scalar Scalar;$/;"	t	struct:Eigen::internal::unitOrthogonal_selector
Scalar	include/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::ParametrizedLine
Scalar	include/Eigen/src/Geometry/Quaternion.h	/^    typedef _Scalar Scalar;$/;"	t	class:Eigen::Map
Scalar	include/Eigen/src/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Quaternion
Scalar	include/Eigen/src/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Geometry/Quaternion.h	/^  typedef typename Other::Scalar Scalar;$/;"	t	struct:Eigen::internal::quaternionbase_assign_impl
Scalar	include/Eigen/src/Geometry/Quaternion.h	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::QuaternionBase
Scalar	include/Eigen/src/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Rotation2D
Scalar	include/Eigen/src/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/Geometry/RotationBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::RotationBase
Scalar	include/Eigen/src/Geometry/Scaling.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::UniformScaling
Scalar	include/Eigen/src/Geometry/Transform.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Transform
Scalar	include/Eigen/src/Geometry/Translation.h	/^  typedef _Scalar Scalar;$/;"	t	class:Eigen::Translation
Scalar	include/Eigen/src/Householder/HouseholderSequence.h	/^    typedef typename internal::traits<HouseholderSequence>::Scalar Scalar;$/;"	t	class:Eigen::HouseholderSequence
Scalar	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    typedef _Scalar Scalar;$/;"	t	class:Eigen::DiagonalPreconditioner
Scalar	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::BiCGSTAB
Scalar	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::ConjugateGradient
Scalar	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    typedef _Scalar Scalar;$/;"	t	class:Eigen::IncompleteLUT
Scalar	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::IterativeSolverBase
Scalar	include/Eigen/src/LU/FullPivLU.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::FullPivLU
Scalar	include/Eigen/src/LU/PartialPivLU.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::PartialPivLU
Scalar	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::PastixBase
Scalar	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename _MatrixType::Scalar Scalar;$/;"	t	struct:Eigen::internal::pastix_traits
Scalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:Eigen::PardisoLDLT
Scalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:Eigen::PardisoLLT
Scalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:Eigen::PardisoLU
Scalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename Traits::Scalar Scalar;$/;"	t	class:Eigen::PardisoImpl
Scalar	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef typename _MatrixType::Scalar Scalar;$/;"	t	struct:Eigen::internal::pardiso_traits
Scalar	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::ColPivHouseholderQR
Scalar	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::FullPivHouseholderQR
Scalar	include/Eigen/src/QR/HouseholderQR.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::HouseholderQR
Scalar	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    typedef typename _MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SPQR
Scalar	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  typedef typename SPQRType::Scalar Scalar;$/;"	t	struct:Eigen::SPQR_QProduct
Scalar	include/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::JacobiSVD
Scalar	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
Scalar	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:Eigen::internal::svd_precondition_2x2_block_to_be_real
Scalar	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::internal::UpperBidiagonalization
Scalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SimplicialCholesky
Scalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SimplicialCholeskyBase
Scalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SimplicialLDLT
Scalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SimplicialLLT
Scalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef typename MatrixType::Scalar                             Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  typedef typename MatrixType::Scalar                         Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCore/AmbiVector.h	/^    typedef _Scalar Scalar;$/;"	t	class:Eigen::internal::AmbiVector
Scalar	include/Eigen/src/SparseCore/AmbiVector.h	/^    typedef _Scalar Scalar;$/;"	t	class:Eigen::internal::AmbiVector::Iterator
Scalar	include/Eigen/src/SparseCore/CompressedStorage.h	/^    typedef _Scalar Scalar;$/;"	t	class:Eigen::internal::CompressedStorage
Scalar	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^  typedef typename LhsCleaned::Scalar Scalar;$/;"	t	struct:Eigen::internal::conservative_sparse_sparse_product_selector
Scalar	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^  typedef typename traits<typename remove_all<Lhs>::type>::Scalar Scalar;$/;"	t	struct:Eigen::internal::conservative_sparse_sparse_product_selector
Scalar	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename CwiseBinaryXpr::Scalar Scalar;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
Scalar	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::Scalar Scalar;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
Scalar	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryOpImpl::Scalar Scalar;$/;"	t	class:Eigen::CwiseUnaryOpImpl::InnerIterator
Scalar	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryOpImpl::Scalar Scalar;$/;"	t	class:Eigen::CwiseUnaryOpImpl::ReverseInnerIterator
Scalar	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryViewImpl::Scalar Scalar;$/;"	t	class:Eigen::CwiseUnaryViewImpl::InnerIterator
Scalar	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryViewImpl::Scalar Scalar;$/;"	t	class:Eigen::CwiseUnaryViewImpl::ReverseInnerIterator
Scalar	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^                                         typename traits<Rhs>::Scalar>::ReturnType Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^  typedef typename _Lhs::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Eigen::SparseMatrixBase
Scalar	include/Eigen/src/SparseCore/SparsePermutation.h	/^    typedef typename MatrixTypeNestedCleaned::Scalar Scalar;$/;"	t	struct:Eigen::internal::permut_sparsematrix_product_retval
Scalar	include/Eigen/src/SparseCore/SparsePermutation.h	/^  typedef typename MatrixTypeNestedCleaned::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef typename _LhsNested::Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef typename internal::traits<Lhs>::Scalar Scalar;$/;"	t	struct:Eigen::SparseSparseProductReturnType
Scalar	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SparseSelfAdjointView
Scalar	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SparseSymmetricPermutationProduct
Scalar	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^  typedef typename traits<typename remove_all<Lhs>::type>::Scalar Scalar;$/;"	t	struct:Eigen::internal::sparse_sparse_product_with_pruning_selector
Scalar	include/Eigen/src/SparseCore/SparseVector.h	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	include/Eigen/src/SparseCore/TriangularSolver.h	/^  typedef typename Rhs::Scalar Scalar;$/;"	t	struct:Eigen::internal::sparse_solve_triangular_selector
Scalar	include/Eigen/src/SparseCore/TriangularSolver.h	/^  typedef typename Rhs::Scalar Scalar;$/;"	t	struct:Eigen::internal::sparse_solve_triangular_sparse_selector
Scalar	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef typename MatrixType::Scalar Scalar; $/;"	t	class:Eigen::SparseLU
Scalar	include/Eigen/src/SparseLU/SparseLU.h	/^  typedef typename MappedSupernodalType::Scalar Scalar;$/;"	t	struct:Eigen::SparseLUMatrixLReturnType
Scalar	include/Eigen/src/SparseLU/SparseLU.h	/^  typedef typename MatrixLType::Scalar Scalar;$/;"	t	struct:Eigen::SparseLUMatrixUReturnType
Scalar	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    typedef _Scalar Scalar; $/;"	t	class:Eigen::internal::MappedSuperNodalMatrix
Scalar	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  typedef typename ScalarVector::Scalar Scalar;$/;"	t	struct:Eigen::internal::column_dfs_traits
Scalar	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SparseQR
Scalar	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef typename SparseQRType::Scalar Scalar;$/;"	t	struct:Eigen::SparseQRMatrixQReturnType
Scalar	include/Eigen/src/SparseQR/SparseQR.h	/^  typedef typename SparseQRType::Scalar Scalar;$/;"	t	struct:Eigen::SparseQR_QProduct
Scalar	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:Eigen::SuperILU
Scalar	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:Eigen::SuperLU
Scalar	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::SuperLUBase
Scalar	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Eigen::UmfPackLU
ScalarAddReturnType	include/Eigen/src/Eigen2Support/Cwise.h	/^    typedef CwiseUnaryOp<internal::scalar_add_op<Scalar>, ExpressionType> ScalarAddReturnType;$/;"	t	class:Eigen::Cwise
ScalarCoeffImpl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^                                   _LhsNested, _RhsNested, Scalar> ScalarCoeffImpl;$/;"	t	class:Eigen::CoeffBasedProduct
ScalarIsComplex	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^      ScalarIsComplex = NumTraits<Scalar>::IsComplex$/;"	e	enum:Eigen::PardisoImpl::__anon407
ScalarMultipleReturnType	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryOp<internal::scalar_multiple_op<Scalar>, const Derived> ScalarMultipleReturnType;$/;"	t
ScalarPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<Scalar>::type     ScalarPacket;$/;"	t	class:Eigen::internal::gebp_traits
ScalarQuotient1ReturnType	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryOp<internal::scalar_quotient1_op<Scalar>, const Derived> ScalarQuotient1ReturnType;$/;"	t
ScalarTraits	include/Eigen/src/Geometry/AlignedBox.h	/^  typedef NumTraits<Scalar>                         ScalarTraits;$/;"	t	class:Eigen::AlignedBox
ScalarVector	include/Eigen/src/SparseLU/SparseLU.h	/^    typedef Matrix<Scalar,Dynamic,1> ScalarVector;$/;"	t	class:Eigen::SparseLU
ScalarVector	include/Eigen/src/SparseLU/SparseLUImpl.h	/^    typedef Matrix<Scalar,Dynamic,1> ScalarVector;$/;"	t	class:Eigen::internal::SparseLUImpl
ScalarVector	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    typedef Matrix<Scalar,Dynamic,1> ScalarVector;$/;"	t	class:Eigen::internal::MappedSuperNodalMatrix
ScalarVector	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef Matrix<Scalar, Dynamic, 1> ScalarVector;$/;"	t	class:Eigen::SparseQR
ScalarWithConstIfNotLvalue	include/Eigen/src/Core/ArrayWrapper.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:Eigen::ArrayWrapper
ScalarWithConstIfNotLvalue	include/Eigen/src/Core/ArrayWrapper.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:Eigen::MatrixWrapper
ScalarWithConstIfNotLvalue	include/Eigen/src/Core/Diagonal.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:Eigen::Diagonal
ScalarWithConstIfNotLvalue	include/Eigen/src/Core/MapBase.h	/^                  >::type ScalarWithConstIfNotLvalue;$/;"	t	class:Eigen::MapBase
ScalarWithConstIfNotLvalue	include/Eigen/src/Core/Swap.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:Eigen::SwapWrapper
ScalarWithConstIfNotLvalue	include/Eigen/src/Core/Transpose.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:Eigen::TransposeImpl
ScaledProduct	include/Eigen/src/Core/ProductBase.h	/^    ScaledProduct(const NestedProduct& prod, const Scalar& x)$/;"	f	class:ScaledProduct
ScaledProduct	include/Eigen/src/Core/ProductBase.h	/^class ScaledProduct$/;"	c
Scaling	include/Eigen/src/Eigen2Support/Geometry/All.h	104;"	d
Scaling	include/Eigen/src/Eigen2Support/Geometry/All.h	49;"	d
Scaling	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  Scaling() {}$/;"	f	class:Eigen::Scaling
Scaling	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  explicit inline Scaling(const Scalar& s) { m_coeffs.setConstant(s); }$/;"	f	class:Eigen::Scaling
Scaling	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  explicit inline Scaling(const VectorType& coeffs) : m_coeffs(coeffs) {}$/;"	f	class:Eigen::Scaling
Scaling	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling(const Scalar& sx, const Scalar& sy)$/;"	f	class:Eigen::Scaling
Scaling	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling(const Scalar& sx, const Scalar& sy, const Scalar& sz)$/;"	f	class:Eigen::Scaling
Scaling	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline explicit Scaling(const Scaling<OtherScalarType,Dim>& other)$/;"	f	class:Eigen::Scaling
Scaling	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^class Scaling$/;"	c	namespace:Eigen
Scaling	include/Eigen/src/Geometry/Scaling.h	/^static inline DiagonalMatrix<Scalar,2> Scaling(const Scalar& sx, const Scalar& sy)$/;"	f	namespace:Eigen
Scaling	include/Eigen/src/Geometry/Scaling.h	/^static inline DiagonalMatrix<Scalar,3> Scaling(const Scalar& sx, const Scalar& sy, const Scalar& sz)$/;"	f	namespace:Eigen
Scaling	include/Eigen/src/Geometry/Scaling.h	/^static inline UniformScaling<double> Scaling(double s) { return UniformScaling<double>(s); }$/;"	f	namespace:Eigen
Scaling	include/Eigen/src/Geometry/Scaling.h	/^static inline UniformScaling<float> Scaling(float s) { return UniformScaling<float>(s); }$/;"	f	namespace:Eigen
Scaling	include/Eigen/src/Geometry/Scaling.h	/^static inline UniformScaling<std::complex<RealScalar> > Scaling(const std::complex<RealScalar>& s)$/;"	f	namespace:Eigen
Scaling	include/Eigen/src/Geometry/Scaling.h	/^static inline const DiagonalWrapper<const Derived> Scaling(const MatrixBase<Derived>& coeffs)$/;"	f	namespace:Eigen
Scaling2d	include/Eigen/src/Eigen2Support/Geometry/All.h	106;"	d
Scaling2d	include/Eigen/src/Eigen2Support/Geometry/All.h	51;"	d
Scaling2d	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<double,2> Scaling2d;$/;"	t	namespace:Eigen
Scaling2f	include/Eigen/src/Eigen2Support/Geometry/All.h	105;"	d
Scaling2f	include/Eigen/src/Eigen2Support/Geometry/All.h	50;"	d
Scaling2f	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<float, 2> Scaling2f;$/;"	t	namespace:Eigen
Scaling3d	include/Eigen/src/Eigen2Support/Geometry/All.h	108;"	d
Scaling3d	include/Eigen/src/Eigen2Support/Geometry/All.h	53;"	d
Scaling3d	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<double,3> Scaling3d;$/;"	t	namespace:Eigen
Scaling3f	include/Eigen/src/Eigen2Support/Geometry/All.h	107;"	d
Scaling3f	include/Eigen/src/Eigen2Support/Geometry/All.h	52;"	d
Scaling3f	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<float, 3> Scaling3f;$/;"	t	namespace:Eigen
ScalingType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Scaling<Scalar,Dim> ScalingType;$/;"	t	class:Eigen::Transform
ScalingType	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Scaling<Scalar,Dim> ScalingType;$/;"	t	class:Eigen::Translation
SegmentReturnType	include/Eigen/src/plugins/BlockMethods.h	/^typedef VectorBlock<Derived> SegmentReturnType;$/;"	t
Select	include/Eigen/src/Core/Select.h	/^    Select(const ConditionMatrixType& a_conditionMatrix,$/;"	f	class:Eigen::Select
Select	include/Eigen/src/Core/Select.h	/^class Select : internal::no_assignment_operator,$/;"	c	namespace:Eigen
SelfAdjoint	include/Eigen/src/Core/util/Constants.h	/^  SelfAdjoint=0x10,$/;"	e	enum:Eigen::__anon263
SelfAdjointBit	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int SelfAdjointBit = SelfAdjoint;$/;"	m	namespace:Eigen
SelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver()$/;"	f	class:Eigen::SelfAdjointEigenSolver
SelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(Index size)$/;"	f	class:Eigen::SelfAdjointEigenSolver
SelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(const MatrixType& matA, const MatrixType& matB, bool computeEigenvectors = true)$/;"	f	class:Eigen::SelfAdjointEigenSolver
SelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:Eigen::SelfAdjointEigenSolver
SelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(const MatrixType& matrix, int options = ComputeEigenvectors)$/;"	f	class:Eigen::SelfAdjointEigenSolver
SelfAdjointEigenSolver	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^template<typename _MatrixType> class SelfAdjointEigenSolver$/;"	c	namespace:Eigen
SelfAdjointView	include/Eigen/src/Core/SelfAdjointView.h	/^    inline SelfAdjointView(MatrixType& matrix) : m_matrix(matrix)$/;"	f	class:Eigen::SelfAdjointView
SelfAdjointView	include/Eigen/src/Core/SelfAdjointView.h	/^template<typename MatrixType, unsigned int UpLo> class SelfAdjointView$/;"	c	namespace:Eigen
SelfAdjointViewReturnType	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SelfAdjointView<Derived, UpLo> Type; };$/;"	s	class:Eigen::MatrixBase
SelfCwiseBinaryOp	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline SelfCwiseBinaryOp(Lhs& xpr, const BinaryOp& func = BinaryOp()) : m_matrix(xpr), m_functor(func) {}$/;"	f	class:Eigen::SelfCwiseBinaryOp
SelfCwiseBinaryOp	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^template<typename BinaryOp, typename Lhs, typename Rhs> class SelfCwiseBinaryOp$/;"	c	namespace:Eigen
SelfadjointProductMatrix	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  SelfadjointProductMatrix(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:Eigen::SelfadjointProductMatrix
SelfadjointProductMatrix	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,RhsMode,false>$/;"	s	namespace:Eigen
SelfadjointProductMatrix	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^  SelfadjointProductMatrix(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:Eigen::SelfadjointProductMatrix
SelfadjointProductMatrix	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct SelfadjointProductMatrix<Lhs,0,true,Rhs,RhsMode,false>$/;"	s	namespace:Eigen
SelfadjointProductMatrix	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,0,true>$/;"	s	namespace:Eigen
Sequential	include/Eigen/src/Core/util/Constants.h	/^enum Sequential_t { Sequential };$/;"	e	enum:Eigen::Sequential_t
SequentialLinSpacedReturnType	include/Eigen/src/Core/DenseBase.h	/^    typedef CwiseNullaryOp<internal::linspaced_op<Scalar,false>,Derived> SequentialLinSpacedReturnType;$/;"	t	class:Eigen::DenseBase
Sequential_t	include/Eigen/src/Core/util/Constants.h	/^enum Sequential_t { Sequential };$/;"	g	namespace:Eigen
SetAction	include/Eigen/src/Core/util/Constants.h	/^enum Action {GetAction, SetAction};$/;"	e	enum:Eigen::Action
SetDiag	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    SetDiag = (Mode&(ZeroDiag|UnitDiag)) ? 0 : 1$/;"	e	enum:Eigen::internal::product_triangular_matrix_matrix::__anon219
SetDiag	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    SetDiag = (Mode&(ZeroDiag|UnitDiag)) ? 0 : 1$/;"	e	enum:Eigen::internal::product_triangular_matrix_matrix::__anon220
Side	include/Eigen/src/Core/GeneralProduct.h	/^    enum { Side = Lhs::IsVectorAtCompileTime ? OnTheLeft : OnTheRight };$/;"	e	enum:Eigen::GeneralProduct::__anon170
SignMatrix	include/Eigen/src/Cholesky/LDLT.h	/^  enum SignMatrix { PositiveSemiDef, NegativeSemiDef, ZeroSign, Indefinite };$/;"	g	namespace:Eigen::internal
SimplicialCholesky	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialCholesky() : Base(), m_LDLT(true) {}$/;"	f	class:Eigen::SimplicialCholesky
SimplicialCholesky	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialCholesky(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialCholesky
SimplicialCholesky	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    class SimplicialCholesky : public SimplicialCholeskyBase<SimplicialCholesky<_MatrixType,_UpLo,_Ordering> >$/;"	c	namespace:Eigen
SimplicialCholeskyBase	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialCholeskyBase()$/;"	f	class:Eigen::SimplicialCholeskyBase
SimplicialCholeskyBase	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialCholeskyBase(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialCholeskyBase
SimplicialCholeskyBase	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^class SimplicialCholeskyBase : internal::noncopyable$/;"	c	namespace:Eigen
SimplicialCholeskyLDLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  SimplicialCholeskyLDLT$/;"	e	enum:Eigen::SimplicialCholeskyMode
SimplicialCholeskyLLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  SimplicialCholeskyLLT,$/;"	e	enum:Eigen::SimplicialCholeskyMode
SimplicialCholeskyMode	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^enum SimplicialCholeskyMode {$/;"	g	namespace:Eigen
SimplicialLDLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialLDLT() : Base() {}$/;"	f	class:Eigen::SimplicialLDLT
SimplicialLDLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialLDLT(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialLDLT
SimplicialLDLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    class SimplicialLDLT : public SimplicialCholeskyBase<SimplicialLDLT<_MatrixType,_UpLo,_Ordering> >$/;"	c	namespace:Eigen
SimplicialLLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialLLT() : Base() {}$/;"	f	class:Eigen::SimplicialLLT
SimplicialLLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialLLT(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialLLT
SimplicialLLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    class SimplicialLLT : public SimplicialCholeskyBase<SimplicialLLT<_MatrixType,_UpLo,_Ordering> >$/;"	c	namespace:Eigen
SingletonVector	include/Eigen/src/SparseCore/SparseMatrix.h	/^        SingletonVector(Index i, Index v)$/;"	f	class:Eigen::SparseMatrix::SingletonVector
SingletonVector	include/Eigen/src/SparseCore/SparseMatrix.h	/^    class SingletonVector$/;"	c	class:Eigen::SparseMatrix
SingularValuesType	include/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MinSize, 1> SingularValuesType;$/;"	t	class:Eigen::SVD
SingularValuesType	include/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename internal::plain_diag_type<MatrixType, RealScalar>::type SingularValuesType;$/;"	t	class:Eigen::JacobiSVD
Size	include/Eigen/src/Core/Redux.h	/^    Size = Derived::SizeAtCompileTime,$/;"	e	enum:Eigen::internal::redux_impl::__anon235
Size	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      Size = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::HessenbergDecomposition::__anon363
Size	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      Size = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::SelfAdjointEigenSolver::__anon366
Size	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      Size = MatrixType::RowsAtCompileTime,$/;"	e	enum:Eigen::Tridiagonalization::__anon367
SizeA	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      SizeA = ActualRows * MaxDepth,$/;"	e	enum:Eigen::internal::gemm_blocking_space::__anon209
SizeAtCompileTime	include/Eigen/src/Core/BandMatrix.h	/^      SizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime,ColsAtCompileTime)$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon45
SizeAtCompileTime	include/Eigen/src/Core/DenseBase.h	/^      SizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:Eigen::DenseBase::__anon58
SizeAtCompileTime	include/Eigen/src/Core/MapBase.h	/^      SizeAtCompileTime = Base::SizeAtCompileTime$/;"	e	enum:Eigen::MapBase::__anon178
SizeAtCompileTime	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      SizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
SizeB	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      SizeB = ActualCols * MaxDepth,$/;"	e	enum:Eigen::internal::gemm_blocking_space::__anon209
SizeMinusOne	include/Eigen/src/Core/MatrixBase.h	/^      SizeMinusOne = SizeAtCompileTime==Dynamic ? Dynamic : SizeAtCompileTime-1$/;"	e	enum:Eigen::MatrixBase::__anon187
SizeMinusOne	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      SizeMinusOne = Size == Dynamic ? Dynamic : Size - 1,$/;"	e	enum:Eigen::HessenbergDecomposition::__anon363
SizeMinusOne	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      SizeMinusOne = Size == Dynamic ? Dynamic : (Size > 1 ? Size - 1 : 1),$/;"	e	enum:Eigen::Tridiagonalization::__anon367
SizeW	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      SizeW = MaxDepth * Traits::WorkSpaceFactor$/;"	e	enum:Eigen::internal::gemm_blocking_space::__anon209
SkipDiag	include/Eigen/src/SparseCore/SparseTriangularView.h	/^           SkipDiag = (Mode&ZeroDiag) ? 1 : 0,$/;"	e	enum:Eigen::SparseTriangularView::__anon444
SkipFirst	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    enum { SkipFirst = ((Mode&Lower) && !(MatrixType::Flags&RowMajorBit))$/;"	e	enum:Eigen::SparseTriangularView::__anon444
SkipLast	include/Eigen/src/SparseCore/SparseTriangularView.h	/^           SkipLast = !SkipFirst,$/;"	e	enum:Eigen::SparseTriangularView::__anon444
SliceVectorizedTraversal	include/Eigen/src/Core/util/Constants.h	/^  SliceVectorizedTraversal,$/;"	e	enum:Eigen::__anon265
SluMatrix	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  SluMatrix()$/;"	f	struct:Eigen::SluMatrix
SluMatrix	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  SluMatrix(const SluMatrix& other)$/;"	f	struct:Eigen::SluMatrix
SluMatrix	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^struct SluMatrix : SuperMatrix$/;"	s	namespace:Eigen
SluMatrixMapHelper	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^struct SluMatrixMapHelper<Matrix<Scalar,Rows,Cols,Options,MRows,MCols> >$/;"	s	namespace:Eigen
SluMatrixMapHelper	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^struct SluMatrixMapHelper<SparseMatrixBase<Derived> >$/;"	s	namespace:Eigen
Small	include/Eigen/src/Core/GeneralProduct.h	/^  Small = 3$/;"	e	enum:Eigen::__anon143
SmallPanelWidth	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    SmallPanelWidth   = 2 * EIGEN_PLAIN_ENUM_MAX(Traits::mr,Traits::nr),$/;"	e	enum:Eigen::internal::product_triangular_matrix_matrix::__anon219
SmallPanelWidth	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    SmallPanelWidth   = EIGEN_PLAIN_ENUM_MAX(Traits::mr,Traits::nr),$/;"	e	enum:Eigen::internal::product_triangular_matrix_matrix::__anon220
SparseBase	include/Eigen/src/SparseCore/SparseVector.h	/^    typedef SparseMatrixBase<SparseVector> SparseBase;$/;"	t	class:Eigen::SparseVector
SparseDenseOuterProduct	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE SparseDenseOuterProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:Eigen::SparseDenseOuterProduct
SparseDenseOuterProduct	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE SparseDenseOuterProduct(const Rhs& rhs, const Lhs& lhs)$/;"	f	class:Eigen::SparseDenseOuterProduct
SparseDenseOuterProduct	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^class SparseDenseOuterProduct$/;"	c	namespace:Eigen
SparseDenseProductReturnType	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs, int InnerSize> struct SparseDenseProductReturnType$/;"	s	namespace:Eigen
SparseDenseProductReturnType	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs> struct SparseDenseProductReturnType<Lhs,Rhs,1>$/;"	s	namespace:Eigen
SparseDiagonalProduct	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE SparseDiagonalProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:Eigen::SparseDiagonalProduct
SparseDiagonalProduct	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^class SparseDiagonalProduct$/;"	c	namespace:Eigen
SparseFlags	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    SparseFlags = is_diagonal<_Lhs>::ret ? int(_Rhs::Flags) : int(_Lhs::Flags),$/;"	e	enum:Eigen::internal::traits::__anon433
SparseLU	include/Eigen/src/SparseLU/SparseLU.h	/^    SparseLU():m_isInitialized(true),m_lastError(""),m_Ustore(0,0,0,0,0,0),m_symmetricmode(false),m_diagpivotthresh(1.0),m_detPermR(1)$/;"	f	class:Eigen::SparseLU
SparseLU	include/Eigen/src/SparseLU/SparseLU.h	/^    SparseLU(const MatrixType& matrix):m_isInitialized(true),m_lastError(""),m_Ustore(0,0,0,0,0,0),m_symmetricmode(false),m_diagpivotthresh(1.0),m_detPermR(1)$/;"	f	class:Eigen::SparseLU
SparseLU	include/Eigen/src/SparseLU/SparseLU.h	/^class SparseLU : public internal::SparseLUImpl<typename _MatrixType::Scalar, typename _MatrixType::Index>$/;"	c	namespace:Eigen
SparseLUImpl	include/Eigen/src/SparseLU/SparseLUImpl.h	/^class SparseLUImpl$/;"	c	namespace:Eigen::internal
SparseLUMatrixLReturnType	include/Eigen/src/SparseLU/SparseLU.h	/^  SparseLUMatrixLReturnType(const MappedSupernodalType& mapL) : m_mapL(mapL)$/;"	f	struct:Eigen::SparseLUMatrixLReturnType
SparseLUMatrixLReturnType	include/Eigen/src/SparseLU/SparseLU.h	/^struct SparseLUMatrixLReturnType : internal::no_assignment_operator$/;"	s	namespace:Eigen
SparseLUMatrixUReturnType	include/Eigen/src/SparseLU/SparseLU.h	/^  SparseLUMatrixUReturnType(const MatrixLType& mapL, const MatrixUType& mapU)$/;"	f	struct:Eigen::SparseLUMatrixUReturnType
SparseLUMatrixUReturnType	include/Eigen/src/SparseLU/SparseLU.h	/^struct SparseLUMatrixUReturnType : internal::no_assignment_operator$/;"	s	namespace:Eigen
SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    SparseMatrix(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrix
SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix()$/;"	f	class:Eigen::SparseMatrix
SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix(Index rows, Index cols)$/;"	f	class:Eigen::SparseMatrix
SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix(const SparseMatrix& other)$/;"	f	class:Eigen::SparseMatrix
SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrix
SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix(const SparseSelfAdjointView<OtherDerived, UpLo>& other)$/;"	f	class:Eigen::SparseMatrix
SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^class SparseMatrix$/;"	c	namespace:Eigen
SparseMatrixBase	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    SparseMatrixBase() : m_isRValue(false) { \/* TODO check flags *\/ }$/;"	f	class:Eigen::SparseMatrixBase
SparseMatrixBase	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^template<typename Derived> class SparseMatrixBase : public EigenBase<Derived>$/;"	c	namespace:Eigen
SparseMatrixType	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef SparseMatrix<Scalar,RowMajor,Index> SparseMatrixType;$/;"	t	class:Eigen::PardisoImpl
SparseMatrixType	include/Eigen/src/SparseCore/SparseBlock.h	/^    typedef SparseMatrix<_Scalar, _Options, _Index> SparseMatrixType;$/;"	t	class:Eigen::BlockImpl
SparseQR	include/Eigen/src/SparseQR/SparseQR.h	/^    SparseQR () : m_isInitialized(false), m_analysisIsok(false), m_lastError(""), m_useDefaultThreshold(true),m_isQSorted(false),m_isEtreeOk(false)$/;"	f	class:Eigen::SparseQR
SparseQR	include/Eigen/src/SparseQR/SparseQR.h	/^    SparseQR(const MatrixType& mat) : m_isInitialized(false), m_analysisIsok(false), m_lastError(""), m_useDefaultThreshold(true),m_isQSorted(false),m_isEtreeOk(false)$/;"	f	class:Eigen::SparseQR
SparseQR	include/Eigen/src/SparseQR/SparseQR.h	/^class SparseQR$/;"	c	namespace:Eigen
SparseQRMatrixQReturnType	include/Eigen/src/SparseQR/SparseQR.h	/^  SparseQRMatrixQReturnType(const SparseQRType& qr) : m_qr(qr) {}$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
SparseQRMatrixQReturnType	include/Eigen/src/SparseQR/SparseQR.h	/^struct SparseQRMatrixQReturnType : public EigenBase<SparseQRMatrixQReturnType<SparseQRType> >$/;"	s	namespace:Eigen
SparseQRMatrixQTransposeReturnType	include/Eigen/src/SparseQR/SparseQR.h	/^  SparseQRMatrixQTransposeReturnType(const SparseQRType& qr) : m_qr(qr) {}$/;"	f	struct:Eigen::SparseQRMatrixQTransposeReturnType
SparseQRMatrixQTransposeReturnType	include/Eigen/src/SparseQR/SparseQR.h	/^struct SparseQRMatrixQTransposeReturnType$/;"	s	namespace:Eigen
SparseQR_QProduct	include/Eigen/src/SparseQR/SparseQR.h	/^  SparseQR_QProduct(const SparseQRType& qr, const Derived& other, bool transpose) : $/;"	f	struct:Eigen::SparseQR_QProduct
SparseQR_QProduct	include/Eigen/src/SparseQR/SparseQR.h	/^struct SparseQR_QProduct : ReturnByValue<SparseQR_QProduct<SparseQRType, Derived> >$/;"	s	namespace:Eigen
SparseSelfAdjointTimeDenseProduct	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    SparseSelfAdjointTimeDenseProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:Eigen::SparseSelfAdjointTimeDenseProduct
SparseSelfAdjointTimeDenseProduct	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^class SparseSelfAdjointTimeDenseProduct$/;"	c	namespace:Eigen
SparseSelfAdjointView	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    inline SparseSelfAdjointView(const MatrixType& matrix) : m_matrix(matrix)$/;"	f	class:Eigen::SparseSelfAdjointView
SparseSelfAdjointView	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^template<typename MatrixType, unsigned int UpLo> class SparseSelfAdjointView$/;"	c	namespace:Eigen
SparseSparseProduct	include/Eigen/src/SparseCore/SparseProduct.h	/^    EIGEN_STRONG_INLINE SparseSparseProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:Eigen::SparseSparseProduct
SparseSparseProduct	include/Eigen/src/SparseCore/SparseProduct.h	/^    EIGEN_STRONG_INLINE SparseSparseProduct(const Lhs& lhs, const Rhs& rhs, const RealScalar& tolerance)$/;"	f	class:Eigen::SparseSparseProduct
SparseSparseProduct	include/Eigen/src/SparseCore/SparseProduct.h	/^class SparseSparseProduct : internal::no_assignment_operator,$/;"	c	namespace:Eigen
SparseSparseProductReturnType	include/Eigen/src/SparseCore/SparseProduct.h	/^struct SparseSparseProductReturnType$/;"	s	namespace:Eigen
SparseSymmetricPermutationProduct	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    SparseSymmetricPermutationProduct(const MatrixType& mat, const Perm& perm)$/;"	f	class:Eigen::SparseSymmetricPermutationProduct
SparseSymmetricPermutationProduct	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^class SparseSymmetricPermutationProduct$/;"	c	namespace:Eigen
SparseTimeDenseProduct	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    SparseTimeDenseProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:Eigen::SparseTimeDenseProduct
SparseTimeDenseProduct	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^class SparseTimeDenseProduct$/;"	c	namespace:Eigen
SparseTriangularView	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline SparseTriangularView(const MatrixType& matrix) : m_matrix(matrix) {}$/;"	f	class:Eigen::SparseTriangularView
SparseTriangularView	include/Eigen/src/SparseCore/SparseTriangularView.h	/^template<typename MatrixType, int Mode> class SparseTriangularView$/;"	c	namespace:Eigen
SparseVector	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector() : m_size(0) { check_template_parameters(); resize(0); }$/;"	f	class:Eigen::SparseVector
SparseVector	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector(Index rows, Index cols) : m_size(0) { check_template_parameters(); resize(rows,cols); }$/;"	f	class:Eigen::SparseVector
SparseVector	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector(Index size) : m_size(0) { check_template_parameters(); resize(size); }$/;"	f	class:Eigen::SparseVector
SparseVector	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::SparseVector
SparseVector	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector(const SparseVector& other)$/;"	f	class:Eigen::SparseVector
SparseVector	include/Eigen/src/SparseCore/SparseVector.h	/^class SparseVector$/;"	c	namespace:Eigen
SparseView	include/Eigen/src/SparseCore/SparseView.h	/^  SparseView(const MatrixType& mat, const Scalar& m_reference = Scalar(0),$/;"	f	class:Eigen::SparseView
SparseView	include/Eigen/src/SparseCore/SparseView.h	/^class SparseView : public SparseMatrixBase<SparseView<MatrixType> >$/;"	c	namespace:Eigen
Specialized	include/Eigen/src/Core/util/Constants.h	/^  Specialized,$/;"	e	enum:Eigen::__anon267
SquareMatrixType	include/Eigen/src/Core/MatrixBase.h	/^                          EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime)> SquareMatrixType;$/;"	t	class:Eigen::MatrixBase
SquareMatrixType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^                          EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime)> SquareMatrixType;$/;"	t	class:Eigen::SparseMatrixBase
SrcHasDirectAccess	include/Eigen/src/Core/Assign_MKL.h	/^      SrcHasDirectAccess = Src::Flags & DirectAccessBit,$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
SrcIsAligned	include/Eigen/src/Core/Assign.h	/^    SrcIsAligned = OtherDerived::Flags & AlignedBit,$/;"	e	enum:Eigen::internal::assign_traits::__anon33
SrcStorageOrder	include/Eigen/src/SparseCore/SparsePermutation.h	/^      SrcStorageOrder = MatrixTypeNestedCleaned::Flags&RowMajorBit ? RowMajor : ColMajor,$/;"	e	enum:Eigen::internal::permut_sparsematrix_product_retval::__anon441
SrcStorageOrder	include/Eigen/src/SparseCore/SparsePermutation.h	/^    SrcStorageOrder = MatrixTypeNestedCleaned::Flags&RowMajorBit ? RowMajor : ColMajor,$/;"	e	enum:Eigen::internal::traits::__anon440
StemFunction	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::stem_function<Scalar>::type StemFunction;$/;"	t	class:Eigen::MatrixBase
Storage	include/Eigen/src/SparseCore/SparseMatrix.h	/^    typedef internal::CompressedStorage<Scalar,Index> Storage;$/;"	t	class:Eigen::SparseMatrix
Storage	include/Eigen/src/SparseCore/SparseVector.h	/^    typedef internal::CompressedStorage<Scalar,Index> Storage;$/;"	t	class:Eigen::SparseVector
StorageBaseType	include/Eigen/src/Core/ArrayBase.h	/^    typedef ArrayBase StorageBaseType;$/;"	t	class:Eigen::ArrayBase
StorageBaseType	include/Eigen/src/Core/MatrixBase.h	/^    typedef MatrixBase StorageBaseType;$/;"	t	class:Eigen::MatrixBase
StorageBaseType	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef SparseMatrixBase StorageBaseType;$/;"	t	class:Eigen::SparseMatrixBase
StorageKind	include/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::ArrayBase
StorageKind	include/Eigen/src/Core/BandMatrix.h	/^  typedef Dense StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/BandMatrix.h	/^  typedef typename _CoefficientsType::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/Block.h	/^  typedef typename traits<XprType>::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/CwiseBinaryOp.h	/^                                           typename traits<Rhs>::StorageKind>::ret StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::DenseBase
StorageKind	include/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::DenseCoeffsBase
StorageKind	include/Eigen/src/Core/Diagonal.h	/^  typedef typename MatrixType::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::DiagonalBase
StorageKind	include/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<DiagonalMatrix>::StorageKind StorageKind;$/;"	t	class:Eigen::DiagonalMatrix
StorageKind	include/Eigen/src/Core/DiagonalMatrix.h	/^  typedef Dense StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/DiagonalMatrix.h	/^  typedef typename DiagonalVectorType::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/EigenBase.h	/^  typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	struct:Eigen::EigenBase
StorageKind	include/Eigen/src/Core/MapBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::MapBase
StorageKind	include/Eigen/src/Core/Matrix.h	/^  typedef Dense StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::MatrixBase
StorageKind	include/Eigen/src/Core/PermutationMatrix.h	/^  typedef PermutationStorage StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::PlainObjectBase
StorageKind	include/Eigen/src/Core/ProductBase.h	/^                                           typename traits<Rhs>::StorageKind>::ret StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/ProductBase.h	/^  typedef typename traits<NestedProduct>::StorageKind StorageKind;$/;"	t	struct:internal::traits
StorageKind	include/Eigen/src/Core/Replicate.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/Reverse.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/Select.h	/^  typedef Dense StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/Transpose.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::TriangularBase
StorageKind	include/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::StorageKind StorageKind;$/;"	t	class:Eigen::TriangularView
StorageKind	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^                                           typename traits<_RhsNested>::StorageKind>::ret StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Eigen2Support/Minor.h	/^  typedef typename MatrixType::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/LU/FullPivLU.h	/^    typedef typename internal::traits<MatrixType>::StorageKind StorageKind;$/;"	t	class:Eigen::FullPivLU
StorageKind	include/Eigen/src/LU/PartialPivLU.h	/^    typedef typename internal::traits<MatrixType>::StorageKind StorageKind;$/;"	t	class:Eigen::PartialPivLU
StorageKind	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef Dense StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef Sparse StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^  typedef Sparse StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef Dense StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef Sparse StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:Eigen::SparseMatrixBase
StorageKind	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef Sparse StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^  typedef Dense StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseVector.h	/^  typedef Sparse StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseCore/SparseView.h	/^  typedef Sparse StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageKind	include/Eigen/src/SparseQR/SparseQR.h	/^    typedef typename ReturnType::StorageKind StorageKind;$/;"	t	struct:Eigen::internal::traits
StorageOrderMatch	include/Eigen/src/Core/Ref.h	/^      StorageOrderMatch = PlainObjectType::IsVectorAtCompileTime || Derived::IsVectorAtCompileTime || ((PlainObjectType::Flags&RowMajorBit)==(Derived::Flags&RowMajorBit)),$/;"	e	enum:Eigen::internal::traits::match::__anon237
StorageOrdersAgree	include/Eigen/src/Core/Assign.h	/^    StorageOrdersAgree = (int(Derived::IsRowMajor) == int(OtherDerived::IsRowMajor)),$/;"	e	enum:Eigen::internal::assign_traits::__anon35
StorageOrdersAgree	include/Eigen/src/Core/Assign_MKL.h	/^      StorageOrdersAgree = (int(Dst::IsRowMajor) == int(Src::IsRowMajor)),$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
StorageOrdersAgree	include/Eigen/src/Core/CwiseBinaryOp.h	/^    StorageOrdersAgree = (int(Lhs::Flags)&RowMajorBit)==(int(Rhs::Flags)&RowMajorBit),$/;"	e	enum:Eigen::internal::traits::__anon54
StorageOrdersMatch	include/Eigen/src/LU/arch/Inverse_SSE.h	/^    StorageOrdersMatch  = (MatrixType::Flags&RowMajorBit) == (ResultType::Flags&RowMajorBit)$/;"	e	enum:Eigen::internal::compute_inverse_size4::__anon395
StorageOrdersMatch	include/Eigen/src/LU/arch/Inverse_SSE.h	/^    StorageOrdersMatch  = (MatrixType::Flags&RowMajorBit) == (ResultType::Flags&RowMajorBit)$/;"	e	enum:Eigen::internal::compute_inverse_size4::__anon396
StreamPrecision	include/Eigen/src/Core/IO.h	/^enum { StreamPrecision = -1,$/;"	e	enum:Eigen::__anon175
StrictlyLower	include/Eigen/src/Core/util/Constants.h	/^  StrictlyLower=ZeroDiag|Lower, $/;"	e	enum:Eigen::__anon263
StrictlyUpper	include/Eigen/src/Core/util/Constants.h	/^  StrictlyUpper=ZeroDiag|Upper,$/;"	e	enum:Eigen::__anon263
Stride	include/Eigen/src/Core/Stride.h	/^    Stride()$/;"	f	class:Eigen::Stride
Stride	include/Eigen/src/Core/Stride.h	/^    Stride(Index outerStride, Index innerStride)$/;"	f	class:Eigen::Stride
Stride	include/Eigen/src/Core/Stride.h	/^    Stride(const Stride& other)$/;"	f	class:Eigen::Stride
Stride	include/Eigen/src/Core/Stride.h	/^class Stride$/;"	c	namespace:Eigen
StrideBase	include/Eigen/src/Core/Ref.h	/^  typedef Stride<StrideType::OuterStrideAtCompileTime,StrideType::InnerStrideAtCompileTime> StrideBase;$/;"	t	class:Eigen::RefBase
StrideType	include/Eigen/src/Core/Ref.h	/^  typedef _StrideType StrideType;$/;"	t	struct:Eigen::internal::traits
StrideType	include/Eigen/src/Core/Ref.h	/^  typedef typename internal::traits<Derived>::StrideType StrideType;$/;"	t	class:Eigen::RefBase
StridedAlignedMapType	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedAlignedMapType { typedef Eigen::Map<Derived, Aligned, StrideType> type; };$/;"	s	class:Eigen::PlainObjectBase
StridedConstAlignedMapType	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstAlignedMapType { typedef Eigen::Map<const Derived, Aligned, StrideType> type; };$/;"	s	class:Eigen::PlainObjectBase
StridedConstMapType	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstMapType { typedef Eigen::Map<const Derived, Unaligned, StrideType> type; };$/;"	s	class:Eigen::PlainObjectBase
StridedMapType	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedMapType { typedef Eigen::Map<Derived, Unaligned, StrideType> type; };$/;"	s	class:Eigen::PlainObjectBase
SubDiagonalReturnType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^            >::type SubDiagonalReturnType;$/;"	t	class:Eigen::Tridiagonalization
SubDiagonalType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef Matrix<RealScalar, SizeMinusOne, 1, Options & ~RowMajor, MaxSizeMinusOne, 1> SubDiagonalType;$/;"	t	class:Eigen::Tridiagonalization
SubVector	include/Eigen/src/Core/VectorwiseOp.h	/^                               typename ExpressionType::RowXpr>::type SubVector;$/;"	t	class:Eigen::VectorwiseOp
Subs	include/Eigen/src/Core/BandMatrix.h	/^      Subs   = internal::traits<Derived>::Subs,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
Subs	include/Eigen/src/Core/BandMatrix.h	/^    Subs = _Subs,$/;"	e	enum:Eigen::internal::traits::__anon47
Subs	include/Eigen/src/Core/BandMatrix.h	/^    Subs = _Subs,$/;"	e	enum:Eigen::internal::traits::__anon48
Success	include/Eigen/src/Core/util/Constants.h	/^  Success = 0,        $/;"	e	enum:Eigen::ComputationInfo
SuperDiagVectorType	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, ColsAtCompileTimeMinusOne, 1> SuperDiagVectorType;$/;"	t	class:Eigen::internal::UpperBidiagonalization
SuperILU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperILU() : Base() { init(); }$/;"	f	class:Eigen::SuperILU
SuperILU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperILU(SuperILU& ) { }$/;"	f	class:Eigen::SuperILU
SuperILU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperILU(const MatrixType& matrix) : Base()$/;"	f	class:Eigen::SuperILU
SuperILU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^class SuperILU : public SuperLUBase<_MatrixType,SuperILU<_MatrixType> >$/;"	c	namespace:Eigen
SuperLU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperLU() : Base() { init(); }$/;"	f	class:Eigen::SuperLU
SuperLU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperLU(SuperLU& ) { }$/;"	f	class:Eigen::SuperLU
SuperLU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperLU(const MatrixType& matrix) : Base()$/;"	f	class:Eigen::SuperLU
SuperLU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^class SuperLU : public SuperLUBase<_MatrixType,SuperLU<_MatrixType> >$/;"	c	namespace:Eigen
SuperLUBase	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperLUBase() {}$/;"	f	class:Eigen::SuperLUBase
SuperLUBase	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    SuperLUBase(SuperLUBase& ) { }$/;"	f	class:Eigen::SuperLUBase
SuperLUBase	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^class SuperLUBase : internal::noncopyable$/;"	c	namespace:Eigen
Supers	include/Eigen/src/Core/BandMatrix.h	/^      Supers = internal::traits<Derived>::Supers,$/;"	e	enum:Eigen::internal::BandMatrixBase::__anon44
Supers	include/Eigen/src/Core/BandMatrix.h	/^    Supers = _Supers,$/;"	e	enum:Eigen::internal::traits::__anon47
Supers	include/Eigen/src/Core/BandMatrix.h	/^    Supers = _Supers,$/;"	e	enum:Eigen::internal::traits::__anon48
SupportedAccessPatterns	include/Eigen/src/SparseCore/SparseMatrix.h	/^    SupportedAccessPatterns = InnerRandomAccessPattern$/;"	e	enum:Eigen::internal::traits::__anon436
SupportedAccessPatterns	include/Eigen/src/SparseCore/SparseVector.h	/^    SupportedAccessPatterns = InnerRandomAccessPattern$/;"	e	enum:Eigen::internal::traits::__anon447
SwapWrapper	include/Eigen/src/Core/Swap.h	/^    inline SwapWrapper(ExpressionType& xpr) : m_expression(xpr) {}$/;"	f	class:Eigen::SwapWrapper
SwapWrapper	include/Eigen/src/Core/Swap.h	/^template<typename ExpressionType> class SwapWrapper$/;"	c	namespace:Eigen
Symmetric	include/Eigen/src/Core/util/Constants.h	/^  Symmetric=0x20$/;"	e	enum:Eigen::__anon263
THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_INSTEAD	include/Eigen/src/Core/util/StaticAssert.h	/^        THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_INSTEAD,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THE_INDEX_TYPE_MUST_BE_A_SIGNED_TYPE	include/Eigen/src/Core/util/StaticAssert.h	/^        THE_INDEX_TYPE_MUST_BE_A_SIGNED_TYPE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THE_MATRIX_OR_EXPRESSION_THAT_YOU_PASSED_DOES_NOT_HAVE_THE_EXPECTED_TYPE	include/Eigen/src/Core/util/StaticAssert.h	/^        THE_MATRIX_OR_EXPRESSION_THAT_YOU_PASSED_DOES_NOT_HAVE_THE_EXPECTED_TYPE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THE_STORAGE_ORDER_OF_BOTH_SIDES_MUST_MATCH	include/Eigen/src/Core/util/StaticAssert.h	/^        THE_STORAGE_ORDER_OF_BOTH_SIDES_MUST_MATCH,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_1x1_EXPRESSIONS	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_1x1_EXPRESSIONS,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_ARRAYS_NOT_MATRICES	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_ARRAYS_NOT_MATRICES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_DIAGONAL_MATRIX	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_DIAGONAL_MATRIX,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_OF_BOOL	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_OF_BOOL,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_WITH_DIRECT_MEMORY_ACCESS_SUCH_AS_MAP_OR_PLAIN_MATRICES	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_WITH_DIRECT_MEMORY_ACCESS_SUCH_AS_MAP_OR_PLAIN_MATRICES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_FIXED_SIZE	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_FIXED_SIZE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_MATRICES_OF_A_SPECIFIC_SIZE	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_MATRICES_OF_A_SPECIFIC_SIZE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_OBJECTS_OF_A_SPECIFIC_SIZE	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_OBJECTS_OF_A_SPECIFIC_SIZE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_ROW_MAJOR_MATRICES	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_ROW_MAJOR_MATRICES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_SPECIFIC_TRANSFORMATIONS	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_SPECIFIC_TRANSFORMATIONS,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
THIS_METHOD_IS_ONLY_FOR_VECTORS_OF_A_SPECIFIC_SIZE	include/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_VECTORS_OF_A_SPECIFIC_SIZE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
Target	include/Eigen/src/Core/util/Constants.h	/^    Target = SSE$/;"	e	enum:Eigen::Architecture::Type
ThenMatrixNested	include/Eigen/src/Core/Select.h	/^  typedef typename ThenMatrixType::Nested ThenMatrixNested;$/;"	t	struct:Eigen::internal::traits
ThisConstantIsPrivateInPlainObjectBase	include/Eigen/src/Core/DenseBase.h	/^    enum { ThisConstantIsPrivateInPlainObjectBase };$/;"	e	enum:Eigen::DenseBase::__anon59
ThisConstantIsPrivateInPlainObjectBase	include/Eigen/src/Core/PlainObjectBase.h	/^    enum { ThisConstantIsPrivateInPlainObjectBase };$/;"	e	enum:Eigen::PlainObjectBase::__anon194
Through	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:Eigen::Hyperplane
Through	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1, const VectorType& p2)$/;"	f	class:Eigen::Hyperplane
Through	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  static inline ParametrizedLine Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:Eigen::ParametrizedLine
Through	include/Eigen/src/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:Eigen::Hyperplane
Through	include/Eigen/src/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1, const VectorType& p2)$/;"	f	class:Eigen::Hyperplane
Through	include/Eigen/src/Geometry/ParametrizedLine.h	/^  static inline ParametrizedLine Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:Eigen::ParametrizedLine
TmpFlags	include/Eigen/src/Geometry/Homogeneous.h	/^    TmpFlags = _MatrixTypeNested::Flags & HereditaryBits,$/;"	e	enum:Eigen::internal::traits::__anon370
TmpMatrixType	include/Eigen/src/Cholesky/LDLT.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, 1, Options, MaxRowsAtCompileTime, 1> TmpMatrixType;$/;"	t	class:Eigen::LDLT
TopLeft	include/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:Eigen::CornerType
TopLeft	include/Eigen/src/Geometry/AlignedBox.h	/^    TopLeft=2, TopRight=3,$/;"	e	enum:Eigen::AlignedBox::CornerType
TopLeftCeil	include/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftCeil=6, TopRightCeil=7$/;"	e	enum:Eigen::AlignedBox::CornerType
TopLeftFloor	include/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftFloor=2, TopRightFloor=3,$/;"	e	enum:Eigen::AlignedBox::CornerType
TopRight	include/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:Eigen::CornerType
TopRight	include/Eigen/src/Geometry/AlignedBox.h	/^    TopLeft=2, TopRight=3,$/;"	e	enum:Eigen::AlignedBox::CornerType
TopRightCeil	include/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftCeil=6, TopRightCeil=7$/;"	e	enum:Eigen::AlignedBox::CornerType
TopRightFloor	include/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftFloor=2, TopRightFloor=3,$/;"	e	enum:Eigen::AlignedBox::CornerType
Traits	include/Eigen/src/Cholesky/LDLT.h	/^    typedef internal::LDLT_Traits<MatrixType,UpLo> Traits;$/;"	t	class:Eigen::LDLT
Traits	include/Eigen/src/Cholesky/LLT.h	/^    typedef internal::LLT_Traits<MatrixType,UpLo> Traits;$/;"	t	class:Eigen::LLT
Traits	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<Derived> Traits;$/;"	t	class:Eigen::PermutationBase
Traits	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<Map> Traits;$/;"	t	class:Eigen::Map
Traits	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<PermutationMatrix> Traits;$/;"	t	class:Eigen::PermutationMatrix
Traits	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<PermutationType> Traits;$/;"	t	class:Eigen::Transpose
Traits	include/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<PermutationWrapper> Traits;$/;"	t	class:Eigen::PermutationWrapper
Traits	include/Eigen/src/Core/Ref.h	/^    typedef internal::traits<Ref> Traits;$/;"	t	class:Eigen::Ref
Traits	include/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<Derived> Traits;$/;"	t	class:Eigen::TranspositionsBase
Traits	include/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<Map> Traits;$/;"	t	class:Eigen::Map
Traits	include/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<Transpositions> Traits;$/;"	t	class:Eigen::Transpositions
Traits	include/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<TranspositionsWrapper> Traits;$/;"	t	class:Eigen::TranspositionsWrapper
Traits	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef gebp_traits<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> Traits;$/;"	t	struct:Eigen::internal::gebp_kernel
Traits	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef gebp_traits<LhsScalar,RhsScalar> Traits;$/;"	t	class:Eigen::internal::gemm_blocking_space
Traits	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  typedef gebp_traits<LhsScalar,RhsScalar,ConjLhs,ConjRhs> Traits;$/;"	t	struct:Eigen::internal::tribb_kernel
Traits	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  typedef gebp_traits<Scalar,Scalar> Traits;$/;"	t	struct:Eigen::internal::product_triangular_matrix_matrix
Traits	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef internal::pardiso_traits<Derived> Traits;$/;"	t	class:Eigen::PardisoImpl
Traits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef internal::traits<SimplicialCholesky> Traits;$/;"	t	class:Eigen::SimplicialCholesky
Traits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef internal::traits<SimplicialLDLT> Traits;$/;"	t	class:Eigen::SimplicialLDLT
Traits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef internal::traits<SimplicialLLT> Traits;$/;"	t	class:Eigen::SimplicialLLT
Traits	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef internal::traits<SparseDenseOuterProduct> Traits;$/;"	t	class:Eigen::SparseDenseOuterProduct
TraitsBase	include/Eigen/src/Core/Map.h	/^  typedef traits<PlainObjectType> TraitsBase;$/;"	t	struct:Eigen::internal::traits
TraitsBase	include/Eigen/src/Geometry/Quaternion.h	/^    typedef traits<Quaternion<_Scalar, (int(_Options)&Aligned)==Aligned ? AutoAlign : DontAlign> > TraitsBase;$/;"	t	struct:Eigen::internal::traits
Transform	include/Eigen/src/Eigen2Support/Geometry/All.h	37;"	d
Transform	include/Eigen/src/Eigen2Support/Geometry/All.h	92;"	d
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform() { }$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform(const Transform& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const RotationBase<Derived, Dim>& r) { *this = r; }$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const ScalingType& s) { *this = s; }$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const Transform<OtherScalarType,Dim>& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const TranslationType& t) { *this = t; }$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::Transform(const QMatrix& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::Transform(const QTransform& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^class Transform$/;"	c	namespace:Eigen
Transform	include/Eigen/src/Geometry/Transform.h	/^  Transform(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline Transform()$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline Transform(const Transform& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline Transform(const Transform<Scalar,Dim,Mode,OtherOptions>& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline Transform(const Transform<Scalar,Dim,OtherMode,OtherOptions>& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const EigenBase<OtherDerived>& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const RotationBase<Derived, Dim>& r)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const Transform<OtherScalarType,Dim,Mode,Options>& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const TranslationType& t)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const UniformScaling<Scalar>& s)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::Transform(const QMatrix& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::Transform(const QTransform& other)$/;"	f	class:Eigen::Transform
Transform	include/Eigen/src/Geometry/Transform.h	/^class Transform$/;"	c	namespace:Eigen
Transform2d	include/Eigen/src/Eigen2Support/Geometry/All.h	39;"	d
Transform2d	include/Eigen/src/Eigen2Support/Geometry/All.h	94;"	d
Transform2d	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<double,2> Transform2d;$/;"	t	namespace:Eigen
Transform2f	include/Eigen/src/Eigen2Support/Geometry/All.h	38;"	d
Transform2f	include/Eigen/src/Eigen2Support/Geometry/All.h	93;"	d
Transform2f	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<float,2> Transform2f;$/;"	t	namespace:Eigen
Transform3d	include/Eigen/src/Eigen2Support/Geometry/All.h	41;"	d
Transform3d	include/Eigen/src/Eigen2Support/Geometry/All.h	96;"	d
Transform3d	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<double,3> Transform3d;$/;"	t	namespace:Eigen
Transform3f	include/Eigen/src/Eigen2Support/Geometry/All.h	40;"	d
Transform3f	include/Eigen/src/Eigen2Support/Geometry/All.h	95;"	d
Transform3f	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<float,3> Transform3f;$/;"	t	namespace:Eigen
TransformTimeDiagonalMode	include/Eigen/src/Geometry/Transform.h	/^  enum { TransformTimeDiagonalMode = ((Mode==int(Isometry))?Affine:int(Mode)) };$/;"	e	enum:Eigen::Transform::__anon384
TransformTimeDiagonalReturnType	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,TransformTimeDiagonalMode> TransformTimeDiagonalReturnType;$/;"	t	class:Eigen::Transform
TransformTraits	include/Eigen/src/Core/util/Constants.h	/^enum TransformTraits {$/;"	g	namespace:Eigen
TransformType	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Transform<Scalar,Dim> TransformType;$/;"	t	class:Eigen::Scaling
TransformType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim> TransformType;$/;"	t	struct:Eigen::ei_transform_product_impl
TransformType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim> TransformType;$/;"	t	struct:Eigen::ei_transform_product_impl
TransformType	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Transform<Scalar,Dim> TransformType;$/;"	t	class:Eigen::Translation
TransformType	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef Transform<Scalar, Dim, Mode, Options> TransformType;$/;"	t	struct:Eigen::internal::take_matrix_for_product
TransformType	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef Transform<Scalar, Dim, Projective, Options> TransformType;$/;"	t	struct:Eigen::internal::take_matrix_for_product
TransformType	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim,AffineCompact,Options> TransformType;$/;"	t	struct:Eigen::internal::transform_left_product_impl
TransformType	include/Eigen/src/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim,Mode,Options> TransformType;$/;"	t	struct:Eigen::internal::transform_left_product_impl
Translation	include/Eigen/src/Eigen2Support/Geometry/All.h	43;"	d
Translation	include/Eigen/src/Eigen2Support/Geometry/All.h	98;"	d
Translation	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  Translation() {}$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  explicit inline Translation(const VectorType& vector) : m_coeffs(vector) {}$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy)$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy, const Scalar& sz)$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline explicit Translation(const Translation<OtherScalarType,Dim>& other)$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^class Translation$/;"	c	namespace:Eigen
Translation	include/Eigen/src/Geometry/Translation.h	/^  Translation() {}$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Geometry/Translation.h	/^  explicit inline Translation(const VectorType& vector) : m_coeffs(vector) {}$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy)$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy, const Scalar& sz)$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Geometry/Translation.h	/^  inline explicit Translation(const Translation<OtherScalarType,Dim>& other)$/;"	f	class:Eigen::Translation
Translation	include/Eigen/src/Geometry/Translation.h	/^class Translation$/;"	c	namespace:Eigen
Translation2d	include/Eigen/src/Eigen2Support/Geometry/All.h	100;"	d
Translation2d	include/Eigen/src/Eigen2Support/Geometry/All.h	45;"	d
Translation2d	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<double,2> Translation2d;$/;"	t	namespace:Eigen
Translation2d	include/Eigen/src/Geometry/Translation.h	/^typedef Translation<double,2> Translation2d;$/;"	t	namespace:Eigen
Translation2f	include/Eigen/src/Eigen2Support/Geometry/All.h	44;"	d
Translation2f	include/Eigen/src/Eigen2Support/Geometry/All.h	99;"	d
Translation2f	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<float, 2> Translation2f;$/;"	t	namespace:Eigen
Translation2f	include/Eigen/src/Geometry/Translation.h	/^typedef Translation<float, 2> Translation2f;$/;"	t	namespace:Eigen
Translation3d	include/Eigen/src/Eigen2Support/Geometry/All.h	102;"	d
Translation3d	include/Eigen/src/Eigen2Support/Geometry/All.h	47;"	d
Translation3d	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<double,3> Translation3d;$/;"	t	namespace:Eigen
Translation3d	include/Eigen/src/Geometry/Translation.h	/^typedef Translation<double,3> Translation3d;$/;"	t	namespace:Eigen
Translation3f	include/Eigen/src/Eigen2Support/Geometry/All.h	101;"	d
Translation3f	include/Eigen/src/Eigen2Support/Geometry/All.h	46;"	d
Translation3f	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<float, 3> Translation3f;$/;"	t	namespace:Eigen
Translation3f	include/Eigen/src/Geometry/Translation.h	/^typedef Translation<float, 3> Translation3f;$/;"	t	namespace:Eigen
TranslationPart	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,1> TranslationPart;$/;"	t	class:Eigen::Transform
TranslationPart	include/Eigen/src/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,1,int(Mode)==(AffineCompact)> TranslationPart;$/;"	t	class:Eigen::Transform
TranslationType	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Translation<Scalar,Dim> TranslationType;$/;"	t	class:Eigen::Scaling
TranslationType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Translation<Scalar,Dim> TranslationType;$/;"	t	class:Eigen::Transform
TranslationType	include/Eigen/src/Geometry/Transform.h	/^  typedef Translation<Scalar,Dim> TranslationType;$/;"	t	class:Eigen::Transform
Transpose	include/Eigen/src/Core/PermutationMatrix.h	/^    Transpose(const PermutationType& p) : m_permutation(p) {}$/;"	f	class:Eigen::Transpose
Transpose	include/Eigen/src/Core/PermutationMatrix.h	/^class Transpose<PermutationBase<Derived> >$/;"	c	namespace:Eigen
Transpose	include/Eigen/src/Core/Transpose.h	/^    inline Transpose(MatrixType& a_matrix) : m_matrix(a_matrix) {}$/;"	f	class:Eigen::Transpose
Transpose	include/Eigen/src/Core/Transpose.h	/^template<typename MatrixType> class Transpose$/;"	c	namespace:Eigen
Transpose	include/Eigen/src/Core/Transpositions.h	/^    Transpose(const TranspositionType& t) : m_transpositions(t) {}$/;"	f	class:Eigen::Transpose
Transpose	include/Eigen/src/Core/Transpositions.h	/^class Transpose<TranspositionsBase<TranspositionsDerived> >$/;"	c	namespace:Eigen
Transpose	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      Transpose = StorageOrder==RowMajor$/;"	e	enum:Eigen::internal::gemm_blocking_space::__anon210
Transpose	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      Transpose = StorageOrder==RowMajor,$/;"	e	enum:Eigen::internal::gemm_blocking_space::__anon208
TransposeImpl	include/Eigen/src/Core/Transpose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Dense>$/;"	c	namespace:Eigen
TransposeImpl	include/Eigen/src/SparseCore/SparseTranspose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Sparse>$/;"	c	namespace:Eigen
TransposeImpl_base	include/Eigen/src/Core/Transpose.h	/^struct TransposeImpl_base$/;"	s	namespace:Eigen::internal
TransposeImpl_base	include/Eigen/src/Core/Transpose.h	/^struct TransposeImpl_base<MatrixType, false>$/;"	s	namespace:Eigen::internal
TransposeLhs	include/Eigen/src/SparseCore/SparseProduct.h	/^    TransposeLhs = LhsRowMajor && (!RhsRowMajor)$/;"	e	enum:Eigen::SparseSparseProductReturnType::__anon442
TransposeMode	include/Eigen/src/Core/TriangularMatrix.h	/^      TransposeMode = (Mode & Upper ? Lower : 0)$/;"	e	enum:Eigen::TriangularView::__anon258
TransposeRhs	include/Eigen/src/SparseCore/SparseProduct.h	/^    TransposeRhs = (!LhsRowMajor) && RhsRowMajor,$/;"	e	enum:Eigen::SparseSparseProductReturnType::__anon442
TransposeTypeWithSameStorageOrder	include/Eigen/src/SVD/JacobiSVD.h	/^          TransposeTypeWithSameStorageOrder;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
TransposedSparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    typedef SparseMatrix<Scalar,(Flags&~RowMajorBit)|(IsRowMajor?RowMajorBit:0)> TransposedSparseMatrix;$/;"	t	class:Eigen::SparseMatrix
TranspositionType	include/Eigen/src/Cholesky/LDLT.h	/^    typedef Transpositions<RowsAtCompileTime, MaxRowsAtCompileTime> TranspositionType;$/;"	t	class:Eigen::LDLT
TranspositionType	include/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsDerived TranspositionType;$/;"	t	class:Eigen::Transpose
TranspositionType	include/Eigen/src/LU/PartialPivLU.h	/^    typedef Transpositions<RowsAtCompileTime, MaxRowsAtCompileTime> TranspositionType;$/;"	t	class:Eigen::PartialPivLU
Transpositions	include/Eigen/src/Core/Transpositions.h	/^    explicit inline Transpositions(const MatrixBase<Other>& a_indices) : m_indices(a_indices)$/;"	f	class:Eigen::Transpositions
Transpositions	include/Eigen/src/Core/Transpositions.h	/^    inline Transpositions() {}$/;"	f	class:Eigen::Transpositions
Transpositions	include/Eigen/src/Core/Transpositions.h	/^    inline Transpositions(Index size) : m_indices(size)$/;"	f	class:Eigen::Transpositions
Transpositions	include/Eigen/src/Core/Transpositions.h	/^    inline Transpositions(const Transpositions& other) : m_indices(other.indices()) {}$/;"	f	class:Eigen::Transpositions
Transpositions	include/Eigen/src/Core/Transpositions.h	/^    inline Transpositions(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Eigen::Transpositions
Transpositions	include/Eigen/src/Core/Transpositions.h	/^class Transpositions : public TranspositionsBase<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType> >$/;"	c	namespace:Eigen
TranspositionsBase	include/Eigen/src/Core/Transpositions.h	/^class TranspositionsBase$/;"	c	namespace:Eigen
TranspositionsWrapper	include/Eigen/src/Core/Transpositions.h	/^    inline TranspositionsWrapper(IndicesType& a_indices)$/;"	f	class:Eigen::TranspositionsWrapper
TranspositionsWrapper	include/Eigen/src/Core/Transpositions.h	/^class TranspositionsWrapper$/;"	c	namespace:Eigen
Traversal	include/Eigen/src/Core/Assign.h	/^    Traversal = int(MayInnerVectorize)  ? int(InnerVectorizedTraversal)$/;"	e	enum:Eigen::internal::assign_traits::__anon36
Traversal	include/Eigen/src/Core/Assign_MKL.h	/^      Traversal = MayLinearize ? LinearVectorizedTraversal$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon43
Traversal	include/Eigen/src/Core/Redux.h	/^    Traversal = int(MayLinearVectorize) ? int(LinearVectorizedTraversal)$/;"	e	enum:Eigen::internal::redux_traits::__anon228
TraversalSize	include/Eigen/src/Core/VectorwiseOp.h	/^    TraversalSize = Direction==Vertical ? MatrixType::RowsAtCompileTime :  MatrixType::ColsAtCompileTime$/;"	e	enum:Eigen::internal::traits::__anon330
TriangularBase	include/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularBase() { eigen_assert(!((Mode&UnitDiag) && (Mode&ZeroDiag))); }$/;"	f	class:Eigen::TriangularBase
TriangularBase	include/Eigen/src/Core/TriangularMatrix.h	/^template<typename Derived> class TriangularBase : public EigenBase<Derived>$/;"	c	namespace:Eigen
TriangularProduct	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  TriangularProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:Eigen::TriangularProduct
TriangularProduct	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct TriangularProduct<Mode,LhsIsTriangular,Lhs,false,Rhs,false>$/;"	s	namespace:Eigen
TriangularProduct	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^  TriangularProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:Eigen::TriangularProduct
TriangularProduct	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct TriangularProduct<Mode,false,Lhs,true,Rhs,false>$/;"	s	namespace:Eigen
TriangularProduct	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct TriangularProduct<Mode,true,Lhs,false,Rhs,true>$/;"	s	namespace:Eigen
TriangularView	include/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularView(const MatrixType& matrix) : m_matrix(matrix)$/;"	f	class:Eigen::TriangularView
TriangularView	include/Eigen/src/Core/TriangularMatrix.h	/^template<typename _MatrixType, unsigned int _Mode> class TriangularView$/;"	c	namespace:Eigen
TriangularViewReturnType	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct TriangularViewReturnType { typedef TriangularView<Derived, Mode> Type; };$/;"	s	class:Eigen::MatrixBase
TridiagonalMatrix	include/Eigen/src/Core/BandMatrix.h	/^    TridiagonalMatrix(Index size = Size) : Base(size,size,Options&SelfAdjoint?0:1,1) {}$/;"	f	class:Eigen::internal::TridiagonalMatrix
TridiagonalMatrix	include/Eigen/src/Core/BandMatrix.h	/^class TridiagonalMatrix : public BandMatrix<Scalar,Size,Size,Options&SelfAdjoint?0:1,1,Options|RowMajor>$/;"	c	namespace:Eigen::internal
Tridiagonalization	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Tridiagonalization(Index size = Size==Dynamic ? 2 : Size)$/;"	f	class:Eigen::Tridiagonalization
Tridiagonalization	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Tridiagonalization(const MatrixType& matrix)$/;"	f	class:Eigen::Tridiagonalization
Tridiagonalization	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^template<typename _MatrixType> class Tridiagonalization$/;"	c	namespace:Eigen
TridiagonalizationMatrixTReturnType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    TridiagonalizationMatrixTReturnType(const MatrixType& mat) : m_matrix(mat) { }$/;"	f	struct:Eigen::internal::TridiagonalizationMatrixTReturnType
TridiagonalizationMatrixTReturnType	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^template<typename MatrixType> struct TridiagonalizationMatrixTReturnType$/;"	s	namespace:Eigen::internal
TridiagonalizationType	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef Tridiagonalization<MatrixType> TridiagonalizationType;$/;"	t	class:Eigen::SelfAdjointEigenSolver
Triplet	include/Eigen/src/SparseCore/SparseUtil.h	/^  Triplet() : m_row(0), m_col(0), m_value(0) {}$/;"	f	class:Eigen::Triplet
Triplet	include/Eigen/src/SparseCore/SparseUtil.h	/^  Triplet(const Index& i, const Index& j, const Scalar& v = Scalar(0))$/;"	f	class:Eigen::Triplet
Triplet	include/Eigen/src/SparseCore/SparseUtil.h	/^class Triplet$/;"	c	namespace:Eigen
Type	include/Eigen/src/Core/BandMatrix.h	/^                 BuildType>::type Type;$/;"	t	struct:Eigen::internal::BandMatrixBase::DiagonalIntReturnType
Type	include/Eigen/src/Core/GeneralProduct.h	/^  typedef CoeffBasedProduct<LhsNested, RhsNested, EvalBeforeAssigningBit | EvalBeforeNestingBit> Type;$/;"	t	struct:Eigen::ProductReturnType
Type	include/Eigen/src/Core/GeneralProduct.h	/^  typedef CoeffBasedProduct<LhsNested, RhsNested, NestByRefBit> Type;$/;"	t	struct:Eigen::ProductReturnType
Type	include/Eigen/src/Core/GeneralProduct.h	/^  typedef GeneralProduct<Lhs\/*Nested*\/, Rhs\/*Nested*\/, ProductType> Type;$/;"	t	struct:Eigen::ProductReturnType
Type	include/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct ConstDiagonalIndexReturnType { typedef const Diagonal<const Derived,Index> Type; };$/;"	t	struct:Eigen::MatrixBase::ConstDiagonalIndexReturnType
Type	include/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct DiagonalIndexReturnType { typedef Diagonal<Derived,Index> Type; };$/;"	t	struct:Eigen::MatrixBase::DiagonalIndexReturnType
Type	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct ConstTriangularViewReturnType { typedef const TriangularView<const Derived, Mode> Type; };$/;"	t	struct:Eigen::MatrixBase::ConstTriangularViewReturnType
Type	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct TriangularViewReturnType { typedef TriangularView<Derived, Mode> Type; };$/;"	t	struct:Eigen::MatrixBase::TriangularViewReturnType
Type	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SelfAdjointView<const Derived, UpLo> Type; };$/;"	t	struct:Eigen::MatrixBase::ConstSelfAdjointViewReturnType
Type	include/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SelfAdjointView<Derived, UpLo> Type; };$/;"	t	struct:Eigen::MatrixBase::SelfAdjointViewReturnType
Type	include/Eigen/src/Core/VectorwiseOp.h	/^                              > Type;$/;"	t	struct:Eigen::VectorwiseOp::ReduxReturnType
Type	include/Eigen/src/Core/VectorwiseOp.h	/^                              > Type;$/;"	t	struct:Eigen::VectorwiseOp::ReturnType
Type	include/Eigen/src/Core/VectorwiseOp.h	/^                        Direction==Horizontal ? 1 : ExpressionType::ColsAtCompileTime> Type;$/;"	t	struct:Eigen::VectorwiseOp::ExtendedType
Type	include/Eigen/src/Core/VectorwiseOp.h	/^                        Direction==Vertical   ? 1 : ExpressionType::ColsAtCompileTime> Type;$/;"	t	struct:Eigen::VectorwiseOp::OppositeExtendedType
Type	include/Eigen/src/Core/util/Constants.h	/^  enum Type {$/;"	g	namespace:Eigen::Architecture
Type	include/Eigen/src/Householder/HouseholderSequence.h	/^                 0, MatrixType::MaxRowsAtCompileTime, MatrixType::MaxColsAtCompileTime> Type;$/;"	t	struct:Eigen::internal::matrix_type_times_scalar_type
Type	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    SparseDenseOuterProduct<Lhs,Rhs,false> >::type Type;$/;"	t	struct:Eigen::DenseSparseProductReturnType
Type	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    SparseDenseOuterProduct<Lhs,Rhs,false> >::type Type;$/;"	t	struct:Eigen::SparseDenseProductReturnType
Type	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef DenseTimeSparseProduct<Lhs,Rhs> Type;$/;"	t	struct:Eigen::DenseSparseProductReturnType
Type	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef SparseTimeDenseProduct<Lhs,Rhs> Type;$/;"	t	struct:Eigen::SparseDenseProductReturnType
Type	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef SparseSparseProduct<LhsNested, RhsNested> Type;$/;"	t	struct:Eigen::SparseSparseProductReturnType
Type	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNColsBlockXpr { typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	t	struct:ConstNColsBlockXpr
Type	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNRowsBlockXpr { typedef const Block<const Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	t	struct:ConstNRowsBlockXpr
Type	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NColsBlockXpr { typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	t	struct:NColsBlockXpr
Type	include/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NRowsBlockXpr { typedef Block<Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	t	struct:NRowsBlockXpr
Type	include/Eigen/src/plugins/BlockMethods.h	/^template<int Size> struct ConstFixedSegmentReturnType { typedef const VectorBlock<const Derived, Size> Type; };$/;"	t	struct:ConstFixedSegmentReturnType
Type	include/Eigen/src/plugins/BlockMethods.h	/^template<int Size> struct FixedSegmentReturnType { typedef VectorBlock<Derived, Size> Type; };$/;"	t	struct:FixedSegmentReturnType
UCOL	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^typedef enum {LUSUP, UCOL, LSUB, USUB, LLVL, ULVL} MemType; $/;"	e	enum:Eigen::internal::__anon456
ULVL	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^typedef enum {LUSUP, UCOL, LSUB, USUB, LLVL, ULVL} MemType; $/;"	e	enum:Eigen::internal::__anon456
UMatrixType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef TriangularView<LUMatrixType,  Upper>           UMatrixType;$/;"	t	class:Eigen::SuperLU
UNALIGNED_LOAD_AND_STORE_OPERATIONS_UNIMPLEMENTED_ON_ALTIVEC	include/Eigen/src/Core/util/StaticAssert.h	/^        UNALIGNED_LOAD_AND_STORE_OPERATIONS_UNIMPLEMENTED_ON_ALTIVEC,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
USUB	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^typedef enum {LUSUP, UCOL, LSUB, USUB, LLVL, ULVL} MemType; $/;"	e	enum:Eigen::internal::__anon456
UmfPackLU	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    UmfPackLU() { init(); }$/;"	f	class:Eigen::UmfPackLU
UmfPackLU	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    UmfPackLU(UmfPackLU& ) { }$/;"	f	class:Eigen::UmfPackLU
UmfPackLU	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    UmfPackLU(const MatrixType& matrix)$/;"	f	class:Eigen::UmfPackLU
UmfPackLU	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^class UmfPackLU : internal::noncopyable$/;"	c	namespace:Eigen
UmfpackMatrixType	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef SparseMatrix<Scalar,ColMajor,int> UmfpackMatrixType;$/;"	t	class:Eigen::UmfPackLU
Unaligned	include/Eigen/src/Core/util/Constants.h	/^  Unaligned=0, $/;"	e	enum:Eigen::__anon264
UniformScaling	include/Eigen/src/Geometry/Scaling.h	/^  UniformScaling() {}$/;"	f	class:Eigen::UniformScaling
UniformScaling	include/Eigen/src/Geometry/Scaling.h	/^  explicit inline UniformScaling(const Scalar& s) : m_factor(s) {}$/;"	f	class:Eigen::UniformScaling
UniformScaling	include/Eigen/src/Geometry/Scaling.h	/^  inline explicit UniformScaling(const UniformScaling<OtherScalarType>& other)$/;"	f	class:Eigen::UniformScaling
UniformScaling	include/Eigen/src/Geometry/Scaling.h	/^class UniformScaling$/;"	c	namespace:Eigen
Unit	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::Unit(Index i)$/;"	f	class:Eigen::MatrixBase
Unit	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::Unit(Index newSize, Index i)$/;"	f	class:Eigen::MatrixBase
UnitDiag	include/Eigen/src/Core/util/Constants.h	/^  UnitDiag=0x4, $/;"	e	enum:Eigen::__anon263
UnitDiagBit	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UnitDiagBit = UnitDiag;$/;"	m	namespace:Eigen
UnitLower	include/Eigen/src/Core/util/Constants.h	/^  UnitLower=UnitDiag|Lower, $/;"	e	enum:Eigen::__anon263
UnitLowerTriangular	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UnitLowerTriangular = UnitLower;$/;"	m	namespace:Eigen
UnitUpper	include/Eigen/src/Core/util/Constants.h	/^  UnitUpper=UnitDiag|Upper,$/;"	e	enum:Eigen::__anon263
UnitUpperTriangular	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UnitUpperTriangular = UnitUpper;$/;"	m	namespace:Eigen
UnitW	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitW()$/;"	f	class:Eigen::MatrixBase
UnitX	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitX()$/;"	f	class:Eigen::MatrixBase
UnitY	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitY()$/;"	f	class:Eigen::MatrixBase
UnitZ	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitZ()$/;"	f	class:Eigen::MatrixBase
Unroll	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^      Unroll = CoeffReadCost != Dynamic && CoeffReadCost <= EIGEN_UNROLLING_LIMIT,$/;"	e	enum:Eigen::CoeffBasedProduct::__anon198
Unrolling	include/Eigen/src/Core/Assign.h	/^    Unrolling = (int(Traversal) == int(InnerVectorizedTraversal) || int(Traversal) == int(DefaultTraversal))$/;"	e	enum:Eigen::internal::assign_traits::__anon38
Unrolling	include/Eigen/src/Core/Redux.h	/^    Unrolling = Cost != Dynamic && Cost <= UnrollingLimit$/;"	e	enum:Eigen::internal::redux_traits::__anon230
Unrolling	include/Eigen/src/Core/SolveTriangular.h	/^      Unrolling   = (RhsIsVectorAtCompileTime && Rhs::SizeAtCompileTime != Dynamic && Rhs::SizeAtCompileTime <= 8)$/;"	e	enum:Eigen::internal::trsolve_traits::__anon250
UnrollingLimit	include/Eigen/src/Core/Assign.h	/^    UnrollingLimit      = EIGEN_UNROLLING_LIMIT * (Vectorized ? int(PacketSize) : 1),$/;"	e	enum:Eigen::internal::assign_traits::__anon37
UnrollingLimit	include/Eigen/src/Core/Redux.h	/^    UnrollingLimit = EIGEN_UNROLLING_LIMIT * (int(Traversal) == int(DefaultTraversal) ? 1 : int(PacketSize))$/;"	e	enum:Eigen::internal::redux_traits::__anon229
Unusable	include/Eigen/src/Core/ReturnByValue.h	/^      Unusable(const Unusable&) {}$/;"	f	class:Eigen::ReturnByValue::Unusable
Unusable	include/Eigen/src/Core/ReturnByValue.h	/^    class Unusable{$/;"	c	class:Eigen::ReturnByValue
Unusable	include/Eigen/src/Core/ReturnByValue.h	66;"	d
UpLo	include/Eigen/src/Cholesky/LDLT.h	/^      UpLo = _UpLo$/;"	e	enum:Eigen::LDLT::__anon1
UpLo	include/Eigen/src/Cholesky/LLT.h	/^      UpLo = _UpLo$/;"	e	enum:Eigen::LLT::__anon3
UpLo	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:Eigen::CholmodBase::__anon4
UpLo	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^    UpLo = _UpLo$/;"	e	enum:Eigen::ConjugateGradient::__anon394
UpLo	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:Eigen::PastixLDLT::__anon411
UpLo	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:Eigen::PastixLLT::__anon410
UpLo	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    enum { UpLo = Options&(Upper|Lower) };$/;"	e	enum:Eigen::PardisoLDLT::__anon409
UpLo	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:Eigen::PardisoLLT::__anon408
UpLo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:Eigen::SimplicialCholesky::__anon421
UpLo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:Eigen::SimplicialLDLT::__anon420
UpLo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:Eigen::SimplicialLLT::__anon419
UpLo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    enum { UpLo = internal::traits<Derived>::UpLo };$/;"	e	enum:Eigen::SimplicialCholeskyBase::__anon415
UpLo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  enum { UpLo = _UpLo };$/;"	e	enum:Eigen::internal::traits::__anon416
UpLo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  enum { UpLo = _UpLo };$/;"	e	enum:Eigen::internal::traits::__anon417
UpLo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  enum { UpLo = _UpLo };$/;"	e	enum:Eigen::internal::traits::__anon418
Upper	include/Eigen/src/Core/util/Constants.h	/^  Upper=0x2,                      $/;"	e	enum:Eigen::__anon263
UpperBidiagonalization	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    UpperBidiagonalization() : m_householder(), m_bidiagonal(), m_isInitialized(false) {}$/;"	f	class:Eigen::internal::UpperBidiagonalization
UpperBidiagonalization	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    UpperBidiagonalization(const MatrixType& matrix)$/;"	f	class:Eigen::internal::UpperBidiagonalization
UpperBidiagonalization	include/Eigen/src/SVD/UpperBidiagonalization.h	/^template<typename _MatrixType> class UpperBidiagonalization$/;"	c	namespace:Eigen::internal
UpperTriangular	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UpperTriangular = Upper;$/;"	m	namespace:Eigen
UpperTriangularBit	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UpperTriangularBit = Upper;$/;"	m	namespace:Eigen
Vector	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    typedef Matrix<Scalar,Dynamic,1> Vector;$/;"	t	class:Eigen::DiagonalPreconditioner
Vector	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    typedef Matrix<Scalar,Dynamic,1> Vector;$/;"	t	class:Eigen::IncompleteLUT
Vector	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef Matrix<Scalar,Dynamic,1> Vector;$/;"	t	class:Eigen::PastixBase
Vector	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    typedef Matrix<Scalar,Dynamic,1> Vector;$/;"	t	class:Eigen::SuperLUBase
Vector	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    typedef Matrix<Scalar,Dynamic,1> Vector;$/;"	t	class:Eigen::UmfPackLU
Vector2	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,1> Vector2;$/;"	t	class:Eigen::Rotation2D
Vector2	include/Eigen/src/Geometry/OrthoMethods.h	/^  typedef Matrix<Scalar,2,1> Vector2;$/;"	t	struct:Eigen::internal::unitOrthogonal_selector
Vector2	include/Eigen/src/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,1> Vector2;$/;"	t	class:Eigen::Rotation2D
Vector2s	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef Matrix<Scalar,2,1> Vector2s;$/;"	t	class:Eigen::RealQZ
Vector3	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:Eigen::AngleAxis
Vector3	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:Eigen::Quaternion
Vector3	include/Eigen/src/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:Eigen::AngleAxis
Vector3	include/Eigen/src/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:Eigen::QuaternionBase
Vector3s	include/Eigen/src/Eigenvalues/RealQZ.h	/^      typedef Matrix<Scalar,3,1> Vector3s;$/;"	t	class:Eigen::RealQZ
Vector3s	include/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef Matrix<Scalar,3,1> Vector3s;$/;"	t	class:Eigen::RealSchur
VectorBlock	include/Eigen/src/Core/VectorBlock.h	/^    inline VectorBlock(VectorType& vector, Index start)$/;"	f	class:Eigen::VectorBlock
VectorBlock	include/Eigen/src/Core/VectorBlock.h	/^    inline VectorBlock(VectorType& vector, Index start, Index size)$/;"	f	class:Eigen::VectorBlock
VectorBlock	include/Eigen/src/Core/VectorBlock.h	/^template<typename VectorType, int Size> class VectorBlock$/;"	c	namespace:Eigen
VectorI	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef Matrix<Index,Dynamic,1> VectorI;$/;"	t	class:Eigen::SparseSelfAdjointView
VectorI	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef Matrix<Index,Dynamic,1> VectorI;$/;"	t	class:Eigen::SparseSymmetricPermutationProduct
VectorType	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:Eigen::AlignedBox
VectorType	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:Eigen::Hyperplane
VectorType	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:Eigen::ParametrizedLine
VectorType	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Eigen::Scaling
VectorType	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Eigen::Transform
VectorType	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Eigen::Translation
VectorType	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> VectorType;$/;"	t	class:Eigen::GeneralizedEigenSolver
VectorType	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef Matrix<Scalar, 1, Size, Options | RowMajor, 1, MaxSize> VectorType;$/;"	t	class:Eigen::HessenbergDecomposition
VectorType	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^  typedef typename SolverType::RealVectorType VectorType;$/;"	t	struct:Eigen::internal::direct_selfadjoint_eigenvalues
VectorType	include/Eigen/src/Geometry/AlignedBox.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1>  VectorType;$/;"	t	class:Eigen::AlignedBox
VectorType	include/Eigen/src/Geometry/Hyperplane.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:Eigen::Hyperplane
VectorType	include/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename plain_matrix_type<Derived>::type VectorType;$/;"	t	struct:Eigen::internal::unitOrthogonal_selector
VectorType	include/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1,Options> VectorType;$/;"	t	class:Eigen::ParametrizedLine
VectorType	include/Eigen/src/Geometry/RotationBase.h	/^    typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Eigen::RotationBase
VectorType	include/Eigen/src/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Eigen::Transform
VectorType	include/Eigen/src/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Eigen::Translation
VectorType	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    typedef Matrix<Scalar,Dynamic,1> VectorType;$/;"	t	class:Eigen::PardisoImpl
VectorType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef Matrix<Scalar,Dynamic,1> VectorType;$/;"	t	class:Eigen::SimplicialCholesky
VectorType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef Matrix<Scalar,Dynamic,1> VectorType;$/;"	t	class:Eigen::SimplicialCholeskyBase
VectorType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef Matrix<Scalar,Dynamic,1> VectorType;$/;"	t	class:Eigen::SimplicialLDLT
VectorType	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    typedef Matrix<Scalar,Dynamic,1> VectorType;$/;"	t	class:Eigen::SimplicialLLT
Vectorizable	include/Eigen/src/Core/Functors.h	/^    Vectorizable = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasDiv && packet_traits<RhsScalar>::HasDiv$/;"	e	enum:Eigen::internal::scalar_quotient_op::__anon81
Vectorizable	include/Eigen/src/Core/Functors.h	/^    Vectorizable = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packet_traits<RhsScalar>::HasMul$/;"	e	enum:Eigen::internal::scalar_product_op::__anon72
Vectorizable	include/Eigen/src/Core/GenericPacketMath.h	/^    Vectorizable = 0,$/;"	e	enum:Eigen::internal::packet_traits::__anon172
Vectorizable	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
Vectorizable	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon7
Vectorizable	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon8
Vectorizable	include/Eigen/src/Core/arch/NEON/Complex.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
Vectorizable	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
Vectorizable	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon14
Vectorizable	include/Eigen/src/Core/arch/SSE/Complex.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
Vectorizable	include/Eigen/src/Core/arch/SSE/Complex.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
Vectorizable	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
Vectorizable	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon25
Vectorizable	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon26
Vectorizable	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable  = Traits::Vectorizable,$/;"	e	enum:Eigen::internal::gebp_kernel::__anon205
Vectorizable	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable = packet_traits<LhsScalar>::Vectorizable && packet_traits<RhsScalar>::Vectorizable,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
Vectorizable	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable = packet_traits<LhsScalar>::Vectorizable && packet_traits<RhsScalar>::Vectorizable,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
Vectorizable	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable = packet_traits<RealScalar>::Vectorizable$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
Vectorizable	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable = packet_traits<RealScalar>::Vectorizable$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
Vectorizable	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  Vectorizable = packet_traits<LhsScalar>::Vectorizable && packet_traits<RhsScalar>::Vectorizable$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon213
Vectorizable	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^  Vectorizable = packet_traits<LhsScalar>::Vectorizable && packet_traits<RhsScalar>::Vectorizable$/;"	e	enum:Eigen::internal::general_matrix_vector_product::__anon214
Vectorized	include/Eigen/src/Core/Assign.h	/^    Vectorized = int(Traversal) == InnerVectorizedTraversal$/;"	e	enum:Eigen::internal::assign_traits::__anon36
VectorizedSize	include/Eigen/src/Core/Redux.h	/^    VectorizedSize = (Size \/ PacketSize) * PacketSize$/;"	e	enum:Eigen::internal::redux_impl::__anon235
VectorwiseOp	include/Eigen/src/Core/VectorwiseOp.h	/^    inline VectorwiseOp(ExpressionType& matrix) : m_matrix(matrix) {}$/;"	f	class:Eigen::VectorwiseOp
VectorwiseOp	include/Eigen/src/Core/VectorwiseOp.h	/^template<typename ExpressionType, int Direction> class VectorwiseOp$/;"	c	namespace:Eigen
Vertical	include/Eigen/src/Core/util/Constants.h	/^  Vertical, $/;"	e	enum:Eigen::DirectionType
VmlSize	include/Eigen/src/Core/Assign_MKL.h	/^      VmlSize = MightLinearize ? MaxSizeAtCompileTime : InnerMaxSize,$/;"	e	enum:Eigen::internal::vml_assign_traits::__anon42
WORK	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	108;"	d
WORK	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	148;"	d
WORK	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	205;"	d
WORK	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	245;"	d
WRITING_TO_TRIANGULAR_PART_WITH_UNIT_DIAGONAL_IS_NOT_SUPPORTED	include/Eigen/src/Core/util/StaticAssert.h	/^        WRITING_TO_TRIANGULAR_PART_WITH_UNIT_DIAGONAL_IS_NOT_SUPPORTED,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
WeightedReader	include/base/reader_graph.h	/^				WeightedReader<T>() {};$/;"	f	class:msd::base::WeightedReader
WeightedReader	include/base/reader_graph.h	/^				WeightedReader<T>(const std::string& file_name, char delim): $/;"	f	class:msd::base::WeightedReader
WeightedReader	include/base/reader_graph.h	/^			class WeightedReader : GraphReader<T>$/;"	c	namespace:msd::base
WithFormat	include/Eigen/src/Core/IO.h	/^    WithFormat(const ExpressionType& matrix, const IOFormat& format)$/;"	f	class:Eigen::WithFormat
WithFormat	include/Eigen/src/Core/IO.h	/^class WithFormat$/;"	c	namespace:Eigen
WorkMatrixType	include/Eigen/src/SVD/JacobiSVD.h	/^            WorkMatrixType;$/;"	t	class:Eigen::JacobiSVD
WorkSpaceFactor	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    WorkSpaceFactor = Vectorizable ? 2*nr*RealPacketSize : nr,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
WorkSpaceFactor	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    WorkSpaceFactor = nr * RhsPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
WorkSpaceFactor	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    WorkSpaceFactor = nr*RhsPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
WorkSpaceFactor	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    WorkSpaceFactor = nr*RhsPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
WorkVectorType	include/Eigen/src/QR/FullPivHouseholderQR.h	/^                 MatrixType::MaxRowsAtCompileTime> WorkVectorType;$/;"	t	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
WorkspaceType	include/Eigen/src/SVD/JacobiSVD.h	/^  typedef Matrix<Scalar, 1, RowsAtCompileTime, RowMajor, 1, MaxRowsAtCompileTime> WorkspaceType;$/;"	t	class:Eigen::internal::qr_preconditioner_impl
WriteAccessors	include/Eigen/src/Core/util/Constants.h	/^  WriteAccessors, $/;"	e	enum:Eigen::AccessorLevels
XprBase	include/Eigen/src/Core/Array.h	/^  typedef ArrayBase<Array<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> > XprBase;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/Array.h	/^  typedef ArrayXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/ArrayWrapper.h	/^  typedef ArrayXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/ArrayWrapper.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/Block.h	/^  typedef typename traits<XprType>::XprKind XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename traits<Ancestor>::XprKind XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/Matrix.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/ProductBase.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/Replicate.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/Reverse.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/Select.h	/^  typedef typename traits<ThenMatrixType>::XprKind XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/Transpose.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprKind	include/Eigen/src/SparseCore/SparseVector.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:Eigen::internal::traits
XprType	include/Eigen/src/Core/Transpose.h	/^  typedef SelfCwiseBinaryOp<BinOp,NestedXpr,Rhs> XprType;$/;"	t	struct:Eigen::internal::blas_traits
XprType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef CwiseUnaryOp<scalar_conjugate_op<Scalar>, NestedXpr> XprType;$/;"	t	struct:Eigen::internal::blas_traits
XprType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef CwiseUnaryOp<scalar_multiple_op<Scalar>, NestedXpr> XprType;$/;"	t	struct:Eigen::internal::blas_traits
XprType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef CwiseUnaryOp<scalar_opposite_op<Scalar>, NestedXpr> XprType;$/;"	t	struct:Eigen::internal::blas_traits
XprType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef Transpose<NestedXpr> XprType;$/;"	t	struct:Eigen::internal::blas_traits
XprTypeIsRowMajor	include/Eigen/src/Core/Block.h	/^    XprTypeIsRowMajor = (int(traits<XprType>::Flags)&RowMajorBit) != 0,$/;"	e	enum:Eigen::internal::traits::__anon49
XprTypeNested	include/Eigen/src/Core/Block.h	/^  typedef typename nested<XprType>::type XprTypeNested;$/;"	t	struct:Eigen::internal::traits
XprTypeNested	include/Eigen/src/Core/CwiseUnaryOp.h	/^  typedef typename XprType::Nested XprTypeNested;$/;"	t	struct:Eigen::internal::traits
YOU_ALREADY_SPECIFIED_THIS_STRIDE	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_ALREADY_SPECIFIED_THIS_STRIDE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_NOT_SUPPORT_THAT	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_NOT_SUPPORT_THAT,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_CALLED_A_DYNAMIC_SIZE_METHOD_ON_A_FIXED_SIZE_MATRIX_OR_VECTOR	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_CALLED_A_DYNAMIC_SIZE_METHOD_ON_A_FIXED_SIZE_MATRIX_OR_VECTOR,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_CALLED_A_FIXED_SIZE_METHOD_ON_A_DYNAMIC_SIZE_MATRIX_OR_VECTOR	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_CALLED_A_FIXED_SIZE_METHOD_ON_A_DYNAMIC_SIZE_MATRIX_OR_VECTOR,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_CANNOT_MIX_ARRAYS_AND_MATRICES	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_CANNOT_MIX_ARRAYS_AND_MATRICES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_MADE_A_PROGRAMMING_MISTAKE	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MADE_A_PROGRAMMING_MISTAKE,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_MIXED_MATRICES_OF_DIFFERENT_SIZES	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MIXED_MATRICES_OF_DIFFERENT_SIZES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_MIXED_VECTORS_OF_DIFFERENT_SIZES	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MIXED_VECTORS_OF_DIFFERENT_SIZES,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_PASSED_A_COLUMN_VECTOR_BUT_A_ROW_VECTOR_WAS_EXPECTED	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_PASSED_A_COLUMN_VECTOR_BUT_A_ROW_VECTOR_WAS_EXPECTED,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_PASSED_A_ROW_VECTOR_BUT_A_COLUMN_VECTOR_WAS_EXPECTED	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_PASSED_A_ROW_VECTOR_BUT_A_COLUMN_VECTOR_WAS_EXPECTED,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_PERFORMED_AN_INVALID_TRANSFORMATION_CONVERSION	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_PERFORMED_AN_INVALID_TRANSFORMATION_CONVERSION,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
YOU_TRIED_CALLING_A_VECTOR_METHOD_ON_A_MATRIX	include/Eigen/src/Core/util/StaticAssert.h	/^        YOU_TRIED_CALLING_A_VECTOR_METHOD_ON_A_MATRIX,$/;"	e	enum:Eigen::internal::static_assertion::__anon328
Zero	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Zero()$/;"	f	class:Eigen::DenseBase
Zero	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Zero(Index nbRows, Index nbCols)$/;"	f	class:Eigen::DenseBase
Zero	include/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Zero(Index size)$/;"	f	class:Eigen::DenseBase
ZeroDiag	include/Eigen/src/Core/util/Constants.h	/^  ZeroDiag=0x8,$/;"	e	enum:Eigen::__anon263
ZeroSign	include/Eigen/src/Cholesky/LDLT.h	/^  enum SignMatrix { PositiveSemiDef, NegativeSemiDef, ZeroSign, Indefinite };$/;"	e	enum:Eigen::internal::SignMatrix
_ActualLhsType	include/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<ActualLhsType>::type _ActualLhsType;$/;"	t	class:Eigen::ProductBase
_ActualRhsType	include/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<ActualRhsType>::type _ActualRhsType;$/;"	t	class:Eigen::ProductBase
_EIGEN_ACCUMULATE_PACKETS	include/Eigen/src/Core/products/GeneralMatrixVector.h	280;"	d
_EIGEN_ACCUMULATE_PACKETS	include/Eigen/src/Core/products/GeneralMatrixVector.h	336;"	d
_EIGEN_ACCUMULATE_PACKETS	include/Eigen/src/Core/products/GeneralMatrixVector.h	559;"	d
_EIGEN_ACCUMULATE_PACKETS	include/Eigen/src/Core/products/GeneralMatrixVector.h	70;"	d
_EIGEN_DECLARE_CONST_FAST_Packet4f	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	40;"	d
_EIGEN_DECLARE_CONST_FAST_Packet4i	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	43;"	d
_EIGEN_DECLARE_CONST_Packet2d	include/Eigen/src/Core/arch/SSE/PacketMath.h	51;"	d
_EIGEN_DECLARE_CONST_Packet4f	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	46;"	d
_EIGEN_DECLARE_CONST_Packet4f	include/Eigen/src/Core/arch/NEON/PacketMath.h	33;"	d
_EIGEN_DECLARE_CONST_Packet4f	include/Eigen/src/Core/arch/SSE/PacketMath.h	48;"	d
_EIGEN_DECLARE_CONST_Packet4f_FROM_INT	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	49;"	d
_EIGEN_DECLARE_CONST_Packet4f_FROM_INT	include/Eigen/src/Core/arch/NEON/PacketMath.h	36;"	d
_EIGEN_DECLARE_CONST_Packet4f_FROM_INT	include/Eigen/src/Core/arch/SSE/PacketMath.h	54;"	d
_EIGEN_DECLARE_CONST_Packet4i	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	52;"	d
_EIGEN_DECLARE_CONST_Packet4i	include/Eigen/src/Core/arch/NEON/PacketMath.h	39;"	d
_EIGEN_DECLARE_CONST_Packet4i	include/Eigen/src/Core/arch/SSE/PacketMath.h	57;"	d
_EIGEN_SPARSE_PUBLIC_INTERFACE	include/Eigen/src/SparseCore/SparseUtil.h	46;"	d
_ExtractType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef Transpose<const typename Base::_ExtractType> _ExtractType;$/;"	t	struct:Eigen::internal::blas_traits
_ExtractType	include/Eigen/src/Core/util/BlasUtil.h	/^  typedef XprType _ExtractType;$/;"	t	struct:Eigen::internal::blas_traits
_HasDirectAccess	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^      _HasDirectAccess = (int(Flags)&DirectAccessBit) ? 1 : 0 \/\/ workaround sunCC$/;"	e	enum:Eigen::SparseMatrixBase::__anon439
_Index	include/Eigen/src/SparseCore/SparseUtil.h	/^    typedef typename traits<T>::Index _Index;$/;"	t	struct:Eigen::internal::sparse_eval
_Index	include/Eigen/src/SparseCore/SparseUtil.h	/^  typedef typename traits<T>::Index _Index;$/;"	t	struct:Eigen::internal::plain_matrix_type
_Lhs	include/Eigen/src/Core/GeneralProduct.h	/^  typedef typename remove_all<Lhs>::type _Lhs;$/;"	t	struct:Eigen::internal::product_type
_Lhs	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^  typedef typename remove_all<Lhs>::type _Lhs;$/;"	t	struct:Eigen::internal::traits
_LhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::remove_reference<LhsNested>::type _LhsNested;$/;"	t	class:Eigen::CwiseBinaryOp
_LhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename remove_reference<LhsNested>::type _LhsNested;$/;"	t	struct:Eigen::internal::traits
_LhsNested	include/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<LhsNested>::type _LhsNested;$/;"	t	class:Eigen::ProductBase
_LhsNested	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef typename internal::traits<CoeffBasedProduct>::_LhsNested _LhsNested;$/;"	t	class:Eigen::CoeffBasedProduct
_LhsNested	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename remove_all<LhsNested>::type _LhsNested;$/;"	t	struct:Eigen::internal::traits
_LhsNested	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::_LhsNested _LhsNested;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
_LhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef typename Traits::_LhsNested _LhsNested;$/;"	t	class:Eigen::SparseDenseOuterProduct
_LhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename remove_all<LhsNested>::type _LhsNested;$/;"	t	struct:Eigen::internal::traits
_LhsNested	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    typedef typename internal::remove_all<LhsNested>::type _LhsNested;$/;"	t	class:Eigen::SparseDiagonalProduct
_LhsNested	include/Eigen/src/SparseCore/SparseProduct.h	/^    typedef typename internal::traits<SparseSparseProduct>::_LhsNested _LhsNested;$/;"	t	class:Eigen::SparseSparseProduct
_LhsNested	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef typename remove_all<LhsNested>::type _LhsNested;$/;"	t	struct:Eigen::internal::traits
_LhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<LhsScalar>::type  _LhsPacket;$/;"	t	class:Eigen::internal::gebp_traits
_LhsPacket	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename packet_traits<LhsScalar>::type  _LhsPacket;$/;"	t	struct:Eigen::internal::general_matrix_vector_product
_LinearAccessMask	include/Eigen/src/Core/DiagonalProduct.h	/^    _LinearAccessMask = (RowsAtCompileTime==1 || ColsAtCompileTime==1) ? LinearAccessBit : 0,$/;"	e	enum:Eigen::internal::traits::__anon69
_MatrixType	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    typedef typename internal::pastix_traits<Derived>::MatrixType _MatrixType;$/;"	t	class:Eigen::PastixBase
_MatrixTypeNested	include/Eigen/src/Core/CwiseUnaryView.h	/^  typedef typename remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/Core/Diagonal.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/Core/Replicate.h	/^    typedef typename internal::traits<Replicate>::_MatrixTypeNested _MatrixTypeNested;$/;"	t	class:Eigen::Replicate
_MatrixTypeNested	include/Eigen/src/Core/Replicate.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/Core/Reverse.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::traits<PartialReduxExpr>::_MatrixTypeNested _MatrixTypeNested;$/;"	t	class:Eigen::PartialReduxExpr
_MatrixTypeNested	include/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/Eigen2Support/Minor.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseBlock.h	/^    typedef typename internal::remove_all<typename SparseMatrixType::Nested>::type _MatrixTypeNested;$/;"	t	class:Eigen::BlockImpl
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseBlock.h	/^    typedef typename internal::remove_all<typename XprType::Nested>::type _MatrixTypeNested;$/;"	t	class:Eigen::BlockImpl
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseBlock.h	/^  typedef typename internal::remove_all<typename XprType::Nested>::type _MatrixTypeNested;$/;"	t	class:Eigen::BlockImpl
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename internal::traits<Derived>::_MatrixTypeNested _MatrixTypeNested;$/;"	t	class:Eigen::CwiseUnaryViewImpl
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    typedef typename internal::traits<Derived>::_XprTypeNested _MatrixTypeNested;$/;"	t	class:Eigen::CwiseUnaryOpImpl
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseMatrix.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:Eigen::internal::traits
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	class:Eigen::SparseSelfAdjointView
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typedef typename internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	class:Eigen::SparseSymmetricPermutationProduct
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typedef typename internal::remove_all<typename MatrixType::Nested>::type _MatrixTypeNested;$/;"	t	class:Eigen::TransposeImpl
_MatrixTypeNested	include/Eigen/src/SparseCore/SparseView.h	/^  typedef typename internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	class:Eigen::SparseView
_Options	include/Eigen/src/SparseCore/SparseUtil.h	/^    enum { _Options = ((traits<T>::Flags&RowMajorBit)==RowMajorBit) ? RowMajor : ColMajor };$/;"	e	enum:Eigen::internal::sparse_eval::__anon445
_Options	include/Eigen/src/SparseCore/SparseUtil.h	/^  enum { _Options = ((traits<T>::Flags&RowMajorBit)==RowMajorBit) ? RowMajor : ColMajor };$/;"	e	enum:Eigen::internal::plain_matrix_type::__anon446
_ResPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<ResScalar>::type  _ResPacket;$/;"	t	class:Eigen::internal::gebp_traits
_ResPacket	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename packet_traits<ResScalar>::type  _ResPacket;$/;"	t	struct:Eigen::internal::general_matrix_vector_product
_Rhs	include/Eigen/src/Core/GeneralProduct.h	/^  typedef typename remove_all<Rhs>::type _Rhs;$/;"	t	struct:Eigen::internal::product_type
_Rhs	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^  typedef typename remove_all<Rhs>::type _Rhs;$/;"	t	struct:Eigen::internal::traits
_RhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::remove_reference<RhsNested>::type _RhsNested;$/;"	t	class:Eigen::CwiseBinaryOp
_RhsNested	include/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename remove_reference<RhsNested>::type _RhsNested;$/;"	t	struct:Eigen::internal::traits
_RhsNested	include/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<RhsNested>::type _RhsNested;$/;"	t	class:Eigen::ProductBase
_RhsNested	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef typename internal::traits<CoeffBasedProduct>::_RhsNested _RhsNested;$/;"	t	class:Eigen::CoeffBasedProduct
_RhsNested	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename remove_all<RhsNested>::type _RhsNested;$/;"	t	struct:Eigen::internal::traits
_RhsNested	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::_RhsNested _RhsNested;$/;"	t	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
_RhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    typedef typename Traits::_RhsNested _RhsNested;$/;"	t	class:Eigen::SparseDenseOuterProduct
_RhsNested	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  typedef typename remove_all<RhsNested>::type _RhsNested;$/;"	t	struct:Eigen::internal::traits
_RhsNested	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    typedef typename internal::remove_all<RhsNested>::type _RhsNested;$/;"	t	class:Eigen::SparseDiagonalProduct
_RhsNested	include/Eigen/src/SparseCore/SparseProduct.h	/^    typedef typename internal::traits<SparseSparseProduct>::_RhsNested _RhsNested;$/;"	t	class:Eigen::SparseSparseProduct
_RhsNested	include/Eigen/src/SparseCore/SparseProduct.h	/^  typedef typename remove_all<RhsNested>::type _RhsNested;$/;"	t	struct:Eigen::internal::traits
_RhsPacket	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<RhsScalar>::type  _RhsPacket;$/;"	t	class:Eigen::internal::gebp_traits
_RhsPacket	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename packet_traits<RhsScalar>::type  _RhsPacket;$/;"	t	struct:Eigen::internal::general_matrix_vector_product
_SameTypes	include/Eigen/src/Core/DiagonalProduct.h	/^    _SameTypes = is_same<typename MatrixType::Scalar, typename DiagonalType::Scalar>::value,$/;"	e	enum:Eigen::internal::traits::__anon69
_Scalar	include/Eigen/src/SparseCore/SparseUtil.h	/^    typedef typename traits<T>::Scalar _Scalar;$/;"	t	struct:Eigen::internal::sparse_eval
_Scalar	include/Eigen/src/SparseCore/SparseUtil.h	/^  typedef typename traits<T>::Scalar _Scalar;$/;"	t	struct:Eigen::internal::plain_matrix_type
_ScalarAccessOnDiag	include/Eigen/src/Core/DiagonalProduct.h	/^    _ScalarAccessOnDiag =  !((int(_StorageOrder) == ColMajor && int(ProductOrder) == OnTheLeft)$/;"	e	enum:Eigen::internal::traits::__anon69
_StorageOrder	include/Eigen/src/Core/DiagonalProduct.h	/^    _StorageOrder = MatrixType::Flags & RowMajorBit ? RowMajor : ColMajor,$/;"	e	enum:Eigen::internal::traits::__anon69
_Vectorizable	include/Eigen/src/Core/DiagonalProduct.h	/^    _Vectorizable = bool(int(MatrixType::Flags)&PacketAccessBit) && _SameTypes && (_ScalarAccessOnDiag || (bool(int(DiagonalType::DiagonalVectorType::Flags)&PacketAccessBit))),$/;"	e	enum:Eigen::internal::traits::__anon69
_XprTypeNested	include/Eigen/src/Core/Block.h	/^  typedef typename remove_reference<XprTypeNested>::type _XprTypeNested;$/;"	t	struct:Eigen::internal::traits
_XprTypeNested	include/Eigen/src/Core/CwiseUnaryOp.h	/^  typedef typename remove_reference<XprTypeNested>::type _XprTypeNested;$/;"	t	struct:Eigen::internal::traits
_check_template_params	include/Eigen/src/Core/PlainObjectBase.h	/^    static EIGEN_STRONG_INLINE void _check_template_params()$/;"	f	class:Eigen::PlainObjectBase
_check_template_params	include/Eigen/src/Geometry/Quaternion.h	/^    static EIGEN_STRONG_INLINE void _check_template_params()$/;"	f	class:Eigen::Quaternion
_compute	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^void HessenbergDecomposition<MatrixType>::_compute(MatrixType& matA, CoeffVectorType& hCoeffs, VectorType& temp)$/;"	f	class:Eigen::HessenbergDecomposition
_data	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED Storage& _data() { return m_data; }$/;"	f	class:Eigen::SparseVector
_data	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED const Storage& _data() const { return m_data; }$/;"	f	class:Eigen::SparseVector
_expression	include/Eigen/src/Core/Flagged.h	/^    const ExpressionType& _expression() const { return m_matrix; }$/;"	f	class:Eigen::Flagged
_expression	include/Eigen/src/Core/SelfAdjointView.h	/^    const MatrixTypeNestedCleaned& _expression() const { return m_matrix; }$/;"	f	class:Eigen::SelfAdjointView
_expression	include/Eigen/src/Core/VectorwiseOp.h	/^    inline const ExpressionType& _expression() const { return m_matrix; }$/;"	f	class:Eigen::VectorwiseOp
_expression	include/Eigen/src/Eigen2Support/Cwise.h	/^    inline const ExpressionType& _expression() const { return m_matrix; }$/;"	f	class:Eigen::Cwise
_init2	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _init2(Index nbRows, Index nbCols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)$/;"	f	class:Eigen::PlainObjectBase
_init2	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _init2(const Scalar& val0, const Scalar& val1, typename internal::enable_if<Base::SizeAtCompileTime==2,T0>::type* = 0)$/;"	f	class:Eigen::PlainObjectBase
_m_T_to_id	include/base/graph.h	/^					std::map<T, size_type> _m_T_to_id;$/;"	m	class:msd::base::Graph
_m_delim	include/base/reader.h	/^					char _m_delim;$/;"	m	class:msd::base::Reader
_m_file_name	include/base/reader.h	/^					std::string _m_file_name;$/;"	m	class:msd::base::Reader
_m_file_read	include/base/reader.h	/^					bool _m_file_read;$/;"	m	class:msd::base::Reader
_m_graph	include/base/graph.h	/^					std::vector<std::vector<T> > _m_graph;$/;"	m	class:msd::base::Graph
_m_graph	include/base/reader_graph.h	/^				Graph<T> _m_graph;$/;"	m	class:msd::base::GraphReader
_m_id_to_T	include/base/graph.h	/^					std::map<size_type, T> _m_id_to_T;$/;"	m	class:msd::base::Graph
_m_is_directed	include/base/graph.h	/^					bool _m_is_directed;$/;"	m	class:msd::base::Graph
_m_is_weighted	include/base/graph.h	/^					bool _m_is_weighted;$/;"	m	class:msd::base::Graph
_m_weight	include/base/graph.h	/^					std::map<std::pair<size_type, size_type>, double> _m_weight;$/;"	m	class:msd::base::Graph
_resize_to_match	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _resize_to_match(const EigenBase<OtherDerived>& other)$/;"	f	class:Eigen::PlainObjectBase
_set	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::PlainObjectBase
_set_noalias	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::PlainObjectBase
_set_selector	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _set_selector(const OtherDerived& other, const internal::false_type&) { _set_noalias(other); }$/;"	f	class:Eigen::PlainObjectBase
_set_selector	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _set_selector(const OtherDerived& other, const internal::true_type&) { _set_noalias(other.eval()); }$/;"	f	class:Eigen::PlainObjectBase
_solve	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void _solve(const MatrixBase<Rhs> &b, MatrixBase<Dest> &dest) const$/;"	f	class:Eigen::CholmodBase
_solve	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void _solve(const SparseMatrix<RhsScalar,RhsOptions,RhsIndex> &b, SparseMatrix<DestScalar,DestOptions,DestIndex> &dest) const$/;"	f	class:Eigen::CholmodBase
_solve	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    void _solve(const Rhs& b, Dest& x) const$/;"	f	class:Eigen::DiagonalPreconditioner
_solve	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  void _solve(const Rhs& b, Dest& x) const$/;"	f	class:Eigen::BiCGSTAB
_solve	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  void _solve(const Rhs& b, Dest& x) const$/;"	f	class:Eigen::ConjugateGradient
_solve	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    void _solve(const Rhs& b, Dest& x) const$/;"	f	class:Eigen::IncompleteLUT
_solve	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^bool PastixBase<Base>::_solve (const MatrixBase<Rhs> &b, MatrixBase<Dest> &x) const$/;"	f	class:Eigen::PastixBase
_solve	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^bool PardisoImpl<Base>::_solve(const MatrixBase<BDerived> &b, MatrixBase<XDerived>& x) const$/;"	f	class:Eigen::PardisoImpl
_solve	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    void _solve(const MatrixBase<Rhs> &b, MatrixBase<Dest> &dest) const$/;"	f	class:Eigen::SPQR
_solve	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void _solve(const MatrixBase<Rhs> &b, MatrixBase<Dest> &dest) const$/;"	f	class:Eigen::SimplicialCholesky
_solve	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void _solve(const MatrixBase<Rhs> &b, MatrixBase<Dest> &dest) const$/;"	f	class:Eigen::SimplicialCholeskyBase
_solve	include/Eigen/src/SparseLU/SparseLU.h	/^    bool _solve(const MatrixBase<Rhs> &B, MatrixBase<Dest> &X_base) const$/;"	f	class:Eigen::SparseLU
_solve	include/Eigen/src/SparseQR/SparseQR.h	/^    bool _solve(const MatrixBase<Rhs> &B, MatrixBase<Dest> &dest) const$/;"	f	class:Eigen::SparseQR
_solve	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^void SuperILU<MatrixType>::_solve(const MatrixBase<Rhs> &b, MatrixBase<Dest>& x) const$/;"	f	class:Eigen::SuperILU
_solve	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^void SuperLU<MatrixType>::_solve(const MatrixBase<Rhs> &b, MatrixBase<Dest>& x) const$/;"	f	class:Eigen::SuperLU
_solve	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^bool UmfPackLU<MatrixType>::_solve(const MatrixBase<BDerived> &b, MatrixBase<XDerived> &x) const$/;"	f	class:Eigen::UmfPackLU
_solveWithGuess	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  void _solveWithGuess(const Rhs& b, Dest& x) const$/;"	f	class:Eigen::BiCGSTAB
_solveWithGuess	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  void _solveWithGuess(const Rhs& b, Dest& x) const$/;"	f	class:Eigen::ConjugateGradient
_solve_sparse	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  void _solve_sparse(const Rhs& b, SparseMatrix<DestScalar,DestOptions,DestIndex> &dest) const$/;"	f	class:Eigen::IterativeSolverBase
_swap	include/Eigen/src/Core/PlainObjectBase.h	/^    void _swap(DenseBase<OtherDerived> const & other)$/;"	f	class:Eigen::PlainObjectBase
_transformVector	include/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::_transformVector(Vector3 v) const$/;"	f	class:Eigen::QuaternionBase
_transformVector	include/Eigen/src/Geometry/RotationBase.h	/^    inline VectorType _transformVector(const OtherVectorType& v) const$/;"	f	class:Eigen::RotationBase
a	include/Eigen/src/Core/util/Meta.h	/^struct has_none {int a[1];};$/;"	m	struct:Eigen::internal::has_none
a	include/Eigen/src/Core/util/Meta.h	/^struct has_std_result_type {int a[2];};$/;"	m	struct:Eigen::internal::has_std_result_type
a	include/Eigen/src/Core/util/Meta.h	/^struct has_tr1_result {int a[3];};$/;"	m	struct:Eigen::internal::has_tr1_result
a	include/Eigen/src/SVD/JacobiSVD.h	/^  enum { a = MatrixType::RowsAtCompileTime != Dynamic &&$/;"	e	enum:Eigen::internal::qr_preconditioner_should_do_anything::__anon460
abs	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::abs() const$/;"	f	class:Eigen::Cwise
abs	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^abs() const$/;"	f
abs2	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(abs2, Scalar) abs2(const Scalar& x)$/;"	f	namespace:Eigen::numext
abs2	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::abs2() const$/;"	f	class:Eigen::Cwise
abs2	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^abs2() const$/;"	f
abs2_impl	include/Eigen/src/Core/MathFunctions.h	/^struct abs2_impl$/;"	s	namespace:Eigen::internal
abs2_impl	include/Eigen/src/Core/MathFunctions.h	/^struct abs2_impl<std::complex<RealScalar> >$/;"	s	namespace:Eigen::internal
abs2_retval	include/Eigen/src/Core/MathFunctions.h	/^struct abs2_retval$/;"	s	namespace:Eigen::internal
absDeterminant	include/Eigen/src/QR/ColPivHouseholderQR.h	/^typename MatrixType::RealScalar ColPivHouseholderQR<MatrixType>::absDeterminant() const$/;"	f	class:Eigen::ColPivHouseholderQR
absDeterminant	include/Eigen/src/QR/FullPivHouseholderQR.h	/^typename MatrixType::RealScalar FullPivHouseholderQR<MatrixType>::absDeterminant() const$/;"	f	class:Eigen::FullPivHouseholderQR
absDeterminant	include/Eigen/src/QR/HouseholderQR.h	/^typename MatrixType::RealScalar HouseholderQR<MatrixType>::absDeterminant() const$/;"	f	class:Eigen::HouseholderQR
absDeterminant	include/Eigen/src/SparseLU/SparseLU.h	/^     Scalar absDeterminant()$/;"	f	class:Eigen::SparseLU
absDiagIndex	include/Eigen/src/Core/Diagonal.h	/^    EIGEN_STRONG_INLINE Index absDiagIndex() const { return m_index.value()>0 ? m_index.value() : -m_index.value(); }$/;"	f	class:Eigen::Diagonal
absDistance	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Scalar absDistance(const VectorType& p) const { return ei_abs(signedDistance(p)); }$/;"	f	class:Eigen::Hyperplane
absDistance	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Scalar absDistance(const VectorType& p) const { using std::abs; return abs(signedDistance(p)); }$/;"	f	class:Eigen::Hyperplane
acc	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void acc(const AccPacket& c, const ResPacket& alpha, ResPacket& r) const$/;"	f	class:Eigen::internal::gebp_traits
acc	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void acc(const DoublePacket& c, const ResPacket& alpha, ResPacket& r) const$/;"	f	class:Eigen::internal::gebp_traits
acc	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void acc(const Scalar& c, const Scalar& alpha, Scalar& r) const { r += alpha * c; }$/;"	f	class:Eigen::internal::gebp_traits
accessors_level	include/Eigen/src/Core/util/ForwardDeclarations.h	/^template<typename Derived> struct accessors_level$/;"	s	namespace:Eigen::internal
acos	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^acos() const$/;"	f
add	include/Eigen/src/Core/GeneralProduct.h	/^    struct add  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const { dst.const_cast_derived() += src; } };$/;"	s	class:Eigen::GeneralProduct
addTo	include/Eigen/src/Core/DiagonalMatrix.h	/^    void addTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:Eigen::DiagonalBase
addTo	include/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void addTo(Dest& dst) const$/;"	f	struct:Eigen::EigenBase
addTo	include/Eigen/src/Core/GeneralProduct.h	/^    inline void addTo(Dest& dest) const {$/;"	f	class:Eigen::GeneralProduct
addTo	include/Eigen/src/Core/ProductBase.h	/^    inline void addTo(Dest& dst) const { scaleAndAddTo(dst, Scalar(1)); }$/;"	f	class:ScaledProduct
add_const	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const { typedef const T type; };$/;"	s	namespace:Eigen::internal
add_const	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const<T&> { typedef T& type; };$/;"	s	namespace:Eigen::internal
add_const_on_value_type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type            { typedef const T type;  };$/;"	s	namespace:Eigen::internal
add_const_on_value_type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T const* const>  { typedef T const* const type; };$/;"	s	namespace:Eigen::internal
add_const_on_value_type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T&>        { typedef T const& type; };$/;"	s	namespace:Eigen::internal
add_const_on_value_type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T* const>  { typedef T const* const type; };$/;"	s	namespace:Eigen::internal
add_const_on_value_type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T*>        { typedef T const* type; };$/;"	s	namespace:Eigen::internal
add_const_on_value_type_if_arithmetic	include/Eigen/src/Core/DenseCoeffsBase.h	/^template<typename T> struct add_const_on_value_type_if_arithmetic$/;"	s	namespace:Eigen::internal
address	include/Eigen/src/Core/util/Memory.h	/^    const_pointer address( const_reference value ) const$/;"	f	class:Eigen::aligned_allocator
address	include/Eigen/src/Core/util/Memory.h	/^    pointer address( reference value ) const$/;"	f	class:Eigen::aligned_allocator
adds	include/Eigen/src/Core/GeneralProduct.h	/^      adds(const Scalar& s) : m_scale(s) {}$/;"	f	struct:Eigen::GeneralProduct::adds
adds	include/Eigen/src/Core/GeneralProduct.h	/^    struct adds {$/;"	s	class:Eigen::GeneralProduct
adjoint	include/Eigen/src/Core/Transpose.h	/^MatrixBase<Derived>::adjoint() const$/;"	f	class:Eigen::MatrixBase
adjoint	include/Eigen/src/Core/TriangularMatrix.h	/^    inline const TriangularView<const typename MatrixType::AdjointReturnType,TransposeMode> adjoint() const$/;"	f	class:Eigen::TriangularView
adjoint	include/Eigen/src/Householder/HouseholderSequence.h	/^    ConjugateReturnType adjoint() const$/;"	f	class:Eigen::HouseholderSequence
adjoint	include/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation adjoint() const { using numext::conj; return JacobiRotation(conj(m_c), -m_s); }$/;"	f	class:Eigen::JacobiRotation
adjoint	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  SPQRMatrixQTransposeReturnType<SPQRType> adjoint() const$/;"	f	struct:Eigen::SPQRMatrixQReturnType
adjoint	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    const AdjointReturnType adjoint() const { return transpose(); }$/;"	f	class:Eigen::SparseMatrixBase
adjoint	include/Eigen/src/SparseQR/SparseQR.h	/^  SparseQRMatrixQTransposeReturnType<SparseQRType> adjoint() const$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
adjointInPlace	include/Eigen/src/Core/Transpose.h	/^inline void MatrixBase<Derived>::adjointInPlace()$/;"	f	class:Eigen::MatrixBase
affine	include/Eigen/src/Geometry/Transform.h	/^  inline AffinePart affine() { return take_affine_part::run(m_matrix); }$/;"	f	class:Eigen::Transform
affine	include/Eigen/src/Geometry/Transform.h	/^  inline ConstAffinePart affine() const { return take_affine_part::run(m_matrix); }$/;"	f	class:Eigen::Transform
aligned_allocator	include/Eigen/src/Core/util/Memory.h	/^    aligned_allocator( const aligned_allocator& )$/;"	f	class:Eigen::aligned_allocator
aligned_allocator	include/Eigen/src/Core/util/Memory.h	/^    aligned_allocator( const aligned_allocator<U>& )$/;"	f	class:Eigen::aligned_allocator
aligned_allocator	include/Eigen/src/Core/util/Memory.h	/^    aligned_allocator()$/;"	f	class:Eigen::aligned_allocator
aligned_allocator	include/Eigen/src/Core/util/Memory.h	/^class aligned_allocator$/;"	c	namespace:Eigen
aligned_allocator_indirection	include/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection() {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	include/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const EIGEN_ALIGNED_ALLOCATOR<T>& ) {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	include/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const EIGEN_ALIGNED_ALLOCATOR<U>& ) {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	include/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const aligned_allocator_indirection& ) : EIGEN_ALIGNED_ALLOCATOR<T>() {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	include/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const aligned_allocator_indirection<U>& ) {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	include/Eigen/src/StlSupport/details.h	/^  class aligned_allocator_indirection : public EIGEN_ALIGNED_ALLOCATOR<T>$/;"	c	namespace:Eigen
aligned_delete	include/Eigen/src/Core/util/Memory.h	/^template<typename T> inline void aligned_delete(T *ptr, size_t size)$/;"	f	namespace:Eigen::internal
aligned_free	include/Eigen/src/Core/util/Memory.h	/^inline void aligned_free(void *ptr)$/;"	f	namespace:Eigen::internal
aligned_malloc	include/Eigen/src/Core/util/Memory.h	/^inline void* aligned_malloc(size_t size)$/;"	f	namespace:Eigen::internal
aligned_new	include/Eigen/src/Core/util/Memory.h	/^template<typename T> inline T* aligned_new(size_t size)$/;"	f	namespace:Eigen::internal
aligned_realloc	include/Eigen/src/Core/util/Memory.h	/^inline void* aligned_realloc(void *ptr, size_t new_size, size_t old_size)$/;"	f	namespace:Eigen::internal
aligned_stack_memory_handler	include/Eigen/src/Core/util/Memory.h	/^    aligned_stack_memory_handler(T* ptr, size_t size, bool dealloc)$/;"	f	class:Eigen::internal::aligned_stack_memory_handler
aligned_stack_memory_handler	include/Eigen/src/Core/util/Memory.h	/^template<typename T> class aligned_stack_memory_handler$/;"	c	namespace:Eigen::internal
alignment	include/Eigen/src/Core/Redux.h	/^    alignment = (Derived::Flags & AlignedBit) ? Aligned : Unaligned$/;"	e	enum:Eigen::internal::redux_vec_unroller::__anon234
all	include/Eigen/src/Core/BooleanRedux.h	/^inline bool DenseBase<Derived>::all() const$/;"	f	class:Eigen::DenseBase
all	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_all>::Type all() const$/;"	f	class:Eigen::VectorwiseOp
allFinite	include/Eigen/src/Core/BooleanRedux.h	/^inline bool DenseBase<Derived>::allFinite() const$/;"	f	class:Eigen::DenseBase
all_unroller	include/Eigen/src/Core/BooleanRedux.h	/^struct all_unroller$/;"	s	namespace:Eigen::internal
all_unroller	include/Eigen/src/Core/BooleanRedux.h	/^struct all_unroller<Derived, 0>$/;"	s	namespace:Eigen::internal
all_unroller	include/Eigen/src/Core/BooleanRedux.h	/^struct all_unroller<Derived, Dynamic>$/;"	s	namespace:Eigen::internal
allocate	include/Eigen/src/Core/util/Memory.h	/^    pointer allocate( size_type num, const void* hint = 0 )$/;"	f	class:Eigen::aligned_allocator
allocate	include/Eigen/src/SVD/JacobiSVD.h	/^  void allocate(const JacobiSVD<MatrixType, ColPivHouseholderQRPreconditioner>& svd)$/;"	f	class:Eigen::internal::qr_preconditioner_impl
allocate	include/Eigen/src/SVD/JacobiSVD.h	/^  void allocate(const JacobiSVD<MatrixType, FullPivHouseholderQRPreconditioner>& svd)$/;"	f	class:Eigen::internal::qr_preconditioner_impl
allocate	include/Eigen/src/SVD/JacobiSVD.h	/^  void allocate(const JacobiSVD<MatrixType, HouseholderQRPreconditioner>& svd)$/;"	f	class:Eigen::internal::qr_preconditioner_impl
allocate	include/Eigen/src/SVD/JacobiSVD.h	/^  void allocate(const JacobiSVD<MatrixType, QRPreconditioner>&) {}$/;"	f	class:Eigen::internal::qr_preconditioner_impl
allocate	include/Eigen/src/SVD/JacobiSVD.h	/^void JacobiSVD<MatrixType, QRPreconditioner>::allocate(Index rows, Index cols, unsigned int computationOptions)$/;"	f	class:Eigen::JacobiSVD
allocateA	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateA() {}$/;"	f	class:Eigen::internal::gemm_blocking_space
allocateA	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateA()$/;"	f	class:Eigen::internal::gemm_blocking_space
allocateAll	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateAll() {}$/;"	f	class:Eigen::internal::gemm_blocking_space
allocateAll	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateAll()$/;"	f	class:Eigen::internal::gemm_blocking_space
allocateB	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateB() {}$/;"	f	class:Eigen::internal::gemm_blocking_space
allocateB	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateB()$/;"	f	class:Eigen::internal::gemm_blocking_space
allocateW	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateW() {}$/;"	f	class:Eigen::internal::gemm_blocking_space
allocateW	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateW()$/;"	f	class:Eigen::internal::gemm_blocking_space
allocatedSize	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline size_t allocatedSize() const { return m_allocatedSize; }$/;"	f	class:Eigen::internal::CompressedStorage
alpha	include/Eigen/src/Core/ProductBase.h	/^    const Scalar& alpha() const { return m_alpha; }$/;"	f	class:ScaledProduct
alphas	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    ComplexVectorType alphas() const$/;"	f	class:Eigen::GeneralizedEigenSolver
always_void	include/Eigen/src/Core/MathFunctions.h	/^template<typename T> struct always_void { typedef void type; };$/;"	s	namespace:Eigen::internal
amd_flip	include/Eigen/src/OrderingMethods/Amd.h	/^template<typename T> inline T amd_flip(const T& i) { return -i-2; }$/;"	f	namespace:Eigen::internal
amd_mark	include/Eigen/src/OrderingMethods/Amd.h	/^template<typename T0, typename T1> inline void amd_mark(const T0* w, const T1& j) { return w[j] = amd_flip(w[j]); }$/;"	f	namespace:Eigen::internal
amd_marked	include/Eigen/src/OrderingMethods/Amd.h	/^template<typename T0, typename T1> inline bool amd_marked(const T0* w, const T1& j) { return w[j]<0; }$/;"	f	namespace:Eigen::internal
amd_unflip	include/Eigen/src/OrderingMethods/Amd.h	/^template<typename T> inline T amd_unflip(const T& i) { return i<0 ? amd_flip(i) : i; }$/;"	f	namespace:Eigen::internal
analyzePattern	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void analyzePattern(const MatrixType& matrix)$/;"	f	class:Eigen::CholmodBase
analyzePattern	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    DiagonalPreconditioner& analyzePattern(const MatType& )$/;"	f	class:Eigen::DiagonalPreconditioner
analyzePattern	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    IdentityPreconditioner& analyzePattern(const MatrixType& ) { return *this; }$/;"	f	class:Eigen::IdentityPreconditioner
analyzePattern	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^void IncompleteLUT<Scalar>::analyzePattern(const _MatrixType& amat)$/;"	f	class:Eigen::IncompleteLUT
analyzePattern	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Derived& analyzePattern(const MatrixType& A)$/;"	f	class:Eigen::IterativeSolverBase
analyzePattern	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void analyzePattern(const MatrixType& matrix)$/;"	f	class:Eigen::PastixLDLT
analyzePattern	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void analyzePattern(const MatrixType& matrix)$/;"	f	class:Eigen::PastixLLT
analyzePattern	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void analyzePattern(const MatrixType& matrix)$/;"	f	class:Eigen::PastixLU
analyzePattern	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^void PastixBase<Derived>::analyzePattern(ColSpMatrix& mat)$/;"	f	class:Eigen::PastixBase
analyzePattern	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^Derived& PardisoImpl<Derived>::analyzePattern(const MatrixType& a)$/;"	f	class:Eigen::PardisoImpl
analyzePattern	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void analyzePattern(const MatrixType& a)$/;"	f	class:Eigen::SimplicialCholesky
analyzePattern	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void analyzePattern(const MatrixType& a)$/;"	f	class:Eigen::SimplicialLDLT
analyzePattern	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void analyzePattern(const MatrixType& a)$/;"	f	class:Eigen::SimplicialLLT
analyzePattern	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void analyzePattern(const MatrixType& a, bool doLDLT)$/;"	f	class:Eigen::SimplicialCholeskyBase
analyzePattern	include/Eigen/src/SparseLU/SparseLU.h	/^void SparseLU<MatrixType, OrderingType>::analyzePattern(const MatrixType& mat)$/;"	f	class:Eigen::SparseLU
analyzePattern	include/Eigen/src/SparseQR/SparseQR.h	/^void SparseQR<MatrixType,OrderingType>::analyzePattern(const MatrixType& mat)$/;"	f	class:Eigen::SparseQR
analyzePattern	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void analyzePattern(const MatrixType& \/*matrix*\/)$/;"	f	class:Eigen::SuperLUBase
analyzePattern	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void analyzePattern(const MatrixType& matrix)$/;"	f	class:Eigen::SuperILU
analyzePattern	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void analyzePattern(const MatrixType& matrix)$/;"	f	class:Eigen::SuperLU
analyzePattern	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void analyzePattern(const InputMatrixType& matrix)$/;"	f	class:Eigen::UmfPackLU
analyzePattern_impl	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void analyzePattern_impl()$/;"	f	class:Eigen::UmfPackLU
analyzePattern_preordered	include/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h	/^void SimplicialCholeskyBase<Derived>::analyzePattern_preordered(const CholMatrixType& ap, bool doLDLT)$/;"	f	class:Eigen::SimplicialCholeskyBase
angle	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Scalar angle() const { return m_angle; }$/;"	f	class:Eigen::AngleAxis
angle	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Scalar& angle() { return m_angle; }$/;"	f	class:Eigen::AngleAxis
angle	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Scalar angle() const { return m_angle; }$/;"	f	class:Eigen::Rotation2D
angle	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Scalar& angle() { return m_angle; }$/;"	f	class:Eigen::Rotation2D
angle	include/Eigen/src/Geometry/AngleAxis.h	/^  Scalar angle() const { return m_angle; }$/;"	f	class:Eigen::AngleAxis
angle	include/Eigen/src/Geometry/AngleAxis.h	/^  Scalar& angle() { return m_angle; }$/;"	f	class:Eigen::AngleAxis
angle	include/Eigen/src/Geometry/Rotation2D.h	/^  inline Scalar angle() const { return m_angle; }$/;"	f	class:Eigen::Rotation2D
angle	include/Eigen/src/Geometry/Rotation2D.h	/^  inline Scalar& angle() { return m_angle; }$/;"	f	class:Eigen::Rotation2D
angularDistance	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Scalar Quaternion<Scalar>::angularDistance(const Quaternion& other) const$/;"	f	class:Eigen::Quaternion
angularDistance	include/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::angularDistance(const QuaternionBase<OtherDerived>& other) const$/;"	f	class:Eigen::QuaternionBase
any	include/Eigen/src/Core/BooleanRedux.h	/^inline bool DenseBase<Derived>::any() const$/;"	f	class:Eigen::DenseBase
any	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_any>::Type any() const$/;"	f	class:Eigen::VectorwiseOp
any_unroller	include/Eigen/src/Core/BooleanRedux.h	/^struct any_unroller$/;"	s	namespace:Eigen::internal
any_unroller	include/Eigen/src/Core/BooleanRedux.h	/^struct any_unroller<Derived, 0>$/;"	s	namespace:Eigen::internal
any_unroller	include/Eigen/src/Core/BooleanRedux.h	/^struct any_unroller<Derived, Dynamic>$/;"	s	namespace:Eigen::internal
append	include/Eigen/src/SparseCore/CompressedStorage.h	/^    void append(const Scalar& v, Index i)$/;"	f	class:Eigen::internal::CompressedStorage
applyHouseholderOnTheLeft	include/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::applyHouseholderOnTheLeft($/;"	f	class:Eigen::MatrixBase
applyHouseholderOnTheRight	include/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::applyHouseholderOnTheRight($/;"	f	class:Eigen::MatrixBase
applyOnTheLeft	include/Eigen/src/Core/MatrixBase.h	/^inline void MatrixBase<Derived>::applyOnTheLeft(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::MatrixBase
applyOnTheLeft	include/Eigen/src/Jacobi/Jacobi.h	/^inline void MatrixBase<Derived>::applyOnTheLeft(Index p, Index q, const JacobiRotation<OtherScalar>& j)$/;"	f	class:Eigen::MatrixBase
applyOnTheRight	include/Eigen/src/Core/MatrixBase.h	/^inline void MatrixBase<Derived>::applyOnTheRight(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::MatrixBase
applyOnTheRight	include/Eigen/src/Jacobi/Jacobi.h	/^inline void MatrixBase<Derived>::applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>& j)$/;"	f	class:Eigen::MatrixBase
applyThisOnTheLeft	include/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void applyThisOnTheLeft(Dest& dst) const$/;"	f	struct:Eigen::EigenBase
applyThisOnTheLeft	include/Eigen/src/Householder/HouseholderSequence.h	/^    inline void applyThisOnTheLeft(Dest& dst, Workspace& workspace) const$/;"	f	class:Eigen::HouseholderSequence
applyThisOnTheLeft	include/Eigen/src/Householder/HouseholderSequence.h	/^    template<typename Dest> inline void applyThisOnTheLeft(Dest& dst) const$/;"	f	class:Eigen::HouseholderSequence
applyThisOnTheRight	include/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void applyThisOnTheRight(Dest& dst) const$/;"	f	struct:Eigen::EigenBase
applyThisOnTheRight	include/Eigen/src/Householder/HouseholderSequence.h	/^    inline void applyThisOnTheRight(Dest& dst, Workspace& workspace) const$/;"	f	class:Eigen::HouseholderSequence
applyThisOnTheRight	include/Eigen/src/Householder/HouseholderSequence.h	/^    template<typename Dest> inline void applyThisOnTheRight(Dest& dst) const$/;"	f	class:Eigen::HouseholderSequence
applyTranspositionOnTheLeft	include/Eigen/src/Core/PermutationMatrix.h	/^    Derived& applyTranspositionOnTheLeft(Index i, Index j)$/;"	f	class:Eigen::PermutationBase
applyTranspositionOnTheRight	include/Eigen/src/Core/PermutationMatrix.h	/^    Derived& applyTranspositionOnTheRight(Index i, Index j)$/;"	f	class:Eigen::PermutationBase
apply_block_householder_on_the_left	include/Eigen/src/Householder/BlockHouseholder.h	/^void apply_block_householder_on_the_left(MatrixType& mat, const VectorsType& vectors, const CoeffsType& hCoeffs)$/;"	f	namespace:Eigen::internal
apply_rotation_in_the_plane	include/Eigen/src/Jacobi/Jacobi.h	/^void \/*EIGEN_DONT_INLINE*\/ apply_rotation_in_the_plane(VectorX& _x, VectorY& _y, const JacobiRotation<OtherScalar>& j)$/;"	f	namespace:Eigen::internal
array	include/Eigen/src/Core/ArrayBase.h	/^    ArrayBase<Derived>& array() { return *this; }$/;"	f	class:Eigen::ArrayBase
array	include/Eigen/src/Core/ArrayBase.h	/^    const ArrayBase<Derived>& array() const { return *this; }$/;"	f	class:Eigen::ArrayBase
array	include/Eigen/src/Core/DenseStorage.h	/^  EIGEN_USER_ALIGN16 T array[1];$/;"	m	struct:Eigen::internal::plain_array
array	include/Eigen/src/Core/DenseStorage.h	/^  EIGEN_USER_ALIGN16 T array[Size];$/;"	m	struct:Eigen::internal::plain_array
array	include/Eigen/src/Core/DenseStorage.h	/^  T array[Size];$/;"	m	struct:Eigen::internal::plain_array
array	include/Eigen/src/Core/MatrixBase.h	/^    ArrayWrapper<Derived> array() { return derived(); }$/;"	f	class:Eigen::MatrixBase
array	include/Eigen/src/Core/MatrixBase.h	/^    const ArrayWrapper<const Derived> array() const { return derived(); }$/;"	f	class:Eigen::MatrixBase
asDiagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^MatrixBase<Derived>::asDiagonal() const$/;"	f	class:Eigen::MatrixBase
asPermutation	include/Eigen/src/Core/PermutationMatrix.h	/^const PermutationWrapper<const Derived> MatrixBase<Derived>::asPermutation() const$/;"	f	class:Eigen::MatrixBase
asSluMatrix	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^SluMatrix asSluMatrix(MatrixType& mat)$/;"	f	namespace:Eigen::internal
asin	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^asin() const$/;"	f
assign	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Derived& assign(const OtherDerived& other)$/;"	f	class:Eigen::SparseMatrixBase
assignGeneric	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline void assignGeneric(const OtherDerived& other)$/;"	f	class:Eigen::SparseMatrixBase
assignProduct	include/Eigen/src/Core/PermutationMatrix.h	/^    void assignProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:Eigen::PermutationBase
assignProduct	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& assignProduct(const TriangularProduct<Mode, LhsIsTriangular, Lhs, LhsIsVector, Rhs, RhsIsVector>& prod, const Scalar& alpha)$/;"	f	class:Eigen::TriangularView
assignProduct	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^TriangularView<MatrixType,UpLo>& TriangularView<MatrixType,UpLo>::assignProduct(const ProductBase<ProductDerived, _Lhs,_Rhs>& prod, const Scalar& alpha)$/;"	f	class:Eigen::TriangularView
assignTranspose	include/Eigen/src/Core/PermutationMatrix.h	/^    void assignTranspose(const PermutationBase<OtherDerived>& other)$/;"	f	class:Eigen::PermutationBase
assign_DefaultTraversal_CompleteUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_CompleteUnrolling$/;"	s	namespace:Eigen::internal
assign_DefaultTraversal_CompleteUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_CompleteUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:Eigen::internal
assign_DefaultTraversal_InnerUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_InnerUnrolling$/;"	s	namespace:Eigen::internal
assign_DefaultTraversal_InnerUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_InnerUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:Eigen::internal
assign_LinearTraversal_CompleteUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_LinearTraversal_CompleteUnrolling$/;"	s	namespace:Eigen::internal
assign_LinearTraversal_CompleteUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_LinearTraversal_CompleteUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:Eigen::internal
assign_conj_scalar_eig2mkl	include/Eigen/src/Core/util/MKL_support.h	/^inline void assign_conj_scalar_eig2mkl<MKL_Complex16,dcomplex>(MKL_Complex16& mklScalar, const dcomplex& eigenScalar) {$/;"	f	namespace:Eigen::internal
assign_conj_scalar_eig2mkl	include/Eigen/src/Core/util/MKL_support.h	/^inline void assign_conj_scalar_eig2mkl<MKL_Complex8,scomplex>(MKL_Complex8& mklScalar, const scomplex& eigenScalar) {$/;"	f	namespace:Eigen::internal
assign_conj_scalar_eig2mkl	include/Eigen/src/Core/util/MKL_support.h	/^static inline void assign_conj_scalar_eig2mkl(MKLType& mklScalar, const EigenType& eigenScalar) {$/;"	f	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, DefaultTraversal, CompleteUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, DefaultTraversal, InnerUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, DefaultTraversal, NoUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InnerVectorizedTraversal, CompleteUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InnerVectorizedTraversal, InnerUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InnerVectorizedTraversal, NoUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InvalidTraversal, Unrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearTraversal, CompleteUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearTraversal, NoUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearVectorizedTraversal, CompleteUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearVectorizedTraversal, NoUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_impl	include/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, SliceVectorizedTraversal, NoUnrolling, Version>$/;"	s	namespace:Eigen::internal
assign_innervec_CompleteUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_innervec_CompleteUnrolling$/;"	s	namespace:Eigen::internal
assign_innervec_CompleteUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_innervec_CompleteUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:Eigen::internal
assign_innervec_InnerUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_innervec_InnerUnrolling$/;"	s	namespace:Eigen::internal
assign_innervec_InnerUnrolling	include/Eigen/src/Core/Assign.h	/^struct assign_innervec_InnerUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:Eigen::internal
assign_scalar_eig2mkl	include/Eigen/src/Core/util/MKL_support.h	/^inline void assign_scalar_eig2mkl<MKL_Complex16,dcomplex>(MKL_Complex16& mklScalar, const dcomplex& eigenScalar) {$/;"	f	namespace:Eigen::internal
assign_scalar_eig2mkl	include/Eigen/src/Core/util/MKL_support.h	/^inline void assign_scalar_eig2mkl<MKL_Complex8,scomplex>(MKL_Complex8& mklScalar, const scomplex& eigenScalar) {$/;"	f	namespace:Eigen::internal
assign_scalar_eig2mkl	include/Eigen/src/Core/util/MKL_support.h	/^static inline void assign_scalar_eig2mkl(MKLType& mklScalar, const EigenType& eigenScalar) {$/;"	f	namespace:Eigen::internal
assign_selector	include/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,false,false> {$/;"	s	namespace:Eigen::internal
assign_selector	include/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,false,true> {$/;"	s	namespace:Eigen::internal
assign_selector	include/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,true,false> {$/;"	s	namespace:Eigen::internal
assign_selector	include/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,true,true> {$/;"	s	namespace:Eigen::internal
assign_traits	include/Eigen/src/Core/Assign.h	/^struct assign_traits$/;"	s	namespace:Eigen::internal
at	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline Scalar at(Index key, const Scalar& defaultValue = Scalar(0)) const$/;"	f	class:Eigen::internal::CompressedStorage
atInRange	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline Scalar atInRange(size_t start, size_t end, Index key, const Scalar& defaultValue = Scalar(0)) const$/;"	f	class:Eigen::internal::CompressedStorage
atWithInsertion	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline Scalar& atWithInsertion(Index key, const Scalar& defaultValue = Scalar(0))$/;"	f	class:Eigen::internal::CompressedStorage
atanh2	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(atanh2, Scalar) atanh2(const Scalar& x, const Scalar& y)$/;"	f	namespace:Eigen::numext
atanh2_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct atanh2_default_impl$/;"	s	namespace:Eigen::internal
atanh2_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct atanh2_default_impl<Scalar, true>$/;"	s	namespace:Eigen::internal
atanh2_impl	include/Eigen/src/Core/MathFunctions.h	/^struct atanh2_impl : atanh2_default_impl<Scalar, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:Eigen::internal
atanh2_retval	include/Eigen/src/Core/MathFunctions.h	/^struct atanh2_retval$/;"	s	namespace:Eigen::internal
axis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Vector3& axis() { return m_axis; }$/;"	f	class:Eigen::AngleAxis
axis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  const Vector3& axis() const { return m_axis; }$/;"	f	class:Eigen::AngleAxis
axis	include/Eigen/src/Geometry/AngleAxis.h	/^  Vector3& axis() { return m_axis; }$/;"	f	class:Eigen::AngleAxis
axis	include/Eigen/src/Geometry/AngleAxis.h	/^  const Vector3& axis() const { return m_axis; }$/;"	f	class:Eigen::AngleAxis
b	include/Eigen/src/SVD/JacobiSVD.h	/^         b = MatrixType::RowsAtCompileTime != Dynamic &&$/;"	e	enum:Eigen::internal::qr_preconditioner_should_do_anything::__anon460
base	include/Eigen/src/Core/PlainObjectBase.h	/^    Base& base() { return *static_cast<Base*>(this); }$/;"	f	class:Eigen::PlainObjectBase
base	include/Eigen/src/Core/PlainObjectBase.h	/^    const Base& base() const { return *static_cast<const Base*>(this); }$/;"	f	class:Eigen::PlainObjectBase
base	include/base/graph.h	/^	namespace base {$/;"	n	namespace:msd
base	include/base/reader.h	/^	namespace base {$/;"	n	namespace:msd
base	include/base/reader_graph.h	/^	namespace base {$/;"	n	namespace:msd
betas	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    VectorType betas() const$/;"	f	class:Eigen::GeneralizedEigenSolver
bicgstab	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^bool bicgstab(const MatrixType& mat, const Rhs& rhs, Dest& x,$/;"	f	namespace:Eigen::internal
bidiagonal	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    const BidiagonalType& bidiagonal() const { return m_bidiagonal; }$/;"	f	class:Eigen::internal::UpperBidiagonalization
binaryExpr	include/Eigen/src/plugins/CommonCwiseBinaryOps.h	/^binaryExpr(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other, const CustomBinaryOp& func = CustomBinaryOp()) const$/;"	f
binary_result_of_select	include/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select {typedef ArgType0 type;};$/;"	s	namespace:Eigen::internal
binary_result_of_select	include/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select<Func, ArgType0, ArgType1, sizeof(has_std_result_type)>$/;"	s	namespace:Eigen::internal
binary_result_of_select	include/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select<Func, ArgType0, ArgType1, sizeof(has_tr1_result)>$/;"	s	namespace:Eigen::internal
blas_data_mapper	include/Eigen/src/Core/util/BlasUtil.h	/^    blas_data_mapper(Scalar* data, Index stride) : m_data(data), m_stride(stride) {}$/;"	f	class:Eigen::internal::blas_data_mapper
blas_data_mapper	include/Eigen/src/Core/util/BlasUtil.h	/^class blas_data_mapper$/;"	c	namespace:Eigen::internal
blas_traits	include/Eigen/src/Core/Transpose.h	/^struct blas_traits<SelfCwiseBinaryOp<BinOp,NestedXpr,Rhs> >$/;"	s	namespace:Eigen::internal
blas_traits	include/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<CwiseUnaryOp<scalar_conjugate_op<Scalar>, NestedXpr> >$/;"	s	namespace:Eigen::internal
blas_traits	include/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<CwiseUnaryOp<scalar_multiple_op<Scalar>, NestedXpr> >$/;"	s	namespace:Eigen::internal
blas_traits	include/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<CwiseUnaryOp<scalar_opposite_op<Scalar>, NestedXpr> >$/;"	s	namespace:Eigen::internal
blas_traits	include/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<Transpose<NestedXpr> >$/;"	s	namespace:Eigen::internal
blas_traits	include/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<const T>$/;"	s	namespace:Eigen::internal
blas_traits	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename XprType> struct blas_traits$/;"	s	namespace:Eigen::internal
block	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, BlockRows, BlockCols> block(Index startRow, Index startCol)$/;"	f
block	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, BlockRows, BlockCols> block(Index startRow, Index startCol, $/;"	f
block	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> block(Index startRow, Index startCol, Index blockRows, Index blockCols)$/;"	f
block	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, BlockRows, BlockCols> block(Index startRow, Index startCol) const$/;"	f
block	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, BlockRows, BlockCols> block(Index startRow, Index startCol,$/;"	f
block	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> block(Index startRow, Index startCol, Index blockRows, Index blockCols) const$/;"	f
blockA	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline LhsScalar* blockA() { return m_blockA; }$/;"	f	class:Eigen::internal::level3_blocking
blockB	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline RhsScalar* blockB() { return m_blockB; }$/;"	f	class:Eigen::internal::level3_blocking
blockW	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline RhsScalar* blockW() { return m_blockW; }$/;"	f	class:Eigen::internal::level3_blocking
blocked	include/Eigen/src/Cholesky/LLT.h	/^  static EIGEN_STRONG_INLINE typename MatrixType::Index blocked(MatrixType& mat)$/;"	f	struct:Eigen::internal::llt_inplace
blocked	include/Eigen/src/Cholesky/LLT.h	/^  static typename MatrixType::Index blocked(MatrixType& m)$/;"	f	struct:Eigen::internal::llt_inplace
blocked_lu	include/Eigen/src/LU/PartialPivLU.h	/^  static Index blocked_lu(Index rows, Index cols, Scalar* lu_data, Index luStride, PivIndex* row_transpositions, PivIndex& nb_transpositions, Index maxBlockSize=256)$/;"	f	struct:Eigen::internal::partial_lu_impl
blueNorm	include/Eigen/src/Core/StableNorm.h	/^MatrixBase<Derived>::blueNorm() const$/;"	f	class:Eigen::MatrixBase
blueNorm	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_blueNorm,RealScalar>::Type blueNorm() const$/;"	f	class:Eigen::VectorwiseOp
blueNorm	include/Eigen/src/SparseCore/SparseDot.h	/^SparseMatrixBase<Derived>::blueNorm() const$/;"	f	class:Eigen::SparseMatrixBase
blueNorm_impl	include/Eigen/src/Core/StableNorm.h	/^blueNorm_impl(const EigenBase<Derived>& _vec)$/;"	f	namespace:Eigen::internal
bottomLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> bottomLeftCorner()$/;"	f
bottomLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> bottomLeftCorner(Index cRows, Index cCols)$/;"	f
bottomLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> bottomLeftCorner(Index cRows, Index cCols)$/;"	f
bottomLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> bottomLeftCorner() const$/;"	f
bottomLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> bottomLeftCorner(Index cRows, Index cCols) const$/;"	f
bottomLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> bottomLeftCorner(Index cRows, Index cCols) const$/;"	f
bottomRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> bottomRightCorner()$/;"	f
bottomRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> bottomRightCorner(Index cRows, Index cCols)$/;"	f
bottomRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> bottomRightCorner(Index cRows, Index cCols)$/;"	f
bottomRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> bottomRightCorner() const$/;"	f
bottomRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> bottomRightCorner(Index cRows, Index cCols) const$/;"	f
bottomRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> bottomRightCorner(Index cRows, Index cCols) const$/;"	f
bottomRows	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowsBlockXpr bottomRows(Index n) const$/;"	f
bottomRows	include/Eigen/src/plugins/BlockMethods.h	/^inline RowsBlockXpr bottomRows(Index n)$/;"	f
bottomRows	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNRowsBlockXpr<N>::Type bottomRows(Index n = N) const$/;"	f
bottomRows	include/Eigen/src/plugins/BlockMethods.h	/^inline typename NRowsBlockXpr<N>::Type bottomRows(Index n = N)$/;"	f
bruteforce_det3_helper	include/Eigen/src/LU/Determinant.h	/^inline const typename Derived::Scalar bruteforce_det3_helper$/;"	f	namespace:Eigen::internal
bruteforce_det4_helper	include/Eigen/src/LU/Determinant.h	/^const typename Derived::Scalar bruteforce_det4_helper$/;"	f	namespace:Eigen::internal
c	include/Eigen/src/Jacobi/Jacobi.h	/^    Scalar c() const { return m_c; }$/;"	f	class:Eigen::JacobiRotation
c	include/Eigen/src/Jacobi/Jacobi.h	/^    Scalar& c() { return m_c; }$/;"	f	class:Eigen::JacobiRotation
c_to_fortran_numbering	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  void c_to_fortran_numbering (MatrixType& mat)$/;"	f	namespace:Eigen::internal
cast	include/Eigen/src/Core/MathFunctions.h	/^inline NewType cast(const OldType& x)$/;"	f	namespace:Eigen::internal
cast	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^           AlignedBox<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:Eigen::AlignedBox
cast	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline typename internal::cast_return_type<AngleAxis,AngleAxis<NewScalarType> >::type cast() const$/;"	f	class:Eigen::AngleAxis
cast	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^           Hyperplane<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:Eigen::Hyperplane
cast	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^           ParametrizedLine<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:Eigen::ParametrizedLine
cast	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline typename internal::cast_return_type<Quaternion,Quaternion<NewScalarType> >::type cast() const$/;"	f	class:Eigen::Quaternion
cast	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline typename internal::cast_return_type<Rotation2D,Rotation2D<NewScalarType> >::type cast() const$/;"	f	class:Eigen::Rotation2D
cast	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline typename internal::cast_return_type<Scaling,Scaling<NewScalarType,Dim> >::type cast() const$/;"	f	class:Eigen::Scaling
cast	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline typename internal::cast_return_type<Transform,Transform<NewScalarType,Dim> >::type cast() const$/;"	f	class:Eigen::Transform
cast	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline typename internal::cast_return_type<Translation,Translation<NewScalarType,Dim> >::type cast() const$/;"	f	class:Eigen::Translation
cast	include/Eigen/src/Geometry/AlignedBox.h	/^           AlignedBox<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:Eigen::AlignedBox
cast	include/Eigen/src/Geometry/AngleAxis.h	/^  inline typename internal::cast_return_type<AngleAxis,AngleAxis<NewScalarType> >::type cast() const$/;"	f	class:Eigen::AngleAxis
cast	include/Eigen/src/Geometry/Hyperplane.h	/^           Hyperplane<NewScalarType,AmbientDimAtCompileTime,Options> >::type cast() const$/;"	f	class:Eigen::Hyperplane
cast	include/Eigen/src/Geometry/ParametrizedLine.h	/^           ParametrizedLine<NewScalarType,AmbientDimAtCompileTime,Options> >::type cast() const$/;"	f	class:Eigen::ParametrizedLine
cast	include/Eigen/src/Geometry/Quaternion.h	/^  inline typename internal::cast_return_type<Derived,Quaternion<NewScalarType> >::type cast() const$/;"	f	class:Eigen::QuaternionBase
cast	include/Eigen/src/Geometry/Rotation2D.h	/^  inline typename internal::cast_return_type<Rotation2D,Rotation2D<NewScalarType> >::type cast() const$/;"	f	class:Eigen::Rotation2D
cast	include/Eigen/src/Geometry/Scaling.h	/^  inline UniformScaling<NewScalarType> cast() const$/;"	f	class:Eigen::UniformScaling
cast	include/Eigen/src/Geometry/Transform.h	/^  inline typename internal::cast_return_type<Transform,Transform<NewScalarType,Dim,Mode,Options> >::type cast() const$/;"	f	class:Eigen::Transform
cast	include/Eigen/src/Geometry/Translation.h	/^  inline typename internal::cast_return_type<Translation,Translation<NewScalarType,Dim> >::type cast() const$/;"	f	class:Eigen::Translation
cast	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^cast() const$/;"	f
cast_impl	include/Eigen/src/Core/MathFunctions.h	/^struct cast_impl$/;"	s	namespace:Eigen::internal
cast_to_pointer_type	include/Eigen/src/Core/Map.h	/^    inline PointerType cast_to_pointer_type(PointerArgType ptr) { return const_cast<PointerType>(ptr); }$/;"	f	class:Eigen::Map
cast_to_pointer_type	include/Eigen/src/Core/Map.h	/^    inline PointerType cast_to_pointer_type(PointerArgType ptr) { return ptr; }$/;"	f	class:Eigen::Map
cdiv	include/Eigen/src/Eigenvalues/EigenSolver.h	/^std::complex<Scalar> cdiv(const Scalar& xr, const Scalar& xi, const Scalar& yr, const Scalar& yi)$/;"	f	namespace:Eigen
center	include/Eigen/src/Geometry/AlignedBox.h	/^  center() const$/;"	f	class:Eigen::AlignedBox
centrality	centrality/betweeness.h	/^	namespace centrality {$/;"	n	namespace:msd
centrality	centrality/degree.h	/^	namespace centrality {$/;"	n	namespace:msd
centrality	centrality/eigen.h	/^	namespace centrality {$/;"	n	namespace:msd
checkSanity	include/Eigen/src/Core/MapBase.h	/^    void checkSanity() const$/;"	f	class:Eigen::MapBase
checkTransposeAliasing	include/Eigen/src/Core/Transpose.h	/^void DenseBase<Derived>::checkTransposeAliasing(const OtherDerived& other) const$/;"	f	class:Eigen::DenseBase
checkTransposeAliasing_impl	include/Eigen/src/Core/Transpose.h	/^struct checkTransposeAliasing_impl$/;"	s	namespace:Eigen::internal
checkTransposeAliasing_impl	include/Eigen/src/Core/Transpose.h	/^struct checkTransposeAliasing_impl<Derived, OtherDerived, false>$/;"	s	namespace:Eigen::internal
check_DenseIndex_is_signed	include/Eigen/src/Core/DenseBase.h	/^static inline void check_DenseIndex_is_signed() {$/;"	f	namespace:Eigen::internal
check_coordinates	include/Eigen/src/Core/TriangularMatrix.h	/^    void check_coordinates(Index row, Index col) const$/;"	f	class:Eigen::TriangularBase
check_coordinates_internal	include/Eigen/src/Core/TriangularMatrix.h	/^    void check_coordinates_internal(Index , Index ) const {}$/;"	f	class:Eigen::TriangularBase
check_coordinates_internal	include/Eigen/src/Core/TriangularMatrix.h	/^    void check_coordinates_internal(Index row, Index col) const$/;"	f	class:Eigen::TriangularBase
check_rows_cols_for_overflow	include/Eigen/src/Core/PlainObjectBase.h	/^template<> struct check_rows_cols_for_overflow<Dynamic> {$/;"	s	namespace:Eigen::internal
check_rows_cols_for_overflow	include/Eigen/src/Core/PlainObjectBase.h	/^template<int MaxSizeAtCompileTime> struct check_rows_cols_for_overflow {$/;"	s	namespace:Eigen::internal
check_size_for_overflow	include/Eigen/src/Core/util/Memory.h	/^EIGEN_ALWAYS_INLINE void check_size_for_overflow(size_t size)$/;"	f	namespace:Eigen::internal
check_static_allocation_size	include/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size> void check_static_allocation_size()$/;"	f	namespace:Eigen::internal
check_template_parameters	include/Eigen/src/SparseCore/SparseMatrix.h	/^  static void check_template_parameters()$/;"	f	class:Eigen::SparseMatrix
check_template_parameters	include/Eigen/src/SparseCore/SparseVector.h	/^    static void check_template_parameters()$/;"	f	class:Eigen::SparseVector
check_template_params	include/Eigen/src/Geometry/Transform.h	/^    static EIGEN_STRONG_INLINE void check_template_params()$/;"	f	class:Eigen::Transform
check_that_malloc_is_allowed	include/Eigen/src/Core/util/Memory.h	/^inline void check_that_malloc_is_allowed()$/;"	f	namespace:Eigen::internal
check_transpose_aliasing_compile_time_selector	include/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_compile_time_selector$/;"	s	namespace:Eigen::internal
check_transpose_aliasing_compile_time_selector	include/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_compile_time_selector<DestIsTransposed,CwiseBinaryOp<BinOp,DerivedA,DerivedB> >$/;"	s	namespace:Eigen::internal
check_transpose_aliasing_run_time_selector	include/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_run_time_selector$/;"	s	namespace:Eigen::internal
check_transpose_aliasing_run_time_selector	include/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_run_time_selector<Scalar,DestIsTransposed,CwiseBinaryOp<BinOp,DerivedA,DerivedB> >$/;"	s	namespace:Eigen::internal
cholmod	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    cholmod_common& cholmod() { return m_cholmod; }$/;"	f	class:Eigen::CholmodBase
cholmodCommon	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    cholmod_common *cholmodCommon() const { return &m_cc; }$/;"	f	class:Eigen::SPQR
cholmod_configure_matrix	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^void cholmod_configure_matrix(CholmodType& mat)$/;"	f	namespace:Eigen::internal
cj	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  conj_helper<LhsScalar,RhsScalar,ConjLhs,ConjRhs> cj;$/;"	m	class:Eigen::internal::gebp_traits
cj	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  conj_helper<ResPacket,ResPacket,ConjLhs,false> cj;$/;"	m	class:Eigen::internal::gebp_traits
cj	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  conj_helper<ResPacket,ResPacket,false,ConjRhs> cj;$/;"	m	class:Eigen::internal::gebp_traits
clamp	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& clamp(const AlignedBox& b)$/;"	f	class:Eigen::AlignedBox
clamp	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& clamp(const AlignedBox& b)$/;"	f	class:Eigen::AlignedBox
clean	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void clean()$/;"	f	class:Eigen::PastixBase
clear	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline void clear() { m_size = 0; }$/;"	f	class:Eigen::internal::CompressedStorage
clear	include/base/graph.h	/^			void Graph<T>::clear()$/;"	f	class:msd::base::Graph
clearFactors	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void clearFactors()$/;"	f	class:Eigen::SuperLUBase
clear_mark	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static inline  Index clear_mark  \/* return the new value for tag_mark *\/$/;"	f	namespace:internal
coeff	include/Eigen/src/Core/ArrayWrapper.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::ArrayWrapper
coeff	include/Eigen/src/Core/ArrayWrapper.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::MatrixWrapper
coeff	include/Eigen/src/Core/ArrayWrapper.h	/^    inline CoeffReturnType coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::ArrayWrapper
coeff	include/Eigen/src/Core/ArrayWrapper.h	/^    inline CoeffReturnType coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::MatrixWrapper
coeff	include/Eigen/src/Core/Block.h	/^    EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::internal::BlockImpl_dense
coeff	include/Eigen/src/Core/Block.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::internal::BlockImpl_dense
coeff	include/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:Eigen::CwiseBinaryOpImpl
coeff	include/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::CwiseBinaryOpImpl
coeff	include/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:Eigen::CwiseNullaryOp
coeff	include/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::CwiseNullaryOp
coeff	include/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:Eigen::CwiseUnaryOpImpl
coeff	include/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::CwiseUnaryOpImpl
coeff	include/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::CwiseUnaryViewImpl
coeff	include/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Eigen::CwiseUnaryViewImpl
coeff	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Eigen::DenseCoeffsBase
coeff	include/Eigen/src/Core/DenseCoeffsBase.h	/^    coeff(Index index) const$/;"	f	class:Eigen::DenseCoeffsBase
coeff	include/Eigen/src/Core/Diagonal.h	/^    inline CoeffReturnType coeff(Index idx) const$/;"	f	class:Eigen::Diagonal
coeff	include/Eigen/src/Core/Diagonal.h	/^    inline CoeffReturnType coeff(Index row, Index) const$/;"	f	class:Eigen::Diagonal
coeff	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index idx) const$/;"	f	class:Eigen::DiagonalProduct
coeff	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::DiagonalProduct
coeff	include/Eigen/src/Core/Flagged.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::Flagged
coeff	include/Eigen/src/Core/Flagged.h	/^    inline CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Eigen::Flagged
coeff	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::ForceAlignedAccess
coeff	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Eigen::ForceAlignedAccess
coeff	include/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeff(Index index) const$/;"	f	class:Eigen::MapBase
coeff	include/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::MapBase
coeff	include/Eigen/src/Core/NestByValue.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::NestByValue
coeff	include/Eigen/src/Core/NestByValue.h	/^    inline const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Eigen::NestByValue
coeff	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeff(Index index) const$/;"	f	class:Eigen::PlainObjectBase
coeff	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::PlainObjectBase
coeff	include/Eigen/src/Core/Replicate.h	/^    inline Scalar coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::Replicate
coeff	include/Eigen/src/Core/ReturnByValue.h	/^    const Unusable& coeff(Index) const { return *reinterpret_cast<const Unusable*>(this); }$/;"	f	class:Eigen::ReturnByValue
coeff	include/Eigen/src/Core/ReturnByValue.h	/^    const Unusable& coeff(Index,Index) const { return *reinterpret_cast<const Unusable*>(this); }$/;"	f	class:Eigen::ReturnByValue
coeff	include/Eigen/src/Core/Reverse.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::Reverse
coeff	include/Eigen/src/Core/Reverse.h	/^    inline CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Eigen::Reverse
coeff	include/Eigen/src/Core/Select.h	/^    const Scalar coeff(Index i) const$/;"	f	class:Eigen::Select
coeff	include/Eigen/src/Core/Select.h	/^    const Scalar coeff(Index i, Index j) const$/;"	f	class:Eigen::Select
coeff	include/Eigen/src/Core/SelfAdjointView.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::SelfAdjointView
coeff	include/Eigen/src/Core/Transpose.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Eigen::TransposeImpl
coeff	include/Eigen/src/Core/Transpose.h	/^    inline CoeffReturnType coeff(Index rowId, Index colId) const$/;"	f	class:Eigen::TransposeImpl
coeff	include/Eigen/src/Core/Transpositions.h	/^    inline const Index& coeff(Index i) const { return indices().coeff(i); }$/;"	f	class:Eigen::TranspositionsBase
coeff	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar coeff(Index row, Index col) const  { return derived().coeff(row,col); }$/;"	f	class:Eigen::TriangularBase
coeff	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::TriangularView
coeff	include/Eigen/src/Core/VectorwiseOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index i, Index j) const$/;"	f	class:Eigen::PartialReduxExpr
coeff	include/Eigen/src/Core/VectorwiseOp.h	/^    const Scalar coeff(Index index) const$/;"	f	class:Eigen::PartialReduxExpr
coeff	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:Eigen::CoeffBasedProduct
coeff	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::CoeffBasedProduct
coeff	include/Eigen/src/Eigen2Support/Minor.h	/^    inline const Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::Minor
coeff	include/Eigen/src/Geometry/Homogeneous.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::Homogeneous
coeff	include/Eigen/src/SparseCore/AmbiVector.h	/^_Scalar& AmbiVector<_Scalar,_Index>::coeff(_Index i)$/;"	f	class:Eigen::internal::AmbiVector
coeff	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::MappedSparseMatrix
coeff	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline const Scalar coeff(int index) const$/;"	f	class:Eigen::BlockImpl
coeff	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline const Scalar coeff(int row, int col) const$/;"	f	class:Eigen::BlockImpl
coeff	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::SparseMatrix
coeff	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar coeff(Index i) const$/;"	f	class:Eigen::SparseVector
coeff	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Eigen::SparseVector
coeffByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeffByOuterInner(Index outer, Index inner) const$/;"	f	class:Eigen::DenseCoeffsBase
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::ArrayWrapper
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::MatrixWrapper
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index rowId, Index colId)$/;"	f	class:Eigen::ArrayWrapper
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index rowId, Index colId)$/;"	f	class:Eigen::MatrixWrapper
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::ArrayWrapper
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::MatrixWrapper
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index rowId, Index colId) const$/;"	f	class:Eigen::ArrayWrapper
coeffRef	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index rowId, Index colId) const$/;"	f	class:Eigen::MatrixWrapper
coeffRef	include/Eigen/src/Core/Block.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::internal::BlockImpl_dense
coeffRef	include/Eigen/src/Core/Block.h	/^    inline Scalar& coeffRef(Index rowId, Index colId)$/;"	f	class:Eigen::internal::BlockImpl_dense
coeffRef	include/Eigen/src/Core/Block.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::internal::BlockImpl_dense
coeffRef	include/Eigen/src/Core/Block.h	/^    inline const Scalar& coeffRef(Index rowId, Index colId) const$/;"	f	class:Eigen::internal::BlockImpl_dense
coeffRef	include/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index index)$/;"	f	class:Eigen::CwiseUnaryViewImpl
coeffRef	include/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::CwiseUnaryViewImpl
coeffRef	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::DenseCoeffsBase
coeffRef	include/Eigen/src/Core/DenseCoeffsBase.h	/^    coeffRef(Index index)$/;"	f	class:Eigen::DenseCoeffsBase
coeffRef	include/Eigen/src/Core/Diagonal.h	/^    inline Scalar& coeffRef(Index idx)$/;"	f	class:Eigen::Diagonal
coeffRef	include/Eigen/src/Core/Diagonal.h	/^    inline Scalar& coeffRef(Index row, Index)$/;"	f	class:Eigen::Diagonal
coeffRef	include/Eigen/src/Core/Diagonal.h	/^    inline const Scalar& coeffRef(Index idx) const$/;"	f	class:Eigen::Diagonal
coeffRef	include/Eigen/src/Core/Diagonal.h	/^    inline const Scalar& coeffRef(Index row, Index) const$/;"	f	class:Eigen::Diagonal
coeffRef	include/Eigen/src/Core/Flagged.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::Flagged
coeffRef	include/Eigen/src/Core/Flagged.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::Flagged
coeffRef	include/Eigen/src/Core/Flagged.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::Flagged
coeffRef	include/Eigen/src/Core/Flagged.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:Eigen::Flagged
coeffRef	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::ForceAlignedAccess
coeffRef	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::ForceAlignedAccess
coeffRef	include/Eigen/src/Core/MapBase.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index index)$/;"	f	class:Eigen::MapBase
coeffRef	include/Eigen/src/Core/MapBase.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index row, Index col)$/;"	f	class:Eigen::MapBase
coeffRef	include/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::MapBase
coeffRef	include/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeffRef(Index rowId, Index colId) const$/;"	f	class:Eigen::MapBase
coeffRef	include/Eigen/src/Core/NestByValue.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::NestByValue
coeffRef	include/Eigen/src/Core/NestByValue.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::NestByValue
coeffRef	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index index)$/;"	f	class:Eigen::PlainObjectBase
coeffRef	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)$/;"	f	class:Eigen::PlainObjectBase
coeffRef	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::PlainObjectBase
coeffRef	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeffRef(Index rowId, Index colId) const$/;"	f	class:Eigen::PlainObjectBase
coeffRef	include/Eigen/src/Core/ProductBase.h	/^    const Scalar& coeffRef(Index i) const$/;"	f	namespace:Eigen
coeffRef	include/Eigen/src/Core/ProductBase.h	/^    const Scalar& coeffRef(Index row, Index col) const$/;"	f	namespace:Eigen
coeffRef	include/Eigen/src/Core/ReturnByValue.h	/^    Unusable& coeffRef(Index) { return *reinterpret_cast<Unusable*>(this); }$/;"	f	class:Eigen::ReturnByValue
coeffRef	include/Eigen/src/Core/ReturnByValue.h	/^    Unusable& coeffRef(Index,Index) { return *reinterpret_cast<Unusable*>(this); }$/;"	f	class:Eigen::ReturnByValue
coeffRef	include/Eigen/src/Core/Reverse.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::Reverse
coeffRef	include/Eigen/src/Core/Reverse.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::Reverse
coeffRef	include/Eigen/src/Core/SelfAdjointView.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::SelfAdjointView
coeffRef	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::SelfCwiseBinaryOp
coeffRef	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::SelfCwiseBinaryOp
coeffRef	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::SelfCwiseBinaryOp
coeffRef	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:Eigen::SelfCwiseBinaryOp
coeffRef	include/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::SwapWrapper
coeffRef	include/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Eigen::SwapWrapper
coeffRef	include/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index rowId, Index colId) const$/;"	f	class:Eigen::SwapWrapper
coeffRef	include/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index rowId, Index colId)$/;"	f	class:Eigen::SwapWrapper
coeffRef	include/Eigen/src/Core/Transpose.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index index)$/;"	f	class:Eigen::TransposeImpl
coeffRef	include/Eigen/src/Core/Transpose.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index rowId, Index colId)$/;"	f	class:Eigen::TransposeImpl
coeffRef	include/Eigen/src/Core/Transpose.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Eigen::TransposeImpl
coeffRef	include/Eigen/src/Core/Transpose.h	/^    inline const Scalar& coeffRef(Index rowId, Index colId) const$/;"	f	class:Eigen::TransposeImpl
coeffRef	include/Eigen/src/Core/Transpositions.h	/^    inline Index& coeffRef(Index i) { return indices().coeffRef(i); }$/;"	f	class:Eigen::TranspositionsBase
coeffRef	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col) { return derived().coeffRef(row,col); }$/;"	f	class:Eigen::TriangularBase
coeffRef	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::TriangularView
coeffRef	include/Eigen/src/Eigen2Support/Minor.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::Minor
coeffRef	include/Eigen/src/SparseCore/AmbiVector.h	/^_Scalar& AmbiVector<_Scalar,_Index>::coeffRef(_Index i)$/;"	f	class:Eigen::internal::AmbiVector
coeffRef	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::MappedSparseMatrix
coeffRef	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline Scalar& coeffRef(int index)$/;"	f	class:Eigen::BlockImpl
coeffRef	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline Scalar& coeffRef(int row, int col)$/;"	f	class:Eigen::BlockImpl
coeffRef	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::SparseMatrix
coeffRef	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar& coeffRef(Index i)$/;"	f	class:Eigen::SparseVector
coeffRef	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Eigen::SparseVector
coeffRefByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    coeffRefByOuterInner(Index outer, Index inner)$/;"	f	class:Eigen::DenseCoeffsBase
coeffSeparator	include/Eigen/src/Core/IO.h	/^  std::string coeffSeparator;$/;"	m	struct:Eigen::IOFormat
coeff_visitor	include/Eigen/src/Core/Visitor.h	/^struct coeff_visitor$/;"	s	namespace:Eigen::internal
coeffs	include/Eigen/src/Core/BandMatrix.h	/^    inline CoefficientsType& coeffs() { return derived().coeffs(); }$/;"	f	class:Eigen::internal::BandMatrixBase
coeffs	include/Eigen/src/Core/BandMatrix.h	/^    inline CoefficientsType& coeffs() { return m_coeffs; }$/;"	f	class:Eigen::internal::BandMatrix
coeffs	include/Eigen/src/Core/BandMatrix.h	/^    inline const CoefficientsType& coeffs() const { return derived().coeffs(); }$/;"	f	class:Eigen::internal::BandMatrixBase
coeffs	include/Eigen/src/Core/BandMatrix.h	/^    inline const CoefficientsType& coeffs() const { return m_coeffs; }$/;"	f	class:Eigen::internal::BandMatrix
coeffs	include/Eigen/src/Core/BandMatrix.h	/^    inline const CoefficientsType& coeffs() const { return m_coeffs; }$/;"	f	class:Eigen::internal::BandMatrixWrapper
coeffs	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Eigen::Hyperplane
coeffs	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Eigen::Hyperplane
coeffs	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Eigen::Quaternion
coeffs	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Eigen::Quaternion
coeffs	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  VectorType& coeffs() { return m_coeffs; }$/;"	f	class:Eigen::Scaling
coeffs	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  const VectorType& coeffs() const { return m_coeffs; }$/;"	f	class:Eigen::Scaling
coeffs	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Eigen::Hyperplane
coeffs	include/Eigen/src/Geometry/Hyperplane.h	/^  inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Eigen::Hyperplane
coeffs	include/Eigen/src/Geometry/Quaternion.h	/^    inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Eigen::Map
coeffs	include/Eigen/src/Geometry/Quaternion.h	/^    inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Eigen::Map
coeffs	include/Eigen/src/Geometry/Quaternion.h	/^    inline const Coefficients& coeffs() const { return m_coeffs;}$/;"	f	class:Eigen::Map
coeffs	include/Eigen/src/Geometry/Quaternion.h	/^  inline Coefficients& coeffs() { return m_coeffs;}$/;"	f	class:Eigen::Quaternion
coeffs	include/Eigen/src/Geometry/Quaternion.h	/^  inline const Coefficients& coeffs() const { return m_coeffs;}$/;"	f	class:Eigen::Quaternion
coeffs	include/Eigen/src/Geometry/Quaternion.h	/^  inline const typename internal::traits<Derived>::Coefficients& coeffs() const { return derived().coeffs(); }$/;"	f	class:Eigen::QuaternionBase
coeffs	include/Eigen/src/Geometry/Quaternion.h	/^  inline typename internal::traits<Derived>::Coefficients& coeffs() { return derived().coeffs(); }$/;"	f	class:Eigen::QuaternionBase
cofactor_3x3	include/Eigen/src/LU/Inverse.h	/^inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)$/;"	f	namespace:Eigen::internal
cofactor_4x4	include/Eigen/src/LU/Inverse.h	/^inline typename MatrixType::Scalar cofactor_4x4(const MatrixType& matrix)$/;"	f	namespace:Eigen::internal
col	include/Eigen/src/Core/BandMatrix.h	/^    inline Block<CoefficientsType,Dynamic,1> col(Index i)$/;"	f	class:Eigen::internal::BandMatrixBase
col	include/Eigen/src/Core/BooleanRedux.h	/^    col = (UnrollCount-1) \/ Derived::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::all_unroller::__anon50
col	include/Eigen/src/Core/BooleanRedux.h	/^    col = (UnrollCount-1) \/ Derived::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::any_unroller::__anon51
col	include/Eigen/src/Core/CoreIterators.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:Eigen::DenseBase::InnerIterator
col	include/Eigen/src/Core/SelfAdjointView.h	/^    col = (UnrollCount-1) \/ Derived1::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::triangular_assignment_selector::__anon246
col	include/Eigen/src/Core/SelfAdjointView.h	/^    col = (UnrollCount-1) \/ Derived1::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::triangular_assignment_selector::__anon247
col	include/Eigen/src/Core/TriangularMatrix.h	/^    col = (UnrollCount-1) \/ Derived1::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::triangular_assignment_selector::__anon259
col	include/Eigen/src/Core/Visitor.h	/^    col = (UnrollCount-1) \/ Derived::RowsAtCompileTime,$/;"	e	enum:Eigen::internal::visitor_impl::__anon335
col	include/Eigen/src/Core/Visitor.h	/^  Index row, col;$/;"	m	struct:Eigen::internal::coeff_visitor
col	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
col	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
col	include/Eigen/src/SparseCore/SparseBlock.h	/^        inline Index col() const { return IsRowMajor ? this->index() : m_outer; }$/;"	f	class:Eigen::BlockImpl::InnerIterator
col	include/Eigen/src/SparseCore/SparseBlock.h	/^        inline Index col() const { return IsRowMajor ? this->index() : m_outer; }$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
col	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index col()    const { return Base::col()   - m_block.m_startCol.value(); }$/;"	f	class:Eigen::BlockImpl::InnerIterator
col	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index col()    const { return Base::col()   - m_block.m_startCol.value(); }$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
col	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return Lhs::IsRowMajor ? index() : m_lhsIter.col(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
col	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return m_lhsIter.col(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
col	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return m_rhsIter.col(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
col	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    inline Index col() const { return Transpose ? Base::index() : m_outer; }$/;"	f	class:Eigen::SparseDenseOuterProduct::InnerIterator
col	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    inline Index col() const { return m_outer; }$/;"	f	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
col	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
col	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
col	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typename TransposeImpl<MatrixType,Sparse>::Index col() const { return Base::row(); }$/;"	f	class:Eigen::TransposeImpl::InnerIterator
col	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typename TransposeImpl<MatrixType,Sparse>::Index col() const { return Base::row(); }$/;"	f	class:Eigen::TransposeImpl::ReverseInnerIterator
col	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Index col() const { return (MatrixType::Flags&RowMajorBit ? this->index() : Base::outer()); }$/;"	f	class:Eigen::SparseTriangularView::InnerIterator
col	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Index col() const { return Base::col(); }$/;"	f	class:Eigen::SparseTriangularView::ReverseInnerIterator
col	include/Eigen/src/SparseCore/SparseUtil.h	/^  const Index& col() const { return m_col; }$/;"	f	class:Eigen::Triplet
col	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Index col() const { return IsColVector ? 0 : index(); }$/;"	f	class:Eigen::SparseVector::InnerIterator
col	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Index col() const { return IsColVector ? 0 : index(); }$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
col	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline Index col() const { return m_outer; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
col	include/Eigen/src/plugins/BlockMethods.h	/^inline ColXpr col(Index i)$/;"	f
col	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstColXpr col(Index i) const$/;"	f
colIndexByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner) const$/;"	f	class:Eigen::DenseCoeffsBase
colIndexPtr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* colIndexPtr()$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
colIndexPtr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index* colIndexPtr() const$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
colOffset	include/Eigen/src/Core/Diagonal.h	/^    EIGEN_STRONG_INLINE Index colOffset() const { return m_index.value()>0 ? m_index.value() : 0; }$/;"	f	class:Eigen::Diagonal
colPivHouseholderQr	include/Eigen/src/QR/ColPivHouseholderQR.h	/^MatrixBase<Derived>::colPivHouseholderQr() const$/;"	f	class:Eigen::MatrixBase
colStride	include/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index colStride() const$/;"	f	class:Eigen::DenseCoeffsBase
colToSup	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* colToSup()  { return m_col_to_sup; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
colToSup	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index* colToSup() const$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
colamd	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static bool colamd(Index n_row, Index n_col, Index Alen, Index *A, Index *p, double knobs[COLAMD_KNOBS], Index stats[COLAMD_STATS])$/;"	f	namespace:internal
colamd_c	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^inline Index colamd_c(Index n_col) $/;"	f	namespace:internal
colamd_col	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^struct colamd_col$/;"	s	namespace:internal
colamd_r	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^inline Index  colamd_r(Index n_row)$/;"	f	namespace:internal
colamd_recommended	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^inline Index colamd_recommended ( Index nnz, Index n_row, Index n_col)$/;"	f	namespace:internal
colamd_set_defaults	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static inline void colamd_set_defaults(double knobs[COLAMD_KNOBS])$/;"	f	namespace:internal
colblk	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index colblk; \/\/ The minimum column dimension for 2-D blocking to be used;$/;"	m	struct:Eigen::internal::perfvalues
coletree	include/Eigen/src/SparseCore/SparseColEtree.h	/^int coletree(const MatrixType& mat, IndexVector& parent, IndexVector& firstRowElt, typename MatrixType::Index *perm=0)$/;"	f	namespace:Eigen::internal
cols	include/Eigen/src/Cholesky/LDLT.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::LDLT
cols	include/Eigen/src/Cholesky/LLT.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::LLT
cols	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    inline Index cols() const { return m_cholmodFactor->n; }$/;"	f	class:Eigen::CholmodBase
cols	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:Eigen::ArrayWrapper
cols	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:Eigen::MatrixWrapper
cols	include/Eigen/src/Core/BandMatrix.h	/^    inline Index cols() const { return m_coeffs.cols(); }$/;"	f	class:Eigen::internal::BandMatrix
cols	include/Eigen/src/Core/BandMatrix.h	/^    inline Index cols() const { return m_coeffs.cols(); }$/;"	f	class:Eigen::internal::BandMatrixWrapper
cols	include/Eigen/src/Core/Block.h	/^    inline Index cols() const { return m_blockCols.value(); }$/;"	f	class:Eigen::internal::BlockImpl_dense
cols	include/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index cols() const {$/;"	f	class:Eigen::CwiseBinaryOp
cols	include/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_cols.value(); }$/;"	f	class:Eigen::CwiseNullaryOp
cols	include/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_xpr.cols(); }$/;"	f	class:Eigen::CwiseUnaryOp
cols	include/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::CwiseUnaryView
cols	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex cols() const {return m_cols;}$/;"	f	class:Eigen::DenseStorage
cols	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex cols(void) const {return _Cols;}$/;"	f	class:Eigen::DenseStorage
cols	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex cols(void) const {return m_cols;}$/;"	f	class:Eigen::DenseStorage
cols	include/Eigen/src/Core/DenseStorage.h	/^    static inline DenseIndex cols(void) {return _Cols;}$/;"	f	class:Eigen::DenseStorage
cols	include/Eigen/src/Core/Diagonal.h	/^    inline Index cols() const { return 1; }$/;"	f	class:Eigen::Diagonal
cols	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline Index cols() const { return diagonal().size(); }$/;"	f	class:Eigen::DiagonalBase
cols	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::DiagonalProduct
cols	include/Eigen/src/Core/EigenBase.h	/^  inline Index cols() const { return derived().cols(); }$/;"	f	struct:Eigen::EigenBase
cols	include/Eigen/src/Core/Flagged.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::Flagged
cols	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:Eigen::ForceAlignedAccess
cols	include/Eigen/src/Core/MapBase.h	/^    inline Index cols() const { return m_cols.value(); }$/;"	f	class:Eigen::MapBase
cols	include/Eigen/src/Core/NestByValue.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:Eigen::NestByValue
cols	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Index cols() const { return Index(indices().size()); }$/;"	f	class:Eigen::PermutationBase
cols	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	struct:Eigen::internal::permut_matrix_product_retval
cols	include/Eigen/src/Core/PermutationMatrix.h	/^    inline int cols() const { return m_permutation.cols(); }$/;"	f	class:Eigen::Transpose
cols	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_storage.cols(); }$/;"	f	class:Eigen::PlainObjectBase
cols	include/Eigen/src/Core/ProductBase.h	/^      eigen_assert(this->rows() == 1 && this->cols() == 1);$/;"	t	class:Eigen::ProductBase
cols	include/Eigen/src/Core/Replicate.h	/^    inline Index cols() const { return m_matrix.cols() * m_colFactor.value(); }$/;"	f	class:Eigen::Replicate
cols	include/Eigen/src/Core/ReturnByValue.h	/^    inline Index cols() const { return static_cast<const Derived*>(this)->cols(); }$/;"	f	class:Eigen::ReturnByValue
cols	include/Eigen/src/Core/Reverse.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::Reverse
cols	include/Eigen/src/Core/Select.h	/^    Index cols() const { return m_condition.cols(); }$/;"	f	class:Eigen::Select
cols	include/Eigen/src/Core/SelfAdjointView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SelfAdjointView
cols	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SelfCwiseBinaryOp
cols	include/Eigen/src/Core/SolveTriangular.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:Eigen::internal::triangular_solve_retval
cols	include/Eigen/src/Core/Swap.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:Eigen::SwapWrapper
cols	include/Eigen/src/Core/Transpose.h	/^    inline Index cols() const { return m_matrix.rows(); }$/;"	f	class:Eigen::Transpose
cols	include/Eigen/src/Core/Transpositions.h	/^    inline int cols() const { return m_matrix.cols(); }$/;"	f	struct:Eigen::internal::transposition_matrix_product_retval
cols	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index cols() const { return derived().cols(); }$/;"	f	class:Eigen::TriangularBase
cols	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::TriangularView
cols	include/Eigen/src/Core/VectorwiseOp.h	/^    Index cols() const { return (Direction==Horizontal ? 1 : m_matrix.cols()); }$/;"	f	class:Eigen::PartialReduxExpr
cols	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_rhs.cols(); }$/;"	f	class:Eigen::CoeffBasedProduct
cols	include/Eigen/src/Eigen2Support/Minor.h	/^    inline Index cols() const { return m_matrix.cols() - 1; }$/;"	f	class:Eigen::Minor
cols	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    Index cols() const { return m_hess.packedMatrix().cols(); }$/;"	f	struct:Eigen::internal::HessenbergDecompositionMatrixHReturnType
cols	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Index cols() const { return m_matrix.cols(); }$/;"	f	struct:Eigen::internal::TridiagonalizationMatrixTReturnType
cols	include/Eigen/src/Geometry/Homogeneous.h	/^    inline Index cols() const { return m_matrix.cols() + (int(Direction)==Horizontal ? 1 : 0); }$/;"	f	class:Eigen::Homogeneous
cols	include/Eigen/src/Geometry/Homogeneous.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:Eigen::internal::homogeneous_left_product_impl
cols	include/Eigen/src/Geometry/Homogeneous.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:Eigen::internal::homogeneous_right_product_impl
cols	include/Eigen/src/Householder/HouseholderSequence.h	/^    Index cols() const { return rows(); }$/;"	f	class:Eigen::HouseholderSequence
cols	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    Index cols() const { return m_invdiag.size(); }$/;"	f	class:Eigen::DiagonalPreconditioner
cols	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    Index cols() const { return m_lu.cols(); }$/;"	f	class:Eigen::IncompleteLUT
cols	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Index cols() const { return mp_matrix ? mp_matrix->cols() : 0; }$/;"	f	class:Eigen::IterativeSolverBase
cols	include/Eigen/src/LU/FullPivLU.h	/^    inline Index cols() const { return m_lu.cols(); }$/;"	f	class:Eigen::FullPivLU
cols	include/Eigen/src/LU/Inverse.h	/^  inline Index cols() const { return m_matrix.cols(); }$/;"	f	struct:Eigen::internal::inverse_impl
cols	include/Eigen/src/LU/PartialPivLU.h	/^    inline Index cols() const { return m_lu.cols(); }$/;"	f	class:Eigen::PartialPivLU
cols	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    inline Index cols() const { return m_size; }$/;"	f	class:Eigen::PastixBase
cols	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    inline Index cols() const { return m_size; }$/;"	f	class:Eigen::PardisoImpl
cols	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index cols() const { return m_qr.cols(); }$/;"	f	class:Eigen::ColPivHouseholderQR
cols	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    Index cols() const { return m_qr.rows(); }$/;"	f	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
cols	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index cols() const { return m_qr.cols(); }$/;"	f	class:Eigen::FullPivHouseholderQR
cols	include/Eigen/src/QR/HouseholderQR.h	/^    inline Index cols() const { return m_qr.cols(); }$/;"	f	class:Eigen::HouseholderQR
cols	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    inline Index cols() const { return m_cR->ncol; }$/;"	f	class:Eigen::SPQR
cols	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  inline Index cols() const { return m_other.cols(); }$/;"	f	struct:Eigen::SPQR_QProduct
cols	include/Eigen/src/SVD/JacobiSVD.h	/^    inline Index cols() const { return m_cols; }$/;"	f	class:Eigen::JacobiSVD
cols	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SimplicialCholeskyBase
cols	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index cols() const { return IsRowMajor ? m_innerSize : m_outerSize; }$/;"	f	class:Eigen::MappedSparseMatrix
cols	include/Eigen/src/SparseCore/SparseBlock.h	/^    EIGEN_STRONG_INLINE Index cols() const { return IsRowMajor ? m_matrix.cols() : m_outerSize.value(); }$/;"	f	class:Eigen::BlockImpl
cols	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline int cols() const { return m_blockCols.value(); }$/;"	f	class:Eigen::BlockImpl
cols	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return Tr ? m_lhs.cols() : m_rhs.cols(); }$/;"	f	class:Eigen::SparseDenseOuterProduct
cols	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_rhs.cols(); }$/;"	f	class:Eigen::SparseDiagonalProduct
cols	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index cols() const { return IsRowMajor ? m_innerSize : m_outerSize; }$/;"	f	class:Eigen::SparseMatrix
cols	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Index cols() const { return derived().cols(); }$/;"	f	class:Eigen::SparseMatrixBase
cols	include/Eigen/src/SparseCore/SparsePermutation.h	/^    inline int cols() const { return m_matrix.cols(); }$/;"	f	struct:Eigen::internal::permut_sparsematrix_product_retval
cols	include/Eigen/src/SparseCore/SparseProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_rhs.cols(); }$/;"	f	class:Eigen::SparseSparseProduct
cols	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SparseSelfAdjointView
cols	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SparseSymmetricPermutationProduct
cols	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SparseTriangularView
cols	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE Index cols() const { return IsColVector ? 1 : m_size; }$/;"	f	class:Eigen::SparseVector
cols	include/Eigen/src/SparseCore/SparseView.h	/^  inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SparseView
cols	include/Eigen/src/SparseLU/SparseLU.h	/^    inline Index cols() const { return m_mat.cols(); }$/;"	f	class:Eigen::SparseLU
cols	include/Eigen/src/SparseLU/SparseLU.h	/^  Index cols() { return m_mapL.cols(); }$/;"	f	struct:Eigen::SparseLUMatrixLReturnType
cols	include/Eigen/src/SparseLU/SparseLU.h	/^  Index cols() { return m_mapL.cols(); }$/;"	f	struct:Eigen::SparseLUMatrixUReturnType
cols	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index cols() { return m_col; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
cols	include/Eigen/src/SparseQR/SparseQR.h	/^    inline Index cols() const { return m_pmat.cols();}$/;"	f	class:Eigen::SparseQR
cols	include/Eigen/src/SparseQR/SparseQR.h	/^  inline Index cols() const { return (std::min)(m_qr.rows(),m_qr.cols()); }$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
cols	include/Eigen/src/SparseQR/SparseQR.h	/^  inline Index cols() const { return m_other.cols(); }$/;"	f	struct:Eigen::SparseQR_QProduct
cols	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Eigen::SuperLUBase
cols	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline Index cols() const { return m_copyMatrix.cols(); }$/;"	f	class:Eigen::UmfPackLU
cols	include/Eigen/src/misc/Image.h	/^  inline Index cols() const { return m_cols; }$/;"	f	struct:Eigen::internal::image_retval_base
cols	include/Eigen/src/misc/Kernel.h	/^  inline Index cols() const { return m_cols; }$/;"	f	struct:Eigen::internal::kernel_retval_base
cols	include/Eigen/src/misc/Solve.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:Eigen::internal::solve_retval_base
cols	include/Eigen/src/misc/SparseSolve.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:Eigen::internal::solve_retval_with_guess
cols	include/Eigen/src/misc/SparseSolve.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:Eigen::internal::sparse_solve_retval_base
colsPermutation	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    const PermutationType& colsPermutation() const$/;"	f	class:Eigen::ColPivHouseholderQR
colsPermutation	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    const PermutationType& colsPermutation() const$/;"	f	class:Eigen::FullPivHouseholderQR
colsPermutation	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    PermutationType colsPermutation() const$/;"	f	class:Eigen::SPQR
colsPermutation	include/Eigen/src/SparseLU/SparseLU.h	/^    inline const PermutationType& colsPermutation() const$/;"	f	class:Eigen::SparseLU
colsPermutation	include/Eigen/src/SparseQR/SparseQR.h	/^    const PermutationType& colsPermutation() const$/;"	f	class:Eigen::SparseQR
cols_select	include/Eigen/src/Core/GeneralProduct.h	/^    cols_select = product_size_category<Cols,MaxCols>::value,$/;"	e	enum:Eigen::internal::product_type::__anon146
column_bmod	include/Eigen/src/SparseLU/SparseLU_column_bmod.h	/^Index SparseLUImpl<Scalar,Index>::column_bmod(const Index jcol, const Index nseg, BlockScalarVector dense, ScalarVector& tempv, BlockIndexVector segrep, BlockIndexVector repfnz, Index fpanelc, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
column_dfs	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^Index SparseLUImpl<Scalar,Index>::column_dfs(const Index m, const Index jcol, IndexVector& perm_r, Index maxsuper, Index& nseg,  BlockIndexVector lsub_col, IndexVector& segrep, BlockIndexVector repfnz, IndexVector& xprune, IndexVector& marker, IndexVector& parent, IndexVector& xplore, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
column_dfs_traits	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  column_dfs_traits(Index jcol, Index& jsuper, typename SparseLUImpl<Scalar, Index>::GlobalLU_t& glu, SparseLUImpl<Scalar, Index>& luImpl)$/;"	f	struct:Eigen::internal::column_dfs_traits
column_dfs_traits	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^struct column_dfs_traits : no_assignment_operator$/;"	s	namespace:Eigen::internal
colwise	include/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::colwise() const$/;"	f	class:Eigen::DenseBase
colwise	include/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::colwise()$/;"	f	class:Eigen::DenseBase
complex_schur_reduce_to_hessenberg	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^struct complex_schur_reduce_to_hessenberg$/;"	s	namespace:Eigen::internal
complex_schur_reduce_to_hessenberg	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^struct complex_schur_reduce_to_hessenberg<MatrixType, false>$/;"	s	namespace:Eigen::internal
compute	include/Eigen/src/Cholesky/LDLT.h	/^LDLT<MatrixType,_UpLo>& LDLT<MatrixType,_UpLo>::compute(const MatrixType& a)$/;"	f	class:Eigen::LDLT
compute	include/Eigen/src/Cholesky/LLT.h	/^LLT<MatrixType,_UpLo>& LLT<MatrixType,_UpLo>::compute(const MatrixType& a)$/;"	f	class:Eigen::LLT
compute	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    Derived& compute(const MatrixType& matrix)$/;"	f	class:Eigen::CholmodBase
compute	include/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:Eigen::SVD
compute	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^ComplexEigenSolver<MatrixType>::compute(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:Eigen::ComplexEigenSolver
compute	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^ComplexSchur<MatrixType>& ComplexSchur<MatrixType>::compute(const MatrixType& matrix, bool computeU)$/;"	f	class:Eigen::ComplexSchur
compute	include/Eigen/src/Eigenvalues/EigenSolver.h	/^EigenSolver<MatrixType>::compute(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:Eigen::EigenSolver
compute	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^GeneralizedEigenSolver<MatrixType>::compute(const MatrixType& A, const MatrixType& B, bool computeEigenvectors)$/;"	f	class:Eigen::GeneralizedEigenSolver
compute	include/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^compute(const MatrixType& matA, const MatrixType& matB, int options)$/;"	f	class:Eigen::GeneralizedSelfAdjointEigenSolver
compute	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecomposition& compute(const MatrixType& matrix)$/;"	f	class:Eigen::HessenbergDecomposition
compute	include/Eigen/src/Eigenvalues/RealQZ.h	/^    RealQZ<MatrixType>& RealQZ<MatrixType>::compute(const MatrixType& A_in, const MatrixType& B_in, bool computeQZ)$/;"	f	class:Eigen::RealQZ
compute	include/Eigen/src/Eigenvalues/RealSchur.h	/^RealSchur<MatrixType>& RealSchur<MatrixType>::compute(const MatrixType& matrix, bool computeU)$/;"	f	class:Eigen::RealSchur
compute	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    void compute(const MatrixType& matA, const MatrixType& matB, bool computeEigenvectors = true)$/;"	f	class:Eigen::SelfAdjointEigenSolver
compute	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    void compute(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:Eigen::SelfAdjointEigenSolver
compute	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^::compute(const MatrixType& matrix, int options)$/;"	f	class:Eigen::SelfAdjointEigenSolver
compute	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Tridiagonalization& compute(const MatrixType& matrix)$/;"	f	class:Eigen::Tridiagonalization
compute	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    DiagonalPreconditioner& compute(const MatType& mat)$/;"	f	class:Eigen::DiagonalPreconditioner
compute	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    IdentityPreconditioner& compute(const MatrixType& ) { return *this; }$/;"	f	class:Eigen::IdentityPreconditioner
compute	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    IncompleteLUT<Scalar>& compute(const MatrixType& amat)$/;"	f	class:Eigen::IncompleteLUT
compute	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Derived& compute(const MatrixType& A)$/;"	f	class:Eigen::IterativeSolverBase
compute	include/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>& FullPivLU<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:Eigen::FullPivLU
compute	include/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>& PartialPivLU<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:Eigen::PartialPivLU
compute	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void compute (const MatrixType& matrix)$/;"	f	class:Eigen::PastixLDLT
compute	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void compute (const MatrixType& matrix)$/;"	f	class:Eigen::PastixLLT
compute	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void compute (const MatrixType& matrix)$/;"	f	class:Eigen::PastixLU
compute	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^void PastixBase<Derived>::compute(ColSpMatrix& mat)$/;"	f	class:Eigen::PastixBase
compute	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^Derived& PardisoImpl<Derived>::compute(const MatrixType& a)$/;"	f	class:Eigen::PardisoImpl
compute	include/Eigen/src/QR/ColPivHouseholderQR.h	/^ColPivHouseholderQR<MatrixType>& ColPivHouseholderQR<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:Eigen::ColPivHouseholderQR
compute	include/Eigen/src/QR/FullPivHouseholderQR.h	/^FullPivHouseholderQR<MatrixType>& FullPivHouseholderQR<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:Eigen::FullPivHouseholderQR
compute	include/Eigen/src/QR/HouseholderQR.h	/^HouseholderQR<MatrixType>& HouseholderQR<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:Eigen::HouseholderQR
compute	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    void compute(const _MatrixType& matrix)$/;"	f	class:Eigen::SPQR
compute	include/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD& compute(const MatrixType& matrix)$/;"	f	class:Eigen::JacobiSVD
compute	include/Eigen/src/SVD/JacobiSVD.h	/^JacobiSVD<MatrixType, QRPreconditioner>::compute(const MatrixType& matrix, unsigned int computationOptions)$/;"	f	class:Eigen::JacobiSVD
compute	include/Eigen/src/SVD/UpperBidiagonalization.h	/^UpperBidiagonalization<_MatrixType>& UpperBidiagonalization<_MatrixType>::compute(const _MatrixType& matrix)$/;"	f	class:Eigen::internal::UpperBidiagonalization
compute	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialCholesky& compute(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialCholesky
compute	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialLDLT& compute(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialLDLT
compute	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialLLT& compute(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialLLT
compute	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void compute(const MatrixType& matrix)$/;"	f	class:Eigen::SimplicialCholeskyBase
compute	include/Eigen/src/SparseLU/SparseLU.h	/^    void compute (const MatrixType& matrix)$/;"	f	class:Eigen::SparseLU
compute	include/Eigen/src/SparseQR/SparseQR.h	/^    void compute(const MatrixType& mat)$/;"	f	class:Eigen::SparseQR
compute	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void compute(const MatrixType& matrix)$/;"	f	class:Eigen::SuperLUBase
compute	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void compute(const InputMatrixType& matrix)$/;"	f	class:Eigen::UmfPackLU
computeDirect	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^::computeDirect(const MatrixType& matrix, int options)$/;"	f	class:Eigen::SelfAdjointEigenSolver
computeFromHessenberg	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^ComplexSchur<MatrixType>& ComplexSchur<MatrixType>::computeFromHessenberg(const HessMatrixType& matrixH, const OrthMatrixType& matrixQ, bool computeU)$/;"	f	class:Eigen::ComplexSchur
computeFromHessenberg	include/Eigen/src/Eigenvalues/RealSchur.h	/^RealSchur<MatrixType>& RealSchur<MatrixType>::computeFromHessenberg(const HessMatrixType& matrixH, const OrthMatrixType& matrixQ,  bool computeU)$/;"	f	class:Eigen::RealSchur
computeImage	include/Eigen/src/Eigen2Support/LU.h	/^    void computeImage(ImageMatrixType *result) const$/;"	f	class:Eigen::LU
computeInverse	include/Eigen/src/Core/MatrixBase.h	/^    void computeInverse(MatrixBase<ResultType> *result) const {$/;"	f	class:Eigen::MatrixBase
computeInverse	include/Eigen/src/Eigen2Support/LU.h	/^    inline void computeInverse(ResultType *result) const$/;"	f	class:Eigen::LU
computeInverseAndDetWithCheck	include/Eigen/src/LU/Inverse.h	/^inline void MatrixBase<Derived>::computeInverseAndDetWithCheck($/;"	f	class:Eigen::MatrixBase
computeInverseWithCheck	include/Eigen/src/LU/Inverse.h	/^inline void MatrixBase<Derived>::computeInverseWithCheck($/;"	f	class:Eigen::MatrixBase
computeKernel	include/Eigen/src/Eigen2Support/LU.h	/^    void computeKernel(KernelMatrixType *result) const$/;"	f	class:Eigen::LU
computeNormOfT	include/Eigen/src/Eigenvalues/RealSchur.h	/^inline typename MatrixType::Scalar RealSchur<MatrixType>::computeNormOfT()$/;"	f	class:Eigen::RealSchur
computeNorms	include/Eigen/src/Eigenvalues/RealQZ.h	/^    inline void RealQZ<MatrixType>::computeNorms()$/;"	f	class:Eigen::RealQZ
computePositiveUnitary	include/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computePositiveUnitary(UnitaryType *positive,$/;"	f	class:Eigen::SVD
computeProductBlockingSizes	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline void computeProductBlockingSizes(SizeType& k, SizeType& m, SizeType& n)$/;"	f	namespace:Eigen::internal
computeProductBlockingSizes	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^void computeProductBlockingSizes(SizeType& k, SizeType& m, SizeType& n)$/;"	f	namespace:Eigen::internal
computeRoots	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^  static inline void computeRoots(const MatrixType& m, VectorType& roots)$/;"	f	struct:Eigen::internal::direct_selfadjoint_eigenvalues
computeRotationScaling	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^void Transform<Scalar,Dim>::computeRotationScaling(RotationMatrixType *rotation, ScalingMatrixType *scaling) const$/;"	f	class:Eigen::Transform
computeRotationScaling	include/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computeRotationScaling(RotationType *rotation, ScalingType *scaling) const$/;"	f	class:Eigen::SVD
computeRotationScaling	include/Eigen/src/Geometry/Transform.h	/^void Transform<Scalar,Dim,Mode,Options>::computeRotationScaling(RotationMatrixType *rotation, ScalingMatrixType *scaling) const$/;"	f	class:Eigen::Transform
computeScalingRotation	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^void Transform<Scalar,Dim>::computeScalingRotation(ScalingMatrixType *scaling, RotationMatrixType *rotation) const$/;"	f	class:Eigen::Transform
computeScalingRotation	include/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computeScalingRotation(ScalingType *scaling, RotationType *rotation) const$/;"	f	class:Eigen::SVD
computeScalingRotation	include/Eigen/src/Geometry/Transform.h	/^void Transform<Scalar,Dim,Mode,Options>::computeScalingRotation(ScalingMatrixType *scaling, RotationMatrixType *rotation) const$/;"	f	class:Eigen::Transform
computeShift	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^typename ComplexSchur<MatrixType>::ComplexScalar ComplexSchur<MatrixType>::computeShift(Index iu, Index iter)$/;"	f	class:Eigen::ComplexSchur
computeShift	include/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::computeShift(Index iu, Index iter, Scalar& exshift, Vector3s& shiftInfo)$/;"	f	class:Eigen::RealSchur
computeU	include/Eigen/src/SVD/JacobiSVD.h	/^    inline bool computeU() const { return m_computeFullU || m_computeThinU; }$/;"	f	class:Eigen::JacobiSVD
computeUnitaryPositive	include/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computeUnitaryPositive(UnitaryType *unitary,$/;"	f	class:Eigen::SVD
computeV	include/Eigen/src/SVD/JacobiSVD.h	/^    inline bool computeV() const { return m_computeFullV || m_computeThinV; }$/;"	f	class:Eigen::JacobiSVD
compute_inverse	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse$/;"	s	namespace:Eigen::internal
compute_inverse	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 1>$/;"	s	namespace:Eigen::internal
compute_inverse	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 2>$/;"	s	namespace:Eigen::internal
compute_inverse	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 3>$/;"	s	namespace:Eigen::internal
compute_inverse	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 4>$/;"	s	namespace:Eigen::internal
compute_inverse_and_det_with_check	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check { \/* nothing! general case not supported. *\/ };$/;"	s	namespace:Eigen::internal
compute_inverse_and_det_with_check	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 1>$/;"	s	namespace:Eigen::internal
compute_inverse_and_det_with_check	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 2>$/;"	s	namespace:Eigen::internal
compute_inverse_and_det_with_check	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 3>$/;"	s	namespace:Eigen::internal
compute_inverse_and_det_with_check	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 4>$/;"	s	namespace:Eigen::internal
compute_inverse_size2_helper	include/Eigen/src/LU/Inverse.h	/^inline void compute_inverse_size2_helper($/;"	f	namespace:Eigen::internal
compute_inverse_size3_helper	include/Eigen/src/LU/Inverse.h	/^inline void compute_inverse_size3_helper($/;"	f	namespace:Eigen::internal
compute_inverse_size4	include/Eigen/src/LU/Inverse.h	/^struct compute_inverse_size4$/;"	s	namespace:Eigen::internal
compute_inverse_size4	include/Eigen/src/LU/arch/Inverse_SSE.h	/^struct compute_inverse_size4<Architecture::SSE, double, MatrixType, ResultType>$/;"	s	namespace:Eigen::internal
compute_inverse_size4	include/Eigen/src/LU/arch/Inverse_SSE.h	/^struct compute_inverse_size4<Architecture::SSE, float, MatrixType, ResultType>$/;"	s	namespace:Eigen::internal
conditionMatrix	include/Eigen/src/Core/Select.h	/^    const ConditionMatrixType& conditionMatrix() const$/;"	f	class:Eigen::Select
conditional	include/Eigen/src/Core/util/Meta.h	/^struct conditional <false, Then, Else> { typedef Else type; };$/;"	s	namespace:Eigen::internal
conditional	include/Eigen/src/Core/util/Meta.h	/^struct conditional { typedef Then type; };$/;"	s	namespace:Eigen::internal
conditional_aligned_delete	include/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline void conditional_aligned_delete(T *ptr, size_t size)$/;"	f	namespace:Eigen::internal
conditional_aligned_delete_auto	include/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline void conditional_aligned_delete_auto(T *ptr, size_t size)$/;"	f	namespace:Eigen::internal
conditional_aligned_free	include/Eigen/src/Core/util/Memory.h	/^template<> inline void conditional_aligned_free<false>(void *ptr)$/;"	f	namespace:Eigen::internal
conditional_aligned_free	include/Eigen/src/Core/util/Memory.h	/^template<bool Align> inline void conditional_aligned_free(void *ptr)$/;"	f	namespace:Eigen::internal
conditional_aligned_malloc	include/Eigen/src/Core/util/Memory.h	/^template<> inline void* conditional_aligned_malloc<false>(size_t size)$/;"	f	namespace:Eigen::internal
conditional_aligned_malloc	include/Eigen/src/Core/util/Memory.h	/^template<bool Align> inline void* conditional_aligned_malloc(size_t size)$/;"	f	namespace:Eigen::internal
conditional_aligned_new	include/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_new(size_t size)$/;"	f	namespace:Eigen::internal
conditional_aligned_new_auto	include/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_new_auto(size_t size)$/;"	f	namespace:Eigen::internal
conditional_aligned_realloc	include/Eigen/src/Core/util/Memory.h	/^template<> inline void* conditional_aligned_realloc<false>(void* ptr, size_t new_size, size_t)$/;"	f	namespace:Eigen::internal
conditional_aligned_realloc	include/Eigen/src/Core/util/Memory.h	/^template<bool Align> inline void* conditional_aligned_realloc(void* ptr, size_t new_size, size_t old_size)$/;"	f	namespace:Eigen::internal
conditional_aligned_realloc_new	include/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_realloc_new(T* pts, size_t new_size, size_t old_size)$/;"	f	namespace:Eigen::internal
conditional_aligned_realloc_new_auto	include/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_realloc_new_auto(T* pts, size_t new_size, size_t old_size)$/;"	f	namespace:Eigen::internal
conj	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(conj, Scalar) conj(const Scalar& x)$/;"	f	namespace:Eigen::numext
conj_expr_if	include/Eigen/src/Core/products/SelfadjointRank2Update.h	/^template<bool Cond, typename T> struct conj_expr_if$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, false,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, false,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet1cd, false,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet1cd, true,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet1cd, true,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet2d, false,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, false,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet4f, false,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2d, Packet1cd, false,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet4f, Packet2cf, false,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar,bool Conj> struct conj_helper<RealScalar, std::complex<RealScalar>, false,Conj>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar,bool Conj> struct conj_helper<std::complex<RealScalar>, RealScalar, Conj,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar> struct conj_helper<std::complex<RealScalar>, std::complex<RealScalar>, false,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar> struct conj_helper<std::complex<RealScalar>, std::complex<RealScalar>, true,false>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar> struct conj_helper<std::complex<RealScalar>, std::complex<RealScalar>, true,true>$/;"	s	namespace:Eigen::internal
conj_helper	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename Scalar> struct conj_helper<Scalar,Scalar,false,false>$/;"	s	namespace:Eigen::internal
conj_if	include/Eigen/src/Core/util/BlasUtil.h	/^template<> struct conj_if<false> {$/;"	s	namespace:Eigen::internal
conj_if	include/Eigen/src/Core/util/BlasUtil.h	/^template<> struct conj_if<true> {$/;"	s	namespace:Eigen::internal
conj_impl	include/Eigen/src/Core/MathFunctions.h	/^struct conj_impl$/;"	s	namespace:Eigen::internal
conj_impl	include/Eigen/src/Core/MathFunctions.h	/^struct conj_impl<Scalar,true>$/;"	s	namespace:Eigen::internal
conj_retval	include/Eigen/src/Core/MathFunctions.h	/^struct conj_retval$/;"	s	namespace:Eigen::internal
conjugate	include/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularView<MatrixConjugateReturnType,Mode> conjugate()$/;"	f	class:Eigen::TriangularView
conjugate	include/Eigen/src/Core/TriangularMatrix.h	/^    inline const TriangularView<MatrixConjugateReturnType,Mode> conjugate() const$/;"	f	class:Eigen::TriangularView
conjugate	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar> Quaternion<Scalar>::conjugate() const$/;"	f	class:Eigen::Quaternion
conjugate	include/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::conjugate() const$/;"	f	class:Eigen::QuaternionBase
conjugate	include/Eigen/src/Householder/HouseholderSequence.h	/^    ConjugateReturnType conjugate() const$/;"	f	class:Eigen::HouseholderSequence
conjugate	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^conjugate() const$/;"	f
conjugate_gradient	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^void conjugate_gradient(const MatrixType& mat, const Rhs& rhs, Dest& x,$/;"	f	namespace:Eigen::internal
conservativeResize	include/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex size, DenseIndex nbRows, DenseIndex nbCols)$/;"	f	class:Eigen::DenseStorage
conservativeResize	include/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex size, DenseIndex nbRows, DenseIndex)$/;"	f	class:Eigen::DenseStorage
conservativeResize	include/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex size, DenseIndex, DenseIndex nbCols)$/;"	f	class:Eigen::DenseStorage
conservativeResize	include/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex, DenseIndex nbRows, DenseIndex nbCols) { m_rows = nbRows; m_cols = nbCols; }$/;"	f	class:Eigen::DenseStorage
conservativeResize	include/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex, DenseIndex nbRows, DenseIndex) { m_rows = nbRows; }$/;"	f	class:Eigen::DenseStorage
conservativeResize	include/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex, DenseIndex, DenseIndex nbCols) { m_cols = nbCols; }$/;"	f	class:Eigen::DenseStorage
conservativeResize	include/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex,DenseIndex,DenseIndex) {}$/;"	f	class:Eigen::DenseStorage
conservativeResize	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(Index nbRows, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
conservativeResize	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(Index nbRows, NoChange_t)$/;"	f	class:Eigen::PlainObjectBase
conservativeResize	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(Index size)$/;"	f	class:Eigen::PlainObjectBase
conservativeResize	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(NoChange_t, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
conservativeResize	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void conservativeResize(Index rows, Index cols) $/;"	f	class:Eigen::SparseMatrix
conservativeResizeLike	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResizeLike(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::PlainObjectBase
conservative_resize_like_impl	include/Eigen/src/Core/PlainObjectBase.h	/^struct conservative_resize_like_impl$/;"	s	namespace:Eigen::internal
conservative_resize_like_impl	include/Eigen/src/Core/PlainObjectBase.h	/^struct conservative_resize_like_impl<Derived,OtherDerived,true>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_impl	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^static void conservative_sparse_sparse_product_impl(const Lhs& lhs, const Rhs& rhs, ResultType& res)$/;"	f	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,ColMajor>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,RowMajor>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,ColMajor,RowMajor,ColMajor>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,ColMajor,RowMajor,RowMajor>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,RowMajor,ColMajor,ColMajor>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,RowMajor,ColMajor,RowMajor>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,RowMajor,RowMajor,ColMajor>$/;"	s	namespace:Eigen::internal
conservative_sparse_sparse_product_selector	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,RowMajor,RowMajor,RowMajor>$/;"	s	namespace:Eigen::internal
const_blas_data_mapper	include/Eigen/src/Core/util/BlasUtil.h	/^    const_blas_data_mapper(const Scalar* data, Index stride) : m_data(data), m_stride(stride) {}$/;"	f	class:Eigen::internal::const_blas_data_mapper
const_blas_data_mapper	include/Eigen/src/Core/util/BlasUtil.h	/^class const_blas_data_mapper$/;"	c	namespace:Eigen::internal
const_cast_derived	include/Eigen/src/Core/EigenBase.h	/^  inline Derived& const_cast_derived() const$/;"	f	struct:Eigen::EigenBase
const_cast_derived	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Derived& const_cast_derived() const$/;"	f	class:Eigen::SparseMatrixBase
const_derived	include/Eigen/src/Core/EigenBase.h	/^  inline const Derived& const_derived() const$/;"	f	struct:Eigen::EigenBase
const_pointer	include/Eigen/src/Core/util/Memory.h	/^    typedef const T*  const_pointer;$/;"	t	class:Eigen::aligned_allocator
const_pointer	include/Eigen/src/StlSupport/details.h	/^    typedef const T*  const_pointer;$/;"	t	class:Eigen::aligned_allocator_indirection
const_reference	include/Eigen/src/Core/util/Memory.h	/^    typedef const T&  const_reference;$/;"	t	class:Eigen::aligned_allocator
const_reference	include/Eigen/src/StlSupport/details.h	/^    typedef const T&  const_reference;$/;"	t	class:Eigen::aligned_allocator_indirection
construct	include/Eigen/src/Core/Ref.h	/^    void construct(const Expression& expr, internal::false_type)$/;"	f	class:Eigen::Ref
construct	include/Eigen/src/Core/Ref.h	/^    void construct(const Expression& expr,internal::true_type)$/;"	f	class:Eigen::Ref
construct	include/Eigen/src/Core/Ref.h	/^  void construct(Expression& expr)$/;"	f	class:Eigen::RefBase
construct	include/Eigen/src/Core/util/Memory.h	/^    void construct( pointer p, const T& value )$/;"	f	class:Eigen::aligned_allocator
construct_elements_of_array	include/Eigen/src/Core/util/Memory.h	/^template<typename T> inline T* construct_elements_of_array(T *ptr, size_t size)$/;"	f	namespace:Eigen::internal
construct_from_matrix	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  struct construct_from_matrix$/;"	s	class:Eigen::Transform
construct_from_matrix	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  template<typename OtherDerived> struct construct_from_matrix<OtherDerived, true>$/;"	s	class:Eigen::Transform
constructor_without_unaligned_array_assert	include/Eigen/src/Core/DenseStorage.h	/^struct constructor_without_unaligned_array_assert {};$/;"	s	namespace:Eigen::internal
contains	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline bool contains(const AlignedBox& b) const$/;"	f	class:Eigen::AlignedBox
contains	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline bool contains(const VectorType& p) const$/;"	f	class:Eigen::AlignedBox
contains	include/Eigen/src/Geometry/AlignedBox.h	/^  inline bool contains(const AlignedBox& b) const$/;"	f	class:Eigen::AlignedBox
contains	include/Eigen/src/Geometry/AlignedBox.h	/^  inline bool contains(const MatrixBase<Derived>& a_p) const$/;"	f	class:Eigen::AlignedBox
copyCoeff	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyCoeff(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseCoeffsBase
copyCoeff	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyCoeff(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseCoeffsBase
copyCoeff	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyCoeff(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SelfCwiseBinaryOp
copyCoeff	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyCoeff(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SelfCwiseBinaryOp
copyCoeff	include/Eigen/src/Core/Swap.h	/^    void copyCoeff(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SwapWrapper
copyCoeff	include/Eigen/src/Core/Swap.h	/^    void copyCoeff(Index rowId, Index colId, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SwapWrapper
copyCoeff	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE void copyCoeff(Index row, Index col, Other& other)$/;"	f	class:Eigen::TriangularBase
copyCoeffByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyCoeffByOuterInner(Index outer, Index inner, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseCoeffsBase
copyPacket	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyPacket(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseCoeffsBase
copyPacket	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyPacket(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseCoeffsBase
copyPacket	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyPacket(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SelfCwiseBinaryOp
copyPacket	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyPacket(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SelfCwiseBinaryOp
copyPacket	include/Eigen/src/Core/Swap.h	/^    void copyPacket(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SwapWrapper
copyPacket	include/Eigen/src/Core/Swap.h	/^    void copyPacket(Index rowId, Index colId, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::SwapWrapper
copyPacketByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyPacketByOuterInner(Index outer, Index inner, const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseCoeffsBase
copy_T_map	include/base/graph.h	/^			void Graph<T>::copy_T_map(std::map<size_type, double>& input, $/;"	f	class:msd::base::Graph
copy_T_path	include/base/graph.h	/^			void Graph<T>::copy_T_path(std::map<size_type, std::vector<size_type> >& input, $/;"	f	class:msd::base::Graph
copy_T_set	include/base/graph.h	/^			void Graph<T>::copy_T_set(std::set<size_type>& input, std::set<T>& output)$/;"	f	class:msd::base::Graph
copy_bool	include/Eigen/src/Core/util/Macros.h	/^    inline bool copy_bool(bool b) { return b; }$/;"	f	namespace:Eigen::internal
copy_to_ucol	include/Eigen/src/SparseLU/SparseLU_copy_to_ucol.h	/^Index SparseLUImpl<Scalar,Index>::copy_to_ucol(const Index jcol, const Index nseg, IndexVector& segrep, BlockIndexVector repfnz ,IndexVector& perm_r, BlockScalarVector dense, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
corner	include/Eigen/src/Eigen2Support/Block.h	/^  ::corner(CornerType type, Index cRows, Index cCols)$/;"	f	class:Eigen::DenseBase
corner	include/Eigen/src/Eigen2Support/Block.h	/^DenseBase<Derived>::corner(CornerType type) const$/;"	f	class:Eigen::DenseBase
corner	include/Eigen/src/Eigen2Support/Block.h	/^DenseBase<Derived>::corner(CornerType type)$/;"	f	class:Eigen::DenseBase
corner	include/Eigen/src/Eigen2Support/Block.h	/^DenseBase<Derived>::corner(CornerType type, Index cRows, Index cCols) const$/;"	f	class:Eigen::DenseBase
corner	include/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType corner(CornerType corner) const$/;"	f	class:Eigen::AlignedBox
cos	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::cos() const$/;"	f	class:Eigen::Cwise
cos	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^cos() const$/;"	f
count	include/Eigen/src/Core/BooleanRedux.h	/^inline typename DenseBase<Derived>::Index DenseBase<Derived>::count() const$/;"	f	class:Eigen::DenseBase
count	include/Eigen/src/Core/VectorwiseOp.h	/^    const PartialReduxExpr<ExpressionType, internal::member_count<Index>, Direction> count() const$/;"	f	class:Eigen::VectorwiseOp
countnz	include/Eigen/src/SparseLU/SparseLU_Utils.h	/^void SparseLUImpl<Scalar,Index>::countnz(const Index n, Index& nnzL, Index& nnzU, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
cpuid_is_vendor	include/Eigen/src/Core/util/Memory.h	/^inline bool cpuid_is_vendor(int abcd[4], const int vendor[3])$/;"	f	namespace:Eigen::internal
cross	include/Eigen/src/Geometry/OrthoMethods.h	/^MatrixBase<Derived>::cross(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::MatrixBase
cross	include/Eigen/src/Geometry/OrthoMethods.h	/^VectorwiseOp<ExpressionType,Direction>::cross(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::VectorwiseOp
cross3	include/Eigen/src/Geometry/OrthoMethods.h	/^MatrixBase<Derived>::cross3(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::MatrixBase
cross3_impl	include/Eigen/src/Geometry/OrthoMethods.h	/^struct cross3_impl {$/;"	s	namespace:Eigen::internal
cross3_impl	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^struct cross3_impl<Architecture::SSE,VectorLhs,VectorRhs,float,true>$/;"	s	namespace:Eigen::internal
cross_product_return_type	include/Eigen/src/Core/MatrixBase.h	/^    template<typename OtherDerived> struct cross_product_return_type {$/;"	s	class:Eigen::MatrixBase
cs_tdfs	include/Eigen/src/OrderingMethods/Amd.h	/^Index cs_tdfs(Index j, Index k, Index *head, const Index *next, Index *post, Index *stack)$/;"	f	namespace:Eigen::internal
cs_wclear	include/Eigen/src/OrderingMethods/Amd.h	/^static int cs_wclear (Index mark, Index lemax, Index *w, Index n)$/;"	f	namespace:Eigen::internal
cube	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::cube() const$/;"	f	class:Eigen::Cwise
cube	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^cube() const$/;"	f
cwise	include/Eigen/src/Eigen2Support/Cwise.h	/^inline Cwise<Derived> MatrixBase<Derived>::cwise()$/;"	f	class:Eigen::MatrixBase
cwise	include/Eigen/src/Eigen2Support/Cwise.h	/^inline const Cwise<Derived> MatrixBase<Derived>::cwise() const$/;"	f	class:Eigen::MatrixBase
cwiseAbs	include/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseAbs() const { return derived(); }$/;"	f
cwiseAbs2	include/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseAbs2() const { return derived(); }$/;"	f
cwiseEqual	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseEqual(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseEqual	include/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseEqual(const Scalar& s) const$/;"	f
cwiseInverse	include/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseInverse() const { return derived(); }$/;"	f
cwiseMax	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseMax(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseMax	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseMax(const Scalar &other) const$/;"	f
cwiseMin	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseMin(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseMin	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseMin(const Scalar &other) const$/;"	f
cwiseNotEqual	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseNotEqual(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseProduct	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^SparseMatrixBase<Derived>::cwiseProduct(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::SparseMatrixBase
cwiseProduct	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseQuotient	include/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseQuotient(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseSqrt	include/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseSqrt() const { return derived(); }$/;"	f
data	include/Eigen/src/Core/ArrayWrapper.h	/^    inline ScalarWithConstIfNotLvalue* data() { return m_expression.const_cast_derived().data(); }$/;"	f	class:Eigen::ArrayWrapper
data	include/Eigen/src/Core/ArrayWrapper.h	/^    inline ScalarWithConstIfNotLvalue* data() { return m_expression.const_cast_derived().data(); }$/;"	f	class:Eigen::MatrixWrapper
data	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar* data() const { return m_expression.data(); }$/;"	f	class:Eigen::ArrayWrapper
data	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar* data() const { return m_expression.data(); }$/;"	f	class:Eigen::MatrixWrapper
data	include/Eigen/src/Core/CwiseUnaryView.h	/^    inline Scalar* data() { return &coeffRef(0); }$/;"	f	class:Eigen::CwiseUnaryViewImpl
data	include/Eigen/src/Core/CwiseUnaryView.h	/^    inline const Scalar* data() const { return &coeff(0); }$/;"	f	class:Eigen::CwiseUnaryViewImpl
data	include/Eigen/src/Core/DenseStorage.h	/^    inline T *data() { return 0; }$/;"	f	class:Eigen::DenseStorage
data	include/Eigen/src/Core/DenseStorage.h	/^    inline T *data() { return m_data.array; }$/;"	f	class:Eigen::DenseStorage
data	include/Eigen/src/Core/DenseStorage.h	/^    inline T *data() { return m_data; }$/;"	f	class:Eigen::DenseStorage
data	include/Eigen/src/Core/DenseStorage.h	/^    inline const T *data() const { return 0; }$/;"	f	class:Eigen::DenseStorage
data	include/Eigen/src/Core/DenseStorage.h	/^    inline const T *data() const { return m_data.array; }$/;"	f	class:Eigen::DenseStorage
data	include/Eigen/src/Core/DenseStorage.h	/^    inline const T *data() const { return m_data; }$/;"	f	class:Eigen::DenseStorage
data	include/Eigen/src/Core/Diagonal.h	/^    inline ScalarWithConstIfNotLvalue* data() { return &(m_matrix.const_cast_derived().coeffRef(rowOffset(), colOffset())); }$/;"	f	class:Eigen::Diagonal
data	include/Eigen/src/Core/Diagonal.h	/^    inline const Scalar* data() const { return &(m_matrix.const_cast_derived().coeffRef(rowOffset(), colOffset())); }$/;"	f	class:Eigen::Diagonal
data	include/Eigen/src/Core/GeneralProduct.h	/^  EIGEN_STRONG_INLINE  Scalar* data() { eigen_internal_assert(false && "should never be called"); return 0; }$/;"	f	struct:Eigen::internal::gemv_static_vector_if
data	include/Eigen/src/Core/GeneralProduct.h	/^  EIGEN_STRONG_INLINE Scalar* data() { return 0; }$/;"	f	struct:Eigen::internal::gemv_static_vector_if
data	include/Eigen/src/Core/GeneralProduct.h	/^  EIGEN_STRONG_INLINE Scalar* data() { return m_data.array; }$/;"	f	struct:Eigen::internal::gemv_static_vector_if
data	include/Eigen/src/Core/MapBase.h	/^    inline ScalarWithConstIfNotLvalue* data() { return this->m_data; } \/\/ no const-cast here so non-const-correct code will give a compile error$/;"	f	class:Eigen::MapBase
data	include/Eigen/src/Core/MapBase.h	/^    inline const Scalar* data() const { return m_data; }$/;"	f	class:Eigen::MapBase
data	include/Eigen/src/Core/MapBase.h	/^    inline const Scalar* data() const { return this->m_data; }$/;"	f	class:Eigen::MapBase
data	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Scalar *data()$/;"	f	class:Eigen::PlainObjectBase
data	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar *data() const$/;"	f	class:Eigen::PlainObjectBase
data	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline const Scalar* data() const { return m_matrix.data(); }$/;"	f	class:Eigen::SelfCwiseBinaryOp
data	include/Eigen/src/Core/Swap.h	/^    inline ScalarWithConstIfNotLvalue* data() { return m_expression.data(); }$/;"	f	class:Eigen::SwapWrapper
data	include/Eigen/src/Core/Swap.h	/^    inline const Scalar* data() const { return m_expression.data(); }$/;"	f	class:Eigen::SwapWrapper
data	include/Eigen/src/Core/Transpose.h	/^    inline ScalarWithConstIfNotLvalue* data() { return derived().nestedExpression().data(); }$/;"	f	class:Eigen::TransposeImpl
data	include/Eigen/src/Core/Transpose.h	/^    inline const Scalar* data() const { return derived().nestedExpression().data(); }$/;"	f	class:Eigen::TransposeImpl
data	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  Scalar* data() { return m_matrix.data(); }$/;"	f	class:Eigen::Transform
data	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  const Scalar* data() const { return m_matrix.data(); }$/;"	f	class:Eigen::Transform
data	include/Eigen/src/Geometry/Transform.h	/^  Scalar* data() { return m_matrix.data(); }$/;"	f	class:Eigen::Transform
data	include/Eigen/src/Geometry/Transform.h	/^  const Scalar* data() const { return m_matrix.data(); }$/;"	f	class:Eigen::Transform
data	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Storage& data() { return m_data; }$/;"	f	class:Eigen::SparseMatrix
data	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline const Storage& data() const { return m_data; }$/;"	f	class:Eigen::SparseMatrix
data	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Storage& data() { return m_data; }$/;"	f	class:Eigen::SparseVector
data	include/Eigen/src/SparseCore/SparseVector.h	/^    inline const Storage& data() const { return m_data; }$/;"	f	class:Eigen::SparseVector
dcomplex	include/Eigen/src/Core/util/MKL_support.h	/^typedef std::complex<double> dcomplex;$/;"	t	namespace:Eigen
deallocate	include/Eigen/src/Core/util/Memory.h	/^    void deallocate( pointer p, size_type \/*num*\/ )$/;"	f	class:Eigen::aligned_allocator
debug	include/Eigen/src/Core/Assign.h	/^  static void debug()$/;"	f	struct:Eigen::internal::assign_traits
debug	include/Eigen/src/Core/GeneralProduct.h	/^  static void debug()$/;"	f	struct:Eigen::internal::product_type
dec	include/Eigen/src/misc/Image.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:Eigen::internal::image_retval_base
dec	include/Eigen/src/misc/Kernel.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:Eigen::internal::kernel_retval_base
dec	include/Eigen/src/misc/Solve.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:Eigen::internal::solve_retval_base
dec	include/Eigen/src/misc/SparseSolve.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:Eigen::internal::sparse_solve_retval_base
decrement_size	include/Eigen/src/Householder/Householder.h	/^template<int n> struct decrement_size$/;"	s	namespace:Eigen::internal
defaultEvalTo	include/Eigen/src/misc/SparseSolve.h	/^    inline void defaultEvalTo(SparseMatrix<DestScalar,DestOptions,DestIndex>& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval_base
default_packet_traits	include/Eigen/src/Core/GenericPacketMath.h	/^struct default_packet_traits$/;"	s	namespace:Eigen::internal
default_prunning_func	include/Eigen/src/SparseCore/SparseMatrix.h	/^    default_prunning_func(const Scalar& ref, const RealScalar& eps) : reference(ref), epsilon(eps) {}$/;"	f	struct:Eigen::SparseMatrix::default_prunning_func
default_prunning_func	include/Eigen/src/SparseCore/SparseMatrix.h	/^  struct default_prunning_func {$/;"	s	class:Eigen::SparseMatrix
degree	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index degree ;  \/* number of principal & non-principal columns in row *\/$/;"	m	union:internal::Colamd_Row::__anon405
degree_centrality	centrality/degree.h	/^			void degree_centrality(Graph<T>& graph, std::map<T, double>& result)$/;"	f	namespace:msd::centrality
degree_next	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index degree_next ; \/* next column, if col is in a degree list *\/$/;"	m	union:internal::colamd_col::__anon404
dense_xpr_base_dispatcher_for_doxygen	include/Eigen/src/Core/PlainObjectBase.h	/^struct dense_xpr_base_dispatcher_for_doxygen<Array<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	namespace:Eigen::internal
dense_xpr_base_dispatcher_for_doxygen	include/Eigen/src/Core/PlainObjectBase.h	/^struct dense_xpr_base_dispatcher_for_doxygen<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	namespace:Eigen::internal
depth_select	include/Eigen/src/Core/GeneralProduct.h	/^    depth_select = product_size_category<Depth,MaxDepth>::value$/;"	e	enum:Eigen::internal::product_type::__anon146
deque	include/Eigen/src/StlSupport/StdDeque.h	/^  class deque<T,EIGEN_ALIGNED_ALLOCATOR<T> >$/;"	c	namespace:std
deque_base	include/Eigen/src/StlSupport/StdDeque.h	/^                Eigen::aligned_allocator_indirection<EIGEN_WORKAROUND_MSVC_STL_SUPPORT(T)> > deque_base;$/;"	t	class:std::deque
derived	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::CholmodBase
derived	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::CholmodBase
derived	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::DiagonalBase
derived	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::DiagonalBase
derived	include/Eigen/src/Core/EigenBase.h	/^  Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	struct:Eigen::EigenBase
derived	include/Eigen/src/Core/EigenBase.h	/^  const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	struct:Eigen::EigenBase
derived	include/Eigen/src/Core/Transpositions.h	/^    Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::TranspositionsBase
derived	include/Eigen/src/Core/Transpositions.h	/^    const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::TranspositionsBase
derived	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::TriangularBase
derived	include/Eigen/src/Core/TriangularMatrix.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::TriangularBase
derived	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::RotationBase
derived	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::RotationBase
derived	include/Eigen/src/Geometry/RotationBase.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::RotationBase
derived	include/Eigen/src/Geometry/RotationBase.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::RotationBase
derived	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::IterativeSolverBase
derived	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::IterativeSolverBase
derived	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    Derived& derived()$/;"	f	class:Eigen::PastixBase
derived	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    const Derived& derived() const$/;"	f	class:Eigen::PastixBase
derived	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    Derived& derived()$/;"	f	class:Eigen::PardisoImpl
derived	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    const Derived& derived() const$/;"	f	class:Eigen::PardisoImpl
derived	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::SimplicialCholeskyBase
derived	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::SimplicialCholeskyBase
derived	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::SparseMatrixBase
derived	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::SparseMatrixBase
derived	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:Eigen::SuperLUBase
derived	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:Eigen::SuperLUBase
destroy	include/Eigen/src/Core/util/Memory.h	/^    void destroy( pointer p )$/;"	f	class:Eigen::aligned_allocator
destruct_elements_of_array	include/Eigen/src/Core/util/Memory.h	/^template<typename T> inline void destruct_elements_of_array(T *ptr, size_t size)$/;"	f	namespace:Eigen::internal
detect_super_cols	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static void detect_super_cols$/;"	f	namespace:internal
determinant	include/Eigen/src/Core/TriangularMatrix.h	/^    Scalar determinant() const$/;"	f	class:Eigen::TriangularView
determinant	include/Eigen/src/LU/Determinant.h	/^inline typename internal::traits<Derived>::Scalar MatrixBase<Derived>::determinant() const$/;"	f	class:Eigen::MatrixBase
determinant	include/Eigen/src/LU/FullPivLU.h	/^typename internal::traits<MatrixType>::Scalar FullPivLU<MatrixType>::determinant() const$/;"	f	class:Eigen::FullPivLU
determinant	include/Eigen/src/LU/PartialPivLU.h	/^typename internal::traits<MatrixType>::Scalar PartialPivLU<MatrixType>::determinant() const$/;"	f	class:Eigen::PartialPivLU
determinant	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    Scalar determinant() const$/;"	f	class:Eigen::SimplicialCholesky
determinant	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    Scalar determinant() const$/;"	f	class:Eigen::SimplicialLDLT
determinant	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    Scalar determinant() const$/;"	f	class:Eigen::SimplicialLLT
determinant	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^typename SuperLU<MatrixType>::Scalar SuperLU<MatrixType>::determinant() const$/;"	f	class:Eigen::SuperLU
determinant	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^typename UmfPackLU<MatrixType>::Scalar UmfPackLU<MatrixType>::determinant() const$/;"	f	class:Eigen::UmfPackLU
determinant_impl	include/Eigen/src/LU/Determinant.h	/^> struct determinant_impl$/;"	s	namespace:Eigen::internal
determinant_impl	include/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 1>$/;"	s	namespace:Eigen::internal
determinant_impl	include/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 2>$/;"	s	namespace:Eigen::internal
determinant_impl	include/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 3>$/;"	s	namespace:Eigen::internal
determinant_impl	include/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 4>$/;"	s	namespace:Eigen::internal
dfs_kernel	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^void SparseLUImpl<Scalar,Index>::dfs_kernel(const Index jj, IndexVector& perm_r,$/;"	f	class:Eigen::internal::SparseLUImpl
diagonal	include/Eigen/src/Core/BandMatrix.h	/^    inline Block<CoefficientsType,1,Dynamic> diagonal(Index i)$/;"	f	class:Eigen::internal::BandMatrixBase
diagonal	include/Eigen/src/Core/BandMatrix.h	/^    inline Block<CoefficientsType,1,SizeAtCompileTime> diagonal()$/;"	f	class:Eigen::internal::BandMatrixBase
diagonal	include/Eigen/src/Core/BandMatrix.h	/^    inline const Block<const CoefficientsType,1,Dynamic> diagonal(Index i) const$/;"	f	class:Eigen::internal::BandMatrixBase
diagonal	include/Eigen/src/Core/BandMatrix.h	/^    inline const Block<const CoefficientsType,1,SizeAtCompileTime> diagonal() const$/;"	f	class:Eigen::internal::BandMatrixBase
diagonal	include/Eigen/src/Core/BandMatrix.h	/^    template<int N> inline const typename DiagonalIntReturnType<N>::Type diagonal() const$/;"	f	class:Eigen::internal::BandMatrixBase
diagonal	include/Eigen/src/Core/BandMatrix.h	/^    template<int N> inline typename DiagonalIntReturnType<N>::Type diagonal()$/;"	f	class:Eigen::internal::BandMatrixBase
diagonal	include/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal() const$/;"	f	class:Eigen::MatrixBase
diagonal	include/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal()$/;"	f	class:Eigen::MatrixBase
diagonal	include/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal(Index index) const$/;"	f	class:Eigen::MatrixBase
diagonal	include/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal(Index index)$/;"	f	class:Eigen::MatrixBase
diagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^    const DiagonalVectorType& diagonal() const { return m_diagonal; }$/;"	f	class:Eigen::DiagonalWrapper
diagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalVectorType& diagonal() { return derived().diagonal(); }$/;"	f	class:Eigen::DiagonalBase
diagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalVectorType& diagonal() { return m_diagonal; }$/;"	f	class:Eigen::DiagonalMatrix
diagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline const DiagonalVectorType& diagonal() const { return derived().diagonal(); }$/;"	f	class:Eigen::DiagonalBase
diagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline const DiagonalVectorType& diagonal() const { return m_diagonal; }$/;"	f	class:Eigen::DiagonalMatrix
diagonal	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const Diagonal<const LazyCoeffBasedProductType,0> diagonal() const$/;"	f	class:Eigen::CoeffBasedProduct
diagonal	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const Diagonal<const LazyCoeffBasedProductType,DiagonalIndex> diagonal() const$/;"	f	class:Eigen::CoeffBasedProduct
diagonal	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const Diagonal<const LazyCoeffBasedProductType,Dynamic> diagonal(Index index) const$/;"	f	class:Eigen::CoeffBasedProduct
diagonal	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^Tridiagonalization<MatrixType>::diagonal() const$/;"	f	class:Eigen::Tridiagonalization
diagonal	include/Eigen/src/Geometry/AlignedBox.h	/^  inline CwiseBinaryOp< internal::scalar_difference_op<Scalar>, const VectorType, const VectorType> diagonal() const$/;"	f	class:Eigen::AlignedBox
diagonal	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Diagonal<const SparseMatrix> diagonal() const { return *this; }$/;"	f	class:Eigen::SparseMatrix
diagonalLength	include/Eigen/src/Core/BandMatrix.h	/^    inline Index diagonalLength(Index i) const$/;"	f	class:Eigen::internal::BandMatrixBase
diagonalSize	include/Eigen/src/Core/MatrixBase.h	/^    inline Index diagonalSize() const { return (std::min)(rows(),cols()); }$/;"	f	class:Eigen::MatrixBase
difference_type	include/Eigen/src/Core/util/Memory.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:Eigen::aligned_allocator
difference_type	include/Eigen/src/StlSupport/details.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:Eigen::aligned_allocator_indirection
dim	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline int dim() const { return AmbientDimAtCompileTime==Dynamic ? m_min.size()-1 : AmbientDimAtCompileTime; }$/;"	f	class:Eigen::AlignedBox
dim	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline int dim() const { return int(AmbientDimAtCompileTime)==Dynamic ? m_coeffs.size()-1 : int(AmbientDimAtCompileTime); }$/;"	f	class:Eigen::Hyperplane
dim	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline int dim() const { return m_direction.size(); }$/;"	f	class:Eigen::ParametrizedLine
dim	include/Eigen/src/Geometry/AlignedBox.h	/^  inline Index dim() const { return AmbientDimAtCompileTime==Dynamic ? m_min.size() : Index(AmbientDimAtCompileTime); }$/;"	f	class:Eigen::AlignedBox
dim	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Index dim() const { return AmbientDimAtCompileTime==Dynamic ? m_coeffs.size()-1 : Index(AmbientDimAtCompileTime); }$/;"	f	class:Eigen::Hyperplane
dim	include/Eigen/src/Geometry/ParametrizedLine.h	/^  inline Index dim() const { return m_direction.size(); }$/;"	f	class:Eigen::ParametrizedLine
dimensionOfKernel	include/Eigen/src/LU/FullPivLU.h	/^    inline Index dimensionOfKernel() const$/;"	f	class:Eigen::FullPivLU
dimensionOfKernel	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index dimensionOfKernel() const$/;"	f	class:Eigen::ColPivHouseholderQR
dimensionOfKernel	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index dimensionOfKernel() const$/;"	f	class:Eigen::FullPivHouseholderQR
direct_selfadjoint_eigenvalues	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^template<typename SolverType,int Size,bool IsComplex> struct direct_selfadjoint_eigenvalues$/;"	s	namespace:Eigen::internal
direct_selfadjoint_eigenvalues	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^template<typename SolverType> struct direct_selfadjoint_eigenvalues<SolverType,2,false>$/;"	s	namespace:Eigen::internal
direct_selfadjoint_eigenvalues	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^template<typename SolverType> struct direct_selfadjoint_eigenvalues<SolverType,3,false>$/;"	s	namespace:Eigen::internal
direction	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType& direction() { return m_direction; }$/;"	f	class:Eigen::ParametrizedLine
direction	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  const VectorType& direction() const { return m_direction; }$/;"	f	class:Eigen::ParametrizedLine
direction	include/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType& direction() { return m_direction; }$/;"	f	class:Eigen::ParametrizedLine
direction	include/Eigen/src/Geometry/ParametrizedLine.h	/^  const VectorType& direction() const { return m_direction; }$/;"	f	class:Eigen::ParametrizedLine
dist	include/base/graph.h	/^						double dist;$/;"	m	struct:msd::base::Graph::heap_node_t
distance	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  RealScalar distance(const VectorType& p) const { return ei_sqrt(squaredDistance(p)); }$/;"	f	class:Eigen::ParametrizedLine
distance	include/Eigen/src/Geometry/ParametrizedLine.h	/^  RealScalar distance(const VectorType& p) const { using std::sqrt; return sqrt(squaredDistance(p)); }$/;"	f	class:Eigen::ParametrizedLine
doComputeEigenvectors	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^void ComplexEigenSolver<MatrixType>::doComputeEigenvectors(const RealScalar& matrixnorm)$/;"	f	class:Eigen::ComplexEigenSolver
doComputeEigenvectors	include/Eigen/src/Eigenvalues/EigenSolver.h	/^void EigenSolver<MatrixType>::doComputeEigenvectors()$/;"	f	class:Eigen::EigenSolver
dot	include/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::dot(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::MatrixBase
dot	include/Eigen/src/Geometry/Quaternion.h	/^  template<class OtherDerived> inline Scalar dot(const QuaternionBase<OtherDerived>& other) const { return coeffs().dot(other.coeffs()); }$/;"	f	class:Eigen::QuaternionBase
dot	include/Eigen/src/SparseCore/SparseDot.h	/^SparseMatrixBase<Derived>::dot(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::SparseMatrixBase
dot	include/Eigen/src/SparseCore/SparseDot.h	/^SparseMatrixBase<Derived>::dot(const SparseMatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::SparseMatrixBase
dot_nocheck	include/Eigen/src/Core/Dot.h	/^struct dot_nocheck$/;"	s	namespace:Eigen::internal
dot_nocheck	include/Eigen/src/Core/Dot.h	/^struct dot_nocheck<T, U, true>$/;"	s	namespace:Eigen::internal
dparm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    Array<RealScalar,IPARM_SIZE,1>& dparm()$/;"	f	class:Eigen::PastixBase
dparm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    double& dparm(int idxparam)$/;"	f	class:Eigen::PastixBase
dumpMemory	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void dumpMemory(Stream& \/*s*\/)$/;"	f	class:Eigen::CholmodBase
dumpMemory	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void dumpMemory(Stream& s)$/;"	f	class:Eigen::SimplicialCholeskyBase
dumpMemory	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void dumpMemory(Stream& \/*s*\/)$/;"	f	class:Eigen::SuperLUBase
ei_abs	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_abs (const T& x) { using std::abs; return abs(x); }$/;"	f	namespace:Eigen
ei_abs2	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_abs2(const T& x) { return numext::abs2(x); }$/;"	f	namespace:Eigen
ei_aligned_delete	include/Eigen/src/Eigen2Support/Memory.h	/^template<typename T> inline void ei_aligned_delete(T *ptr, size_t size)$/;"	f	namespace:Eigen
ei_aligned_free	include/Eigen/src/Eigen2Support/Memory.h	/^inline void  ei_aligned_free(void *ptr) { internal::aligned_free(ptr); }$/;"	f	namespace:Eigen
ei_aligned_malloc	include/Eigen/src/Eigen2Support/Memory.h	/^inline void* ei_aligned_malloc(size_t size) { return internal::aligned_malloc(size); }$/;"	f	namespace:Eigen
ei_aligned_new	include/Eigen/src/Eigen2Support/Memory.h	/^template<typename T> inline T* ei_aligned_new(size_t size)$/;"	f	namespace:Eigen
ei_aligned_realloc	include/Eigen/src/Eigen2Support/Memory.h	/^inline void* ei_aligned_realloc(void *ptr, size_t new_size, size_t old_size) { return internal::aligned_realloc(ptr, new_size, old_size); }$/;"	f	namespace:Eigen
ei_assert	include/Eigen/src/Eigen2Support/Macros.h	13;"	d
ei_atan2	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_atan2(const T& x,const T& y) { using std::atan2; return atan2(x,y); }$/;"	f	namespace:Eigen
ei_cleantype	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype { typedef T type; };$/;"	s	namespace:Eigen
ei_cleantype	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T&>        { typedef typename ei_cleantype<T>::type type; };$/;"	s	namespace:Eigen
ei_cleantype	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T*>        { typedef typename ei_cleantype<T>::type type; };$/;"	s	namespace:Eigen
ei_cleantype	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T&>  { typedef typename ei_cleantype<T>::type type; };$/;"	s	namespace:Eigen
ei_cleantype	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T*>  { typedef typename ei_cleantype<T>::type type; };$/;"	s	namespace:Eigen
ei_cleantype	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T>   { typedef typename ei_cleantype<T>::type type; };$/;"	s	namespace:Eigen
ei_conditional_aligned_free	include/Eigen/src/Eigen2Support/Memory.h	/^template<bool Align> inline void ei_conditional_aligned_free(void *ptr)$/;"	f	namespace:Eigen
ei_conditional_aligned_malloc	include/Eigen/src/Eigen2Support/Memory.h	/^template<bool Align> inline void* ei_conditional_aligned_malloc(size_t size)$/;"	f	namespace:Eigen
ei_conditional_aligned_realloc	include/Eigen/src/Eigen2Support/Memory.h	/^template<bool Align> inline void* ei_conditional_aligned_realloc(void* ptr, size_t new_size, size_t old_size)$/;"	f	namespace:Eigen
ei_conj	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_conj(const T& x) { return numext::conj(x); }$/;"	f	namespace:Eigen
ei_cos	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_cos (const T& x) { using std::cos;  return cos(x); }$/;"	f	namespace:Eigen
ei_declare_aligned_stack_constructed_variable	include/Eigen/src/Core/util/Memory.h	588;"	d
ei_exp	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_exp (const T& x) { using std::exp;  return exp(x); }$/;"	f	namespace:Eigen
ei_handmade_aligned_free	include/Eigen/src/Eigen2Support/Memory.h	/^inline void  ei_handmade_aligned_free(void *ptr) { internal::handmade_aligned_free(ptr); }$/;"	f	namespace:Eigen
ei_handmade_aligned_malloc	include/Eigen/src/Eigen2Support/Memory.h	/^inline void* ei_handmade_aligned_malloc(size_t size) { return internal::handmade_aligned_malloc(size); }$/;"	f	namespace:Eigen
ei_imag	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_imag(const T& x) { return numext::imag(x); }$/;"	f	namespace:Eigen
ei_internal_assert	include/Eigen/src/Eigen2Support/Macros.h	14;"	d
ei_isApprox	include/Eigen/src/Eigen2Support/MathFunctions.h	/^inline bool ei_isApprox(const Scalar& x, const Scalar& y,$/;"	f	namespace:Eigen
ei_isApproxOrLessThan	include/Eigen/src/Eigen2Support/MathFunctions.h	/^inline bool ei_isApproxOrLessThan(const Scalar& x, const Scalar& y,$/;"	f	namespace:Eigen
ei_isMuchSmallerThan	include/Eigen/src/Eigen2Support/MathFunctions.h	/^inline bool ei_isMuchSmallerThan(const Scalar& x, const OtherScalar& y,$/;"	f	namespace:Eigen
ei_is_same_type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T, typename U> struct ei_is_same_type { enum { ret = 0 }; };$/;"	s	namespace:Eigen
ei_is_same_type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_is_same_type<T,T> { enum { ret = 1 }; };$/;"	s	namespace:Eigen
ei_log	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_log (const T& x) { using std::log;  return log(x); }$/;"	f	namespace:Eigen
ei_meta_false	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_false { enum { ret = 0 }; };$/;"	s	namespace:Eigen
ei_meta_if	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if <false, Then, Else> { typedef Else ret; };$/;"	s	namespace:Eigen
ei_meta_if	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if { typedef Then ret; };$/;"	s	namespace:Eigen
ei_meta_sqrt	include/Eigen/src/Eigen2Support/Meta.h	/^class ei_meta_sqrt<Y, InfX, SupX, true> { public:  enum { ret = (SupX*SupX <= Y) ? SupX : InfX }; };$/;"	c
ei_meta_true	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_true {  enum { ret = 1 }; };$/;"	s	namespace:Eigen
ei_pow	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_pow (const T& x,const T& y) { return numext::pow(x,y); }$/;"	f	namespace:Eigen
ei_quaternion_assign_impl	include/Eigen/src/Eigen2Support/Geometry/All.h	61;"	d
ei_quaternion_assign_impl	include/Eigen/src/Eigen2Support/Geometry/All.h	76;"	d
ei_quaternion_assign_impl	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^struct ei_quaternion_assign_impl<Other,3,3>$/;"	s	namespace:Eigen
ei_quaternion_assign_impl	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^struct ei_quaternion_assign_impl<Other,4,1>$/;"	s	namespace:Eigen
ei_quaternion_product	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^ei_quaternion_product(const Quaternion<Scalar>& a, const Quaternion<Scalar>& b)$/;"	f	namespace:Eigen
ei_random	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_random () { return internal::random<T>(); }$/;"	f	namespace:Eigen
ei_random	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_random (const T& x, const T& y) { return internal::random(x, y); }$/;"	f	namespace:Eigen
ei_real	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_real(const T& x) { return numext::real(x); }$/;"	f	namespace:Eigen
ei_sin	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_sin (const T& x) { using std::sin;  return sin(x); }$/;"	f	namespace:Eigen
ei_sqrt	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_sqrt(const T& x) { using std::sqrt; return sqrt(x); }$/;"	f	namespace:Eigen
ei_toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/All.h	60;"	d
ei_toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/All.h	75;"	d
ei_toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^static inline Matrix<Scalar,2,2> ei_toRotationMatrix(const Scalar& s)$/;"	f	namespace:Eigen
ei_toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^static inline Matrix<Scalar,Dim,Dim> ei_toRotationMatrix(const RotationBase<OtherDerived,Dim>& r)$/;"	f	namespace:Eigen
ei_toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^static inline const MatrixBase<OtherDerived>& ei_toRotationMatrix(const MatrixBase<OtherDerived>& mat)$/;"	f	namespace:Eigen
ei_traits	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^template<typename _Scalar> struct ei_traits<AngleAxis<_Scalar> >$/;"	s	namespace:Eigen
ei_traits	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^template<typename _Scalar> struct ei_traits<Quaternion<_Scalar> >$/;"	s	namespace:Eigen
ei_traits	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^template<typename _Scalar> struct ei_traits<Rotation2D<_Scalar> >$/;"	s	namespace:Eigen
ei_traits	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_traits : internal::traits<T>$/;"	s	namespace:Eigen
ei_transform_product_impl	include/Eigen/src/Eigen2Support/Geometry/All.h	62;"	d
ei_transform_product_impl	include/Eigen/src/Eigen2Support/Geometry/All.h	77;"	d
ei_transform_product_impl	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, Dim,1>$/;"	s	namespace:Eigen
ei_transform_product_impl	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, Dim,Dim>$/;"	s	namespace:Eigen
ei_transform_product_impl	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, HDim,1>$/;"	s	namespace:Eigen
ei_transform_product_impl	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, HDim,HDim>$/;"	s	namespace:Eigen
ei_unconst	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst { typedef T type; };$/;"	s	namespace:Eigen
ei_unconst	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const &> { typedef T & type; };$/;"	s	namespace:Eigen
ei_unconst	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const *> { typedef T * type; };$/;"	s	namespace:Eigen
ei_unconst	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<const T> { typedef T type; };$/;"	s	namespace:Eigen
ei_unpointer	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer { typedef T type; };$/;"	s	namespace:Eigen
ei_unpointer	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*> { typedef T type; };$/;"	s	namespace:Eigen
ei_unpointer	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*const> { typedef T type; };$/;"	s	namespace:Eigen
ei_unref	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref { typedef T type; };$/;"	s	namespace:Eigen
ei_unref	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref<T&> { typedef T type; };$/;"	s	namespace:Eigen
eigen2_dot	include/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::eigen2_dot(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::MatrixBase
eigen2_dot	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar eigen2_dot(const Quaternion& other) const { return m_coeffs.eigen2_dot(other.m_coeffs); }$/;"	f	class:Eigen::Quaternion
eigen2_lu	include/Eigen/src/Eigen2Support/LU.h	/^MatrixBase<Derived>::eigen2_lu() const$/;"	f	class:Eigen::MatrixBase
eigen2_part_return_type	include/Eigen/src/Core/TriangularMatrix.h	/^struct eigen2_part_return_type$/;"	s	namespace:Eigen::internal
eigen2_part_return_type	include/Eigen/src/Core/TriangularMatrix.h	/^struct eigen2_part_return_type<MatrixType, SelfAdjoint>$/;"	s	namespace:Eigen::internal
eigen2_product_return_type	include/Eigen/src/Core/TriangularMatrix.h	/^    struct eigen2_product_return_type$/;"	s	class:Eigen::TriangularView
eigen_assert	include/Eigen/src/Core/util/Macros.h	214;"	d
eigen_centrality	centrality/eigen.h	/^			std::vector<double> eigen_centrality(Graph<T> graph)$/;"	f	namespace:msd::centrality
eigen_internal_assert	include/Eigen/src/Core/util/Macros.h	218;"	d
eigen_pastix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  void eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, double *vals, int *perm, int * invp, double *x, int nbrhs, int *iparm, double *dparm)$/;"	f	namespace:Eigen::internal
eigen_pastix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  void eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, float *vals, int *perm, int * invp, float *x, int nbrhs, int *iparm, double *dparm)$/;"	f	namespace:Eigen::internal
eigen_pastix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  void eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, std::complex<double> *vals, int *perm, int * invp, std::complex<double> *x, int nbrhs, int *iparm, double *dparm)$/;"	f	namespace:Eigen::internal
eigen_pastix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  void eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, std::complex<float> *vals, int *perm, int * invp, std::complex<float> *x, int nbrhs, int *iparm, double *dparm)$/;"	f	namespace:Eigen::internal
eigen_plain_assert	include/Eigen/src/Core/util/Macros.h	176;"	d
eigen_plain_assert	include/Eigen/src/Core/util/Macros.h	184;"	d
eigen_unaligned_array_assert_workaround_gcc47	include/Eigen/src/Core/DenseStorage.h	/^  EIGEN_ALWAYS_INLINE PtrType eigen_unaligned_array_assert_workaround_gcc47(PtrType array) { return array; }$/;"	f	namespace:Eigen::internal
eigenvalues	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    const EigenvalueType& eigenvalues() const$/;"	f	class:Eigen::ComplexEigenSolver
eigenvalues	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    const EigenvalueType& eigenvalues() const$/;"	f	class:Eigen::EigenSolver
eigenvalues	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    EigenvalueType eigenvalues() const$/;"	f	class:Eigen::GeneralizedEigenSolver
eigenvalues	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^MatrixBase<Derived>::eigenvalues() const$/;"	f	class:Eigen::MatrixBase
eigenvalues	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^SelfAdjointView<MatrixType, UpLo>::eigenvalues() const$/;"	f	class:Eigen::SelfAdjointView
eigenvalues	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    const RealVectorType& eigenvalues() const$/;"	f	class:Eigen::SelfAdjointEigenSolver
eigenvalues_selector	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^struct eigenvalues_selector$/;"	s	namespace:Eigen::internal
eigenvalues_selector	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^struct eigenvalues_selector<Derived, false>$/;"	s	namespace:Eigen::internal
eigenvectors	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    const EigenvectorType& eigenvectors() const$/;"	f	class:Eigen::ComplexEigenSolver
eigenvectors	include/Eigen/src/Eigenvalues/EigenSolver.h	/^typename EigenSolver<MatrixType>::EigenvectorsType EigenSolver<MatrixType>::eigenvectors() const$/;"	f	class:Eigen::EigenSolver
eigenvectors	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    const MatrixType& eigenvectors() const$/;"	f	class:Eigen::SelfAdjointEigenSolver
elseMatrix	include/Eigen/src/Core/Select.h	/^    const ElseMatrixType& elseMatrix() const$/;"	f	class:Eigen::Select
emptyIdxLU	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^enum {emptyIdxLU = -1};$/;"	e	enum:Eigen::internal::__anon454
enable_if	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct enable_if<true,T>$/;"	s	namespace:Eigen::internal
end	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end() const$/;"	f	class:Eigen::MatrixBase
end	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end()$/;"	f	class:Eigen::MatrixBase
end	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end(Index size) const$/;"	f	class:Eigen::MatrixBase
end	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end(Index size)$/;"	f	class:Eigen::MatrixBase
endFill	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED void endFill() {}$/;"	f	class:Eigen::SparseVector
epsilon	include/Eigen/src/SparseCore/SparseMatrix.h	/^    RealScalar epsilon;$/;"	m	struct:Eigen::SparseMatrix::default_prunning_func
error	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  RealScalar error() const$/;"	f	class:Eigen::IterativeSolverBase
essentialVector	include/Eigen/src/Householder/HouseholderSequence.h	/^    const EssentialVectorType essentialVector(Index k) const$/;"	f	class:Eigen::HouseholderSequence
essentialVector	include/Eigen/src/Householder/HouseholderSequence.h	/^  static inline const EssentialVectorType essentialVector(const HouseholderSequenceType& h, Index k)$/;"	f	struct:Eigen::internal::hseq_side_dependent_impl
etree_find	include/Eigen/src/SparseCore/SparseColEtree.h	/^Index etree_find (Index i, IndexVector& pp)$/;"	f	namespace:Eigen::internal
eulerAngles	include/Eigen/src/Geometry/EulerAngles.h	/^MatrixBase<Derived>::eulerAngles(Index a0, Index a1, Index a2) const$/;"	f	class:Eigen::MatrixBase
eval	include/Eigen/src/Core/DenseBase.h	/^    EIGEN_STRONG_INLINE EvalReturnType eval() const$/;"	f	class:Eigen::DenseBase
eval	include/Eigen/src/Core/PermutationMatrix.h	/^    PlainPermutationType eval() const { return *this; }$/;"	f	class:Eigen::Transpose
eval	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline const typename internal::eval<Derived>::type eval() const$/;"	f	class:Eigen::SparseMatrixBase
eval	include/Eigen/src/SparseCore/SparseUtil.h	/^template<typename T> struct eval<T,Sparse>$/;"	s	namespace:Eigen::internal
evalTo	include/Eigen/src/Cholesky/LDLT.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/Cholesky/LLT.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/Core/ArrayWrapper.h	/^    inline void evalTo(Dest& dst) const { dst = m_expression; }$/;"	f	class:Eigen::ArrayWrapper
evalTo	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE Derived& evalTo(ActualDerived& dst, const ActualOtherDerived& other) { Transpose<ActualDerived> dstTrans(dst); other.evalTo(dstTrans); return dst; }$/;"	f	struct:Eigen::internal::assign_selector
evalTo	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE Derived& evalTo(ActualDerived& dst, const ActualOtherDerived& other) { other.evalTo(dst); return dst; }$/;"	f	struct:Eigen::internal::assign_selector
evalTo	include/Eigen/src/Core/BandMatrix.h	/^    template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	class:Eigen::internal::BandMatrixBase
evalTo	include/Eigen/src/Core/DenseBase.h	/^    template<typename Dest> inline void evalTo(Dest& ) const$/;"	f	class:Eigen::DenseBase
evalTo	include/Eigen/src/Core/DiagonalMatrix.h	/^void DiagonalBase<Derived>::evalTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:Eigen::DiagonalBase
evalTo	include/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::EigenBase
evalTo	include/Eigen/src/Core/GeneralProduct.h	/^    inline void evalTo(Dest& dest) const {$/;"	f	class:Eigen::GeneralProduct
evalTo	include/Eigen/src/Core/PermutationMatrix.h	/^    template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::permut_matrix_product_retval
evalTo	include/Eigen/src/Core/PermutationMatrix.h	/^    void evalTo(MatrixBase<DenseDerived>& other) const$/;"	f	class:Eigen::PermutationBase
evalTo	include/Eigen/src/Core/PermutationMatrix.h	/^    void evalTo(MatrixBase<DenseDerived>& other) const$/;"	f	class:Eigen::Transpose
evalTo	include/Eigen/src/Core/ProductBase.h	/^    inline void evalTo(Dest& dst) const { dst.setZero(); scaleAndAddTo(dst, Scalar(1)); }$/;"	f	class:ScaledProduct
evalTo	include/Eigen/src/Core/ReturnByValue.h	/^    inline void evalTo(Dest& dst) const$/;"	f	class:Eigen::ReturnByValue
evalTo	include/Eigen/src/Core/SolveTriangular.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::triangular_solve_retval
evalTo	include/Eigen/src/Core/Transpositions.h	/^    template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::transposition_matrix_product_retval
evalTo	include/Eigen/src/Core/TriangularMatrix.h	/^void TriangularBase<Derived>::evalTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:Eigen::TriangularBase
evalTo	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    inline void evalTo(ResultType& result) const$/;"	f	struct:Eigen::internal::HessenbergDecompositionMatrixHReturnType
evalTo	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    inline void evalTo(ResultType& result) const$/;"	f	struct:Eigen::internal::TridiagonalizationMatrixTReturnType
evalTo	include/Eigen/src/Geometry/Homogeneous.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::homogeneous_left_product_impl
evalTo	include/Eigen/src/Geometry/Homogeneous.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::homogeneous_right_product_impl
evalTo	include/Eigen/src/Householder/HouseholderSequence.h	/^    template<typename DestType> inline void evalTo(DestType& dst) const$/;"	f	class:Eigen::HouseholderSequence
evalTo	include/Eigen/src/Householder/HouseholderSequence.h	/^    void evalTo(Dest& dst, Workspace& workspace) const$/;"	f	class:Eigen::HouseholderSequence
evalTo	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/LU/FullPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::image_retval
evalTo	include/Eigen/src/LU/FullPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::kernel_retval
evalTo	include/Eigen/src/LU/FullPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/LU/Inverse.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::inverse_impl
evalTo	include/Eigen/src/LU/PartialPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/QR/ColPivHouseholderQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  void evalTo(ResultType& result) const$/;"	f	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
evalTo	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  void evalTo(ResultType& result, WorkVectorType& workspace) const$/;"	f	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
evalTo	include/Eigen/src/QR/HouseholderQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  void evalTo(ResType& res) const$/;"	f	struct:Eigen::SPQR_QProduct
evalTo	include/Eigen/src/SVD/JacobiSVD.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    void evalTo(MatrixBase<DenseDerived>& dst) const$/;"	f	class:Eigen::SparseMatrixBase
evalTo	include/Eigen/src/SparseCore/SparsePermutation.h	/^    template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::permut_sparsematrix_product_retval
evalTo	include/Eigen/src/SparseCore/SparseProduct.h	/^    void evalTo(Dest& result) const$/;"	f	class:Eigen::SparseSparseProduct
evalTo	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    template<typename DestScalar,int StorageOrder> void evalTo(SparseMatrix<DestScalar,StorageOrder,Index>& _dest) const$/;"	f	class:Eigen::SparseSelfAdjointView
evalTo	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    template<typename DestScalar> void evalTo(DynamicSparseMatrix<DestScalar,ColMajor,Index>& _dest) const$/;"	f	class:Eigen::SparseSelfAdjointView
evalTo	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    template<typename DestType,unsigned int DestUpLo> void evalTo(SparseSelfAdjointView<DestType,DestUpLo>& dest) const$/;"	f	class:Eigen::SparseSymmetricPermutationProduct
evalTo	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    void evalTo(SparseMatrix<DestScalar,Options,DstIndex>& _dest) const$/;"	f	class:Eigen::SparseSymmetricPermutationProduct
evalTo	include/Eigen/src/SparseLU/SparseLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/SparseLU/SparseLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/SparseQR/SparseQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/SparseQR/SparseQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/SparseQR/SparseQR.h	/^  template<typename Dest> void evalTo(MatrixBase<Dest>& dest) const$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
evalTo	include/Eigen/src/SparseQR/SparseQR.h	/^  template<typename Dest> void evalTo(SparseMatrixBase<Dest>& dest) const$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
evalTo	include/Eigen/src/SparseQR/SparseQR.h	/^  void evalTo(DesType& res) const$/;"	f	struct:Eigen::SparseQR_QProduct
evalTo	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval
evalTo	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval
evalTo	include/Eigen/src/misc/Image.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::image_retval_base
evalTo	include/Eigen/src/misc/Kernel.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::kernel_retval_base
evalTo	include/Eigen/src/misc/Solve.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval_base
evalTo	include/Eigen/src/misc/SparseSolve.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::solve_retval_with_guess
evalTo	include/Eigen/src/misc/SparseSolve.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:Eigen::internal::sparse_solve_retval_base
evalToLazy	include/Eigen/src/Core/TriangularMatrix.h	/^void TriangularBase<Derived>::evalToLazy(MatrixBase<DenseDerived> &other) const$/;"	f	class:Eigen::TriangularBase
exp	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::exp() const$/;"	f	class:Eigen::Cwise
exp	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^exp() const$/;"	f
expand	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^Index  SparseLUImpl<Scalar,Index>::expand(VectorType& vec, Index& length, Index nbElts, Index keep_prev, Index& num_expansions) $/;"	f	class:Eigen::internal::SparseLUImpl
expression	include/Eigen/src/Core/NoAlias.h	/^    ExpressionType& expression() const$/;"	f	class:Eigen::NoAlias
expression	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Lhs& expression() const $/;"	f	class:Eigen::SelfCwiseBinaryOp
expression	include/Eigen/src/Core/Swap.h	/^    ExpressionType& expression() const { return m_expression; }$/;"	f	class:Eigen::SwapWrapper
extend	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const AlignedBox& b)$/;"	f	class:Eigen::AlignedBox
extend	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const VectorType& p)$/;"	f	class:Eigen::AlignedBox
extend	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const AlignedBox& b)$/;"	f	class:Eigen::AlignedBox
extend	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const MatrixBase<Derived>& a_p)$/;"	f	class:Eigen::AlignedBox
extendedTo	include/Eigen/src/Core/VectorwiseOp.h	/^    extendedTo(const DenseBase<OtherDerived>& other) const$/;"	f	class:Eigen::VectorwiseOp
extendedToOpposite	include/Eigen/src/Core/VectorwiseOp.h	/^    extendedToOpposite(const DenseBase<OtherDerived>& other) const$/;"	f	class:Eigen::VectorwiseOp
exteriorDistance	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline Scalar exteriorDistance(const VectorType& p) const$/;"	f	class:Eigen::AlignedBox
exteriorDistance	include/Eigen/src/Geometry/AlignedBox.h	/^  inline NonInteger exteriorDistance(const AlignedBox& b) const$/;"	f	class:Eigen::AlignedBox
exteriorDistance	include/Eigen/src/Geometry/AlignedBox.h	/^  inline NonInteger exteriorDistance(const MatrixBase<Derived>& p) const$/;"	f	class:Eigen::AlignedBox
extract	include/Eigen/src/Core/Transpose.h	/^  static inline const XprType extract(const XprType& x) { return x; }$/;"	f	struct:Eigen::internal::blas_traits
extract	include/Eigen/src/Core/util/BlasUtil.h	/^  static inline ExtractType extract(const XprType& x) { return Base::extract(x.nestedExpression()); }$/;"	f	struct:Eigen::internal::blas_traits
extract	include/Eigen/src/Core/util/BlasUtil.h	/^  static inline ExtractType extract(const XprType& x) { return x; }$/;"	f	struct:Eigen::internal::blas_traits
extractData	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^void SuperLUBase<MatrixType,Derived>::extractData() const$/;"	f	class:Eigen::SuperLUBase
extractData	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^void UmfPackLU<MatrixType>::extractData() const$/;"	f	class:Eigen::UmfPackLU
extractScalarFactor	include/Eigen/src/Core/util/BlasUtil.h	/^  static inline Scalar extractScalarFactor(const XprType& x) { return Base::extractScalarFactor(x.nestedExpression()); }$/;"	f	struct:Eigen::internal::blas_traits
extractScalarFactor	include/Eigen/src/Core/util/BlasUtil.h	/^  static inline Scalar extractScalarFactor(const XprType& x) { return conj(Base::extractScalarFactor(x.nestedExpression())); }$/;"	f	struct:Eigen::internal::blas_traits
extractScalarFactor	include/Eigen/src/Core/util/BlasUtil.h	/^  static inline Scalar extractScalarFactor(const XprType& x)$/;"	f	struct:Eigen::internal::blas_traits
extractScalarFactor	include/Eigen/src/Core/util/BlasUtil.h	/^  static inline const Scalar extractScalarFactor(const XprType&) { return Scalar(1); }$/;"	f	struct:Eigen::internal::blas_traits
extract_data	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename T> const typename T::Scalar* extract_data(const T& m)$/;"	f	namespace:Eigen::internal
extract_data_selector	include/Eigen/src/Core/util/BlasUtil.h	/^struct extract_data_selector {$/;"	s	namespace:Eigen::internal
extract_data_selector	include/Eigen/src/Core/util/BlasUtil.h	/^struct extract_data_selector<T,false> {$/;"	s	namespace:Eigen::internal
factor	include/Eigen/src/Geometry/Scaling.h	/^  inline Scalar& factor() { return m_factor; }$/;"	f	class:Eigen::UniformScaling
factor	include/Eigen/src/Geometry/Scaling.h	/^  inline const Scalar& factor() const { return m_factor; }$/;"	f	class:Eigen::UniformScaling
factorize	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void factorize(const MatrixType& matrix)$/;"	f	class:Eigen::CholmodBase
factorize	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    DiagonalPreconditioner& factorize(const MatType& mat)$/;"	f	class:Eigen::DiagonalPreconditioner
factorize	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    IdentityPreconditioner& factorize(const MatrixType& ) { return *this; }$/;"	f	class:Eigen::IdentityPreconditioner
factorize	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^void IncompleteLUT<Scalar>::factorize(const _MatrixType& amat)$/;"	f	class:Eigen::IncompleteLUT
factorize	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Derived& factorize(const MatrixType& A)$/;"	f	class:Eigen::IterativeSolverBase
factorize	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void factorize(const MatrixType& matrix)$/;"	f	class:Eigen::PastixLDLT
factorize	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void factorize(const MatrixType& matrix)$/;"	f	class:Eigen::PastixLLT
factorize	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void factorize(const MatrixType& matrix)$/;"	f	class:Eigen::PastixLU
factorize	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^void PastixBase<Derived>::factorize(ColSpMatrix& mat)$/;"	f	class:Eigen::PastixBase
factorize	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^Derived& PardisoImpl<Derived>::factorize(const MatrixType& a)$/;"	f	class:Eigen::PardisoImpl
factorize	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void factorize(const MatrixType& a)$/;"	f	class:Eigen::SimplicialCholesky
factorize	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void factorize(const MatrixType& a)$/;"	f	class:Eigen::SimplicialCholeskyBase
factorize	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void factorize(const MatrixType& a)$/;"	f	class:Eigen::SimplicialLDLT
factorize	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    void factorize(const MatrixType& a)$/;"	f	class:Eigen::SimplicialLLT
factorize	include/Eigen/src/SparseLU/SparseLU.h	/^void SparseLU<MatrixType, OrderingType>::factorize(const MatrixType& matrix)$/;"	f	class:Eigen::SparseLU
factorize	include/Eigen/src/SparseQR/SparseQR.h	/^void SparseQR<MatrixType,OrderingType>::factorize(const MatrixType& mat)$/;"	f	class:Eigen::SparseQR
factorize	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^void SuperILU<MatrixType>::factorize(const MatrixType& a)$/;"	f	class:Eigen::SuperILU
factorize	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^void SuperLU<MatrixType>::factorize(const MatrixType& a)$/;"	f	class:Eigen::SuperLU
factorize	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void factorize(const InputMatrixType& matrix)$/;"	f	class:Eigen::UmfPackLU
factorize_impl	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void factorize_impl()$/;"	f	class:Eigen::UmfPackLU
factorize_preordered	include/Eigen/src/SparseCholesky/SimplicialCholesky_impl.h	/^void SimplicialCholeskyBase<Derived>::factorize_preordered(const CholMatrixType& ap)$/;"	f	class:Eigen::SimplicialCholeskyBase
false_type	include/Eigen/src/Core/util/Meta.h	/^struct false_type { enum { value = 0 }; };$/;"	s	namespace:Eigen::internal
fill	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE void DenseBase<Derived>::fill(const Scalar& val)$/;"	f	class:Eigen::DenseBase
fill	include/Eigen/src/Core/TriangularMatrix.h	/^    void fill(const Scalar& value) { setConstant(value); }$/;"	f	class:Eigen::TriangularView
fill	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fill(Index i)$/;"	f	class:Eigen::SparseVector
fill	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fill(Index r, Index c)$/;"	f	class:Eigen::SparseVector
fillfactor	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index fillfactor; \/\/ The estimated fills factors for L and U, compared with A$/;"	m	struct:Eigen::internal::perfvalues
fillrand	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fillrand(Index i)$/;"	f	class:Eigen::SparseVector
fillrand	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fillrand(Index r, Index c)$/;"	f	class:Eigen::SparseVector
finalize	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void finalize()$/;"	f	class:Eigen::SparseMatrix
finalize	include/Eigen/src/SparseCore/SparseVector.h	/^    inline void finalize() {}$/;"	f	class:Eigen::SparseVector
findSmallDiagEntry	include/Eigen/src/Eigenvalues/RealQZ.h	/^    inline typename MatrixType::Index RealQZ<MatrixType>::findSmallDiagEntry(Index f, Index l)$/;"	f	class:Eigen::RealQZ
findSmallSubdiagEntry	include/Eigen/src/Eigenvalues/RealQZ.h	/^    inline typename MatrixType::Index RealQZ<MatrixType>::findSmallSubdiagEntry(Index iu)$/;"	f	class:Eigen::RealQZ
findSmallSubdiagEntry	include/Eigen/src/Eigenvalues/RealSchur.h	/^inline typename MatrixType::Index RealSchur<MatrixType>::findSmallSubdiagEntry(Index iu, const Scalar& norm)$/;"	f	class:Eigen::RealSchur
find_ordering	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static Index find_ordering \/* return the number of garbage collections *\/$/;"	f	namespace:internal
finished	include/Eigen/src/Core/CommaInitializer.h	/^  inline XprType& finished() { return m_xpr; }$/;"	f	struct:Eigen::CommaInitializer
first	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RealPacket first;$/;"	m	struct:Eigen::internal::gebp_traits::DoublePacket
first_aligned	include/Eigen/src/Core/DenseCoeffsBase.h	/^static inline typename Derived::Index first_aligned(const Derived& m)$/;"	f	namespace:Eigen::internal
first_aligned	include/Eigen/src/Core/util/Memory.h	/^static inline Index first_aligned(const Scalar* array, Index size)$/;"	f	namespace:Eigen::internal
first_aligned_impl	include/Eigen/src/Core/DenseCoeffsBase.h	/^struct first_aligned_impl$/;"	s	namespace:Eigen::internal
first_aligned_impl	include/Eigen/src/Core/DenseCoeffsBase.h	/^struct first_aligned_impl<Derived, false>$/;"	s	namespace:Eigen::internal
first_column	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index first_column ;\/* first column in row (used in garbage collection) *\/$/;"	m	union:internal::Colamd_Row::__anon406
first_multiple	include/Eigen/src/Core/util/Memory.h	/^inline static Index first_multiple(Index size, Index base)$/;"	f	namespace:Eigen::internal
fitHyperplane	include/Eigen/src/Eigen2Support/LeastSquares.h	/^void fitHyperplane(int numPoints,$/;"	f	namespace:Eigen
fixupL	include/Eigen/src/SparseLU/SparseLU_Utils.h	/^void SparseLUImpl<Scalar,Index>::fixupL(const Index n, const IndexVector& perm_r, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
flagged	include/Eigen/src/Core/Flagged.h	/^DenseBase<Derived>::flagged() const$/;"	f	class:Eigen::DenseBase
flags	include/Eigen/src/Core/IO.h	/^  int flags;$/;"	m	struct:Eigen::IOFormat
floor_log2	include/Eigen/src/Core/MathFunctions.h	/^struct floor_log2 {};$/;"	s	namespace:Eigen::internal
floor_log2	include/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_bogus>$/;"	s	namespace:Eigen::internal
floor_log2	include/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_move_down>$/;"	s	namespace:Eigen::internal
floor_log2	include/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_move_up>$/;"	s	namespace:Eigen::internal
floor_log2	include/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_terminate>$/;"	s	namespace:Eigen::internal
floor_log2_bogus	include/Eigen/src/Core/MathFunctions.h	/^  floor_log2_bogus$/;"	e	enum:Eigen::internal::__anon179
floor_log2_move_down	include/Eigen/src/Core/MathFunctions.h	/^  floor_log2_move_down,$/;"	e	enum:Eigen::internal::__anon179
floor_log2_move_up	include/Eigen/src/Core/MathFunctions.h	/^  floor_log2_move_up,$/;"	e	enum:Eigen::internal::__anon179
floor_log2_selector	include/Eigen/src/Core/MathFunctions.h	/^template<unsigned int n, int lower, int upper> struct floor_log2_selector$/;"	s	namespace:Eigen::internal
floor_log2_terminate	include/Eigen/src/Core/MathFunctions.h	/^  floor_log2_terminate,$/;"	e	enum:Eigen::internal::__anon179
forceAlignedAccess	include/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccess() const$/;"	f	class:Eigen::MatrixBase
forceAlignedAccess	include/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccess()$/;"	f	class:Eigen::MatrixBase
forceAlignedAccessIf	include/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccessIf() const$/;"	f	class:Eigen::MatrixBase
forceAlignedAccessIf	include/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccessIf()$/;"	f	class:Eigen::MatrixBase
format	include/Eigen/src/Core/IO.h	/^DenseBase<Derived>::format(const IOFormat& fmt) const$/;"	f	class:Eigen::DenseBase
fortran_to_c_numbering	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  void fortran_to_c_numbering (MatrixType& mat)$/;"	f	namespace:Eigen::internal
fromPositionOrientationScale	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::fromPositionOrientationScale(const MatrixBase<PositionDerived> &position,$/;"	f	class:Eigen::Transform
fromPositionOrientationScale	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::fromPositionOrientationScale(const MatrixBase<PositionDerived> &position,$/;"	f	class:Eigen::Transform
fromRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^Rotation2D<Scalar>& Rotation2D<Scalar>::fromRotationMatrix(const MatrixBase<Derived>& mat)$/;"	f	class:Eigen::Rotation2D
fromRotationMatrix	include/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::fromRotationMatrix(const MatrixBase<Derived>& mat)$/;"	f	class:Eigen::AngleAxis
fromRotationMatrix	include/Eigen/src/Geometry/Rotation2D.h	/^Rotation2D<Scalar>& Rotation2D<Scalar>::fromRotationMatrix(const MatrixBase<Derived>& mat)$/;"	f	class:Eigen::Rotation2D
from_id	include/base/graph.h	/^						size_type from_id;$/;"	m	struct:msd::base::Graph::heap_node_t
fullPivHouseholderQr	include/Eigen/src/QR/FullPivHouseholderQR.h	/^MatrixBase<Derived>::fullPivHouseholderQr() const$/;"	f	class:Eigen::MatrixBase
fullPivLu	include/Eigen/src/LU/FullPivLU.h	/^MatrixBase<Derived>::fullPivLu() const$/;"	f	class:Eigen::MatrixBase
functor	include/Eigen/src/Core/CwiseBinaryOp.h	/^    const BinaryOp& functor() const { return m_functor; }$/;"	f	class:Eigen::CwiseBinaryOp
functor	include/Eigen/src/Core/CwiseNullaryOp.h	/^    const NullaryOp& functor() const { return m_functor; }$/;"	f	class:Eigen::CwiseNullaryOp
functor	include/Eigen/src/Core/CwiseUnaryOp.h	/^    const UnaryOp& functor() const { return m_functor; }$/;"	f	class:Eigen::CwiseUnaryOp
functor	include/Eigen/src/Core/CwiseUnaryView.h	/^    const ViewOp& functor() const { return m_functor; }$/;"	f	class:Eigen::CwiseUnaryView
functor	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    const BinaryOp& functor() const $/;"	f	class:Eigen::SelfCwiseBinaryOp
functor_has_linear_access	include/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_has_linear_access { enum { ret = 1 }; };$/;"	s	namespace:Eigen::internal
functor_has_linear_access	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct functor_has_linear_access<scalar_identity_op<Scalar> > { enum { ret = 0 }; };$/;"	s	namespace:Eigen::internal
functor_is_product_like	include/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_is_product_like { enum { ret = 0 }; };$/;"	s	namespace:Eigen::internal
functor_is_product_like	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_is_product_like<scalar_conj_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	s	namespace:Eigen::internal
functor_is_product_like	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_is_product_like<scalar_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	s	namespace:Eigen::internal
functor_is_product_like	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_is_product_like<scalar_quotient_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_abs2_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_abs_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_acos_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_add_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_asin_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_binary_pow_op<Scalar,OtherScalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_cast_op<Scalar,NewType> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_conj_product_op<LhsScalar,RhsScalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_conjugate_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_constant_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_cos_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_cube_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_difference_op<Scalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_exp_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_hypot_op<Scalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_identity_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_imag_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_imag_ref_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_inverse_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_log_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_max_op<Scalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_min_op<Scalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_multiple2_op<Scalar1,Scalar2> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_multiple_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_opposite_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_pow_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_product_op<LhsScalar,RhsScalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_quotient1_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_quotient_op<LhsScalar,RhsScalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_real_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_real_ref_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_sin_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_sqrt_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_square_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_sum_op<Scalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_tan_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binary_compose<T0,T1,T2> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binary_negate<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binder1st<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binder2nd<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::divides<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::equal_to<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::greater<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::greater_equal<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::less<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::less_equal<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::logical_and<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::logical_not<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::logical_or<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::minus<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::multiplies<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::negate<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::not_equal_to<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::plus<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::project1st<T0,T1> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::project2nd<T0,T1> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::select1st<std::pair<T0,T1> > >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::select2nd<std::pair<T0,T1> > >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::unary_compose<T0,T1> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^struct functor_traits<std::unary_negate<T> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^template <typename Scalar, bool RandomAccess> struct functor_traits< linspaced_op<Scalar,RandomAccess> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^template<> struct functor_traits<scalar_boolean_and_op> {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Functors.h	/^template<> struct functor_traits<scalar_boolean_or_op> {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Random.h	/^struct functor_traits<scalar_random_op<Scalar> >$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Visitor.h	/^struct functor_traits<max_coeff_visitor<Scalar> > {$/;"	s	namespace:Eigen::internal
functor_traits	include/Eigen/src/Core/Visitor.h	/^struct functor_traits<min_coeff_visitor<Scalar> > {$/;"	s	namespace:Eigen::internal
garbage_collection	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static Index garbage_collection  \/* returns the new value of pfree *\/$/;"	f	namespace:internal
gebp_kernel	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gebp_kernel$/;"	s	namespace:Eigen::internal
gebp_madd	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void gebp_madd(const CJ& cj, A& a, B& b, C& c, T& t)$/;"	f	namespace:Eigen::internal
gebp_madd_selector	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  template<typename CJ, typename A, typename B, typename C, typename T> struct gebp_madd_selector {$/;"	s	namespace:Eigen::internal
gebp_madd_selector	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  template<typename CJ, typename T> struct gebp_madd_selector<CJ,T,T,T,T> {$/;"	s	namespace:Eigen::internal
gebp_traits	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits$/;"	c	namespace:Eigen::internal
gebp_traits	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits<RealScalar, std::complex<RealScalar>, false, _ConjRhs >$/;"	c	namespace:Eigen::internal
gebp_traits	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits<std::complex<RealScalar>, RealScalar, _ConjLhs, false>$/;"	c	namespace:Eigen::internal
gebp_traits	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits<std::complex<RealScalar>, std::complex<RealScalar>, _ConjLhs, _ConjRhs >$/;"	c	namespace:Eigen::internal
gemm_blocking_space	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    gemm_blocking_space(DenseIndex \/*rows*\/, DenseIndex \/*cols*\/, DenseIndex \/*depth*\/)$/;"	f	class:Eigen::internal::gemm_blocking_space
gemm_blocking_space	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    gemm_blocking_space(DenseIndex rows, DenseIndex cols, DenseIndex depth)$/;"	f	class:Eigen::internal::gemm_blocking_space
gemm_blocking_space	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class gemm_blocking_space<StorageOrder,_LhsScalar,_RhsScalar,MaxRows, MaxCols, MaxDepth, KcFactor, false>$/;"	c	namespace:Eigen::internal
gemm_blocking_space	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class gemm_blocking_space<StorageOrder,_LhsScalar,_RhsScalar,MaxRows, MaxCols, MaxDepth, KcFactor, true>$/;"	c	namespace:Eigen::internal
gemm_functor	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  gemm_functor(const Lhs& lhs, const Rhs& rhs, Dest& dest, const Scalar& actualAlpha,$/;"	f	struct:Eigen::internal::gemm_functor
gemm_functor	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct gemm_functor$/;"	s	namespace:Eigen::internal
gemm_pack_lhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gemm_pack_lhs$/;"	s	namespace:Eigen::internal
gemm_pack_rhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gemm_pack_rhs<Scalar, Index, nr, ColMajor, Conjugate, PanelMode>$/;"	s	namespace:Eigen::internal
gemm_pack_rhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gemm_pack_rhs<Scalar, Index, nr, RowMajor, Conjugate, PanelMode>$/;"	s	namespace:Eigen::internal
gemv_selector	include/Eigen/src/Core/GeneralProduct.h	/^struct gemv_selector<OnTheLeft,StorageOrder,BlasCompatible>$/;"	s	namespace:Eigen::internal
gemv_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<> struct gemv_selector<OnTheRight,ColMajor,false>$/;"	s	namespace:Eigen::internal
gemv_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<> struct gemv_selector<OnTheRight,ColMajor,true>$/;"	s	namespace:Eigen::internal
gemv_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<> struct gemv_selector<OnTheRight,RowMajor,false>$/;"	s	namespace:Eigen::internal
gemv_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<> struct gemv_selector<OnTheRight,RowMajor,true>$/;"	s	namespace:Eigen::internal
gemv_static_vector_if	include/Eigen/src/Core/GeneralProduct.h	/^struct gemv_static_vector_if<Scalar,Size,Dynamic,true>$/;"	s	namespace:Eigen::internal
gemv_static_vector_if	include/Eigen/src/Core/GeneralProduct.h	/^struct gemv_static_vector_if<Scalar,Size,MaxSize,false>$/;"	s	namespace:Eigen::internal
gemv_static_vector_if	include/Eigen/src/Core/GeneralProduct.h	/^struct gemv_static_vector_if<Scalar,Size,MaxSize,true>$/;"	s	namespace:Eigen::internal
general_det3_helper	include/Eigen/src/LU/Inverse.h	/^inline const typename Derived::Scalar general_det3_helper$/;"	f	namespace:Eigen::internal
general_matrix_matrix_product	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct general_matrix_matrix_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,ColMajor>$/;"	s	namespace:Eigen::internal
general_matrix_matrix_product	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct general_matrix_matrix_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,RowMajor>$/;"	s	namespace:Eigen::internal
general_matrix_matrix_rankupdate	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular_MKL.h	/^struct general_matrix_matrix_rankupdate :$/;"	s	namespace:Eigen::internal
general_matrix_matrix_triangular_product	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct general_matrix_matrix_triangular_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,ColMajor,UpLo,Version>$/;"	s	namespace:Eigen::internal
general_matrix_matrix_triangular_product	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct general_matrix_matrix_triangular_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,RowMajor,UpLo,Version>$/;"	s	namespace:Eigen::internal
general_matrix_vector_product	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^struct general_matrix_vector_product<Index,LhsScalar,ColMajor,ConjugateLhs,RhsScalar,ConjugateRhs,Version>$/;"	s	namespace:Eigen::internal
general_matrix_vector_product	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^struct general_matrix_vector_product<Index,LhsScalar,RowMajor,ConjugateLhs,RhsScalar,ConjugateRhs,Version>$/;"	s	namespace:Eigen::internal
general_matrix_vector_product_gemv	include/Eigen/src/Core/products/GeneralMatrixVector_MKL.h	/^struct general_matrix_vector_product_gemv :$/;"	s	namespace:Eigen::internal
general_product_to_triangular_selector	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct general_product_to_triangular_selector<MatrixType,ProductType,UpLo,false>$/;"	s	namespace:Eigen
general_product_to_triangular_selector	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct general_product_to_triangular_selector<MatrixType,ProductType,UpLo,true>$/;"	s	namespace:Eigen
generic_aligned_realloc	include/Eigen/src/Core/util/Memory.h	/^inline void* generic_aligned_realloc(void* ptr, size_t size, size_t old_size)$/;"	f	namespace:Eigen::internal
get	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    static Scalar get(const _RhsNested &rhs, Index outer, Dense = Dense())$/;"	f	class:Eigen::SparseDenseOuterProduct::InnerIterator
get	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    static Scalar get(const _RhsNested &rhs, Index outer, Sparse = Sparse())$/;"	f	class:Eigen::SparseDenseOuterProduct::InnerIterator
getL	include/Eigen/src/Cholesky/LDLT.h	/^  static inline MatrixL getL(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:Eigen::internal::LDLT_Traits
getL	include/Eigen/src/Cholesky/LDLT.h	/^  static inline MatrixL getL(const MatrixType& m) { return m; }$/;"	f	struct:Eigen::internal::LDLT_Traits
getL	include/Eigen/src/Cholesky/LLT.h	/^  static inline MatrixL getL(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:Eigen::internal::LLT_Traits
getL	include/Eigen/src/Cholesky/LLT.h	/^  static inline MatrixL getL(const MatrixType& m) { return m; }$/;"	f	struct:Eigen::internal::LLT_Traits
getL	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  static inline MatrixL getL(const MatrixType& m) { return m; }$/;"	f	struct:Eigen::internal::traits
getMatrix	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    void getMatrix(const MatrixType& matrix)$/;"	f	class:Eigen::PardisoLDLT
getMatrix	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    void getMatrix(const MatrixType& matrix)$/;"	f	class:Eigen::PardisoLLT
getMatrix	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    void getMatrix(const MatrixType& matrix)$/;"	f	class:Eigen::PardisoLU
getMaxIterations	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    Index getMaxIterations()$/;"	f	class:Eigen::ComplexEigenSolver
getMaxIterations	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    Index getMaxIterations()$/;"	f	class:Eigen::ComplexSchur
getMaxIterations	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    Index getMaxIterations()$/;"	f	class:Eigen::EigenSolver
getMaxIterations	include/Eigen/src/Eigenvalues/RealSchur.h	/^    Index getMaxIterations()$/;"	f	class:Eigen::RealSchur
getU	include/Eigen/src/Cholesky/LDLT.h	/^  static inline MatrixU getU(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:Eigen::internal::LDLT_Traits
getU	include/Eigen/src/Cholesky/LDLT.h	/^  static inline MatrixU getU(const MatrixType& m) { return m; }$/;"	f	struct:Eigen::internal::LDLT_Traits
getU	include/Eigen/src/Cholesky/LLT.h	/^  static inline MatrixU getU(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:Eigen::internal::LLT_Traits
getU	include/Eigen/src/Cholesky/LLT.h	/^  static inline MatrixU getU(const MatrixType& m) { return m; }$/;"	f	struct:Eigen::internal::LLT_Traits
getU	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^  static inline MatrixU getU(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:Eigen::internal::traits
get_factor	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename From,typename To> struct get_factor {$/;"	s	namespace:Eigen::internal
get_factor	include/Eigen/src/Core/util/BlasUtil.h	/^template<typename Scalar> struct get_factor<Scalar,typename NumTraits<Scalar>::Real> {$/;"	s	namespace:Eigen::internal
get_graph	include/base/reader_graph.h	/^			Graph<T> GraphReader<T>::get_graph()$/;"	f	class:msd::base::GraphReader
get_symmetrized_graph	include/Eigen/src/MetisSupport/MetisSupport.h	/^  void get_symmetrized_graph(const MatrixType& A)$/;"	f	class:Eigen::MetisOrdering
get_vertex	include/base/graph.h	/^			inline std::vector<T>& Graph<T>::get_vertex(const T& index)$/;"	f	class:msd::base::Graph
get_vertex_id	include/base/graph.h	/^			inline std::vector<T>& Graph<T>::get_vertex_id(size_type index)$/;"	f	class:msd::base::Graph
get_vertex_name	include/base/graph.h	/^					T get_vertex_name(size_type index) $/;"	f	class:msd::base::Graph
global_math_functions_filtering_base	include/Eigen/src/Core/MathFunctions.h	/^struct global_math_functions_filtering_base$/;"	s	namespace:Eigen::internal
grabMatrix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void grabMatrix(const MatrixType& matrix, ColSpMatrix& out)$/;"	f	class:Eigen::PastixLDLT
grabMatrix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void grabMatrix(const MatrixType& matrix, ColSpMatrix& out)$/;"	f	class:Eigen::PastixLLT
grabMatrix	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void grabMatrix(const MatrixType& matrix, ColSpMatrix& out)$/;"	f	class:Eigen::PastixLU
grapInput	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void grapInput(const InputMatrixType& mat)$/;"	f	class:Eigen::UmfPackLU
grapInput_impl	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void grapInput_impl(const InputMatrixType& mat, internal::false_type)$/;"	f	class:Eigen::UmfPackLU
grapInput_impl	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void grapInput_impl(const InputMatrixType& mat, internal::true_type)$/;"	f	class:Eigen::UmfPackLU
graph_to_matrix	centrality/eigen.h	/^			void graph_to_matrix(Graph<T>& graph, Eigen::MatrixXd& matrix)$/;"	f	namespace:msd::centrality
hCoeffs	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    const HCoeffsType& hCoeffs() const { return m_hCoeffs; }$/;"	f	class:Eigen::ColPivHouseholderQR
hCoeffs	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    const HCoeffsType& hCoeffs() const { return m_hCoeffs; }$/;"	f	class:Eigen::FullPivHouseholderQR
hCoeffs	include/Eigen/src/QR/HouseholderQR.h	/^    const HCoeffsType& hCoeffs() const { return m_hCoeffs; }$/;"	f	class:Eigen::HouseholderQR
handmade_aligned_free	include/Eigen/src/Core/util/Memory.h	/^inline void handmade_aligned_free(void *ptr)$/;"	f	namespace:Eigen::internal
handmade_aligned_malloc	include/Eigen/src/Core/util/Memory.h	/^inline void* handmade_aligned_malloc(std::size_t size)$/;"	f	namespace:Eigen::internal
handmade_aligned_realloc	include/Eigen/src/Core/util/Memory.h	/^inline void* handmade_aligned_realloc(void* ptr, std::size_t size, std::size_t = 0)$/;"	f	namespace:Eigen::internal
hasNaN	include/Eigen/src/Core/BooleanRedux.h	/^inline bool DenseBase<Derived>::hasNaN() const$/;"	f	class:Eigen::DenseBase
has_direct_access	include/Eigen/src/Core/util/ForwardDeclarations.h	/^  enum { has_direct_access = (traits<Derived>::Flags & DirectAccessBit) ? 1 : 0,$/;"	e	enum:Eigen::internal::accessors_level::__anon273
has_direct_access	include/Eigen/src/Core/util/ForwardDeclarations.h	/^template<typename Derived> struct has_direct_access$/;"	s	namespace:Eigen::internal
has_none	include/Eigen/src/Core/util/Meta.h	/^struct has_none {int a[1];};$/;"	s	namespace:Eigen::internal
has_std_result_type	include/Eigen/src/Core/util/Meta.h	/^struct has_std_result_type {int a[2];};$/;"	s	namespace:Eigen::internal
has_tr1_result	include/Eigen/src/Core/util/Meta.h	/^struct has_tr1_result {int a[3];};$/;"	s	namespace:Eigen::internal
has_write_access	include/Eigen/src/Core/util/ForwardDeclarations.h	/^         has_write_access = (traits<Derived>::Flags & LvalueBit) ? 1 : 0,$/;"	e	enum:Eigen::internal::accessors_level::__anon273
hash	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index hash ;  \/* hash value, if col is not in a degree list *\/$/;"	m	union:internal::colamd_col::__anon403
hash_next	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index hash_next ;   \/* next column, if col is in a hash list *\/$/;"	m	union:internal::colamd_col::__anon404
head	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstSegmentReturnType head(Index n) const$/;"	f
head	include/Eigen/src/plugins/BlockMethods.h	/^inline SegmentReturnType head(Index n)$/;"	f
head	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstFixedSegmentReturnType<N>::Type head(Index n = N) const$/;"	f
head	include/Eigen/src/plugins/BlockMethods.h	/^inline typename FixedSegmentReturnType<N>::Type head(Index n = N)$/;"	f
headhash	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index headhash ;  \/* head of a hash bucket, if col is at the head of *\/$/;"	m	union:internal::colamd_col::__anon403
heap_node_t	include/base/graph.h	/^						heap_node_t() {};$/;"	f	struct:msd::base::Graph::heap_node_t
heap_node_t	include/base/graph.h	/^						heap_node_t(size_type _from_id, double _dist) : $/;"	f	struct:msd::base::Graph::heap_node_t
heap_node_t	include/base/graph.h	/^					struct heap_node_t {$/;"	s	class:msd::base::Graph
heap_relax_snode	include/Eigen/src/SparseLU/SparseLU_heap_relax_snode.h	/^void SparseLUImpl<Scalar,Index>::heap_relax_snode (const Index n, IndexVector& et, const Index relax_columns, IndexVector& descendants, IndexVector& relax_end)$/;"	f	class:Eigen::internal::SparseLUImpl
hessenbergTriangular	include/Eigen/src/Eigenvalues/RealQZ.h	/^    void RealQZ<MatrixType>::hessenbergTriangular()$/;"	f	class:Eigen::RealQZ
hnormalized	include/Eigen/src/Geometry/Homogeneous.h	/^MatrixBase<Derived>::hnormalized() const$/;"	f	class:Eigen::MatrixBase
hnormalized	include/Eigen/src/Geometry/Homogeneous.h	/^VectorwiseOp<ExpressionType,Direction>::hnormalized() const$/;"	f	class:Eigen::VectorwiseOp
homogeneous	include/Eigen/src/Geometry/Homogeneous.h	/^MatrixBase<Derived>::homogeneous() const$/;"	f	class:Eigen::MatrixBase
homogeneous	include/Eigen/src/Geometry/Homogeneous.h	/^VectorwiseOp<ExpressionType,Direction>::homogeneous() const$/;"	f	class:Eigen::VectorwiseOp
homogeneous_left_product_impl	include/Eigen/src/Geometry/Homogeneous.h	/^  homogeneous_left_product_impl(const Lhs& lhs, const MatrixType& rhs)$/;"	f	struct:Eigen::internal::homogeneous_left_product_impl
homogeneous_left_product_impl	include/Eigen/src/Geometry/Homogeneous.h	/^struct homogeneous_left_product_impl<Homogeneous<MatrixType,Vertical>,Lhs>$/;"	s	namespace:Eigen::internal
homogeneous_right_product_impl	include/Eigen/src/Geometry/Homogeneous.h	/^  homogeneous_right_product_impl(const MatrixType& lhs, const Rhs& rhs)$/;"	f	struct:Eigen::internal::homogeneous_right_product_impl
homogeneous_right_product_impl	include/Eigen/src/Geometry/Homogeneous.h	/^struct homogeneous_right_product_impl<Homogeneous<MatrixType,Horizontal>,Rhs>$/;"	s	namespace:Eigen::internal
householder	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    const MatrixType& householder() const { return m_householder; }$/;"	f	class:Eigen::internal::UpperBidiagonalization
householderCoefficients	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    const CoeffVectorType& householderCoefficients() const$/;"	f	class:Eigen::HessenbergDecomposition
householderCoefficients	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    inline CoeffVectorType householderCoefficients() const$/;"	f	class:Eigen::Tridiagonalization
householderQ	include/Eigen/src/QR/ColPivHouseholderQR.h	/^  ::householderQ() const$/;"	f	class:Eigen::ColPivHouseholderQR
householderQ	include/Eigen/src/QR/HouseholderQR.h	/^    HouseholderSequenceType householderQ() const$/;"	f	class:Eigen::HouseholderQR
householderQr	include/Eigen/src/QR/HouseholderQR.h	/^MatrixBase<Derived>::householderQr() const$/;"	f	class:Eigen::MatrixBase
householderSequence	include/Eigen/src/Householder/HouseholderSequence.h	/^HouseholderSequence<VectorsType,CoeffsType> householderSequence(const VectorsType& v, const CoeffsType& h)$/;"	f	namespace:Eigen
householderU	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    const HouseholderUSequenceType householderU() const$/;"	f	class:Eigen::internal::UpperBidiagonalization
householderV	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    const HouseholderVSequenceType householderV() \/\/ const here gives nasty errors and i'm lazy$/;"	f	class:Eigen::internal::UpperBidiagonalization
householder_qr_inplace_blocked	include/Eigen/src/QR/HouseholderQR.h	/^void householder_qr_inplace_blocked(MatrixQR& mat, HCoeffs& hCoeffs,$/;"	f	namespace:Eigen::internal
householder_qr_inplace_unblocked	include/Eigen/src/QR/HouseholderQR.h	/^void householder_qr_inplace_unblocked(MatrixQR& mat, HCoeffs& hCoeffs, typename MatrixQR::Scalar* tempData = 0)$/;"	f	namespace:Eigen::internal
hseq_side_dependent_impl	include/Eigen/src/Householder/HouseholderSequence.h	/^struct hseq_side_dependent_impl$/;"	s	namespace:Eigen::internal
hseq_side_dependent_impl	include/Eigen/src/Householder/HouseholderSequence.h	/^struct hseq_side_dependent_impl<VectorsType, CoeffsType, OnTheRight>$/;"	s	namespace:Eigen::internal
hypot	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(hypot, Scalar) hypot(const Scalar& x, const Scalar& y)$/;"	f	namespace:Eigen::numext
hypotNorm	include/Eigen/src/Core/StableNorm.h	/^MatrixBase<Derived>::hypotNorm() const$/;"	f	class:Eigen::MatrixBase
hypotNorm	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_hypotNorm,RealScalar>::Type hypotNorm() const$/;"	f	class:Eigen::VectorwiseOp
hypot_impl	include/Eigen/src/Core/MathFunctions.h	/^struct hypot_impl$/;"	s	namespace:Eigen::internal
hypot_retval	include/Eigen/src/Core/MathFunctions.h	/^struct hypot_retval$/;"	s	namespace:Eigen::internal
icc_11_workaround	include/Eigen/src/Geometry/Transform.h	/^  template<int OtherMode,int OtherOptions> struct icc_11_workaround$/;"	s	class:Eigen::Transform
ignore_unused_variable	include/Eigen/src/Core/util/Macros.h	/^    template<typename T> void ignore_unused_variable(const T&) {}$/;"	f	namespace:Eigen::internal
imag	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(imag, Scalar) imag(const Scalar& x)$/;"	f	namespace:Eigen::numext
imag	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^imag() const { return derived(); }$/;"	f
imag	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^imag() { return derived(); }$/;"	f
imag_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct imag_default_impl$/;"	s	namespace:Eigen::internal
imag_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct imag_default_impl<Scalar,true>$/;"	s	namespace:Eigen::internal
imag_impl	include/Eigen/src/Core/MathFunctions.h	/^template<typename Scalar> struct imag_impl : imag_default_impl<Scalar> {};$/;"	s	namespace:Eigen::internal
imag_ref	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(imag_ref, Scalar) imag_ref(Scalar& x)$/;"	f	namespace:Eigen::numext
imag_ref	include/Eigen/src/Core/MathFunctions.h	/^inline typename internal::add_const_on_value_type< EIGEN_MATHFUNC_RETVAL(imag_ref, Scalar) >::type imag_ref(const Scalar& x)$/;"	f	namespace:Eigen::numext
imag_ref_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_default_impl$/;"	s	namespace:Eigen::internal
imag_ref_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_default_impl<Scalar, false>$/;"	s	namespace:Eigen::internal
imag_ref_impl	include/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_impl : imag_ref_default_impl<Scalar, NumTraits<Scalar>::IsComplex> {};$/;"	s	namespace:Eigen::internal
imag_ref_retval	include/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_retval$/;"	s	namespace:Eigen::internal
imag_retval	include/Eigen/src/Core/MathFunctions.h	/^struct imag_retval$/;"	s	namespace:Eigen::internal
image	include/Eigen/src/Eigen2Support/LU.h	/^    const ImageResultType image() const$/;"	f	class:Eigen::LU
image	include/Eigen/src/LU/FullPivLU.h	/^      image(const MatrixType& originalMatrix) const$/;"	f	class:Eigen::FullPivLU
image_retval	include/Eigen/src/LU/FullPivLU.h	/^struct image_retval<FullPivLU<_MatrixType> >$/;"	s	namespace:Eigen::internal
image_retval_base	include/Eigen/src/misc/Image.h	/^  image_retval_base(const DecompositionType& dec, const MatrixType& originalMatrix)$/;"	f	struct:Eigen::internal::image_retval_base
image_retval_base	include/Eigen/src/misc/Image.h	/^template<typename _DecompositionType> struct image_retval_base$/;"	s	namespace:Eigen::internal
impl	include/Eigen/src/Core/Functors.h	/^  const linspaced_op_impl<Scalar,RandomAccess> impl;$/;"	m	struct:Eigen::internal::linspaced_op
incrementToNonZero	include/Eigen/src/SparseCore/SparseView.h	/^  void incrementToNonZero()$/;"	f	class:Eigen::SparseView::InnerIterator
index	include/Eigen/src/Core/CoreIterators.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_inner; }$/;"	f	class:Eigen::DenseBase::InnerIterator
index	include/Eigen/src/Core/Diagonal.h	/^    int index() const$/;"	f	class:Eigen::Diagonal
index	include/Eigen/src/Core/Redux.h	/^    index = Start * packet_traits<typename Derived::Scalar>::size,$/;"	e	enum:Eigen::internal::redux_vec_unroller::__anon234
index	include/Eigen/src/SparseCore/AmbiVector.h	/^      Index index;$/;"	m	struct:Eigen::internal::AmbiVector::ListEl
index	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index index() const { return m_cachedIndex; }$/;"	f	class:Eigen::internal::AmbiVector::Iterator
index	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline Index& index(size_t i) { return m_indices[i]; }$/;"	f	class:Eigen::internal::CompressedStorage
index	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline const Index& index(size_t i) const { return m_indices[i]; }$/;"	f	class:Eigen::internal::CompressedStorage
index	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index index() const { return m_matrix.innerIndexPtr()[m_id-1]; }$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
index	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index index() const { return m_matrix.innerIndexPtr()[m_id]; }$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
index	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index index()  const { return Base::index() - (IsRowMajor ? m_block.m_startCol.value() : m_block.m_startRow.value()); }$/;"	f	class:Eigen::BlockImpl::InnerIterator
index	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index index()  const { return Base::index() - (IsRowMajor ? m_block.m_startCol.value() : m_block.m_startRow.value()); }$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
index	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_id; }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
index	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_lhsIter.index(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
index	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_rhsIter.index(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
index	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index index() const { return m_indices[m_id-1]; }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
index	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index index() const { return m_indices[m_id]; }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
index	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Index index() const$/;"	f	class:Eigen::SparseTriangularView::InnerIterator
index	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Index index() const { return m_data.index(m_id); }$/;"	f	class:Eigen::SparseVector::InnerIterator
index	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Index index() const { return m_data.index(m_id-1); }$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
index	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline Index index() const { return m_matrix.rowIndex()[m_idrow]; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
indices	include/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType& indices() { return derived().indices(); }$/;"	f	class:Eigen::PermutationBase
indices	include/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Eigen::Map
indices	include/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Eigen::PermutationMatrix
indices	include/Eigen/src/Core/PermutationMatrix.h	/^    const IndicesType& indices() const { return derived().indices(); }$/;"	f	class:Eigen::PermutationBase
indices	include/Eigen/src/Core/PermutationMatrix.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Eigen::Map
indices	include/Eigen/src/Core/PermutationMatrix.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Eigen::PermutationMatrix
indices	include/Eigen/src/Core/PermutationMatrix.h	/^    indices() const { return m_indices; }$/;"	f	class:Eigen::PermutationWrapper
indices	include/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return derived().indices(); }$/;"	f	class:Eigen::TranspositionsBase
indices	include/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Eigen::Map
indices	include/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Eigen::Transpositions
indices	include/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Eigen::TranspositionsWrapper
indices	include/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return derived().indices(); }$/;"	f	class:Eigen::TranspositionsBase
indices	include/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Eigen::Map
indices	include/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Eigen::Transpositions
indices	include/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Eigen::TranspositionsWrapper
info	include/Eigen/src/Cholesky/LDLT.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::LDLT
info	include/Eigen/src/Cholesky/LLT.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::LLT
info	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::CholmodBase
info	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::ComplexEigenSolver
info	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::ComplexSchur
info	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::EigenSolver
info	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::GeneralizedEigenSolver
info	include/Eigen/src/Eigenvalues/RealQZ.h	/^      ComputationInfo info() const$/;"	f	class:Eigen::RealQZ
info	include/Eigen/src/Eigenvalues/RealSchur.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::RealSchur
info	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::SelfAdjointEigenSolver
info	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::IncompleteLUT
info	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  ComputationInfo info() const$/;"	f	class:Eigen::IterativeSolverBase
info	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::PastixBase
info	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::PardisoImpl
info	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::ColPivHouseholderQR
info	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::SPQR
info	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::SimplicialCholeskyBase
info	include/Eigen/src/SparseLU/SparseLU.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::SparseLU
info	include/Eigen/src/SparseQR/SparseQR.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::SparseQR
info	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::SuperLUBase
info	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    ComputationInfo info() const$/;"	f	class:Eigen::UmfPackLU
init	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void init()$/;"	f	class:Eigen::CholmodDecomposition
init	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void init()$/;"	f	class:Eigen::CholmodSimplicialLDLT
init	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void init()$/;"	f	class:Eigen::CholmodSimplicialLLT
init	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void init()$/;"	f	class:Eigen::CholmodSupernodalLLT
init	include/Eigen/src/Core/Block.h	/^    void init()$/;"	f	class:Eigen::internal::BlockImpl_dense
init	include/Eigen/src/Core/Visitor.h	/^  inline void init(const Scalar& value, Index i, Index j)$/;"	f	struct:Eigen::internal::coeff_visitor
init	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  void init()$/;"	f	class:Eigen::IterativeSolverBase
init	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void init()$/;"	f	class:Eigen::PastixLDLT
init	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void init()$/;"	f	class:Eigen::PastixLLT
init	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    void init()$/;"	f	class:Eigen::PastixLU
init	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^void PastixBase<Derived>::init()$/;"	f	class:Eigen::PastixBase
init	include/Eigen/src/SparseCore/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::init(double estimatedDensity)$/;"	f	class:Eigen::internal::AmbiVector
init	include/Eigen/src/SparseCore/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::init(int mode)$/;"	f	class:Eigen::internal::AmbiVector
init	include/Eigen/src/SparseCore/SparseProduct.h	/^    void init()$/;"	f	class:Eigen::SparseSparseProduct
init	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void init()$/;"	f	class:Eigen::SuperILU
init	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void init()$/;"	f	class:Eigen::SuperLU
init	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void init()$/;"	f	class:Eigen::SuperLUBase
init	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void init()$/;"	f	class:Eigen::UmfPackLU
initAcc	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void initAcc(AccPacket& p)$/;"	f	class:Eigen::internal::gebp_traits
initAcc	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void initAcc(DoublePacket& p)$/;"	f	class:Eigen::internal::gebp_traits
initAcc	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void initAcc(Scalar& p) { p = Scalar(0); }$/;"	f	class:Eigen::internal::gebp_traits
initAssignment	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void initAssignment(const Other& other)$/;"	f	class:Eigen::SparseMatrix
initFactorization	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void initFactorization(const MatrixType& a)$/;"	f	class:Eigen::SuperLUBase
initFrancisQRStep	include/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::initFrancisQRStep(Index il, Index iu, const Vector3s& shiftInfo, Index& im, Vector3s& firstHouseholderVector)$/;"	f	class:Eigen::RealSchur
initParallel	include/Eigen/src/Core/products/Parallelizer.h	/^inline void initParallel()$/;"	f	namespace:Eigen
initParallelSession	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  void initParallelSession() const$/;"	f	struct:Eigen::internal::gemm_functor
init_rows_cols	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static Index init_rows_cols  \/* returns true if OK, or false otherwise *\/$/;"	f	namespace:internal
init_scoring	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static void init_scoring$/;"	f	namespace:internal
initperfvalues	include/Eigen/src/SparseLU/SparseLU.h	/^    void initperfvalues()$/;"	f	class:Eigen::SparseLU
inner	include/Eigen/src/Core/Assign.h	/^    inner = Index % Derived1::InnerSizeAtCompileTime$/;"	e	enum:Eigen::internal::assign_DefaultTraversal_CompleteUnrolling::__anon39
inner	include/Eigen/src/Core/Assign.h	/^    inner = Index % Derived1::InnerSizeAtCompileTime,$/;"	e	enum:Eigen::internal::assign_innervec_CompleteUnrolling::__anon40
inner	include/Eigen/src/Core/Redux.h	/^    inner = Start % Derived::InnerSizeAtCompileTime$/;"	e	enum:Eigen::internal::redux_novec_unroller::__anon232
inner	include/Eigen/src/Core/Redux.h	/^    inner = index % int(Derived::InnerSizeAtCompileTime),$/;"	e	enum:Eigen::internal::redux_vec_unroller::__anon234
inner	include/Eigen/src/Core/Stride.h	/^    inline Index inner() const { return m_inner.value(); }$/;"	f	class:Eigen::Stride
innerInd	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    int *innerInd;$/;"	m	struct:Eigen::SluMatrix::__anon457
innerIndexPtr	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index* innerIndexPtr() { return m_innerIndices; }$/;"	f	class:Eigen::MappedSparseMatrix
innerIndexPtr	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline const Index* innerIndexPtr() const { return m_innerIndices; }$/;"	f	class:Eigen::MappedSparseMatrix
innerIndexPtr	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline Index* innerIndexPtr()$/;"	f	class:Eigen::BlockImpl
innerIndexPtr	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline const Index* innerIndexPtr() const$/;"	f	class:Eigen::BlockImpl
innerIndexPtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index* innerIndexPtr() { return &m_data.index(0); }$/;"	f	class:Eigen::SparseMatrix
innerIndexPtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline const Index* innerIndexPtr() const { return &m_data.index(0); }$/;"	f	class:Eigen::SparseMatrix
innerIndexPtr	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE Index* innerIndexPtr() { return &m_data.index(0); }$/;"	f	class:Eigen::SparseVector
innerIndexPtr	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE const Index* innerIndexPtr() const { return &m_data.index(0); }$/;"	f	class:Eigen::SparseVector
innerNonZeroPtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index* innerNonZeroPtr() { return m_innerNonZeros; }$/;"	f	class:Eigen::SparseMatrix
innerNonZeroPtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline const Index* innerNonZeroPtr() const { return m_innerNonZeros; }$/;"	f	class:Eigen::SparseMatrix
innerNonZeros	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Eigen::Map<Matrix<Index,Dynamic,1> > innerNonZeros() { return Eigen::Map<Matrix<Index,Dynamic,1> >(m_innerNonZeros, m_innerNonZeros?m_outerSize:0); }$/;"	f	class:Eigen::SparseMatrix
innerNonZeros	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const  Eigen::Map<const Matrix<Index,Dynamic,1> > innerNonZeros() const { return Eigen::Map<const Matrix<Index,Dynamic,1> >(m_innerNonZeros, m_innerNonZeros?m_outerSize:0); }$/;"	f	class:Eigen::SparseMatrix
innerSize	include/Eigen/src/Core/DenseBase.h	/^    Index innerSize() const$/;"	f	class:Eigen::DenseBase
innerSize	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index innerSize() const { return m_innerSize; }$/;"	f	class:Eigen::MappedSparseMatrix
innerSize	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index innerSize() const { return m_innerSize; }$/;"	f	class:Eigen::SparseMatrix
innerSize	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    Index innerSize() const { return (int(Flags)&RowMajorBit) ? this->cols() : this->rows(); }$/;"	f	class:Eigen::SparseMatrixBase
innerSize	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE Index innerSize() const { return m_size; }$/;"	f	class:Eigen::SparseVector
innerSize	include/Eigen/src/SparseCore/SparseView.h	/^  inline Index innerSize() const { return m_matrix.innerSize(); }$/;"	f	class:Eigen::SparseView
innerStride	include/Eigen/src/Core/Array.h	/^    inline Index innerStride() const { return 1; }$/;"	f	class:Eigen::Array
innerStride	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:Eigen::ArrayWrapper
innerStride	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:Eigen::MatrixWrapper
innerStride	include/Eigen/src/Core/Block.h	/^    inline Index innerStride() const$/;"	f	class:Eigen::internal::BlockImpl_dense
innerStride	include/Eigen/src/Core/CwiseUnaryView.h	/^    inline Index innerStride() const$/;"	f	class:Eigen::CwiseUnaryViewImpl
innerStride	include/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index innerStride() const$/;"	f	class:Eigen::DenseCoeffsBase
innerStride	include/Eigen/src/Core/Diagonal.h	/^    inline Index innerStride() const$/;"	f	class:Eigen::Diagonal
innerStride	include/Eigen/src/Core/Flagged.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:Eigen::Flagged
innerStride	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:Eigen::ForceAlignedAccess
innerStride	include/Eigen/src/Core/Map.h	/^    inline Index innerStride() const$/;"	f	class:Eigen::Map
innerStride	include/Eigen/src/Core/Matrix.h	/^    inline Index innerStride() const { return 1; }$/;"	f	class:Eigen::Matrix
innerStride	include/Eigen/src/Core/NestByValue.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:Eigen::NestByValue
innerStride	include/Eigen/src/Core/Ref.h	/^  inline Index innerStride() const$/;"	f	class:Eigen::RefBase
innerStride	include/Eigen/src/Core/Reverse.h	/^    inline Index innerStride() const$/;"	f	class:Eigen::Reverse
innerStride	include/Eigen/src/Core/SelfAdjointView.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:Eigen::SelfAdjointView
innerStride	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:Eigen::SelfCwiseBinaryOp
innerStride	include/Eigen/src/Core/Swap.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:Eigen::SwapWrapper
innerStride	include/Eigen/src/Core/Transpose.h	/^    inline Index innerStride() const { return derived().nestedExpression().innerStride(); }$/;"	f	class:Eigen::TransposeImpl
innerStride	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index innerStride() const { return derived().innerStride(); }$/;"	f	class:Eigen::TriangularBase
innerStride	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:Eigen::TriangularView
innerVector	include/Eigen/src/SparseCore/SparseBlock.h	/^const typename SparseMatrixBase<Derived>::ConstInnerVectorReturnType SparseMatrixBase<Derived>::innerVector(Index outer) const$/;"	f	class:Eigen::SparseMatrixBase
innerVector	include/Eigen/src/SparseCore/SparseBlock.h	/^typename SparseMatrixBase<Derived>::InnerVectorReturnType SparseMatrixBase<Derived>::innerVector(Index outer)$/;"	f	class:Eigen::SparseMatrixBase
innerVectors	include/Eigen/src/SparseCore/SparseBlock.h	/^Block<Derived,Dynamic,Dynamic,true> SparseMatrixBase<Derived>::innerVectors(Index outerStart, Index outerSize)$/;"	f	class:Eigen::SparseMatrixBase
innerVectors	include/Eigen/src/SparseCore/SparseBlock.h	/^const Block<const Derived,Dynamic,Dynamic,true> SparseMatrixBase<Derived>::innerVectors(Index outerStart, Index outerSize) const$/;"	f	class:Eigen::SparseMatrixBase
inner_stride_at_compile_time	include/Eigen/src/Core/DenseCoeffsBase.h	/^struct inner_stride_at_compile_time$/;"	s	namespace:Eigen::internal
inner_stride_at_compile_time	include/Eigen/src/Core/DenseCoeffsBase.h	/^struct inner_stride_at_compile_time<Derived, false>$/;"	s	namespace:Eigen::internal
inplace_decomposition	include/Eigen/src/Cholesky/LLT.h	/^  static bool inplace_decomposition(MatrixType& m)$/;"	f	struct:Eigen::internal::LLT_Traits
inplace_transpose_selector	include/Eigen/src/Core/Transpose.h	/^struct inplace_transpose_selector<MatrixType,false> { \/\/ non square matrix$/;"	s	namespace:Eigen::internal
inplace_transpose_selector	include/Eigen/src/Core/Transpose.h	/^struct inplace_transpose_selector<MatrixType,true> { \/\/ square matrix$/;"	s	namespace:Eigen::internal
insert	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Scalar& insert(Index row, Index col)$/;"	f	class:Eigen::SparseMatrix
insert	include/Eigen/src/SparseCore/SparseVector.h	/^    Scalar& insert(Index i)$/;"	f	class:Eigen::SparseVector
insert	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar& insert(Index row, Index col)$/;"	f	class:Eigen::SparseVector
insert	include/Eigen/src/StlSupport/StdDeque.h	/^  iterator insert(const_iterator position, const value_type& x)$/;"	f	class:std::deque
insert	include/Eigen/src/StlSupport/StdDeque.h	/^  void insert(const_iterator position, size_type new_size, const value_type& x)$/;"	f	class:std::deque
insert	include/Eigen/src/StlSupport/StdList.h	/^    iterator insert(const_iterator position, const value_type& x)$/;"	f	class:std::list
insert	include/Eigen/src/StlSupport/StdList.h	/^    void insert(const_iterator position, size_type new_size, const value_type& x)$/;"	f	class:std::list
insert	include/Eigen/src/StlSupport/StdVector.h	/^  iterator insert(const_iterator position, const value_type& x)$/;"	f	class:std::vector
insert	include/Eigen/src/StlSupport/StdVector.h	/^  void insert(const_iterator position, size_type new_size, const value_type& x)$/;"	f	class:std::vector
insertBack	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar& insertBack(Index row, Index col)$/;"	f	class:Eigen::SparseMatrix
insertBack	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar& insertBack(Index i)$/;"	f	class:Eigen::SparseVector
insertBackByOuterInner	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar& insertBackByOuterInner(Index outer, Index inner)$/;"	f	class:Eigen::SparseMatrix
insertBackByOuterInner	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar& insertBackByOuterInner(Index outer, Index inner)$/;"	f	class:Eigen::SparseVector
insertBackByOuterInnerUnordered	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar& insertBackByOuterInnerUnordered(Index outer, Index inner)$/;"	f	class:Eigen::SparseMatrix
insertBackUncompressed	include/Eigen/src/SparseCore/SparseMatrix.h	/^    EIGEN_STRONG_INLINE Scalar& insertBackUncompressed(Index row, Index col)$/;"	f	class:Eigen::SparseMatrix
insertByOuterInner	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Scalar& insertByOuterInner(Index j, Index i)$/;"	f	class:Eigen::SparseMatrix
insertCompressed	include/Eigen/src/SparseCore/SparseMatrix.h	/^EIGEN_DONT_INLINE typename SparseMatrix<_Scalar,_Options,_Index>::Scalar& SparseMatrix<_Scalar,_Options,_Index>::insertCompressed(Index row, Index col)$/;"	f	class:Eigen::SparseMatrix
insertUncompressed	include/Eigen/src/SparseCore/SparseMatrix.h	/^EIGEN_DONT_INLINE typename SparseMatrix<_Scalar,_Options,_Index>::Scalar& SparseMatrix<_Scalar,_Options,_Index>::insertUncompressed(Index row, Index col)$/;"	f	class:Eigen::SparseMatrix
internal	include/Eigen/src/Cholesky/LDLT.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Cholesky/LLT.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Cholesky/LLT.h	/^namespace internal{$/;"	n	namespace:Eigen
internal	include/Eigen/src/Cholesky/LLT_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Array.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/ArrayWrapper.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Assign.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Assign_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/BandMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Block.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/BooleanRedux.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/CwiseBinaryOp.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/CwiseNullaryOp.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/CwiseUnaryOp.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/CwiseUnaryView.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/DenseBase.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/DenseCoeffsBase.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/DenseStorage.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Diagonal.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/DiagonalMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/DiagonalProduct.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Dot.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Flagged.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/ForceAlignedAccess.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Functors.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Fuzzy.h	/^namespace internal$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/GeneralProduct.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/GenericPacketMath.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/GlobalFunctions.h	/^  namespace internal$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/IO.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Map.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/MathFunctions.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Matrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/NestByValue.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/PermutationMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/PlainObjectBase.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/ProductBase.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/ProductBase.h	/^namespace internal {$/;"	n
internal	include/Eigen/src/Core/Random.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Redux.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Ref.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Replicate.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/ReturnByValue.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Reverse.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Select.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/SelfAdjointView.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/SolveTriangular.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/StableNorm.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Swap.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Transpose.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Transpositions.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/TriangularMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/VectorBlock.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/VectorwiseOp.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/Visitor.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/arch/NEON/Complex.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/arch/SSE/Complex.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/GeneralMatrixMatrix_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/GeneralMatrixVector_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/Parallelizer.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/SelfadjointMatrixMatrix_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/SelfadjointMatrixVector_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/SelfadjointRank2Update.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/TriangularMatrixMatrix_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/TriangularMatrixVector_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/TriangularSolverMatrix_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/products/TriangularSolverVector.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/BlasUtil.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/ForwardDeclarations.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/MKL_support.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/Macros.h	/^    namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/Macros.h	/^  namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/Memory.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/Meta.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/StaticAssert.h	/^    namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Core/util/XprHelper.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Eigen2Support/Minor.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/AngleAxis.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/Homogeneous.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/OrthoMethods.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/Quaternion.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/Rotation2D.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/RotationBase.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/Transform.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/Umeyama.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Householder/BlockHouseholder.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Householder/Householder.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Householder/HouseholderSequence.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/Jacobi/Jacobi.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/LU/Determinant.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/LU/FullPivLU.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/LU/Inverse.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/LU/PartialPivLU.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/LU/PartialPivLU_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/LU/arch/Inverse_SSE.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/OrderingMethods/Amd.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^namespace internal {$/;"	n
internal	include/Eigen/src/OrderingMethods/Ordering.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^namespace internal$/;"	n	namespace:Eigen
internal	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^namespace internal$/;"	n	namespace:Eigen
internal	include/Eigen/src/QR/ColPivHouseholderQR.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/QR/FullPivHouseholderQR.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/QR/HouseholderQR.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/QR/HouseholderQR_MKL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SVD/JacobiSVD.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SVD/UpperBidiagonalization.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/AmbiVector.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/CompressedStorage.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseColEtree.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparsePermutation.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseProduct.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseTriangularView.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseUtil.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseVector.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/SparseView.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseCore/TriangularSolver.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLUImpl.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_Utils.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_column_bmod.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_copy_to_ucol.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_heap_relax_snode.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_kernel_bmod.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_panel_bmod.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_pivotL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_pruneL.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseLU/SparseLU_relax_snode.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SparseQR/SparseQR.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/StlSupport/details.h	/^  namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/misc/Image.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/misc/Kernel.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/misc/Solve.h	/^namespace internal {$/;"	n	namespace:Eigen
internal	include/Eigen/src/misc/SparseSolve.h	/^namespace internal {$/;"	n	namespace:Eigen
intersection	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  VectorType intersection(const Hyperplane& other)$/;"	f	class:Eigen::Hyperplane
intersection	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^inline _Scalar ParametrizedLine<_Scalar, _AmbientDim>::intersection(const Hyperplane<_Scalar, _AmbientDim>& hyperplane)$/;"	f	class:Eigen::ParametrizedLine
intersection	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox intersection(const AlignedBox& b) const$/;"	f	class:Eigen::AlignedBox
intersection	include/Eigen/src/Geometry/Hyperplane.h	/^  VectorType intersection(const Hyperplane& other) const$/;"	f	class:Eigen::Hyperplane
intersection	include/Eigen/src/Geometry/ParametrizedLine.h	/^inline _Scalar ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersection(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane) const$/;"	f	class:Eigen::ParametrizedLine
intersectionParameter	include/Eigen/src/Geometry/ParametrizedLine.h	/^inline _Scalar ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersectionParameter(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane) const$/;"	f	class:Eigen::ParametrizedLine
intersectionPoint	include/Eigen/src/Geometry/ParametrizedLine.h	/^ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersectionPoint(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane) const$/;"	f	class:Eigen::ParametrizedLine
inverse	include/Eigen/src/Core/DiagonalMatrix.h	/^    inverse() const$/;"	f	class:Eigen::DiagonalBase
inverse	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Transpose<PermutationBase> inverse() const$/;"	f	class:Eigen::PermutationBase
inverse	include/Eigen/src/Core/Transpositions.h	/^    inline Transpose<TranspositionsBase> inverse() const$/;"	f	class:Eigen::TranspositionsBase
inverse	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::inverse() const$/;"	f	class:Eigen::Cwise
inverse	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  AngleAxis inverse() const$/;"	f	class:Eigen::AngleAxis
inverse	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar> Quaternion<Scalar>::inverse() const$/;"	f	class:Eigen::Quaternion
inverse	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D inverse() const { return -m_angle; }$/;"	f	class:Eigen::Rotation2D
inverse	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Derived inverse() const { return derived().inverse(); }$/;"	f	class:Eigen::RotationBase
inverse	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling inverse() const$/;"	f	class:Eigen::Scaling
inverse	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::inverse(TransformTraits traits) const$/;"	f	class:Eigen::Transform
inverse	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  Translation inverse() const { return Translation(-m_coeffs); }$/;"	f	class:Eigen::Translation
inverse	include/Eigen/src/Geometry/AngleAxis.h	/^  AngleAxis inverse() const$/;"	f	class:Eigen::AngleAxis
inverse	include/Eigen/src/Geometry/Quaternion.h	/^inline Quaternion<typename internal::traits<Derived>::Scalar> QuaternionBase<Derived>::inverse() const$/;"	f	class:Eigen::QuaternionBase
inverse	include/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D inverse() const { return -m_angle; }$/;"	f	class:Eigen::Rotation2D
inverse	include/Eigen/src/Geometry/RotationBase.h	/^    inline Derived inverse() const { return derived().inverse(); }$/;"	f	class:Eigen::RotationBase
inverse	include/Eigen/src/Geometry/Scaling.h	/^  inline UniformScaling inverse() const$/;"	f	class:Eigen::UniformScaling
inverse	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::inverse(TransformTraits hint) const$/;"	f	class:Eigen::Transform
inverse	include/Eigen/src/Geometry/Translation.h	/^  Translation inverse() const { return Translation(-m_coeffs); }$/;"	f	class:Eigen::Translation
inverse	include/Eigen/src/Householder/HouseholderSequence.h	/^    ConjugateReturnType inverse() const { return adjoint(); }$/;"	f	class:Eigen::HouseholderSequence
inverse	include/Eigen/src/LU/FullPivLU.h	/^    inline const internal::solve_retval<FullPivLU,typename MatrixType::IdentityReturnType> inverse() const$/;"	f	class:Eigen::FullPivLU
inverse	include/Eigen/src/LU/Inverse.h	/^inline const internal::inverse_impl<Derived> MatrixBase<Derived>::inverse() const$/;"	f	class:Eigen::MatrixBase
inverse	include/Eigen/src/LU/PartialPivLU.h	/^    inline const internal::solve_retval<PartialPivLU,typename MatrixType::IdentityReturnType> inverse() const$/;"	f	class:Eigen::PartialPivLU
inverse	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inverse() const$/;"	f	class:Eigen::ColPivHouseholderQR
inverse	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inverse() const$/;"	f	class:Eigen::FullPivHouseholderQR
inverse	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^inverse() const$/;"	f
inverse_impl	include/Eigen/src/LU/Inverse.h	/^  inverse_impl(const MatrixType& matrix)$/;"	f	struct:Eigen::internal::inverse_impl
inverse_impl	include/Eigen/src/LU/Inverse.h	/^struct inverse_impl : public ReturnByValue<inverse_impl<MatrixType> >$/;"	s	namespace:Eigen::internal
iparm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    Array<Index,IPARM_SIZE,1>& iparm()$/;"	f	class:Eigen::PastixBase
iparm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    int& iparm(int idxparam)$/;"	f	class:Eigen::PastixBase
isApprox	include/Eigen/src/Core/DiagonalMatrix.h	/^    bool isApprox(const DiagonalBase<OtherDerived>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::DiagonalBase
isApprox	include/Eigen/src/Core/DiagonalMatrix.h	/^    bool isApprox(const MatrixBase<OtherDerived>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::DiagonalBase
isApprox	include/Eigen/src/Core/Fuzzy.h	/^bool DenseBase<Derived>::isApprox($/;"	f	class:Eigen::DenseBase
isApprox	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApprox(bool x, bool y, bool)$/;"	f	struct:Eigen::internal::scalar_fuzzy_impl
isApprox	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApprox(const Scalar& x, const Scalar& y, const RealScalar& prec)$/;"	f	struct:Eigen::internal::scalar_fuzzy_default_impl
isApprox	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApprox(const Scalar& x, const Scalar& y, const RealScalar&)$/;"	f	struct:Eigen::internal::scalar_fuzzy_default_impl
isApprox	include/Eigen/src/Core/MathFunctions.h	/^inline bool isApprox(const Scalar& x, const Scalar& y,$/;"	f	namespace:Eigen::internal
isApprox	include/Eigen/src/Core/TriangularMatrix.h	/^    bool isApprox(const MatrixBase<OtherDerived>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::TriangularView
isApprox	include/Eigen/src/Core/TriangularMatrix.h	/^    bool isApprox(const TriangularView<OtherMatrixType, Mode>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::TriangularView
isApprox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  bool isApprox(const AlignedBox& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::AlignedBox
isApprox	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  bool isApprox(const AngleAxis& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::AngleAxis
isApprox	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  bool isApprox(const Hyperplane& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::Hyperplane
isApprox	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  bool isApprox(const ParametrizedLine& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::ParametrizedLine
isApprox	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  bool isApprox(const Quaternion& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::Quaternion
isApprox	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  bool isApprox(const Rotation2D& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::Rotation2D
isApprox	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  bool isApprox(const Scaling& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::Scaling
isApprox	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  bool isApprox(const Transform& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::Transform
isApprox	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  bool isApprox(const Translation& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Eigen::Translation
isApprox	include/Eigen/src/Geometry/AlignedBox.h	/^  bool isApprox(const AlignedBox& other, const RealScalar& prec = ScalarTraits::dummy_precision()) const$/;"	f	class:Eigen::AlignedBox
isApprox	include/Eigen/src/Geometry/AngleAxis.h	/^  bool isApprox(const AngleAxis& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::AngleAxis
isApprox	include/Eigen/src/Geometry/Hyperplane.h	/^  bool isApprox(const Hyperplane<Scalar,AmbientDimAtCompileTime,OtherOptions>& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::Hyperplane
isApprox	include/Eigen/src/Geometry/ParametrizedLine.h	/^  bool isApprox(const ParametrizedLine& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::ParametrizedLine
isApprox	include/Eigen/src/Geometry/Quaternion.h	/^  bool isApprox(const QuaternionBase<OtherDerived>& other, const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::QuaternionBase
isApprox	include/Eigen/src/Geometry/Rotation2D.h	/^  bool isApprox(const Rotation2D& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::Rotation2D
isApprox	include/Eigen/src/Geometry/Scaling.h	/^  bool isApprox(const UniformScaling& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::UniformScaling
isApprox	include/Eigen/src/Geometry/Transform.h	/^  bool isApprox(const Transform& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::Transform
isApprox	include/Eigen/src/Geometry/Translation.h	/^  bool isApprox(const Translation& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Eigen::Translation
isApprox	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    bool isApprox(const MatrixBase<OtherDerived>& other,$/;"	f	class:Eigen::SparseMatrixBase
isApprox	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    bool isApprox(const SparseMatrixBase<OtherDerived>& other,$/;"	f	class:Eigen::SparseMatrixBase
isApproxOrLessThan	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y, const RealScalar& prec)$/;"	f	struct:Eigen::internal::scalar_fuzzy_default_impl
isApproxOrLessThan	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y, const RealScalar&)$/;"	f	struct:Eigen::internal::scalar_fuzzy_default_impl
isApproxOrLessThan	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApproxOrLessThan(const bool& x, const bool& y, const bool&)$/;"	f	struct:Eigen::internal::scalar_fuzzy_impl
isApproxOrLessThan	include/Eigen/src/Core/MathFunctions.h	/^inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y,$/;"	f	namespace:Eigen::internal
isApproxToConstant	include/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isApproxToConstant$/;"	f	class:Eigen::DenseBase
isApprox_selector	include/Eigen/src/Core/Fuzzy.h	/^struct isApprox_selector$/;"	s	namespace:Eigen::internal
isApprox_selector	include/Eigen/src/Core/Fuzzy.h	/^struct isApprox_selector<Derived, OtherDerived, true>$/;"	s	namespace:Eigen::internal
isCompressed	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    bool isCompressed() const { return true; }$/;"	f	class:Eigen::MappedSparseMatrix
isCompressed	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline bool isCompressed() const { return m_innerNonZeros==0; }$/;"	f	class:Eigen::SparseMatrix
isConstant	include/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isConstant$/;"	f	class:Eigen::DenseBase
isDiagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^bool MatrixBase<Derived>::isDiagonal(const RealScalar& prec) const$/;"	f	class:Eigen::MatrixBase
isEmpty	include/Eigen/src/Geometry/AlignedBox.h	/^  inline bool isEmpty() const { return (m_min.array() > m_max.array()).any(); }$/;"	f	class:Eigen::AlignedBox
isFullRank	include/Eigen/src/Eigen2Support/QR.h	/^    bool isFullRank() const {$/;"	f	class:Eigen::QR
isIdentity	include/Eigen/src/Core/CwiseNullaryOp.h	/^bool MatrixBase<Derived>::isIdentity$/;"	f	class:Eigen::MatrixBase
isInjective	include/Eigen/src/LU/FullPivLU.h	/^    inline bool isInjective() const$/;"	f	class:Eigen::FullPivLU
isInjective	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline bool isInjective() const$/;"	f	class:Eigen::ColPivHouseholderQR
isInjective	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline bool isInjective() const$/;"	f	class:Eigen::FullPivHouseholderQR
isInvertible	include/Eigen/src/LU/FullPivLU.h	/^    inline bool isInvertible() const$/;"	f	class:Eigen::FullPivLU
isInvertible	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline bool isInvertible() const$/;"	f	class:Eigen::ColPivHouseholderQR
isInvertible	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline bool isInvertible() const$/;"	f	class:Eigen::FullPivHouseholderQR
isLowerTriangular	include/Eigen/src/Core/TriangularMatrix.h	/^bool MatrixBase<Derived>::isLowerTriangular(const RealScalar& prec) const$/;"	f	class:Eigen::MatrixBase
isMuchSmallerThan	include/Eigen/src/Core/Fuzzy.h	/^bool DenseBase<Derived>::isMuchSmallerThan($/;"	f	class:Eigen::DenseBase
isMuchSmallerThan	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isMuchSmallerThan(const Scalar& x, const OtherScalar& y, const RealScalar& prec)$/;"	f	struct:Eigen::internal::scalar_fuzzy_default_impl
isMuchSmallerThan	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isMuchSmallerThan(const Scalar& x, const Scalar&, const RealScalar&)$/;"	f	struct:Eigen::internal::scalar_fuzzy_default_impl
isMuchSmallerThan	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool isMuchSmallerThan(const bool& x, const bool&, const bool&)$/;"	f	struct:Eigen::internal::scalar_fuzzy_impl
isMuchSmallerThan	include/Eigen/src/Core/MathFunctions.h	/^inline bool isMuchSmallerThan(const Scalar& x, const OtherScalar& y,$/;"	f	namespace:Eigen::internal
isMuchSmallerThan_object_selector	include/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_object_selector$/;"	s	namespace:Eigen::internal
isMuchSmallerThan_object_selector	include/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_object_selector<Derived, OtherDerived, true>$/;"	s	namespace:Eigen::internal
isMuchSmallerThan_scalar_selector	include/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_scalar_selector$/;"	s	namespace:Eigen::internal
isMuchSmallerThan_scalar_selector	include/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_scalar_selector<Derived, true>$/;"	s	namespace:Eigen::internal
isNegative	include/Eigen/src/Cholesky/LDLT.h	/^    inline bool isNegative(void) const$/;"	f	class:Eigen::LDLT
isNull	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline bool isNull() const { return (m_min.cwise() > m_max).any(); }$/;"	f	class:Eigen::AlignedBox
isNull	include/Eigen/src/Geometry/AlignedBox.h	/^  inline bool isNull() const { return isEmpty(); }$/;"	f	class:Eigen::AlignedBox
isOnes	include/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isOnes$/;"	f	class:Eigen::DenseBase
isOrthogonal	include/Eigen/src/Core/Dot.h	/^bool MatrixBase<Derived>::isOrthogonal$/;"	f	class:Eigen::MatrixBase
isPositive	include/Eigen/src/Cholesky/LDLT.h	/^    inline bool isPositive() const$/;"	f	class:Eigen::LDLT
isPositiveDefinite	include/Eigen/src/Cholesky/LDLT.h	/^    inline bool isPositiveDefinite() const$/;"	f	class:Eigen::LDLT
isPositiveDefinite	include/Eigen/src/Cholesky/LLT.h	/^    bool isPositiveDefinite() const { return true; }$/;"	f	class:Eigen::LLT
isRValue	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    bool isRValue() const { return m_isRValue; }$/;"	f	class:Eigen::SparseMatrixBase
isSurjective	include/Eigen/src/LU/FullPivLU.h	/^    inline bool isSurjective() const$/;"	f	class:Eigen::FullPivLU
isSurjective	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline bool isSurjective() const$/;"	f	class:Eigen::ColPivHouseholderQR
isSurjective	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline bool isSurjective() const$/;"	f	class:Eigen::FullPivHouseholderQR
isSymmetric	include/Eigen/src/SparseLU/SparseLU.h	/^    void isSymmetric(bool sym)$/;"	f	class:Eigen::SparseLU
isUnitary	include/Eigen/src/Core/Dot.h	/^bool MatrixBase<Derived>::isUnitary(const RealScalar& prec) const$/;"	f	class:Eigen::MatrixBase
isUpperTriangular	include/Eigen/src/Core/TriangularMatrix.h	/^bool MatrixBase<Derived>::isUpperTriangular(const RealScalar& prec) const$/;"	f	class:Eigen::MatrixBase
isVector	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline bool isVector() const { return rows()==1 || cols()==1; }$/;"	f	class:Eigen::SparseMatrixBase
isZero	include/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isZero(const RealScalar& prec) const$/;"	f	class:Eigen::DenseBase
is_arithmetic	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128>  { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128d> { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128i> { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<bool>          { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<char>          { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<double>        { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<float>         { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<long double>   { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed char>   { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed int>    { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed long>   { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed short>  { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned char> { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned int>  { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned long> { enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned short>{ enum { value = true }; };$/;"	s	namespace:Eigen::internal
is_arithmetic	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_arithmetic      { enum { value = false }; };$/;"	s	namespace:Eigen::internal
is_const	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const { enum { value = 0 }; };$/;"	s	namespace:Eigen::internal
is_const	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const<T const> { enum { value = 1 }; };$/;"	s	namespace:Eigen::internal
is_diagonal	include/Eigen/src/Core/util/Meta.h	/^template<typename T, int S> struct is_diagonal<DiagonalMatrix<T,S> >$/;"	s	namespace:Eigen
is_diagonal	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_diagonal$/;"	s	namespace:Eigen
is_diagonal	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_diagonal<DiagonalBase<T> >$/;"	s	namespace:Eigen
is_diagonal	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_diagonal<DiagonalWrapper<T> >$/;"	s	namespace:Eigen
is_large	include/Eigen/src/Core/GeneralProduct.h	/^  enum { is_large = MaxSize == Dynamic ||$/;"	e	enum:Eigen::internal::product_size_category::__anon144
is_malloc_allowed	include/Eigen/src/Core/util/Memory.h	/^inline bool is_malloc_allowed() { return is_malloc_allowed_impl(false); }$/;"	f	namespace:Eigen::internal
is_malloc_allowed_impl	include/Eigen/src/Core/util/Memory.h	/^inline bool is_malloc_allowed_impl(bool update, bool new_value = false)$/;"	f	namespace:Eigen::internal
is_same	include/Eigen/src/Core/util/Meta.h	/^template<typename T, typename U> struct is_same { enum { value = 0 }; };$/;"	s	namespace:Eigen::internal
is_same	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_same<T,T> { enum { value = 1 }; };$/;"	s	namespace:Eigen::internal
isfinite	include/Eigen/src/Core/MathFunctions.h	/^template<typename T> bool (isfinite)(const T& x)$/;"	f	namespace:Eigen::numext
iterations	include/Eigen/src/Eigenvalues/RealQZ.h	/^      Index iterations() const$/;"	f	class:Eigen::RealQZ
iterations	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  int iterations() const$/;"	f	class:Eigen::IterativeSolverBase
jacobiSvd	include/Eigen/src/SVD/JacobiSVD.h	/^MatrixBase<Derived>::jacobiSvd(unsigned int computationOptions) const$/;"	f	class:Eigen::MatrixBase
kc	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline DenseIndex kc() const { return m_kc; }$/;"	f	class:Eigen::internal::level3_blocking
keep_diag	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    struct keep_diag {$/;"	s	class:Eigen::IncompleteLUT
keep_diag	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    struct keep_diag {$/;"	s	class:Eigen::SimplicialCholeskyBase
kernel	include/Eigen/src/LU/FullPivLU.h	/^    inline const internal::kernel_retval<FullPivLU> kernel() const$/;"	f	class:Eigen::FullPivLU
kernel_retval	include/Eigen/src/LU/FullPivLU.h	/^struct kernel_retval<FullPivLU<_MatrixType> >$/;"	s	namespace:Eigen::internal
kernel_retval_base	include/Eigen/src/misc/Kernel.h	/^  kernel_retval_base(const DecompositionType& dec)$/;"	f	struct:Eigen::internal::kernel_retval_base
kernel_retval_base	include/Eigen/src/misc/Kernel.h	/^template<typename _DecompositionType> struct kernel_retval_base$/;"	s	namespace:Eigen::internal
l1CacheSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline std::ptrdiff_t l1CacheSize()$/;"	f	namespace:Eigen
l2CacheSize	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline std::ptrdiff_t l2CacheSize()$/;"	f	namespace:Eigen
lastCoeff	include/Eigen/src/SparseCore/SparseBlock.h	/^    const Scalar& lastCoeff() const$/;"	f	class:Eigen::BlockImpl
lastErrorMessage	include/Eigen/src/SparseLU/SparseLU.h	/^    std::string lastErrorMessage() const$/;"	f	class:Eigen::SparseLU
lastErrorMessage	include/Eigen/src/SparseQR/SparseQR.h	/^    std::string lastErrorMessage() const { return m_lastError; }$/;"	f	class:Eigen::SparseQR
lazy	include/Eigen/src/Eigen2Support/Lazy.h	/^MatrixBase<Derived>::lazy() const$/;"	f	class:Eigen::MatrixBase
lazyAssign	include/Eigen/src/Core/Assign.h	/^  ::lazyAssign(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseBase
lazyAssign	include/Eigen/src/Core/MatrixBase.h	/^    Derived& lazyAssign(const Flagged<OtherDerived, 0, EvalBeforeAssigningBit>& other)$/;"	f	class:Eigen::MatrixBase
lazyAssign	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& lazyAssign(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::PlainObjectBase
lazyAssign	include/Eigen/src/Core/ProductBase.h	/^Derived& MatrixBase<Derived>::lazyAssign(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:MatrixBase
lazyAssign	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE SelfCwiseBinaryOp& lazyAssign(const DenseBase<RhsDerived>& rhs)$/;"	f	class:Eigen::SelfCwiseBinaryOp
lazyAssign	include/Eigen/src/Core/TriangularMatrix.h	/^void TriangularView<MatrixType, Mode>::lazyAssign(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::TriangularView
lazyAssign	include/Eigen/src/Core/TriangularMatrix.h	/^void TriangularView<MatrixType, Mode>::lazyAssign(const TriangularBase<OtherDerived>& other)$/;"	f	class:Eigen::TriangularView
lazyProduct	include/Eigen/src/Core/GeneralProduct.h	/^MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::MatrixBase
lda	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    union {int nnz;int lda;};$/;"	m	union:Eigen::SluMatrix::__anon457::__anon458
ldlt	include/Eigen/src/Cholesky/LDLT.h	/^MatrixBase<Derived>::ldlt() const$/;"	f	class:Eigen::MatrixBase
ldlt	include/Eigen/src/Cholesky/LDLT.h	/^SelfAdjointView<MatrixType, UpLo>::ldlt() const$/;"	f	class:Eigen::SelfAdjointView
ldlt_inplace	include/Eigen/src/Cholesky/LDLT.h	/^template<> struct ldlt_inplace<Lower>$/;"	s	namespace:Eigen::internal
ldlt_inplace	include/Eigen/src/Cholesky/LDLT.h	/^template<> struct ldlt_inplace<Upper>$/;"	s	namespace:Eigen::internal
leftCols	include/Eigen/src/plugins/BlockMethods.h	/^inline ColsBlockXpr leftCols(Index n)$/;"	f
leftCols	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstColsBlockXpr leftCols(Index n) const$/;"	f
leftCols	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNColsBlockXpr<N>::Type leftCols(Index n = N) const$/;"	f
leftCols	include/Eigen/src/plugins/BlockMethods.h	/^inline typename NColsBlockXpr<N>::Type leftCols(Index n = N)$/;"	f
length	include/Eigen/src/Householder/HouseholderSequence.h	/^    Index length() const { return m_length; }  \/**< \\brief Returns the length of the Householder sequence. *\/$/;"	f	class:Eigen::HouseholderSequence
length	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  Index length ;  \/* number of principal columns in this row *\/$/;"	m	struct:internal::Colamd_Row
length	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  Index length ;  \/* number of rows in this column *\/$/;"	m	struct:internal::colamd_col
level3_blocking	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    level3_blocking()$/;"	f	class:Eigen::internal::level3_blocking
level3_blocking	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class level3_blocking$/;"	c	namespace:Eigen::internal
lhs	include/Eigen/src/Core/CwiseBinaryOp.h	/^    const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:Eigen::CwiseBinaryOp
lhs	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:Eigen::CoeffBasedProduct
lhs	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:Eigen::SparseDenseOuterProduct
lhs	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:Eigen::SparseDiagonalProduct
lhs	include/Eigen/src/SparseCore/SparseProduct.h	/^    EIGEN_STRONG_INLINE const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:Eigen::SparseSparseProduct
linear	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline ConstLinearPart linear() const { return m_matrix.template block<Dim,Dim>(0,0); }$/;"	f	class:Eigen::Transform
linear	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline LinearPart linear() { return m_matrix.template block<Dim,Dim>(0,0); }$/;"	f	class:Eigen::Transform
linear	include/Eigen/src/Geometry/Transform.h	/^  inline ConstLinearPart linear() const { return ConstLinearPart(m_matrix,0,0); }$/;"	f	class:Eigen::Transform
linear	include/Eigen/src/Geometry/Transform.h	/^  inline LinearPart linear() { return LinearPart(m_matrix,0,0); }$/;"	f	class:Eigen::Transform
linearExt	include/Eigen/src/Geometry/Transform.h	/^  inline Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,Dim> linearExt()$/;"	f	class:Eigen::Transform
linearExt	include/Eigen/src/Geometry/Transform.h	/^  inline const Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,Dim> linearExt() const$/;"	f	class:Eigen::Transform
linearRegression	include/Eigen/src/Eigen2Support/LeastSquares.h	/^void linearRegression(int numPoints,$/;"	f	namespace:Eigen
linspaced_op	include/Eigen/src/Core/Functors.h	/^  linspaced_op(const Scalar& low, const Scalar& high, DenseIndex num_steps) : impl((num_steps==1 ? high : low), (num_steps==1 ? Scalar() : (high-low)\/Scalar(num_steps-1))) {}$/;"	f	struct:Eigen::internal::linspaced_op
linspaced_op	include/Eigen/src/Core/Functors.h	/^template <typename Scalar, bool RandomAccess> struct linspaced_op$/;"	s	namespace:Eigen::internal
linspaced_op_impl	include/Eigen/src/Core/Functors.h	/^  linspaced_op_impl(const Scalar& low, const Scalar& step) :$/;"	f	struct:Eigen::internal::linspaced_op_impl
linspaced_op_impl	include/Eigen/src/Core/Functors.h	/^struct linspaced_op_impl<Scalar,false>$/;"	s	namespace:Eigen::internal
linspaced_op_impl	include/Eigen/src/Core/Functors.h	/^struct linspaced_op_impl<Scalar,true>$/;"	s	namespace:Eigen::internal
list	include/Eigen/src/StlSupport/StdList.h	/^  class list<T,EIGEN_ALIGNED_ALLOCATOR<T> >$/;"	c	namespace:std
list_base	include/Eigen/src/StlSupport/StdList.h	/^                 Eigen::aligned_allocator_indirection<EIGEN_WORKAROUND_MSVC_STL_SUPPORT(T)> > list_base;$/;"	t	class:std::list
llt	include/Eigen/src/Cholesky/LLT.h	/^MatrixBase<Derived>::llt() const$/;"	f	class:Eigen::MatrixBase
llt	include/Eigen/src/Cholesky/LLT.h	/^SelfAdjointView<MatrixType, UpLo>::llt() const$/;"	f	class:Eigen::SelfAdjointView
llt_inplace	include/Eigen/src/Cholesky/LLT.h	/^template<typename Scalar> struct llt_inplace<Scalar, Lower>$/;"	s	namespace:Eigen::internal
llt_inplace	include/Eigen/src/Cholesky/LLT.h	/^template<typename Scalar> struct llt_inplace<Scalar, Upper>$/;"	s	namespace:Eigen::internal
llt_rank_update_lower	include/Eigen/src/Cholesky/LLT.h	/^static typename MatrixType::Index llt_rank_update_lower(MatrixType& mat, const VectorType& vec, const typename MatrixType::RealScalar& sigma)$/;"	f	namespace:Eigen::internal
loadLhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadLhs(const LhsScalar* a, LhsPacket& dest) const$/;"	f	class:Eigen::internal::gebp_traits
loadRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, DoublePacket& dest) const$/;"	f	class:Eigen::internal::gebp_traits
loadRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, ResPacket& dest) const { dest = *b; }$/;"	f	class:Eigen::internal::gebp_traits
loadRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacket& dest) const$/;"	f	class:Eigen::internal::gebp_traits
log	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::log() const$/;"	f	class:Eigen::Cwise
log	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^log() const$/;"	f
logAbsDeterminant	include/Eigen/src/QR/ColPivHouseholderQR.h	/^typename MatrixType::RealScalar ColPivHouseholderQR<MatrixType>::logAbsDeterminant() const$/;"	f	class:Eigen::ColPivHouseholderQR
logAbsDeterminant	include/Eigen/src/QR/FullPivHouseholderQR.h	/^typename MatrixType::RealScalar FullPivHouseholderQR<MatrixType>::logAbsDeterminant() const$/;"	f	class:Eigen::FullPivHouseholderQR
logAbsDeterminant	include/Eigen/src/QR/HouseholderQR.h	/^typename MatrixType::RealScalar HouseholderQR<MatrixType>::logAbsDeterminant() const$/;"	f	class:Eigen::HouseholderQR
logAbsDeterminant	include/Eigen/src/SparseLU/SparseLU.h	/^     Scalar logAbsDeterminant() const$/;"	f	class:Eigen::SparseLU
lpNorm	include/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::lpNorm() const$/;"	f	class:Eigen::MatrixBase
lpNorm_selector	include/Eigen/src/Core/Dot.h	/^struct lpNorm_selector$/;"	s	namespace:Eigen::internal
lpNorm_selector	include/Eigen/src/Core/Dot.h	/^struct lpNorm_selector<Derived, 1>$/;"	s	namespace:Eigen::internal
lpNorm_selector	include/Eigen/src/Core/Dot.h	/^struct lpNorm_selector<Derived, 2>$/;"	s	namespace:Eigen::internal
lpNorm_selector	include/Eigen/src/Core/Dot.h	/^struct lpNorm_selector<Derived, Infinity>$/;"	s	namespace:Eigen::internal
lsub	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  IndexVector lsub; \/\/ Compressed row indices of L rectangular supernodes. $/;"	m	struct:Eigen::internal::LU_GlobalLU_t
lu	include/Eigen/src/Eigen2Support/LU.h	/^MatrixBase<Derived>::lu() const$/;"	f	class:Eigen::MatrixBase
lu	include/Eigen/src/LU/PartialPivLU.h	/^MatrixBase<Derived>::lu() const$/;"	f	class:Eigen::MatrixBase
lusup	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  ScalarVector  lusup; \/\/ nonzero values of L ordered by columns $/;"	m	struct:Eigen::internal::LU_GlobalLU_t
m_E	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable Index *m_E; \/\/ The permutation applied to columns$/;"	m	class:Eigen::SPQR
m_H	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable cholmod_sparse *m_H;  \/\/The householder vectors$/;"	m	class:Eigen::SPQR
m_HPinv	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable Index *m_HPinv; \/\/ The row permutation of H$/;"	m	class:Eigen::SPQR
m_HTau	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable cholmod_dense *m_HTau; \/\/ The Householder coefficients$/;"	m	class:Eigen::SPQR
m_LDLT	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    bool m_LDLT;$/;"	m	class:Eigen::SimplicialCholesky
m_Lstore	include/Eigen/src/SparseLU/SparseLU.h	/^    SCMatrix m_Lstore; \/\/ The lower triangular matrix (supernodal)$/;"	m	class:Eigen::SparseLU
m_P	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    PermutationMatrix<Dynamic,Dynamic,Index> m_P;     \/\/ Fill-reducing permutation$/;"	m	class:Eigen::IncompleteLUT
m_P	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    PermutationMatrix<Dynamic,Dynamic,Index> m_P;     \/\/ the permutation$/;"	m	class:Eigen::SimplicialCholeskyBase
m_Pinv	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    PermutationMatrix<Dynamic,Dynamic,Index> m_Pinv;  \/\/ Inverse permutation$/;"	m	class:Eigen::IncompleteLUT
m_Pinv	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    PermutationMatrix<Dynamic,Dynamic,Index> m_Pinv;  \/\/ the inverse permutation$/;"	m	class:Eigen::SimplicialCholeskyBase
m_Q	include/Eigen/src/Eigenvalues/RealQZ.h	/^      MatrixType m_S, m_T, m_Q, m_Z;$/;"	m	class:Eigen::RealQZ
m_Q	include/Eigen/src/SparseQR/SparseQR.h	/^    QRMatrixType m_Q;               \/\/ The orthogonal reflectors$/;"	m	class:Eigen::SparseQR
m_R	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable MatrixType m_R; \/\/ The sparse matrix R in Eigen format$/;"	m	class:Eigen::SPQR
m_R	include/Eigen/src/SparseQR/SparseQR.h	/^    QRMatrixType m_R;               \/\/ The triangular factor matrix$/;"	m	class:Eigen::SparseQR
m_S	include/Eigen/src/Eigenvalues/RealQZ.h	/^      MatrixType m_S, m_T, m_Q, m_Z;$/;"	m	class:Eigen::RealQZ
m_T	include/Eigen/src/Eigenvalues/RealQZ.h	/^      MatrixType m_S, m_T, m_Q, m_Z;$/;"	m	class:Eigen::RealQZ
m_Ustore	include/Eigen/src/SparseLU/SparseLU.h	/^    MappedSparseMatrix<Scalar,ColMajor,Index> m_Ustore; \/\/ The upper triangular matrix$/;"	m	class:Eigen::SparseLU
m_Z	include/Eigen/src/Eigenvalues/RealQZ.h	/^      MatrixType m_S, m_T, m_Q, m_Z;$/;"	m	class:Eigen::RealQZ
m_actualAlpha	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    Scalar m_actualAlpha;$/;"	m	struct:Eigen::internal::gemm_functor
m_adjoint	include/Eigen/src/SVD/JacobiSVD.h	/^  TransposeTypeWithSameStorageOrder m_adjoint;$/;"	m	class:Eigen::internal::qr_preconditioner_impl
m_allocatedElements	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_allocatedElements;$/;"	m	class:Eigen::internal::AmbiVector
m_allocatedSize	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_allocatedSize;$/;"	m	class:Eigen::internal::AmbiVector
m_allocatedSize	include/Eigen/src/SparseCore/CompressedStorage.h	/^    size_t m_allocatedSize;$/;"	m	class:Eigen::internal::CompressedStorage
m_allow_tol	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    int m_allow_tol; \/\/ Allow to use some tolerance during numerical factorization.$/;"	m	class:Eigen::SPQR
m_alpha	include/Eigen/src/Core/ProductBase.h	/^    Scalar m_alpha;$/;"	m	class:ScaledProduct
m_alphas	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    ComplexVectorType m_alphas;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_analysisIsOk	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    int m_analysisIsOk;$/;"	m	class:Eigen::CholmodBase
m_analysisIsOk	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    bool m_analysisIsOk;$/;"	m	class:Eigen::IncompleteLUT
m_analysisIsOk	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  mutable bool m_isInitialized, m_analysisIsOk, m_factorizationIsOk;$/;"	m	class:Eigen::IterativeSolverBase
m_analysisIsOk	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    int m_analysisIsOk;$/;"	m	class:Eigen::PastixBase
m_analysisIsOk	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    bool m_initialized, m_analysisIsOk, m_factorizationIsOk;$/;"	m	class:Eigen::PardisoImpl
m_analysisIsOk	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    bool m_analysisIsOk;$/;"	m	class:Eigen::SPQR
m_analysisIsOk	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    bool m_analysisIsOk;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_analysisIsOk	include/Eigen/src/SparseLU/SparseLU.h	/^    bool m_analysisIsOk;$/;"	m	class:Eigen::SparseLU
m_analysisIsOk	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    int m_analysisIsOk;$/;"	m	class:Eigen::SuperLUBase
m_analysisIsOk	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    int m_analysisIsOk;$/;"	m	class:Eigen::UmfPackLU
m_analysisIsok	include/Eigen/src/SparseQR/SparseQR.h	/^    bool m_analysisIsok;$/;"	m	class:Eigen::SparseQR
m_angle	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Scalar m_angle;$/;"	m	class:Eigen::AngleAxis
m_angle	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  Scalar m_angle;$/;"	m	class:Eigen::Rotation2D
m_angle	include/Eigen/src/Geometry/AngleAxis.h	/^  Scalar m_angle;$/;"	m	class:Eigen::AngleAxis
m_angle	include/Eigen/src/Geometry/Rotation2D.h	/^  Scalar m_angle;$/;"	m	class:Eigen::Rotation2D
m_axis	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Vector3 m_axis;$/;"	m	class:Eigen::AngleAxis
m_axis	include/Eigen/src/Geometry/AngleAxis.h	/^  Vector3 m_axis;$/;"	m	class:Eigen::AngleAxis
m_base	include/Eigen/src/Core/Functors.h	/^  mutable Packet m_base;$/;"	m	struct:Eigen::internal::linspaced_op_impl
m_begin	include/Eigen/src/SparseCore/SparseBlock.h	/^      Index m_begin;$/;"	m	class:Eigen::BlockImpl::ReverseInnerIterator
m_betas	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    VectorType m_betas;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_bidiagonal	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    BidiagonalType m_bidiagonal;$/;"	m	class:Eigen::internal::UpperBidiagonalization
m_block	include/Eigen/src/SparseCore/SparseBlock.h	/^      const BlockType& m_block;$/;"	m	class:Eigen::BlockImpl::InnerIterator
m_block	include/Eigen/src/SparseCore/SparseBlock.h	/^      const BlockType& m_block;$/;"	m	class:Eigen::BlockImpl::ReverseInnerIterator
m_blockA	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    LhsScalar* m_blockA;$/;"	m	class:Eigen::internal::level3_blocking
m_blockB	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    RhsScalar* m_blockB;$/;"	m	class:Eigen::internal::level3_blocking
m_blockCols	include/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_blockCols;$/;"	m	class:Eigen::internal::BlockImpl_dense
m_blockCols	include/Eigen/src/SparseCore/SparseBlock.h	/^    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_blockCols;$/;"	m	class:Eigen::BlockImpl
m_blockRows	include/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_blockRows;$/;"	m	class:Eigen::internal::BlockImpl_dense
m_blockRows	include/Eigen/src/SparseCore/SparseBlock.h	/^    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_blockRows;$/;"	m	class:Eigen::BlockImpl
m_blockW	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    RhsScalar* m_blockW;$/;"	m	class:Eigen::internal::level3_blocking
m_blocking	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    BlockingType& m_blocking;$/;"	m	struct:Eigen::internal::gemm_functor
m_buffer	include/Eigen/src/SparseCore/AmbiVector.h	/^    Scalar* m_buffer;$/;"	m	class:Eigen::internal::AmbiVector
m_c	include/Eigen/src/Jacobi/Jacobi.h	/^    Scalar m_c, m_s;$/;"	m	class:Eigen::JacobiRotation
m_cR	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable cholmod_sparse *m_cR; \/\/ The sparse R factor in cholmod format$/;"	m	class:Eigen::SPQR
m_cachedIndex	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_cachedIndex;          \/\/ current coordinate$/;"	m	class:Eigen::internal::AmbiVector::Iterator
m_cachedValue	include/Eigen/src/SparseCore/AmbiVector.h	/^    Scalar m_cachedValue;       \/\/ current value$/;"	m	class:Eigen::internal::AmbiVector::Iterator
m_cc	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable cholmod_common m_cc; \/\/ Workspace and parameters$/;"	m	class:Eigen::SPQR
m_cholmod	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    mutable cholmod_common m_cholmod;$/;"	m	class:Eigen::CholmodBase
m_cholmodFactor	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    cholmod_factor* m_cholmodFactor;$/;"	m	class:Eigen::CholmodBase
m_coeffs	include/Eigen/src/Core/BandMatrix.h	/^    CoefficientsType m_coeffs;$/;"	m	class:Eigen::internal::BandMatrix
m_coeffs	include/Eigen/src/Core/BandMatrix.h	/^    const CoefficientsType& m_coeffs;$/;"	m	class:Eigen::internal::BandMatrixWrapper
m_coeffs	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  Coefficients m_coeffs;$/;"	m	class:Eigen::Hyperplane
m_coeffs	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  Coefficients m_coeffs;$/;"	m	class:Eigen::Quaternion
m_coeffs	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  VectorType m_coeffs;$/;"	m	class:Eigen::Scaling
m_coeffs	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  VectorType m_coeffs;$/;"	m	class:Eigen::Translation
m_coeffs	include/Eigen/src/Geometry/Hyperplane.h	/^  Coefficients m_coeffs;$/;"	m	class:Eigen::Hyperplane
m_coeffs	include/Eigen/src/Geometry/Quaternion.h	/^    Coefficients m_coeffs;$/;"	m	class:Eigen::Map
m_coeffs	include/Eigen/src/Geometry/Quaternion.h	/^    const Coefficients m_coeffs;$/;"	m	class:Eigen::Map
m_coeffs	include/Eigen/src/Geometry/Quaternion.h	/^  Coefficients m_coeffs;$/;"	m	class:Eigen::Quaternion
m_coeffs	include/Eigen/src/Geometry/Translation.h	/^  VectorType m_coeffs;$/;"	m	class:Eigen::Translation
m_coeffs	include/Eigen/src/Householder/HouseholderSequence.h	/^    typename CoeffsType::Nested m_coeffs;$/;"	m	class:Eigen::HouseholderSequence
m_col	include/Eigen/src/Core/CommaInitializer.h	/^  Index m_col;              \/\/ current col id$/;"	m	struct:Eigen::CommaInitializer
m_col	include/Eigen/src/Eigen2Support/Minor.h	/^    const Index m_row, m_col;$/;"	m	class:Eigen::Minor
m_col	include/Eigen/src/SparseCore/SparseUtil.h	/^  Index m_row, m_col;$/;"	m	class:Eigen::Triplet
m_col	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index m_col; \/\/ Number of columns $/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_colFactor	include/Eigen/src/Core/Replicate.h	/^    const internal::variable_if_dynamic<Index, ColFactor> m_colFactor;$/;"	m	class:Eigen::Replicate
m_colSqNorms	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealRowVectorType m_colSqNorms;$/;"	m	class:Eigen::ColPivHouseholderQR
m_col_to_sup	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* m_col_to_sup; \/\/ col_to_sup[j] is the supernode number to which column j belongs$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_cols	include/Eigen/src/Core/CwiseNullaryOp.h	/^    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_cols;$/;"	m	class:Eigen::CwiseNullaryOp
m_cols	include/Eigen/src/Core/DenseStorage.h	/^    DenseIndex m_cols;$/;"	m	class:Eigen::DenseStorage
m_cols	include/Eigen/src/Core/MapBase.h	/^    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_cols;$/;"	m	class:Eigen::MapBase
m_cols	include/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:Eigen::JacobiSVD
m_cols	include/Eigen/src/misc/Image.h	/^    Index m_rank, m_cols;$/;"	m	struct:Eigen::internal::image_retval_base
m_cols	include/Eigen/src/misc/Kernel.h	/^    Index m_rank, m_cols;$/;"	m	struct:Eigen::internal::kernel_retval_base
m_colsPermutation	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    PermutationType m_colsPermutation;$/;"	m	class:Eigen::ColPivHouseholderQR
m_colsTranspositions	include/Eigen/src/LU/FullPivLU.h	/^    IntRowVectorType m_colsTranspositions;$/;"	m	class:Eigen::FullPivLU
m_colsTranspositions	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    IntRowVectorType m_colsTranspositions;$/;"	m	class:Eigen::ColPivHouseholderQR
m_cols_permutation	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    PermutationType m_cols_permutation;$/;"	m	class:Eigen::FullPivHouseholderQR
m_cols_transpositions	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    IntDiagSizeVectorType m_cols_transpositions;$/;"	m	class:Eigen::FullPivHouseholderQR
m_comm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable int m_comm; \/\/ The MPI communicator identifier$/;"	m	class:Eigen::PastixBase
m_computationOptions	include/Eigen/src/SVD/JacobiSVD.h	/^    unsigned int m_computationOptions;$/;"	m	class:Eigen::JacobiSVD
m_computeFullU	include/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullU, m_computeThinU;$/;"	m	class:Eigen::JacobiSVD
m_computeFullV	include/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullV, m_computeThinV;$/;"	m	class:Eigen::JacobiSVD
m_computeQZ	include/Eigen/src/Eigenvalues/RealQZ.h	/^      bool m_computeQZ;$/;"	m	class:Eigen::RealQZ
m_computeThinU	include/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullU, m_computeThinU;$/;"	m	class:Eigen::JacobiSVD
m_computeThinV	include/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullV, m_computeThinV;$/;"	m	class:Eigen::JacobiSVD
m_condition	include/Eigen/src/Core/Select.h	/^    typename ConditionMatrixType::Nested m_condition;$/;"	m	class:Eigen::Select
m_conservative	include/Eigen/src/SparseCore/SparseProduct.h	/^    bool m_conservative;$/;"	m	class:Eigen::SparseSparseProduct
m_copyMatrix	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    UmfpackMatrixType m_copyMatrix;$/;"	m	class:Eigen::UmfPackLU
m_countPerCol	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    mutable VectorI m_countPerCol;$/;"	m	class:Eigen::SparseSelfAdjointView
m_countPerRow	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    mutable VectorI m_countPerRow;$/;"	m	class:Eigen::SparseSelfAdjointView
m_currentBlockRows	include/Eigen/src/Core/CommaInitializer.h	/^  Index m_currentBlockRows; \/\/ current block height$/;"	m	struct:Eigen::CommaInitializer
m_currentEl	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_currentEl;            \/\/ the current element in sparse\/linked-list mode$/;"	m	class:Eigen::internal::AmbiVector::Iterator
m_data	include/Eigen/src/Core/DenseStorage.h	/^    T *m_data;$/;"	m	class:Eigen::DenseStorage
m_data	include/Eigen/src/Core/DenseStorage.h	/^    internal::plain_array<T,Size,_Options> m_data;$/;"	m	class:Eigen::DenseStorage
m_data	include/Eigen/src/Core/GeneralProduct.h	/^  internal::plain_array<Scalar,EIGEN_SIZE_MIN_PREFER_FIXED(Size,MaxSize),0> m_data;$/;"	m	struct:Eigen::internal::gemv_static_vector_if
m_data	include/Eigen/src/Core/MapBase.h	/^    PointerType m_data;$/;"	m	class:Eigen::MapBase
m_data	include/Eigen/src/Core/util/BlasUtil.h	/^    Scalar* EIGEN_RESTRICT m_data;$/;"	m	class:Eigen::internal::blas_data_mapper
m_data	include/Eigen/src/Core/util/BlasUtil.h	/^    const Scalar* EIGEN_RESTRICT m_data;$/;"	m	class:Eigen::internal::const_blas_data_mapper
m_data	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Storage m_data;$/;"	m	class:Eigen::SparseMatrix
m_data	include/Eigen/src/SparseCore/SparseVector.h	/^    Storage m_data;$/;"	m	class:Eigen::SparseVector
m_data	include/Eigen/src/SparseCore/SparseVector.h	/^    const internal::CompressedStorage<Scalar,Index>& m_data;$/;"	m	class:Eigen::SparseVector::InnerIterator
m_data	include/Eigen/src/SparseCore/SparseVector.h	/^    const internal::CompressedStorage<Scalar,Index>& m_data;$/;"	m	class:Eigen::SparseVector::ReverseInnerIterator
m_deallocate	include/Eigen/src/Core/util/Memory.h	/^    bool m_deallocate;$/;"	m	class:Eigen::internal::aligned_stack_memory_handler
m_dec	include/Eigen/src/misc/Image.h	/^    const DecompositionType& m_dec;$/;"	m	struct:Eigen::internal::image_retval_base
m_dec	include/Eigen/src/misc/Kernel.h	/^    const DecompositionType& m_dec;$/;"	m	struct:Eigen::internal::kernel_retval_base
m_dec	include/Eigen/src/misc/Solve.h	/^    const DecompositionType& m_dec;$/;"	m	struct:Eigen::internal::solve_retval_base
m_dec	include/Eigen/src/misc/SparseSolve.h	/^    const DecompositionType& m_dec;$/;"	m	struct:Eigen::internal::solve_retval_with_guess
m_dec	include/Eigen/src/misc/SparseSolve.h	/^    const DecompositionType& m_dec;$/;"	m	struct:Eigen::internal::sparse_solve_retval_base
m_dest	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    Dest& m_dest;$/;"	m	struct:Eigen::internal::gemm_functor
m_detPermR	include/Eigen/src/SparseLU/SparseLU.h	/^    Index m_detPermR; \/\/ Determinant of the coefficient matrix$/;"	m	class:Eigen::SparseLU
m_det_p	include/Eigen/src/LU/PartialPivLU.h	/^    Index m_det_p;$/;"	m	class:Eigen::PartialPivLU
m_det_pq	include/Eigen/src/LU/FullPivLU.h	/^    Index m_det_pq, m_nonzero_pivots;$/;"	m	class:Eigen::FullPivLU
m_det_pq	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    Index m_det_pq;$/;"	m	class:Eigen::ColPivHouseholderQR
m_det_pq	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    Index m_det_pq;$/;"	m	class:Eigen::FullPivHouseholderQR
m_diag	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    VectorType m_diag;                                \/\/ the diagonal coefficients (LDLT mode)$/;"	m	class:Eigen::SimplicialCholeskyBase
m_diagSize	include/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:Eigen::JacobiSVD
m_diagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^    DiagonalVectorType m_diagonal;$/;"	m	class:Eigen::DiagonalMatrix
m_diagonal	include/Eigen/src/Core/DiagonalMatrix.h	/^    typename DiagonalVectorType::Nested m_diagonal;$/;"	m	class:Eigen::DiagonalWrapper
m_diagonal	include/Eigen/src/Core/DiagonalProduct.h	/^    typename DiagonalType::Nested m_diagonal;$/;"	m	class:Eigen::DiagonalProduct
m_diagpivotthresh	include/Eigen/src/SparseLU/SparseLU.h	/^    RealScalar m_diagpivotthresh; \/\/ Specifies the threshold used for a diagonal entry to be an acceptable pivot$/;"	m	class:Eigen::SparseLU
m_direction	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:Eigen::ParametrizedLine
m_direction	include/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:Eigen::ParametrizedLine
m_dparm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable Matrix<double,DPARM_SIZE,1> m_dparm; \/\/ Scalar vector for the input parameters$/;"	m	class:Eigen::PastixBase
m_droptol	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    RealScalar m_droptol;$/;"	m	class:Eigen::IncompleteLUT
m_eigenvectorsOk	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    bool m_eigenvectorsOk;$/;"	m	class:Eigen::ComplexEigenSolver
m_eigenvectorsOk	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    bool m_eigenvectorsOk;$/;"	m	class:Eigen::EigenSolver
m_eigenvectorsOk	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    bool m_eigenvectorsOk;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_eigenvectorsOk	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    bool m_eigenvectorsOk;$/;"	m	class:Eigen::SelfAdjointEigenSolver
m_eivalues	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    EigenvalueType m_eivalues;$/;"	m	class:Eigen::ComplexEigenSolver
m_eivalues	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    EigenvalueType m_eivalues;$/;"	m	class:Eigen::EigenSolver
m_eivalues	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    RealVectorType m_eivalues;$/;"	m	class:Eigen::SelfAdjointEigenSolver
m_eivec	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    EigenvectorType m_eivec;$/;"	m	class:Eigen::ComplexEigenSolver
m_eivec	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    MatrixType m_eivec;$/;"	m	class:Eigen::EigenSolver
m_eivec	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    MatrixType m_eivec;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_eivec	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    MatrixType m_eivec;$/;"	m	class:Eigen::SelfAdjointEigenSolver
m_else	include/Eigen/src/Core/Select.h	/^    typename ElseMatrixType::Nested m_else;$/;"	m	class:Eigen::Select
m_end	include/Eigen/src/Core/CoreIterators.h	/^    const Index m_end;$/;"	m	class:Eigen::DenseBase::InnerIterator
m_end	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_end;$/;"	m	class:Eigen::internal::AmbiVector
m_end	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const Index m_end;$/;"	m	class:Eigen::MappedSparseMatrix::InnerIterator
m_end	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const Index m_end;$/;"	m	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
m_end	include/Eigen/src/SparseCore/SparseBlock.h	/^      Index m_end;$/;"	m	class:Eigen::BlockImpl::InnerIterator
m_end	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Index m_end;$/;"	m	class:Eigen::SparseMatrix::InnerIterator
m_end	include/Eigen/src/SparseCore/SparseVector.h	/^    const Index m_end;$/;"	m	class:Eigen::SparseVector::InnerIterator
m_endidrow	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index m_endidrow;                       \/\/ End index of row indices of the current column$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_endidval	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index m_endidval;                 \/\/ End of the column value$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_epsilon	include/Eigen/src/SparseCore/AmbiVector.h	/^    RealScalar m_epsilon;       \/\/ epsilon used to prune zero coefficients$/;"	m	class:Eigen::internal::AmbiVector::Iterator
m_epsilon	include/Eigen/src/SparseCore/SparseView.h	/^  typename NumTraits<Scalar>::Real m_epsilon;$/;"	m	class:Eigen::SparseView
m_error	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  mutable RealScalar m_error;$/;"	m	class:Eigen::IterativeSolverBase
m_etree	include/Eigen/src/SparseLU/SparseLU.h	/^    IndexVector m_etree; \/\/ Column elimination tree $/;"	m	class:Eigen::SparseLU
m_etree	include/Eigen/src/SparseQR/SparseQR.h	/^    IndexVector m_etree;            \/\/ Column elimination tree$/;"	m	class:Eigen::SparseQR
m_exponent	include/Eigen/src/Core/Functors.h	/^  const Scalar m_exponent;$/;"	m	struct:Eigen::internal::scalar_pow_op
m_expression	include/Eigen/src/Core/ArrayWrapper.h	/^    NestedExpressionType m_expression;$/;"	m	class:Eigen::ArrayWrapper
m_expression	include/Eigen/src/Core/ArrayWrapper.h	/^    NestedExpressionType m_expression;$/;"	m	class:Eigen::MatrixWrapper
m_expression	include/Eigen/src/Core/CoreIterators.h	/^    const Derived& m_expression;$/;"	m	class:Eigen::DenseBase::InnerIterator
m_expression	include/Eigen/src/Core/ForceAlignedAccess.h	/^    const ExpressionType& m_expression;$/;"	m	class:Eigen::ForceAlignedAccess
m_expression	include/Eigen/src/Core/NestByValue.h	/^    const ExpressionType m_expression;$/;"	m	class:Eigen::NestByValue
m_expression	include/Eigen/src/Core/NoAlias.h	/^    ExpressionType& m_expression;$/;"	m	class:Eigen::NoAlias
m_expression	include/Eigen/src/Core/Swap.h	/^    ExpressionType& m_expression;$/;"	m	class:Eigen::SwapWrapper
m_extractedDataAreDirty	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable bool m_extractedDataAreDirty;$/;"	m	class:Eigen::SuperLUBase
m_extractedDataAreDirty	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    mutable bool m_extractedDataAreDirty;$/;"	m	class:Eigen::UmfPackLU
m_factor	include/Eigen/src/Geometry/Scaling.h	/^  Scalar m_factor;$/;"	m	class:Eigen::UniformScaling
m_factor	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    Scalar m_factor;$/;"	m	class:Eigen::SparseDenseOuterProduct::InnerIterator
m_factorizationIsOk	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    int m_factorizationIsOk;$/;"	m	class:Eigen::CholmodBase
m_factorizationIsOk	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    bool m_factorizationIsOk;$/;"	m	class:Eigen::IncompleteLUT
m_factorizationIsOk	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  mutable bool m_isInitialized, m_analysisIsOk, m_factorizationIsOk;$/;"	m	class:Eigen::IterativeSolverBase
m_factorizationIsOk	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    int m_factorizationIsOk;$/;"	m	class:Eigen::PastixBase
m_factorizationIsOk	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    bool m_initialized, m_analysisIsOk, m_factorizationIsOk;$/;"	m	class:Eigen::PardisoImpl
m_factorizationIsOk	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    bool m_factorizationIsOk;$/;"	m	class:Eigen::SPQR
m_factorizationIsOk	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    bool m_factorizationIsOk;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_factorizationIsOk	include/Eigen/src/SparseLU/SparseLU.h	/^    bool m_factorizationIsOk;$/;"	m	class:Eigen::SparseLU
m_factorizationIsOk	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    int m_factorizationIsOk;$/;"	m	class:Eigen::SuperLUBase
m_factorizationIsOk	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    int m_factorizationIsOk;$/;"	m	class:Eigen::UmfPackLU
m_factorizationIsok	include/Eigen/src/SparseQR/SparseQR.h	/^    bool m_factorizationIsok;$/;"	m	class:Eigen::SparseQR
m_fillfactor	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    int m_fillfactor;$/;"	m	class:Eigen::IncompleteLUT
m_firstRowElt	include/Eigen/src/SparseQR/SparseQR.h	/^    IndexVector m_firstRowElt;      \/\/ First element in each row$/;"	m	class:Eigen::SparseQR
m_format	include/Eigen/src/Core/IO.h	/^    IOFormat m_format;$/;"	m	class:Eigen::WithFormat
m_functor	include/Eigen/src/Core/CwiseBinaryOp.h	/^    const BinaryOp m_functor;$/;"	m	class:Eigen::CwiseBinaryOp
m_functor	include/Eigen/src/Core/CwiseNullaryOp.h	/^    const NullaryOp m_functor;$/;"	m	class:Eigen::CwiseNullaryOp
m_functor	include/Eigen/src/Core/CwiseUnaryOp.h	/^    const UnaryOp m_functor;$/;"	m	class:Eigen::CwiseUnaryOp
m_functor	include/Eigen/src/Core/CwiseUnaryView.h	/^    ViewOp m_functor;$/;"	m	class:Eigen::CwiseUnaryView
m_functor	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    const BinaryOp& m_functor;$/;"	m	class:Eigen::SelfCwiseBinaryOp
m_functor	include/Eigen/src/Core/VectorwiseOp.h	/^    const MemberOp m_functor;$/;"	m	class:Eigen::PartialReduxExpr
m_functor	include/Eigen/src/Core/VectorwiseOp.h	/^  const BinaryOp m_functor;$/;"	m	struct:Eigen::internal::member_redux
m_functor	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    const BinaryFunc m_functor;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_functor	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    const BinaryFunc& m_functor;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_functor	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    const BinaryOp& m_functor;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_functor	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    const UnaryOp m_functor;$/;"	m	class:Eigen::CwiseUnaryOpImpl::InnerIterator
m_functor	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    const UnaryOp m_functor;$/;"	m	class:Eigen::CwiseUnaryOpImpl::ReverseInnerIterator
m_functor	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    const ViewOp m_functor;$/;"	m	class:Eigen::CwiseUnaryViewImpl::InnerIterator
m_functor	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    const ViewOp m_functor;$/;"	m	class:Eigen::CwiseUnaryViewImpl::ReverseInnerIterator
m_global_iter	include/Eigen/src/Eigenvalues/RealQZ.h	/^      Index m_global_iter;$/;"	m	class:Eigen::RealQZ
m_glu	include/Eigen/src/SparseLU/SparseLU.h	/^    typename Base::GlobalLU_t m_glu; $/;"	m	class:Eigen::SparseLU
m_glu	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  typename SparseLUImpl<Scalar, Index>::GlobalLU_t& m_glu;$/;"	m	struct:Eigen::internal::column_dfs_traits
m_guess	include/Eigen/src/misc/SparseSolve.h	/^    const typename Guess::Nested m_guess;$/;"	m	struct:Eigen::internal::solve_retval_with_guess
m_hCoeffs	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    CoeffVectorType m_hCoeffs;$/;"	m	class:Eigen::HessenbergDecomposition
m_hCoeffs	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    CoeffVectorType m_hCoeffs;$/;"	m	class:Eigen::Tridiagonalization
m_hCoeffs	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    HCoeffsType m_hCoeffs;$/;"	m	class:Eigen::ColPivHouseholderQR
m_hCoeffs	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    HCoeffsType m_hCoeffs;$/;"	m	class:Eigen::FullPivHouseholderQR
m_hCoeffs	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  typename HCoeffsType::Nested m_hCoeffs;$/;"	m	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
m_hCoeffs	include/Eigen/src/QR/HouseholderQR.h	/^    HCoeffsType m_hCoeffs;$/;"	m	class:Eigen::HouseholderQR
m_hcoeffs	include/Eigen/src/SparseQR/SparseQR.h	/^    ScalarVector m_hcoeffs;         \/\/ The Householder coefficients$/;"	m	class:Eigen::SparseQR
m_hess	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    HessenbergDecomposition<MatrixType> m_hess;$/;"	m	class:Eigen::ComplexSchur
m_hess	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    const HessenbergDecomposition<MatrixType>& m_hess;$/;"	m	struct:Eigen::internal::HessenbergDecompositionMatrixHReturnType
m_hess	include/Eigen/src/Eigenvalues/RealSchur.h	/^    HessenbergDecomposition<MatrixType> m_hess;$/;"	m	class:Eigen::RealSchur
m_householder	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    MatrixType m_householder;$/;"	m	class:Eigen::internal::UpperBidiagonalization
m_id	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Index m_id;$/;"	m	class:Eigen::MappedSparseMatrix::InnerIterator
m_id	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Index m_id;$/;"	m	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
m_id	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    Index m_id;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_id	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Index m_id;$/;"	m	class:Eigen::SparseMatrix::InnerIterator
m_id	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Index m_id;$/;"	m	class:Eigen::SparseMatrix::ReverseInnerIterator
m_id	include/Eigen/src/SparseCore/SparseVector.h	/^    Index m_id;$/;"	m	class:Eigen::SparseVector::InnerIterator
m_id	include/Eigen/src/SparseCore/SparseVector.h	/^    Index m_id;$/;"	m	class:Eigen::SparseVector::ReverseInnerIterator
m_idrow	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index m_idrow;                          \/\/ Index to browse the row indices $/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_idval	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index m_idval;                          \/\/ Index to browse the values in the current column$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_index	include/Eigen/src/Core/Diagonal.h	/^    const internal::variable_if_dynamicindex<Index, DiagIndex> m_index;$/;"	m	class:Eigen::Diagonal
m_index	include/Eigen/src/SparseCore/SparseMatrix.h	/^        Index m_index;$/;"	m	class:Eigen::SparseMatrix::SingletonVector
m_indexPtr	include/Eigen/src/MetisSupport/MetisSupport.h	/^    IndexVector m_indexPtr; \/\/ Pointer to the adjacenccy list of each row\/column$/;"	m	class:Eigen::MetisOrdering
m_indices	include/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType m_indices;$/;"	m	class:Eigen::Map
m_indices	include/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType m_indices;$/;"	m	class:Eigen::PermutationMatrix
m_indices	include/Eigen/src/Core/PermutationMatrix.h	/^    typename IndicesType::Nested m_indices;$/;"	m	class:Eigen::PermutationWrapper
m_indices	include/Eigen/src/Core/Transpositions.h	/^    IndicesType m_indices;$/;"	m	class:Eigen::Map
m_indices	include/Eigen/src/Core/Transpositions.h	/^    IndicesType m_indices;$/;"	m	class:Eigen::Transpositions
m_indices	include/Eigen/src/Core/Transpositions.h	/^    const typename IndicesType::Nested m_indices;$/;"	m	class:Eigen::TranspositionsWrapper
m_indices	include/Eigen/src/SparseCore/CompressedStorage.h	/^    Index* m_indices;$/;"	m	class:Eigen::internal::CompressedStorage
m_indices	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Index* m_indices;$/;"	m	class:Eigen::SparseMatrix::InnerIterator
m_indices	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Index* m_indices;$/;"	m	class:Eigen::SparseMatrix::ReverseInnerIterator
m_info	include/Eigen/src/Cholesky/LLT.h	/^    ComputationInfo m_info;$/;"	m	class:Eigen::LLT
m_info	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    mutable ComputationInfo m_info;$/;"	m	class:Eigen::CholmodBase
m_info	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComputationInfo m_info;$/;"	m	class:Eigen::ComplexSchur
m_info	include/Eigen/src/Eigenvalues/RealQZ.h	/^      ComputationInfo m_info;$/;"	m	class:Eigen::RealQZ
m_info	include/Eigen/src/Eigenvalues/RealSchur.h	/^    ComputationInfo m_info;$/;"	m	class:Eigen::RealSchur
m_info	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    ComputationInfo m_info;$/;"	m	class:Eigen::SelfAdjointEigenSolver
m_info	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    ComputationInfo m_info;$/;"	m	class:Eigen::IncompleteLUT
m_info	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  mutable ComputationInfo m_info;$/;"	m	class:Eigen::IterativeSolverBase
m_info	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable ComputationInfo m_info; $/;"	m	class:Eigen::PastixBase
m_info	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    ComputationInfo m_info;$/;"	m	class:Eigen::PardisoImpl
m_info	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable ComputationInfo m_info;$/;"	m	class:Eigen::SPQR
m_info	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    mutable ComputationInfo m_info;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_info	include/Eigen/src/SparseLU/SparseLU.h	/^    mutable ComputationInfo m_info;$/;"	m	class:Eigen::SparseLU
m_info	include/Eigen/src/SparseQR/SparseQR.h	/^    mutable ComputationInfo m_info;$/;"	m	class:Eigen::SparseQR
m_info	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable ComputationInfo m_info;$/;"	m	class:Eigen::SuperLUBase
m_info	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    mutable ComputationInfo m_info;$/;"	m	class:Eigen::UmfPackLU
m_initialized	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    bool m_initialized, m_analysisIsOk, m_factorizationIsOk;$/;"	m	class:Eigen::PardisoImpl
m_initisOk	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    int m_initisOk; $/;"	m	class:Eigen::PastixBase
m_inner	include/Eigen/src/Core/CoreIterators.h	/^    Index m_inner;$/;"	m	class:Eigen::DenseBase::InnerIterator
m_inner	include/Eigen/src/Core/Stride.h	/^    internal::variable_if_dynamic<Index, InnerStrideAtCompileTime> m_inner;$/;"	m	class:Eigen::Stride
m_innerIndexPtr	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    const int* m_innerIndexPtr;$/;"	m	class:Eigen::UmfPackLU
m_innerIndices	include/Eigen/src/MetisSupport/MetisSupport.h	/^    IndexVector m_innerIndices; \/\/ Adjacency list $/;"	m	class:Eigen::MetisOrdering
m_innerIndices	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Index*  m_innerIndices;$/;"	m	class:Eigen::MappedSparseMatrix
m_innerNonZeros	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Index* m_innerNonZeros;     \/\/ optional, if null then the data is compressed$/;"	m	class:Eigen::SparseMatrix
m_innerSize	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Index   m_innerSize;$/;"	m	class:Eigen::MappedSparseMatrix
m_innerSize	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Index m_innerSize;$/;"	m	class:Eigen::SparseMatrix
m_interPacket	include/Eigen/src/Core/Functors.h	/^  const Packet m_interPacket;$/;"	m	struct:Eigen::internal::linspaced_op_impl
m_invdiag	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    Vector m_invdiag;$/;"	m	class:Eigen::DiagonalPreconditioner
m_invp	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable Matrix<Index,Dynamic,1> m_invp;  \/\/ Inverse permutation vector$/;"	m	class:Eigen::PastixBase
m_iparm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable Matrix<int,IPARM_SIZE,1> m_iparm; \/\/ integer vector for the input parameters$/;"	m	class:Eigen::PastixBase
m_iparm	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    mutable ParameterType m_iparm;$/;"	m	class:Eigen::PardisoImpl
m_isAllocated	include/Eigen/src/SVD/JacobiSVD.h	/^    bool m_isInitialized, m_isAllocated, m_usePrescribedThreshold;$/;"	m	class:Eigen::JacobiSVD
m_isDense	include/Eigen/src/SparseCore/AmbiVector.h	/^    bool m_isDense;             \/\/ mode of the vector$/;"	m	class:Eigen::internal::AmbiVector::Iterator
m_isEtreeOk	include/Eigen/src/SparseQR/SparseQR.h	/^    bool m_isEtreeOk;               \/\/ whether the elimination tree match the initial input matrix$/;"	m	class:Eigen::SparseQR
m_isInitialized	include/Eigen/src/Cholesky/LDLT.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::LDLT
m_isInitialized	include/Eigen/src/Cholesky/LLT.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::LLT
m_isInitialized	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::CholmodBase
m_isInitialized	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::ComplexEigenSolver
m_isInitialized	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::ComplexSchur
m_isInitialized	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::EigenSolver
m_isInitialized	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_isInitialized	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::HessenbergDecomposition
m_isInitialized	include/Eigen/src/Eigenvalues/RealQZ.h	/^      bool m_isInitialized;$/;"	m	class:Eigen::RealQZ
m_isInitialized	include/Eigen/src/Eigenvalues/RealSchur.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::RealSchur
m_isInitialized	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::SelfAdjointEigenSolver
m_isInitialized	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::Tridiagonalization
m_isInitialized	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::DiagonalPreconditioner
m_isInitialized	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::IncompleteLUT
m_isInitialized	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  mutable bool m_isInitialized, m_analysisIsOk, m_factorizationIsOk;$/;"	m	class:Eigen::IterativeSolverBase
m_isInitialized	include/Eigen/src/LU/FullPivLU.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:Eigen::FullPivLU
m_isInitialized	include/Eigen/src/LU/PartialPivLU.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::PartialPivLU
m_isInitialized	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::PastixBase
m_isInitialized	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:Eigen::ColPivHouseholderQR
m_isInitialized	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:Eigen::FullPivHouseholderQR
m_isInitialized	include/Eigen/src/QR/HouseholderQR.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::HouseholderQR
m_isInitialized	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::SPQR
m_isInitialized	include/Eigen/src/SVD/JacobiSVD.h	/^    bool m_isInitialized, m_isAllocated, m_usePrescribedThreshold;$/;"	m	class:Eigen::JacobiSVD
m_isInitialized	include/Eigen/src/SVD/UpperBidiagonalization.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::internal::UpperBidiagonalization
m_isInitialized	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_isInitialized	include/Eigen/src/SparseLU/SparseLU.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::SparseLU
m_isInitialized	include/Eigen/src/SparseQR/SparseQR.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::SparseQR
m_isInitialized	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::SuperLUBase
m_isInitialized	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    bool m_isInitialized;$/;"	m	class:Eigen::UmfPackLU
m_isQSorted	include/Eigen/src/SparseQR/SparseQR.h	/^    bool m_isQSorted;               \/\/ whether Q is sorted or not$/;"	m	class:Eigen::SparseQR
m_isRUpToDate	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable bool m_isRUpToDate;$/;"	m	class:Eigen::SPQR
m_isRValue	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    bool m_isRValue;$/;"	m	class:Eigen::SparseMatrixBase
m_iterations	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  mutable int m_iterations;$/;"	m	class:Eigen::IterativeSolverBase
m_jcol	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  Index m_jcol;$/;"	m	struct:Eigen::internal::column_dfs_traits
m_jcol	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^  Index m_jcol;$/;"	m	struct:Eigen::internal::panel_dfs_traits
m_jsuper_ref	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  Index& m_jsuper_ref;$/;"	m	struct:Eigen::internal::column_dfs_traits
m_kc	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_kc;$/;"	m	class:Eigen::internal::level3_blocking
m_l	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable LUMatrixType m_l;$/;"	m	class:Eigen::SuperLUBase
m_l	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    mutable LUMatrixType m_l;$/;"	m	class:Eigen::UmfPackLU
m_lastError	include/Eigen/src/SparseLU/SparseLU.h	/^    std::string m_lastError;$/;"	m	class:Eigen::SparseLU
m_lastError	include/Eigen/src/SparseQR/SparseQR.h	/^    std::string m_lastError;$/;"	m	class:Eigen::SparseQR
m_length	include/Eigen/src/Householder/HouseholderSequence.h	/^    Index m_length;$/;"	m	class:Eigen::HouseholderSequence
m_lhs	include/Eigen/src/Core/CwiseBinaryOp.h	/^    LhsNested m_lhs;$/;"	m	class:Eigen::CwiseBinaryOp
m_lhs	include/Eigen/src/Core/ProductBase.h	/^    LhsNested m_lhs;$/;"	m	namespace:Eigen
m_lhs	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typename internal::add_const_on_value_type<LhsNested>::type m_lhs;$/;"	m	class:Eigen::CoeffBasedProduct
m_lhs	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    const Lhs& m_lhs;$/;"	m	struct:Eigen::internal::gemm_functor
m_lhs	include/Eigen/src/Geometry/Homogeneous.h	/^  typename LhsMatrixTypeCleaned::Nested m_lhs;$/;"	m	struct:Eigen::internal::homogeneous_left_product_impl
m_lhs	include/Eigen/src/Geometry/Homogeneous.h	/^  typename MatrixType::Nested m_lhs;$/;"	m	struct:Eigen::internal::homogeneous_right_product_impl
m_lhs	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    LhsNested m_lhs;$/;"	m	class:Eigen::SparseDenseOuterProduct
m_lhs	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    LhsNested m_lhs;$/;"	m	class:Eigen::SparseDiagonalProduct
m_lhs	include/Eigen/src/SparseCore/SparseProduct.h	/^    LhsNested m_lhs;$/;"	m	class:Eigen::SparseSparseProduct
m_lhsIter	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    LhsIterator m_lhsIter;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_llCurrent	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_llCurrent;$/;"	m	class:Eigen::internal::AmbiVector
m_llSize	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_llSize;$/;"	m	class:Eigen::internal::AmbiVector
m_llStart	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_llStart;$/;"	m	class:Eigen::internal::AmbiVector
m_low	include/Eigen/src/Core/Functors.h	/^  const Scalar m_low;$/;"	m	struct:Eigen::internal::linspaced_op_impl
m_lowPacket	include/Eigen/src/Core/Functors.h	/^  const Packet m_lowPacket;$/;"	m	struct:Eigen::internal::linspaced_op_impl
m_lu	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    FactorType m_lu;$/;"	m	class:Eigen::IncompleteLUT
m_lu	include/Eigen/src/LU/FullPivLU.h	/^    MatrixType m_lu;$/;"	m	class:Eigen::FullPivLU
m_lu	include/Eigen/src/LU/PartialPivLU.h	/^    MatrixType m_lu;$/;"	m	class:Eigen::PartialPivLU
m_luImpl	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  SparseLUImpl<Scalar, Index>& m_luImpl;$/;"	m	struct:Eigen::internal::column_dfs_traits
m_mapL	include/Eigen/src/SparseLU/SparseLU.h	/^  const MappedSupernodalType& m_mapL;$/;"	m	struct:Eigen::SparseLUMatrixLReturnType
m_mapL	include/Eigen/src/SparseLU/SparseLU.h	/^  const MatrixLType& m_mapL;$/;"	m	struct:Eigen::SparseLUMatrixUReturnType
m_mapU	include/Eigen/src/SparseLU/SparseLU.h	/^  const MatrixUType& m_mapU;$/;"	m	struct:Eigen::SparseLUMatrixUReturnType
m_marker	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^  Index* m_marker;$/;"	m	struct:Eigen::internal::panel_dfs_traits
m_mat	include/Eigen/src/SparseLU/SparseLU.h	/^    NCMatrix m_mat; \/\/ The input (permuted ) matrix $/;"	m	class:Eigen::SparseLU
m_matS	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    MatrixType m_matS;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_matT	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexMatrixType m_matT, m_matU;$/;"	m	class:Eigen::ComplexSchur
m_matT	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    MatrixType m_matT;$/;"	m	class:Eigen::EigenSolver
m_matT	include/Eigen/src/Eigenvalues/RealSchur.h	/^    MatrixType m_matT;$/;"	m	class:Eigen::RealSchur
m_matU	include/Eigen/src/Eigen2Support/SVD.h	/^    MatrixUType m_matU;$/;"	m	class:Eigen::SVD
m_matU	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexMatrixType m_matT, m_matU;$/;"	m	class:Eigen::ComplexSchur
m_matU	include/Eigen/src/Eigenvalues/RealSchur.h	/^    MatrixType m_matU;$/;"	m	class:Eigen::RealSchur
m_matUisUptodate	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    bool m_matUisUptodate;$/;"	m	class:Eigen::ComplexSchur
m_matUisUptodate	include/Eigen/src/Eigenvalues/RealSchur.h	/^    bool m_matUisUptodate;$/;"	m	class:Eigen::RealSchur
m_matV	include/Eigen/src/Eigen2Support/SVD.h	/^    MatrixVType m_matV;$/;"	m	class:Eigen::SVD
m_matX	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    EigenvectorType m_matX;$/;"	m	class:Eigen::ComplexEigenSolver
m_matrix	include/Eigen/src/Cholesky/LDLT.h	/^    MatrixType m_matrix;$/;"	m	class:Eigen::LDLT
m_matrix	include/Eigen/src/Cholesky/LLT.h	/^    MatrixType m_matrix;$/;"	m	class:Eigen::LLT
m_matrix	include/Eigen/src/Core/CwiseUnaryView.h	/^    typename internal::nested<MatrixType>::type m_matrix;$/;"	m	class:Eigen::CwiseUnaryView
m_matrix	include/Eigen/src/Core/Diagonal.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	class:Eigen::Diagonal
m_matrix	include/Eigen/src/Core/DiagonalProduct.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	class:Eigen::DiagonalProduct
m_matrix	include/Eigen/src/Core/Flagged.h	/^    ExpressionTypeNested m_matrix;$/;"	m	class:Eigen::Flagged
m_matrix	include/Eigen/src/Core/IO.h	/^    const typename ExpressionType::Nested m_matrix;$/;"	m	class:Eigen::WithFormat
m_matrix	include/Eigen/src/Core/PermutationMatrix.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	struct:Eigen::internal::permut_matrix_product_retval
m_matrix	include/Eigen/src/Core/Replicate.h	/^    MatrixTypeNested m_matrix;$/;"	m	class:Eigen::Replicate
m_matrix	include/Eigen/src/Core/Reverse.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	class:Eigen::Reverse
m_matrix	include/Eigen/src/Core/SelfAdjointView.h	/^    MatrixTypeNested m_matrix;$/;"	m	class:Eigen::SelfAdjointView
m_matrix	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Lhs& m_matrix;$/;"	m	class:Eigen::SelfCwiseBinaryOp
m_matrix	include/Eigen/src/Core/Transpose.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	class:Eigen::Transpose
m_matrix	include/Eigen/src/Core/Transpositions.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	struct:Eigen::internal::transposition_matrix_product_retval
m_matrix	include/Eigen/src/Core/TriangularMatrix.h	/^    MatrixTypeNested m_matrix;$/;"	m	class:Eigen::TriangularView
m_matrix	include/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionTypeNested m_matrix;$/;"	m	class:Eigen::VectorwiseOp
m_matrix	include/Eigen/src/Core/VectorwiseOp.h	/^    MatrixTypeNested m_matrix;$/;"	m	class:Eigen::PartialReduxExpr
m_matrix	include/Eigen/src/Eigen2Support/Cwise.h	/^    ExpressionTypeNested m_matrix;$/;"	m	class:Eigen::Cwise
m_matrix	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  MatrixType m_matrix;$/;"	m	class:Eigen::Transform
m_matrix	include/Eigen/src/Eigen2Support/Minor.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:Eigen::Minor
m_matrix	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    MatrixType m_matrix;$/;"	m	class:Eigen::HessenbergDecomposition
m_matrix	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    MatrixType m_matrix;$/;"	m	class:Eigen::Tridiagonalization
m_matrix	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	struct:Eigen::internal::TridiagonalizationMatrixTReturnType
m_matrix	include/Eigen/src/Geometry/Homogeneous.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	class:Eigen::Homogeneous
m_matrix	include/Eigen/src/Geometry/Transform.h	/^  MatrixType m_matrix;$/;"	m	class:Eigen::Transform
m_matrix	include/Eigen/src/LU/Inverse.h	/^  MatrixTypeNested m_matrix;$/;"	m	struct:Eigen::internal::inverse_impl
m_matrix	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    mutable SparseMatrixType m_matrix;$/;"	m	class:Eigen::PardisoImpl
m_matrix	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    CholMatrixType m_matrix;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_matrix	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const MappedSparseMatrix& m_matrix;$/;"	m	class:Eigen::MappedSparseMatrix::InnerIterator
m_matrix	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const MappedSparseMatrix& m_matrix;$/;"	m	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
m_matrix	include/Eigen/src/SparseCore/SparseBlock.h	/^    typename SparseMatrixType::Nested m_matrix;$/;"	m	class:Eigen::BlockImpl
m_matrix	include/Eigen/src/SparseCore/SparseBlock.h	/^    typename XprType::Nested m_matrix;$/;"	m	class:Eigen::BlockImpl
m_matrix	include/Eigen/src/SparseCore/SparsePermutation.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	struct:Eigen::internal::permut_sparsematrix_product_retval
m_matrix	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    MatrixTypeNested m_matrix;$/;"	m	class:Eigen::SparseSymmetricPermutationProduct
m_matrix	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    typename MatrixType::Nested m_matrix;$/;"	m	class:Eigen::SparseSelfAdjointView
m_matrix	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    MatrixTypeNested m_matrix;$/;"	m	class:Eigen::SparseTriangularView
m_matrix	include/Eigen/src/SparseCore/SparseView.h	/^  MatrixTypeNested m_matrix;$/;"	m	class:Eigen::SparseView
m_matrix	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const MappedSuperNodalMatrix& m_matrix; \/\/ Supernodal lower triangular matrix $/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_matrix	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable LUMatrixType m_matrix;  \/\/ copy of the factorized matrix$/;"	m	class:Eigen::SuperLUBase
m_matrixU	include/Eigen/src/SVD/JacobiSVD.h	/^    MatrixUType m_matrixU;$/;"	m	class:Eigen::JacobiSVD
m_matrixV	include/Eigen/src/SVD/JacobiSVD.h	/^    MatrixVType m_matrixV;$/;"	m	class:Eigen::JacobiSVD
m_max	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:Eigen::AlignedBox
m_max	include/Eigen/src/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:Eigen::AlignedBox
m_maxIterations	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    static const int m_maxIterations = 30;$/;"	m	class:Eigen::SelfAdjointEigenSolver
m_maxIterations	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  int m_maxIterations;$/;"	m	class:Eigen::IterativeSolverBase
m_maxIterationsPerRow	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    static const int m_maxIterationsPerRow = 30;$/;"	m	class:Eigen::ComplexSchur
m_maxIterationsPerRow	include/Eigen/src/Eigenvalues/RealSchur.h	/^    static const int m_maxIterationsPerRow = 40;$/;"	m	class:Eigen::RealSchur
m_maxIters	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    Index m_maxIters;$/;"	m	class:Eigen::ComplexSchur
m_maxIters	include/Eigen/src/Eigenvalues/RealQZ.h	/^      Index m_maxIters;$/;"	m	class:Eigen::RealQZ
m_maxIters	include/Eigen/src/Eigenvalues/RealSchur.h	/^    Index m_maxIters;$/;"	m	class:Eigen::RealSchur
m_maxpivot	include/Eigen/src/LU/FullPivLU.h	/^    RealScalar m_maxpivot, m_prescribedThreshold;$/;"	m	class:Eigen::FullPivLU
m_maxpivot	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:Eigen::ColPivHouseholderQR
m_maxpivot	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:Eigen::FullPivHouseholderQR
m_mc	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_mc;$/;"	m	class:Eigen::internal::level3_blocking
m_min	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:Eigen::AlignedBox
m_min	include/Eigen/src/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:Eigen::AlignedBox
m_mode	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_mode;$/;"	m	class:Eigen::internal::AmbiVector
m_msglvl	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    Index m_type, m_msglvl;$/;"	m	class:Eigen::PardisoImpl
m_nc	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_nc;$/;"	m	class:Eigen::internal::level3_blocking
m_nnz	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Index   m_nnz;$/;"	m	class:Eigen::MappedSparseMatrix
m_nnzL	include/Eigen/src/SparseLU/SparseLU.h	/^    Index m_nnzL, m_nnzU; \/\/ Nonzeros in L and U factors $/;"	m	class:Eigen::SparseLU
m_nnzU	include/Eigen/src/SparseLU/SparseLU.h	/^    Index m_nnzL, m_nnzU; \/\/ Nonzeros in L and U factors $/;"	m	class:Eigen::SparseLU
m_nonZerosPerCol	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    VectorXi m_nonZerosPerCol;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_nonzeroSingularValues	include/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:Eigen::JacobiSVD
m_nonzero_pivots	include/Eigen/src/LU/FullPivLU.h	/^    Index m_det_pq, m_nonzero_pivots;$/;"	m	class:Eigen::FullPivLU
m_nonzero_pivots	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    Index m_nonzero_pivots;$/;"	m	class:Eigen::ColPivHouseholderQR
m_nonzero_pivots	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    Index m_nonzero_pivots;$/;"	m	class:Eigen::FullPivHouseholderQR
m_nonzeropivots	include/Eigen/src/SparseQR/SparseQR.h	/^    Index m_nonzeropivots;          \/\/ Number of non zero pivots found $/;"	m	class:Eigen::SparseQR
m_normOfS	include/Eigen/src/Eigenvalues/RealQZ.h	/^      Scalar m_normOfT, m_normOfS;$/;"	m	class:Eigen::RealQZ
m_normOfT	include/Eigen/src/Eigenvalues/RealQZ.h	/^      Scalar m_normOfT, m_normOfS;$/;"	m	class:Eigen::RealQZ
m_nsuper	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index m_nsuper; \/\/ Number of supernodes $/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_numeric	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void* m_numeric;$/;"	m	class:Eigen::UmfPackLU
m_nzval	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Scalar* m_nzval; \/\/array of nonzero values packed by column$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_nzval_colptr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* m_nzval_colptr; \/\/nzval_colptr[j] Stores the location in nzval[] which starts column j $/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_object	include/Eigen/src/Core/Ref.h	/^    TPlainObjectType m_object;$/;"	m	class:Eigen::Ref
m_ordering	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    int m_ordering; \/\/ Ordering method to use, see SPQR's manual$/;"	m	class:Eigen::SPQR
m_origin	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:Eigen::ParametrizedLine
m_origin	include/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:Eigen::ParametrizedLine
m_originalMatrix	include/Eigen/src/Eigen2Support/LU.h	/^    const MatrixType& m_originalMatrix;$/;"	m	class:Eigen::LU
m_originalMatrix	include/Eigen/src/misc/Image.h	/^    const MatrixType& m_originalMatrix;$/;"	m	struct:Eigen::internal::image_retval_base
m_other	include/Eigen/src/Core/Functors.h	/^  Scalar m_other;$/;"	m	struct:Eigen::internal::scalar_inverse_mult_op
m_other	include/Eigen/src/Core/Functors.h	/^  const Scalar m_other;$/;"	m	struct:Eigen::internal::scalar_add_op
m_other	include/Eigen/src/Core/Functors.h	/^  const Scalar m_other;$/;"	m	struct:Eigen::internal::scalar_constant_op
m_other	include/Eigen/src/Core/Functors.h	/^  typename add_const_on_value_type<typename NumTraits<Scalar2>::Nested>::type m_other;$/;"	m	struct:Eigen::internal::scalar_multiple2_op
m_other	include/Eigen/src/Core/Functors.h	/^  typename add_const_on_value_type<typename NumTraits<Scalar>::Nested>::type m_other;$/;"	m	struct:Eigen::internal::scalar_multiple_op
m_other	include/Eigen/src/Core/Functors.h	/^  typename add_const_on_value_type<typename NumTraits<Scalar>::Nested>::type m_other;$/;"	m	struct:Eigen::internal::scalar_quotient1_op
m_other	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  const Derived& m_other; $/;"	m	struct:Eigen::SPQR_QProduct
m_other	include/Eigen/src/SparseQR/SparseQR.h	/^  const Derived& m_other;$/;"	m	struct:Eigen::SparseQR_QProduct
m_outer	include/Eigen/src/Core/CoreIterators.h	/^    const Index m_outer;$/;"	m	class:Eigen::DenseBase::InnerIterator
m_outer	include/Eigen/src/Core/Stride.h	/^    internal::variable_if_dynamic<Index, OuterStrideAtCompileTime> m_outer;$/;"	m	class:Eigen::Stride
m_outer	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const Index m_outer;$/;"	m	class:Eigen::MappedSparseMatrix::InnerIterator
m_outer	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const Index m_outer;$/;"	m	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
m_outer	include/Eigen/src/SparseCore/SparseBlock.h	/^        Index m_outer;$/;"	m	class:Eigen::BlockImpl::InnerIterator
m_outer	include/Eigen/src/SparseCore/SparseBlock.h	/^        Index m_outer;$/;"	m	class:Eigen::BlockImpl::ReverseInnerIterator
m_outer	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    const Index m_outer;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_outer	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    Index m_outer;$/;"	m	class:Eigen::SparseDenseOuterProduct::InnerIterator
m_outer	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    Index m_outer;$/;"	m	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
m_outer	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Index m_outer;$/;"	m	class:Eigen::SparseMatrix::InnerIterator
m_outer	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Index m_outer;$/;"	m	class:Eigen::SparseMatrix::ReverseInnerIterator
m_outer	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index m_outer;                    \/\/ Current column $/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_outerIndex	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Index*  m_outerIndex;$/;"	m	class:Eigen::MappedSparseMatrix
m_outerIndex	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Index* m_outerIndex;$/;"	m	class:Eigen::SparseMatrix
m_outerIndexPtr	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    const int* m_outerIndexPtr;$/;"	m	class:Eigen::UmfPackLU
m_outerSize	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Index   m_outerSize;$/;"	m	class:Eigen::MappedSparseMatrix
m_outerSize	include/Eigen/src/SparseCore/SparseBlock.h	/^    const internal::variable_if_dynamic<Index, OuterSize> m_outerSize;$/;"	m	class:Eigen::BlockImpl
m_outerSize	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Index m_outerSize;$/;"	m	class:Eigen::SparseMatrix
m_outerStart	include/Eigen/src/SparseCore/SparseBlock.h	/^    Index m_outerStart;$/;"	m	class:Eigen::BlockImpl
m_outerStride	include/Eigen/src/Core/Block.h	/^    Index m_outerStride;$/;"	m	class:Eigen::internal::BlockImpl_dense
m_outputPerm_c	include/Eigen/src/SparseQR/SparseQR.h	/^    PermutationType m_outputPerm_c; \/\/ The final column permutation$/;"	m	class:Eigen::SparseQR
m_p	include/Eigen/src/LU/FullPivLU.h	/^    PermutationPType m_p;$/;"	m	class:Eigen::FullPivLU
m_p	include/Eigen/src/LU/PartialPivLU.h	/^    PermutationType m_p;$/;"	m	class:Eigen::PartialPivLU
m_p	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable IntColVectorType m_p;$/;"	m	class:Eigen::SuperLUBase
m_p	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    mutable IntColVectorType m_p;$/;"	m	class:Eigen::UmfPackLU
m_packetStep	include/Eigen/src/Core/Functors.h	/^  const Packet m_packetStep;$/;"	m	struct:Eigen::internal::linspaced_op_impl
m_parent	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    VectorXi m_parent;                                \/\/ elimination tree$/;"	m	class:Eigen::SimplicialCholeskyBase
m_pastixdata	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable pastix_data_t *m_pastixdata; \/\/ Data structure for pastix$/;"	m	class:Eigen::PastixBase
m_perfv	include/Eigen/src/SparseLU/SparseLU.h	/^    internal::perfvalues<Index> m_perfv; $/;"	m	class:Eigen::SparseLU
m_perm	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable Matrix<Index,Dynamic,1> m_perm;  \/\/ Permutation vector$/;"	m	class:Eigen::PastixBase
m_perm	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    mutable IntColVectorType m_perm;$/;"	m	class:Eigen::PardisoImpl
m_perm	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    const Perm& m_perm;$/;"	m	class:Eigen::SparseSymmetricPermutationProduct
m_perm_c	include/Eigen/src/SparseLU/SparseLU.h	/^    PermutationType m_perm_c; \/\/ Column permutation $/;"	m	class:Eigen::SparseLU
m_perm_c	include/Eigen/src/SparseQR/SparseQR.h	/^    PermutationType m_perm_c;       \/\/ Fill-reducing  Column  permutation$/;"	m	class:Eigen::SparseQR
m_perm_r	include/Eigen/src/SparseLU/SparseLU.h	/^    PermutationType m_perm_r ; \/\/ Row permutation$/;"	m	class:Eigen::SparseLU
m_permutation	include/Eigen/src/Core/PermutationMatrix.h	/^    const PermutationType& m_permutation;$/;"	m	class:Eigen::Transpose
m_permutation	include/Eigen/src/Core/PermutationMatrix.h	/^    const PermutationType& m_permutation;$/;"	m	struct:Eigen::internal::permut_matrix_product_retval
m_permutation	include/Eigen/src/SparseCore/SparsePermutation.h	/^    const PermutationType& m_permutation;$/;"	m	struct:Eigen::internal::permut_sparsematrix_product_retval
m_pivotperm	include/Eigen/src/SparseQR/SparseQR.h	/^    PermutationType m_pivotperm;    \/\/ The permutation for rank revealing$/;"	m	class:Eigen::SparseQR
m_pmat	include/Eigen/src/SparseQR/SparseQR.h	/^    QRMatrixType m_pmat;            \/\/ Temporary matrix$/;"	m	class:Eigen::SparseQR
m_precision	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar m_precision;$/;"	m	class:Eigen::FullPivHouseholderQR
m_preconditioner	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Preconditioner m_preconditioner;$/;"	m	class:Eigen::IterativeSolverBase
m_prescribedThreshold	include/Eigen/src/LU/FullPivLU.h	/^    RealScalar m_maxpivot, m_prescribedThreshold;$/;"	m	class:Eigen::FullPivLU
m_prescribedThreshold	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:Eigen::ColPivHouseholderQR
m_prescribedThreshold	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:Eigen::FullPivHouseholderQR
m_prescribedThreshold	include/Eigen/src/SVD/JacobiSVD.h	/^    RealScalar m_prescribedThreshold;$/;"	m	class:Eigen::JacobiSVD
m_prod	include/Eigen/src/Core/ProductBase.h	/^    const NestedProduct& m_prod;$/;"	m	class:ScaledProduct
m_pt	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    mutable void *m_pt[64];$/;"	m	class:Eigen::PardisoImpl
m_ptr	include/Eigen/src/Core/util/Memory.h	/^    T* m_ptr;$/;"	m	class:Eigen::internal::aligned_stack_memory_handler
m_q	include/Eigen/src/LU/FullPivLU.h	/^    PermutationQType m_q;$/;"	m	class:Eigen::FullPivLU
m_q	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable IntRowVectorType m_q;$/;"	m	class:Eigen::SuperLUBase
m_q	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    mutable IntRowVectorType m_q;$/;"	m	class:Eigen::UmfPackLU
m_qr	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    MatrixType m_qr;$/;"	m	class:Eigen::ColPivHouseholderQR
m_qr	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    MatrixType m_qr;$/;"	m	class:Eigen::FullPivHouseholderQR
m_qr	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  typename MatrixType::Nested m_qr;$/;"	m	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
m_qr	include/Eigen/src/QR/HouseholderQR.h	/^    MatrixType m_qr;$/;"	m	class:Eigen::HouseholderQR
m_qr	include/Eigen/src/SVD/JacobiSVD.h	/^  QRType m_qr;$/;"	m	class:Eigen::internal::qr_preconditioner_impl
m_qr	include/Eigen/src/SparseQR/SparseQR.h	/^  const SparseQRType& m_qr;$/;"	m	struct:Eigen::SparseQRMatrixQReturnType
m_qr	include/Eigen/src/SparseQR/SparseQR.h	/^  const SparseQRType& m_qr;$/;"	m	struct:Eigen::SparseQRMatrixQTransposeReturnType
m_qr	include/Eigen/src/SparseQR/SparseQR.h	/^  const SparseQRType& m_qr;$/;"	m	struct:Eigen::SparseQR_QProduct
m_qr_precond_morecols	include/Eigen/src/SVD/JacobiSVD.h	/^    internal::qr_preconditioner_impl<MatrixType, QRPreconditioner, internal::PreconditionIfMoreColsThanRows> m_qr_precond_morecols;$/;"	m	class:Eigen::JacobiSVD
m_qr_precond_morerows	include/Eigen/src/SVD/JacobiSVD.h	/^    internal::qr_preconditioner_impl<MatrixType, QRPreconditioner, internal::PreconditionIfMoreRowsThanCols> m_qr_precond_morerows;$/;"	m	class:Eigen::JacobiSVD
m_rank	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    mutable Index m_rank; \/\/ The rank of the matrix$/;"	m	class:Eigen::SPQR
m_rank	include/Eigen/src/misc/Image.h	/^    Index m_rank, m_cols;$/;"	m	struct:Eigen::internal::image_retval_base
m_rank	include/Eigen/src/misc/Kernel.h	/^    Index m_rank, m_cols;$/;"	m	struct:Eigen::internal::kernel_retval_base
m_realQZ	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    RealQZ<MatrixType> m_realQZ;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_realSchur	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    RealSchur<MatrixType> m_realSchur;$/;"	m	class:Eigen::EigenSolver
m_reference	include/Eigen/src/SparseCore/SparseView.h	/^  Scalar m_reference;$/;"	m	class:Eigen::SparseView
m_result	include/Eigen/src/Core/ProductBase.h	/^    mutable PlainObject m_result;$/;"	m	namespace:Eigen
m_result	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    mutable PlainObject m_result;$/;"	m	class:Eigen::CoeffBasedProduct
m_returnOne	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    bool m_returnOne;$/;"	m	class:Eigen::SparseTriangularView::InnerIterator
m_rhs	include/Eigen/src/Core/CwiseBinaryOp.h	/^    RhsNested m_rhs;$/;"	m	class:Eigen::CwiseBinaryOp
m_rhs	include/Eigen/src/Core/ProductBase.h	/^    RhsNested m_rhs;$/;"	m	namespace:Eigen
m_rhs	include/Eigen/src/Core/SolveTriangular.h	/^    typename Rhs::Nested m_rhs;$/;"	m	struct:Eigen::internal::triangular_solve_retval
m_rhs	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typename internal::add_const_on_value_type<RhsNested>::type m_rhs;$/;"	m	class:Eigen::CoeffBasedProduct
m_rhs	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    const Rhs& m_rhs;$/;"	m	struct:Eigen::internal::gemm_functor
m_rhs	include/Eigen/src/Geometry/Homogeneous.h	/^  typename MatrixType::Nested m_rhs;$/;"	m	struct:Eigen::internal::homogeneous_left_product_impl
m_rhs	include/Eigen/src/Geometry/Homogeneous.h	/^  typename Rhs::Nested m_rhs;$/;"	m	struct:Eigen::internal::homogeneous_right_product_impl
m_rhs	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    RhsNested m_rhs;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_rhs	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    RhsNested m_rhs;$/;"	m	class:Eigen::SparseDenseOuterProduct
m_rhs	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    RhsNested m_rhs;$/;"	m	class:Eigen::SparseDiagonalProduct
m_rhs	include/Eigen/src/SparseCore/SparseProduct.h	/^    RhsNested m_rhs;$/;"	m	class:Eigen::SparseSparseProduct
m_rhs	include/Eigen/src/misc/Solve.h	/^    typename Rhs::Nested m_rhs;$/;"	m	struct:Eigen::internal::solve_retval_base
m_rhs	include/Eigen/src/misc/SparseSolve.h	/^    const typename Rhs::Nested m_rhs;$/;"	m	struct:Eigen::internal::solve_retval_with_guess
m_rhs	include/Eigen/src/misc/SparseSolve.h	/^    typename Rhs::Nested m_rhs;$/;"	m	struct:Eigen::internal::sparse_solve_retval_base
m_rhsIter	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    RhsIterator m_rhsIter;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_row	include/Eigen/src/Core/CommaInitializer.h	/^  Index m_row;              \/\/ current row id$/;"	m	struct:Eigen::CommaInitializer
m_row	include/Eigen/src/Eigen2Support/Minor.h	/^    const Index m_row, m_col;$/;"	m	class:Eigen::Minor
m_row	include/Eigen/src/SparseCore/SparseUtil.h	/^  Index m_row, m_col;$/;"	m	class:Eigen::Triplet
m_row	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index m_row; \/\/ Number of rows$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_rowFactor	include/Eigen/src/Core/Replicate.h	/^    const internal::variable_if_dynamic<Index, RowFactor> m_rowFactor;$/;"	m	class:Eigen::Replicate
m_rowind	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* m_rowind; \/\/ Array of compressed row indices of rectangular supernodes$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_rowind_colptr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* m_rowind_colptr; \/\/rowind_colptr[j] stores the location in rowind[] which starts column j$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_rows	include/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, Rows>   m_rows;$/;"	m	class:Eigen::internal::BandMatrix
m_rows	include/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, _Rows>   m_rows;$/;"	m	class:Eigen::internal::BandMatrixWrapper
m_rows	include/Eigen/src/Core/CwiseNullaryOp.h	/^    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_rows;$/;"	m	class:Eigen::CwiseNullaryOp
m_rows	include/Eigen/src/Core/DenseStorage.h	/^    DenseIndex m_rows;$/;"	m	class:Eigen::DenseStorage
m_rows	include/Eigen/src/Core/MapBase.h	/^    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_rows;$/;"	m	class:Eigen::MapBase
m_rows	include/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:Eigen::JacobiSVD
m_rowsTranspositions	include/Eigen/src/LU/FullPivLU.h	/^    IntColVectorType m_rowsTranspositions;$/;"	m	class:Eigen::FullPivLU
m_rowsTranspositions	include/Eigen/src/LU/PartialPivLU.h	/^    TranspositionType m_rowsTranspositions;$/;"	m	class:Eigen::PartialPivLU
m_rowsTranspositions	include/Eigen/src/QR/FullPivHouseholderQR.h	/^  typename IntDiagSizeVectorType::Nested m_rowsTranspositions;$/;"	m	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
m_rows_transpositions	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    IntDiagSizeVectorType m_rows_transpositions;$/;"	m	class:Eigen::FullPivHouseholderQR
m_s	include/Eigen/src/Jacobi/Jacobi.h	/^    Scalar m_c, m_s;$/;"	m	class:Eigen::JacobiRotation
m_scale	include/Eigen/src/Core/GeneralProduct.h	/^      Scalar m_scale;$/;"	m	struct:Eigen::GeneralProduct::adds
m_scaledMatrix	include/Eigen/src/SVD/JacobiSVD.h	/^    MatrixType m_scaledMatrix;$/;"	m	class:Eigen::JacobiSVD
m_schur	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComplexSchur<MatrixType> m_schur;$/;"	m	class:Eigen::ComplexEigenSolver
m_shift	include/Eigen/src/Householder/HouseholderSequence.h	/^    Index m_shift;$/;"	m	class:Eigen::HouseholderSequence
m_shiftOffset	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    RealScalar m_shiftOffset[2];$/;"	m	class:Eigen::CholmodBase
m_shiftOffset	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    RealScalar m_shiftOffset;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_shiftScale	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    RealScalar m_shiftScale;$/;"	m	class:Eigen::SimplicialCholeskyBase
m_sigma	include/Eigen/src/Eigen2Support/SVD.h	/^    SingularValuesType m_sigma;$/;"	m	class:Eigen::SVD
m_sign	include/Eigen/src/Cholesky/LDLT.h	/^    internal::SignMatrix m_sign;$/;"	m	class:Eigen::LDLT
m_singularValues	include/Eigen/src/SVD/JacobiSVD.h	/^    SingularValuesType m_singularValues;$/;"	m	class:Eigen::JacobiSVD
m_size	include/Eigen/src/Core/util/Memory.h	/^    size_t m_size;$/;"	m	class:Eigen::internal::aligned_stack_memory_handler
m_size	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    mutable int m_size; \/\/ Size of the matrix $/;"	m	class:Eigen::PastixBase
m_size	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    Index m_size;$/;"	m	class:Eigen::PardisoImpl
m_size	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_size;$/;"	m	class:Eigen::internal::AmbiVector
m_size	include/Eigen/src/SparseCore/CompressedStorage.h	/^    size_t m_size;$/;"	m	class:Eigen::internal::CompressedStorage
m_size	include/Eigen/src/SparseCore/SparseVector.h	/^    Index m_size;$/;"	m	class:Eigen::SparseVector
m_sizeA	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_sizeA;$/;"	m	class:Eigen::internal::gemm_blocking_space
m_sizeB	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_sizeB;$/;"	m	class:Eigen::internal::gemm_blocking_space
m_sizeW	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_sizeW;$/;"	m	class:Eigen::internal::gemm_blocking_space
m_sluA	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable SluMatrix m_sluA;$/;"	m	class:Eigen::SuperLUBase
m_sluB	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable SluMatrix m_sluB, m_sluX;$/;"	m	class:Eigen::SuperLUBase
m_sluBerr	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable Matrix<RealScalar,Dynamic,1> m_sluFerr, m_sluBerr;$/;"	m	class:Eigen::SuperLUBase
m_sluCscale	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable Matrix<RealScalar,Dynamic,1> m_sluRscale, m_sluCscale;$/;"	m	class:Eigen::SuperLUBase
m_sluEqued	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable char m_sluEqued;$/;"	m	class:Eigen::SuperLUBase
m_sluEtree	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable std::vector<int> m_sluEtree;$/;"	m	class:Eigen::SuperLUBase
m_sluFerr	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable Matrix<RealScalar,Dynamic,1> m_sluFerr, m_sluBerr;$/;"	m	class:Eigen::SuperLUBase
m_sluL	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable SuperMatrix m_sluL, m_sluU;$/;"	m	class:Eigen::SuperLUBase
m_sluOptions	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable superlu_options_t m_sluOptions;$/;"	m	class:Eigen::SuperLUBase
m_sluRscale	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable Matrix<RealScalar,Dynamic,1> m_sluRscale, m_sluCscale;$/;"	m	class:Eigen::SuperLUBase
m_sluStat	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable SuperLUStat_t m_sluStat;$/;"	m	class:Eigen::SuperLUBase
m_sluU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable SuperMatrix m_sluL, m_sluU;$/;"	m	class:Eigen::SuperLUBase
m_sluX	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable SluMatrix m_sluB, m_sluX;$/;"	m	class:Eigen::SuperLUBase
m_spqr	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  const SPQRType& m_spqr; $/;"	m	struct:Eigen::SPQR_QProduct
m_spqr	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  const SPQRType& m_spqr;$/;"	m	struct:Eigen::SPQRMatrixQReturnType
m_spqr	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  const SPQRType& m_spqr;$/;"	m	struct:Eigen::SPQRMatrixQTransposeReturnType
m_start	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index m_start;$/;"	m	class:Eigen::internal::AmbiVector
m_start	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const Index m_start;$/;"	m	class:Eigen::MappedSparseMatrix::InnerIterator
m_start	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    const Index m_start;$/;"	m	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
m_start	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Index m_start;$/;"	m	class:Eigen::SparseMatrix::ReverseInnerIterator
m_start	include/Eigen/src/SparseCore/SparseVector.h	/^    const Index m_start;$/;"	m	class:Eigen::SparseVector::ReverseInnerIterator
m_startCol	include/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, XprType::ColsAtCompileTime == 1 ? 0 : Dynamic> m_startCol;$/;"	m	class:Eigen::internal::BlockImpl_dense
m_startCol	include/Eigen/src/SparseCore/SparseBlock.h	/^    const internal::variable_if_dynamic<Index, XprType::ColsAtCompileTime == 1 ? 0 : Dynamic> m_startCol;$/;"	m	class:Eigen::BlockImpl
m_startRow	include/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, XprType::RowsAtCompileTime == 1 ? 0 : Dynamic> m_startRow;$/;"	m	class:Eigen::internal::BlockImpl_dense
m_startRow	include/Eigen/src/SparseCore/SparseBlock.h	/^    const internal::variable_if_dynamic<Index, XprType::RowsAtCompileTime == 1 ? 0 : Dynamic> m_startRow;$/;"	m	class:Eigen::BlockImpl
m_startidval	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index m_startidval;               \/\/ Start of the column value$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_staticA	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    EIGEN_ALIGN16 LhsScalar m_staticA[SizeA];$/;"	m	class:Eigen::internal::gemm_blocking_space
m_staticB	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    EIGEN_ALIGN16 RhsScalar m_staticB[SizeB];$/;"	m	class:Eigen::internal::gemm_blocking_space
m_staticW	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    EIGEN_ALIGN16 RhsScalar m_staticW[SizeW];$/;"	m	class:Eigen::internal::gemm_blocking_space
m_step	include/Eigen/src/Core/Functors.h	/^  const Scalar m_step;$/;"	m	struct:Eigen::internal::linspaced_op_impl
m_stepPacket	include/Eigen/src/Core/Functors.h	/^  const Packet m_stepPacket;$/;"	m	struct:Eigen::internal::linspaced_op_impl
m_storage	include/Eigen/src/Core/PlainObjectBase.h	/^    DenseStorage<Scalar, Base::MaxSizeAtCompileTime, Base::RowsAtCompileTime, Base::ColsAtCompileTime, Options> m_storage;$/;"	m	class:Eigen::PlainObjectBase
m_stride	include/Eigen/src/Core/Map.h	/^    StrideType m_stride;$/;"	m	class:Eigen::Map
m_stride	include/Eigen/src/Core/Ref.h	/^  StrideBase m_stride;$/;"	m	class:Eigen::RefBase
m_stride	include/Eigen/src/Core/util/BlasUtil.h	/^    Index m_stride;$/;"	m	class:Eigen::internal::blas_data_mapper
m_stride	include/Eigen/src/Core/util/BlasUtil.h	/^    Index m_stride;$/;"	m	class:Eigen::internal::const_blas_data_mapper
m_structureIsUptodate	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    bool m_structureIsUptodate;$/;"	m	class:Eigen::PastixLU
m_subdiag	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typename TridiagonalizationType::SubDiagonalType m_subdiag;$/;"	m	class:Eigen::SelfAdjointEigenSolver
m_subs	include/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, Subs>   m_subs;$/;"	m	class:Eigen::internal::BandMatrix
m_subs	include/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, _Subs>   m_subs;$/;"	m	class:Eigen::internal::BandMatrixWrapper
m_sup_to_col	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* m_sup_to_col; \/\/sup_to_col[s] points to the starting column of the s-th supernode$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix
m_supers	include/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, Supers> m_supers;$/;"	m	class:Eigen::internal::BandMatrix
m_supers	include/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, _Supers> m_supers;$/;"	m	class:Eigen::internal::BandMatrixWrapper
m_supno	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index m_supno;                    \/\/ Current SuperNode number$/;"	m	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
m_symbolic	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    void* m_symbolic;$/;"	m	class:Eigen::UmfPackLU
m_symmetricmode	include/Eigen/src/SparseLU/SparseLU.h	/^    bool m_symmetricmode;$/;"	m	class:Eigen::SparseLU
m_temp	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    VectorType m_temp;$/;"	m	class:Eigen::HessenbergDecomposition
m_temp	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    RowVectorType m_temp;$/;"	m	class:Eigen::ColPivHouseholderQR
m_temp	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    RowVectorType m_temp;$/;"	m	class:Eigen::FullPivHouseholderQR
m_temp	include/Eigen/src/QR/HouseholderQR.h	/^    RowVectorType m_temp;$/;"	m	class:Eigen::HouseholderQR
m_temporary	include/Eigen/src/Cholesky/LDLT.h	/^    TmpMatrixType m_temporary;$/;"	m	class:Eigen::LDLT
m_then	include/Eigen/src/Core/Select.h	/^    typename ThenMatrixType::Nested m_then;$/;"	m	class:Eigen::Select
m_threshold	include/Eigen/src/SparseQR/SparseQR.h	/^    RealScalar m_threshold;         \/\/ Threshold to determine null Householder reflections$/;"	m	class:Eigen::SparseQR
m_tmp	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    ColumnVectorType m_tmp;$/;"	m	class:Eigen::EigenSolver
m_tmp	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    ColumnVectorType m_tmp;$/;"	m	class:Eigen::GeneralizedEigenSolver
m_tolerance	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  RealScalar m_tolerance;$/;"	m	class:Eigen::IterativeSolverBase
m_tolerance	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    RealScalar m_tolerance; \/\/ treat columns with 2-norm below this tolerance as zero$/;"	m	class:Eigen::SPQR
m_tolerance	include/Eigen/src/SparseCore/SparseProduct.h	/^    RealScalar m_tolerance;$/;"	m	class:Eigen::SparseSparseProduct
m_trans	include/Eigen/src/Householder/HouseholderSequence.h	/^    bool m_trans;$/;"	m	class:Eigen::HouseholderSequence
m_transpose	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  bool m_transpose; $/;"	m	struct:Eigen::SPQR_QProduct
m_transpose	include/Eigen/src/SparseQR/SparseQR.h	/^  bool m_transpose;$/;"	m	struct:Eigen::SparseQR_QProduct
m_transpositions	include/Eigen/src/Cholesky/LDLT.h	/^    TranspositionType m_transpositions;$/;"	m	class:Eigen::LDLT
m_transpositions	include/Eigen/src/Core/Transpositions.h	/^    const TranspositionType& m_transpositions;$/;"	m	class:Eigen::Transpose
m_transpositions	include/Eigen/src/Core/Transpositions.h	/^    const TranspositionType& m_transpositions;$/;"	m	struct:Eigen::internal::transposition_matrix_product_retval
m_triangularMatrix	include/Eigen/src/Core/SolveTriangular.h	/^    const TriangularType& m_triangularMatrix;$/;"	m	struct:Eigen::internal::triangular_solve_retval
m_type	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    Index m_type, m_msglvl;$/;"	m	class:Eigen::PardisoImpl
m_u	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    mutable LUMatrixType m_u;$/;"	m	class:Eigen::SuperLUBase
m_u	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    mutable LUMatrixType m_u;$/;"	m	class:Eigen::UmfPackLU
m_useDefaultThreshold	include/Eigen/src/SparseQR/SparseQR.h	/^    bool m_useDefaultThreshold;     \/\/ Use default threshold$/;"	m	class:Eigen::SparseQR
m_usePrescribedThreshold	include/Eigen/src/LU/FullPivLU.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:Eigen::FullPivLU
m_usePrescribedThreshold	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:Eigen::ColPivHouseholderQR
m_usePrescribedThreshold	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:Eigen::FullPivHouseholderQR
m_usePrescribedThreshold	include/Eigen/src/SVD/JacobiSVD.h	/^    bool m_isInitialized, m_isAllocated, m_usePrescribedThreshold;$/;"	m	class:Eigen::JacobiSVD
m_value	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    Scalar m_value;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_value	include/Eigen/src/SparseCore/SparseMatrix.h	/^        Index m_value;$/;"	m	class:Eigen::SparseMatrix::SingletonVector
m_value	include/Eigen/src/SparseCore/SparseUtil.h	/^  Scalar m_value;$/;"	m	class:Eigen::Triplet
m_valuePtr	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    const Scalar* m_valuePtr;$/;"	m	class:Eigen::UmfPackLU
m_values	include/Eigen/src/SparseCore/CompressedStorage.h	/^    Scalar* m_values;$/;"	m	class:Eigen::internal::CompressedStorage
m_values	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    Scalar* m_values;$/;"	m	class:Eigen::MappedSparseMatrix
m_values	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Scalar* m_values;$/;"	m	class:Eigen::SparseMatrix::InnerIterator
m_values	include/Eigen/src/SparseCore/SparseMatrix.h	/^    const Scalar* m_values;$/;"	m	class:Eigen::SparseMatrix::ReverseInnerIterator
m_vector	include/Eigen/src/SparseCore/AmbiVector.h	/^    const AmbiVector& m_vector; \/\/ the target vector$/;"	m	class:Eigen::internal::AmbiVector::Iterator
m_vectors	include/Eigen/src/Householder/HouseholderSequence.h	/^    typename VectorsType::Nested m_vectors;$/;"	m	class:Eigen::HouseholderSequence
m_view	include/Eigen/src/SparseCore/SparseView.h	/^  const SparseView& m_view;$/;"	m	class:Eigen::SparseView::InnerIterator
m_workMatrix	include/Eigen/src/SVD/JacobiSVD.h	/^    WorkMatrixType m_workMatrix;$/;"	m	class:Eigen::JacobiSVD
m_workspace	include/Eigen/src/Eigenvalues/RealQZ.h	/^      Matrix<Scalar,Dynamic,1> m_workspace;$/;"	m	class:Eigen::RealQZ
m_workspace	include/Eigen/src/SVD/JacobiSVD.h	/^  WorkspaceType m_workspace;$/;"	m	class:Eigen::internal::qr_preconditioner_impl
m_workspace	include/Eigen/src/SVD/JacobiSVD.h	/^  typename internal::plain_col_type<MatrixType>::type m_workspace;$/;"	m	class:Eigen::internal::qr_preconditioner_impl
m_workspace	include/Eigen/src/SVD/JacobiSVD.h	/^  typename internal::plain_row_type<MatrixType>::type m_workspace;$/;"	m	class:Eigen::internal::qr_preconditioner_impl
m_workspaceVector	include/Eigen/src/Eigenvalues/RealSchur.h	/^    ColumnVectorType m_workspaceVector;$/;"	m	class:Eigen::RealSchur
m_xpr	include/Eigen/src/Core/Block.h	/^    const typename XprType::Nested m_xpr;$/;"	m	class:Eigen::internal::BlockImpl_dense
m_xpr	include/Eigen/src/Core/Block.h	/^    typename XprType::Nested m_xpr;$/;"	m	class:Eigen::internal::BlockImpl_dense
m_xpr	include/Eigen/src/Core/CommaInitializer.h	/^  XprType& m_xpr;   \/\/ target expression$/;"	m	struct:Eigen::CommaInitializer
m_xpr	include/Eigen/src/Core/CwiseUnaryOp.h	/^    typename XprType::Nested m_xpr;$/;"	m	class:Eigen::CwiseUnaryOp
m_xpr	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    const CwiseBinaryXpr& m_xpr;$/;"	m	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
m_zero	include/Eigen/src/SparseCore/AmbiVector.h	/^    Scalar m_zero;$/;"	m	class:Eigen::internal::AmbiVector
machine_epsilon	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T machine_epsilon () { return NumTraits<T>::epsilon(); }$/;"	f	namespace:Eigen
madd	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, AccPacket& c, AccPacket& tmp) const$/;"	f	class:Eigen::internal::gebp_traits
madd	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, AccPacket& c, RhsPacket& tmp) const$/;"	f	class:Eigen::internal::gebp_traits
madd	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, DoublePacket& c, RhsPacket& \/*tmp*\/) const$/;"	f	class:Eigen::internal::gebp_traits
madd	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, ResPacket& c, RhsPacket& \/*tmp*\/) const$/;"	f	class:Eigen::internal::gebp_traits
madd_impl	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd_impl(const LhsPacket& a, const RhsPacket& b, AccPacket& c, RhsPacket& tmp, const true_type&) const$/;"	f	class:Eigen::internal::gebp_traits
madd_impl	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd_impl(const LhsScalar& a, const RhsScalar& b, ResScalar& c, RhsScalar& \/*tmp*\/, const false_type&) const$/;"	f	class:Eigen::internal::gebp_traits
main	centrality/main.cc	/^int main(int argv, char *argc[])$/;"	f
main	include/base/test_graph.cc	/^int main()$/;"	f
main	include/base/test_graph_reader.cc	/^int main()$/;"	f
main	include/eigen_test.cc	/^int main()$/;"	f
makeAffine	include/Eigen/src/Geometry/Transform.h	/^  void makeAffine()$/;"	f	class:Eigen::Transform
makeCompressed	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void makeCompressed()$/;"	f	class:Eigen::SparseMatrix
makeGivens	include/Eigen/src/Jacobi/Jacobi.h	/^void JacobiRotation<Scalar>::makeGivens(const Scalar& p, const Scalar& q, Scalar* r, internal::false_type)$/;"	f	class:Eigen::JacobiRotation
makeGivens	include/Eigen/src/Jacobi/Jacobi.h	/^void JacobiRotation<Scalar>::makeGivens(const Scalar& p, const Scalar& q, Scalar* r, internal::true_type)$/;"	f	class:Eigen::JacobiRotation
makeGivens	include/Eigen/src/Jacobi/Jacobi.h	/^void JacobiRotation<Scalar>::makeGivens(const Scalar& p, const Scalar& q, Scalar* z)$/;"	f	class:Eigen::JacobiRotation
makeHouseholder	include/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::makeHouseholder($/;"	f	class:Eigen::MatrixBase
makeHouseholderInPlace	include/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::makeHouseholderInPlace(Scalar& tau, RealScalar& beta)$/;"	f	class:Eigen::MatrixBase
makeJacobi	include/Eigen/src/Jacobi/Jacobi.h	/^bool JacobiRotation<Scalar>::makeJacobi(const RealScalar& x, const Scalar& y, const RealScalar& z)$/;"	f	class:Eigen::JacobiRotation
makeJacobi	include/Eigen/src/Jacobi/Jacobi.h	/^inline bool JacobiRotation<Scalar>::makeJacobi(const MatrixBase<Derived>& m, typename Derived::Index p, typename Derived::Index q)$/;"	f	class:Eigen::JacobiRotation
make_block_householder_triangular_factor	include/Eigen/src/Householder/BlockHouseholder.h	/^void make_block_householder_triangular_factor(TriangularFactorType& triFactor, const VectorsType& vectors, const CoeffsType& hCoeffs)$/;"	f	namespace:Eigen::internal
manageErrorCode	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    void manageErrorCode(Index error)$/;"	f	class:Eigen::PardisoImpl
manage_caching_sizes	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline void manage_caching_sizes(Action action, std::ptrdiff_t* l1=0, std::ptrdiff_t* l2=0)$/;"	f	namespace:Eigen::internal
manage_caching_sizes_helper	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline std::ptrdiff_t manage_caching_sizes_helper(std::ptrdiff_t a, std::ptrdiff_t b)$/;"	f	namespace:Eigen::internal
manage_multi_threading	include/Eigen/src/Core/products/Parallelizer.h	/^inline void manage_multi_threading(Action action, int* v)$/;"	f	namespace:Eigen::internal
map_superlu	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^MappedSparseMatrix<Scalar,Flags,Index> map_superlu(SluMatrix& sluMat)$/;"	f	namespace:Eigen::internal
mark	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index mark ;  \/* for computing set differences and marking dead rows*\/$/;"	m	union:internal::Colamd_Row::__anon406
markAsRValue	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    Derived& markAsRValue() { m_isRValue = true; return derived(); }$/;"	f	class:Eigen::SparseMatrixBase
marked	include/Eigen/src/Eigen2Support/Lazy.h	/^MatrixBase<Derived>::marked() const$/;"	f	class:Eigen::MatrixBase
matPrefix	include/Eigen/src/Core/IO.h	/^  std::string matPrefix, matSuffix;$/;"	m	struct:Eigen::IOFormat
matSuffix	include/Eigen/src/Core/IO.h	/^  std::string matPrefix, matSuffix;$/;"	m	struct:Eigen::IOFormat
match	include/Eigen/src/Core/Ref.h	/^  template<typename Derived> struct match {$/;"	s	struct:Eigen::internal::traits
matrix	include/Eigen/src/Core/ArrayBase.h	/^    MatrixWrapper<Derived> matrix() { return derived(); }$/;"	f	class:Eigen::ArrayBase
matrix	include/Eigen/src/Core/ArrayBase.h	/^    const MatrixWrapper<const Derived> matrix() const { return derived(); }$/;"	f	class:Eigen::ArrayBase
matrix	include/Eigen/src/Core/MatrixBase.h	/^    MatrixBase<Derived>& matrix() { return *this; }$/;"	f	class:Eigen::MatrixBase
matrix	include/Eigen/src/Core/MatrixBase.h	/^    const MatrixBase<Derived>& matrix() const { return *this; }$/;"	f	class:Eigen::MatrixBase
matrix	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline MatrixType& matrix() { return m_matrix; }$/;"	f	class:Eigen::Transform
matrix	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline const MatrixType& matrix() const { return m_matrix; }$/;"	f	class:Eigen::Transform
matrix	include/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType matrix() const { return derived().toRotationMatrix(); }$/;"	f	class:Eigen::RotationBase
matrix	include/Eigen/src/Geometry/Transform.h	/^  inline MatrixType& matrix() { return m_matrix; }$/;"	f	class:Eigen::Transform
matrix	include/Eigen/src/Geometry/Transform.h	/^  inline const MatrixType& matrix() const { return m_matrix; }$/;"	f	class:Eigen::Transform
matrix	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    _MatrixTypeNested& matrix() { return m_matrix.const_cast_derived(); }$/;"	f	class:Eigen::SparseSelfAdjointView
matrix	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    const _MatrixTypeNested& matrix() const { return m_matrix; }$/;"	f	class:Eigen::SparseSelfAdjointView
matrixH	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    MatrixHReturnType matrixH() const$/;"	f	class:Eigen::HessenbergDecomposition
matrixL	include/Eigen/src/Cholesky/LDLT.h	/^    inline typename Traits::MatrixL matrixL() const$/;"	f	class:Eigen::LDLT
matrixL	include/Eigen/src/Cholesky/LLT.h	/^    inline typename Traits::MatrixL matrixL() const$/;"	f	class:Eigen::LLT
matrixL	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline const MatrixL matrixL() const {$/;"	f	class:Eigen::SimplicialLDLT
matrixL	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline const MatrixL matrixL() const {$/;"	f	class:Eigen::SimplicialLLT
matrixL	include/Eigen/src/SparseLU/SparseLU.h	/^    SparseLUMatrixLReturnType<SCMatrix> matrixL() const$/;"	f	class:Eigen::SparseLU
matrixL	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline const LMatrixType& matrixL() const$/;"	f	class:Eigen::SuperLU
matrixL	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline const LUMatrixType& matrixL() const$/;"	f	class:Eigen::UmfPackLU
matrixLDLT	include/Eigen/src/Cholesky/LDLT.h	/^    inline const MatrixType& matrixLDLT() const$/;"	f	class:Eigen::LDLT
matrixLLT	include/Eigen/src/Cholesky/LLT.h	/^    inline const MatrixType& matrixLLT() const$/;"	f	class:Eigen::LLT
matrixLU	include/Eigen/src/LU/FullPivLU.h	/^    inline const MatrixType& matrixLU() const$/;"	f	class:Eigen::FullPivLU
matrixLU	include/Eigen/src/LU/PartialPivLU.h	/^    inline const MatrixType& matrixLU() const$/;"	f	class:Eigen::PartialPivLU
matrixQ	include/Eigen/src/Eigen2Support/QR.h	/^    MatrixType matrixQ(void) const {$/;"	f	class:Eigen::QR
matrixQ	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HouseholderSequenceType matrixQ() const$/;"	f	class:Eigen::HessenbergDecomposition
matrixQ	include/Eigen/src/Eigenvalues/RealQZ.h	/^      const MatrixType& matrixQ() const {$/;"	f	class:Eigen::RealQZ
matrixQ	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    HouseholderSequenceType matrixQ() const$/;"	f	class:Eigen::Tridiagonalization
matrixQ	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    HouseholderSequenceType matrixQ(void) const$/;"	f	class:Eigen::ColPivHouseholderQR
matrixQ	include/Eigen/src/QR/FullPivHouseholderQR.h	/^inline typename FullPivHouseholderQR<MatrixType>::MatrixQReturnType FullPivHouseholderQR<MatrixType>::matrixQ() const$/;"	f	class:Eigen::FullPivHouseholderQR
matrixQ	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    SPQRMatrixQReturnType<SPQR> matrixQ() const$/;"	f	class:Eigen::SPQR
matrixQ	include/Eigen/src/SparseQR/SparseQR.h	/^    SparseQRMatrixQReturnType<SparseQR> matrixQ() const $/;"	f	class:Eigen::SparseQR
matrixQR	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    const MatrixType& matrixQR() const$/;"	f	class:Eigen::ColPivHouseholderQR
matrixQR	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    const MatrixType& matrixQR() const$/;"	f	class:Eigen::FullPivHouseholderQR
matrixQR	include/Eigen/src/QR/HouseholderQR.h	/^    const MatrixType& matrixQR() const$/;"	f	class:Eigen::HouseholderQR
matrixR	include/Eigen/src/Eigen2Support/QR.h	/^    matrixR(void) const$/;"	f	class:Eigen::QR
matrixR	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    const MatrixType& matrixR() const$/;"	f	class:Eigen::ColPivHouseholderQR
matrixR	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    const MatrixType matrixR() const$/;"	f	class:Eigen::SPQR
matrixR	include/Eigen/src/SparseQR/SparseQR.h	/^    const QRMatrixType& matrixR() const { return m_R; }$/;"	f	class:Eigen::SparseQR
matrixS	include/Eigen/src/Eigenvalues/RealQZ.h	/^      const MatrixType& matrixS() const {$/;"	f	class:Eigen::RealQZ
matrixT	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    const ComplexMatrixType& matrixT() const$/;"	f	class:Eigen::ComplexSchur
matrixT	include/Eigen/src/Eigenvalues/RealQZ.h	/^      const MatrixType& matrixT() const {$/;"	f	class:Eigen::RealQZ
matrixT	include/Eigen/src/Eigenvalues/RealSchur.h	/^    const MatrixType& matrixT() const$/;"	f	class:Eigen::RealSchur
matrixT	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    MatrixTReturnType matrixT() const$/;"	f	class:Eigen::Tridiagonalization
matrixU	include/Eigen/src/Cholesky/LDLT.h	/^    inline typename Traits::MatrixU matrixU() const$/;"	f	class:Eigen::LDLT
matrixU	include/Eigen/src/Cholesky/LLT.h	/^    inline typename Traits::MatrixU matrixU() const$/;"	f	class:Eigen::LLT
matrixU	include/Eigen/src/Eigen2Support/SVD.h	/^    const MatrixUType& matrixU() const { return m_matU; }$/;"	f	class:Eigen::SVD
matrixU	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    const ComplexMatrixType& matrixU() const$/;"	f	class:Eigen::ComplexSchur
matrixU	include/Eigen/src/Eigenvalues/RealSchur.h	/^    const MatrixType& matrixU() const$/;"	f	class:Eigen::RealSchur
matrixU	include/Eigen/src/SVD/JacobiSVD.h	/^    const MatrixUType& matrixU() const$/;"	f	class:Eigen::JacobiSVD
matrixU	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline const MatrixU matrixU() const {$/;"	f	class:Eigen::SimplicialLDLT
matrixU	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline const MatrixU matrixU() const {$/;"	f	class:Eigen::SimplicialLLT
matrixU	include/Eigen/src/SparseLU/SparseLU.h	/^    SparseLUMatrixUReturnType<SCMatrix,MappedSparseMatrix<Scalar,ColMajor,Index> > matrixU() const$/;"	f	class:Eigen::SparseLU
matrixU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline const UMatrixType& matrixU() const$/;"	f	class:Eigen::SuperLU
matrixU	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline const LUMatrixType& matrixU() const$/;"	f	class:Eigen::UmfPackLU
matrixV	include/Eigen/src/Eigen2Support/SVD.h	/^    const MatrixVType& matrixV() const { return m_matV; }$/;"	f	class:Eigen::SVD
matrixV	include/Eigen/src/SVD/JacobiSVD.h	/^    const MatrixVType& matrixV() const$/;"	f	class:Eigen::JacobiSVD
matrixZ	include/Eigen/src/Eigenvalues/RealQZ.h	/^      const MatrixType& matrixZ() const {$/;"	f	class:Eigen::RealQZ
matrix_swap_impl	include/Eigen/src/Core/PlainObjectBase.h	/^struct matrix_swap_impl$/;"	s	namespace:Eigen::internal
matrix_swap_impl	include/Eigen/src/Core/PlainObjectBase.h	/^struct matrix_swap_impl<MatrixTypeA, MatrixTypeB, true>$/;"	s	namespace:Eigen::internal
matrix_type_times_scalar_type	include/Eigen/src/Householder/HouseholderSequence.h	/^template<typename OtherScalarType, typename MatrixType> struct matrix_type_times_scalar_type$/;"	s	namespace:Eigen::internal
max	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline VectorType& (max)() { return m_max; }$/;"	f	class:Eigen::AlignedBox
max	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline const VectorType& (max)() const { return m_max; }$/;"	f	class:Eigen::AlignedBox
max	include/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType& (max)() { return m_max; }$/;"	f	class:Eigen::AlignedBox
max	include/Eigen/src/Geometry/AlignedBox.h	/^  inline const VectorType& (max)() const { return m_max; }$/;"	f	class:Eigen::AlignedBox
max	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^max$/;"	f
maxCoeff	include/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::maxCoeff() const$/;"	f	class:Eigen::DenseBase
maxCoeff	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_maxCoeff>::Type maxCoeff() const$/;"	f	class:Eigen::VectorwiseOp
maxCoeff	include/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::maxCoeff(IndexType* index) const$/;"	f	class:Eigen::DenseBase
maxCoeff	include/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::maxCoeff(IndexType* rowPtr, IndexType* colPtr) const$/;"	f	class:Eigen::DenseBase
maxIterations	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  int maxIterations() const$/;"	f	class:Eigen::IterativeSolverBase
maxPivot	include/Eigen/src/LU/FullPivLU.h	/^    RealScalar maxPivot() const { return m_maxpivot; }$/;"	f	class:Eigen::FullPivLU
maxPivot	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar maxPivot() const { return m_maxpivot; }$/;"	f	class:Eigen::ColPivHouseholderQR
maxPivot	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar maxPivot() const { return m_maxpivot; }$/;"	f	class:Eigen::FullPivHouseholderQR
max_coeff_visitor	include/Eigen/src/Core/Visitor.h	/^struct max_coeff_visitor : coeff_visitor<Derived>$/;"	s	namespace:Eigen::internal
max_size	include/Eigen/src/Core/util/Memory.h	/^    size_type max_size() const$/;"	f	class:Eigen::aligned_allocator
maxsuper	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index maxsuper; \/\/ The maximum size for a supernode in complete LU$/;"	m	struct:Eigen::internal::perfvalues
mc	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline DenseIndex mc() const { return m_mc; }$/;"	f	class:Eigen::internal::level3_blocking
mean	include/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::mean() const$/;"	f	class:Eigen::DenseBase
mean	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_mean>::Type mean() const$/;"	f	class:Eigen::VectorwiseOp
memInit	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^Index SparseLUImpl<Scalar,Index>::memInit(Index m, Index n, Index annz, Index lwork, Index fillratio, Index panel_size,  GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
memXpand	include/Eigen/src/SparseLU/SparseLU_Memory.h	/^Index SparseLUImpl<Scalar,Index>::memXpand(VectorType& vec, Index& maxlen, Index nbElts, MemType memtype, Index& num_expansions)$/;"	f	class:Eigen::internal::SparseLUImpl
mem_expand	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  void mem_expand(IndexVector& lsub, Index& nextl, Index chmark)$/;"	f	struct:Eigen::internal::column_dfs_traits
mem_expand	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^  void mem_expand(IndexVector& \/*glu.lsub*\/, Index \/*nextl*\/, Index \/*chmark*\/) {}$/;"	f	struct:Eigen::internal::panel_dfs_traits
member_redux	include/Eigen/src/Core/VectorwiseOp.h	/^  member_redux(const BinaryOp func) : m_functor(func) {}$/;"	f	struct:Eigen::internal::member_redux
member_redux	include/Eigen/src/Core/VectorwiseOp.h	/^struct member_redux {$/;"	s	namespace:Eigen::internal
merged	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox merged(const AlignedBox& b) const$/;"	f	class:Eigen::AlignedBox
meta_sqrt	include/Eigen/src/Core/util/Meta.h	/^class meta_sqrt<Y, InfX, SupX, true> { public:  enum { ret = (SupX*SupX <= Y) ? SupX : InfX }; };$/;"	c	namespace:Eigen
middle	include/Eigen/src/Core/MathFunctions.h	/^  enum { middle = (lower + upper) \/ 2,$/;"	e	enum:Eigen::internal::floor_log2_selector::__anon180
middleCols	include/Eigen/src/plugins/BlockMethods.h	/^inline ColsBlockXpr middleCols(Index startCol, Index numCols)$/;"	f
middleCols	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstColsBlockXpr middleCols(Index startCol, Index numCols) const$/;"	f
middleCols	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNColsBlockXpr<N>::Type middleCols(Index startCol, Index n = N) const$/;"	f
middleCols	include/Eigen/src/plugins/BlockMethods.h	/^inline typename NColsBlockXpr<N>::Type middleCols(Index startCol, Index n = N)$/;"	f
middleRows	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowsBlockXpr middleRows(Index startRow, Index n) const$/;"	f
middleRows	include/Eigen/src/plugins/BlockMethods.h	/^inline RowsBlockXpr middleRows(Index startRow, Index n)$/;"	f
middleRows	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNRowsBlockXpr<N>::Type middleRows(Index startRow, Index n = N) const$/;"	f
middleRows	include/Eigen/src/plugins/BlockMethods.h	/^inline typename NRowsBlockXpr<N>::Type middleRows(Index startRow, Index n = N)$/;"	f
min	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline VectorType& (min)() { return m_min; }$/;"	f	class:Eigen::AlignedBox
min	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline const VectorType& (min)() const { return m_min; }$/;"	f	class:Eigen::AlignedBox
min	include/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType& (min)() { return m_min; }$/;"	f	class:Eigen::AlignedBox
min	include/Eigen/src/Geometry/AlignedBox.h	/^  inline const VectorType& (min)() const { return m_min; }$/;"	f	class:Eigen::AlignedBox
min	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^min$/;"	f
minCoeff	include/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::minCoeff() const$/;"	f	class:Eigen::DenseBase
minCoeff	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_minCoeff>::Type minCoeff() const$/;"	f	class:Eigen::VectorwiseOp
minCoeff	include/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::minCoeff(IndexType* index) const$/;"	f	class:Eigen::DenseBase
minCoeff	include/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::minCoeff(IndexType* rowId, IndexType* colId) const$/;"	f	class:Eigen::DenseBase
min_coeff_visitor	include/Eigen/src/Core/Visitor.h	/^struct min_coeff_visitor : coeff_visitor<Derived>$/;"	s	namespace:Eigen::internal
minimum_degree_ordering	include/Eigen/src/OrderingMethods/Amd.h	/^void minimum_degree_ordering(SparseMatrix<Scalar,ColMajor,Index>& C, PermutationMatrix<Dynamic,Dynamic,Index>& perm)$/;"	f	namespace:Eigen::internal
minor	include/Eigen/src/Eigen2Support/Minor.h	/^MatrixBase<Derived>::minor(Index row, Index col) const$/;"	f	class:Eigen::MatrixBase
minor	include/Eigen/src/Eigen2Support/Minor.h	/^MatrixBase<Derived>::minor(Index row, Index col)$/;"	f	class:Eigen::MatrixBase
mp_matrix	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  const MatrixType* mp_matrix;$/;"	m	class:Eigen::IterativeSolverBase
mr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    mr = 2 * LhsPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
mr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    mr = 2 * LhsPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
mr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    mr = 2 * ResPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
mr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    mr = 2*ResPacketSize,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
msd	centrality/betweeness.h	/^namespace msd {$/;"	n
msd	centrality/degree.h	/^namespace msd {$/;"	n
msd	centrality/eigen.h	/^namespace msd {$/;"	n
msd	include/base/graph.h	/^namespace msd {$/;"	n
msd	include/base/reader.h	/^namespace msd {$/;"	n
msd	include/base/reader_graph.h	/^namespace msd {$/;"	n
n	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index   n; \/\/ Number of columns in the matrix  $/;"	m	struct:Eigen::internal::LU_GlobalLU_t
nbThreads	include/Eigen/src/Core/products/Parallelizer.h	/^inline int nbThreads()$/;"	f	namespace:Eigen
nc	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline DenseIndex nc() const { return m_nc; }$/;"	f	class:Eigen::internal::level3_blocking
nestByValue	include/Eigen/src/Core/NestByValue.h	/^DenseBase<Derived>::nestByValue() const$/;"	f	class:Eigen::DenseBase
nested	include/Eigen/src/Core/ProductBase.h	/^struct nested<GeneralProduct<Lhs,Rhs,Mode>, N, PlainObject>$/;"	s	namespace:internal
nested	include/Eigen/src/Core/ProductBase.h	/^struct nested<const GeneralProduct<Lhs,Rhs,Mode>, N, PlainObject>$/;"	s	namespace:internal
nested	include/Eigen/src/Core/ReturnByValue.h	/^struct nested<ReturnByValue<Derived>, n, PlainObject>$/;"	s	namespace:Eigen::internal
nested	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct nested<CoeffBasedProduct<Lhs,Rhs,EvalBeforeNestingBit|EvalBeforeAssigningBit>, N, PlainObject>$/;"	s	namespace:Eigen::internal
nestedExpression	include/Eigen/src/Core/ArrayWrapper.h	/^    nestedExpression() const $/;"	f	class:Eigen::ArrayWrapper
nestedExpression	include/Eigen/src/Core/ArrayWrapper.h	/^    nestedExpression() const $/;"	f	class:Eigen::MatrixWrapper
nestedExpression	include/Eigen/src/Core/Block.h	/^    const typename internal::remove_all<typename XprType::Nested>::type& nestedExpression() const $/;"	f	class:Eigen::internal::BlockImpl_dense
nestedExpression	include/Eigen/src/Core/CwiseUnaryOp.h	/^    nestedExpression() const { return m_xpr; }$/;"	f	class:Eigen::CwiseUnaryOp
nestedExpression	include/Eigen/src/Core/CwiseUnaryOp.h	/^    nestedExpression() { return m_xpr.const_cast_derived(); }$/;"	f	class:Eigen::CwiseUnaryOp
nestedExpression	include/Eigen/src/Core/CwiseUnaryView.h	/^    nestedExpression() const { return m_matrix; }$/;"	f	class:Eigen::CwiseUnaryView
nestedExpression	include/Eigen/src/Core/CwiseUnaryView.h	/^    nestedExpression() { return m_matrix.const_cast_derived(); }$/;"	f	class:Eigen::CwiseUnaryView
nestedExpression	include/Eigen/src/Core/Diagonal.h	/^    nestedExpression() const $/;"	f	class:Eigen::Diagonal
nestedExpression	include/Eigen/src/Core/Replicate.h	/^    const _MatrixTypeNested& nestedExpression() const$/;"	f	class:Eigen::Replicate
nestedExpression	include/Eigen/src/Core/Reverse.h	/^    nestedExpression() const $/;"	f	class:Eigen::Reverse
nestedExpression	include/Eigen/src/Core/SelfAdjointView.h	/^    MatrixTypeNestedCleaned& nestedExpression() { return *const_cast<MatrixTypeNestedCleaned*>(&m_matrix); }$/;"	f	class:Eigen::SelfAdjointView
nestedExpression	include/Eigen/src/Core/SelfAdjointView.h	/^    const MatrixTypeNestedCleaned& nestedExpression() const { return m_matrix; }$/;"	f	class:Eigen::SelfAdjointView
nestedExpression	include/Eigen/src/Core/Transpose.h	/^    nestedExpression() const { return m_matrix; }$/;"	f	class:Eigen::Transpose
nestedExpression	include/Eigen/src/Core/Transpose.h	/^    nestedExpression() { return m_matrix.const_cast_derived(); }$/;"	f	class:Eigen::Transpose
nestedExpression	include/Eigen/src/Core/TriangularMatrix.h	/^    MatrixTypeNestedCleaned& nestedExpression() { return *const_cast<MatrixTypeNestedCleaned*>(&m_matrix); }$/;"	f	class:Eigen::TriangularView
nestedExpression	include/Eigen/src/Core/TriangularMatrix.h	/^    const MatrixTypeNestedCleaned& nestedExpression() const { return m_matrix; }$/;"	f	class:Eigen::TriangularView
nestedExpression	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline const _MatrixTypeNested& nestedExpression() const { return m_matrix; }$/;"	f	class:Eigen::BlockImpl
nestedExpression	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline const MatrixTypeNestedCleaned& nestedExpression() const { return m_matrix; }$/;"	f	class:Eigen::SparseTriangularView
nestedPermutation	include/Eigen/src/Core/PermutationMatrix.h	/^    const PermutationType& nestedPermutation() const { return m_permutation; }$/;"	f	class:Eigen::Transpose
next	include/Eigen/src/SparseCore/AmbiVector.h	/^      Index next;$/;"	m	struct:Eigen::internal::AmbiVector::ListEl
nnz	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    union {int nnz;int lda;};$/;"	m	union:Eigen::SluMatrix::__anon457::__anon458
no_assignment_operator	include/Eigen/src/Core/util/XprHelper.h	/^class no_assignment_operator$/;"	c	namespace:Eigen::internal
noalias	include/Eigen/src/Core/NoAlias.h	/^NoAlias<Derived,MatrixBase> MatrixBase<Derived>::noalias()$/;"	f	class:Eigen::MatrixBase
nonZeros	include/Eigen/src/Core/DenseBase.h	/^    inline Index nonZeros() const { return size(); }$/;"	f	class:Eigen::DenseBase
nonZeros	include/Eigen/src/SparseCore/AmbiVector.h	/^_Index AmbiVector<_Scalar,_Index>::nonZeros() const$/;"	f	class:Eigen::internal::AmbiVector
nonZeros	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index nonZeros() const  { return m_nnz; }$/;"	f	class:Eigen::MappedSparseMatrix
nonZeros	include/Eigen/src/SparseCore/SparseBlock.h	/^    Index nonZeros() const$/;"	f	class:Eigen::BlockImpl
nonZeros	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index nonZeros() const$/;"	f	class:Eigen::SparseMatrix
nonZeros	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Index nonZeros() const { return derived().nonZeros(); }$/;"	f	class:Eigen::SparseMatrixBase
nonZeros	include/Eigen/src/SparseCore/SparseTranspose.h	/^    inline Index nonZeros() const { return derived().nestedExpression().nonZeros(); }$/;"	f	class:Eigen::TransposeImpl
nonZeros	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Index nonZeros() const  { return static_cast<Index>(m_data.size()); }$/;"	f	class:Eigen::SparseVector
noncopyable	include/Eigen/src/Core/util/Meta.h	/^  noncopyable() {}$/;"	f	class:Eigen::internal::noncopyable
noncopyable	include/Eigen/src/Core/util/Meta.h	/^class noncopyable$/;"	c	namespace:Eigen::internal
nonzeroPivots	include/Eigen/src/LU/FullPivLU.h	/^    inline Index nonzeroPivots() const$/;"	f	class:Eigen::FullPivLU
nonzeroPivots	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index nonzeroPivots() const$/;"	f	class:Eigen::ColPivHouseholderQR
nonzeroPivots	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index nonzeroPivots() const$/;"	f	class:Eigen::FullPivHouseholderQR
nonzeroSingularValues	include/Eigen/src/SVD/JacobiSVD.h	/^    Index nonzeroSingularValues() const$/;"	f	class:Eigen::JacobiSVD
norm	include/Eigen/src/Core/Dot.h	/^inline typename NumTraits<typename internal::traits<Derived>::Scalar>::Real MatrixBase<Derived>::norm() const$/;"	f	class:Eigen::MatrixBase
norm	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_norm,RealScalar>::Type norm() const$/;"	f	class:Eigen::VectorwiseOp
norm	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar norm() const { return m_coeffs.norm(); }$/;"	f	class:Eigen::Quaternion
norm	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar norm() const { return coeffs().norm(); }$/;"	f	class:Eigen::QuaternionBase
norm	include/Eigen/src/SparseCore/SparseDot.h	/^SparseMatrixBase<Derived>::norm() const$/;"	f	class:Eigen::SparseMatrixBase
norm1	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(norm1, Scalar) norm1(const Scalar& x)$/;"	f	namespace:Eigen::numext
norm1_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct norm1_default_impl$/;"	s	namespace:Eigen::internal
norm1_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct norm1_default_impl<Scalar, false>$/;"	s	namespace:Eigen::internal
norm1_impl	include/Eigen/src/Core/MathFunctions.h	/^struct norm1_impl : norm1_default_impl<Scalar, NumTraits<Scalar>::IsComplex> {};$/;"	s	namespace:Eigen::internal
norm1_retval	include/Eigen/src/Core/MathFunctions.h	/^struct norm1_retval$/;"	s	namespace:Eigen::internal
normal	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline NormalReturnType normal() { return NormalReturnType(m_coeffs,0,0,dim(),1); }$/;"	f	class:Eigen::Hyperplane
normal	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline const NormalReturnType normal() const { return NormalReturnType(*const_cast<Coefficients*>(&m_coeffs),0,0,dim(),1); }$/;"	f	class:Eigen::Hyperplane
normal	include/Eigen/src/Geometry/Hyperplane.h	/^  inline ConstNormalReturnType normal() const { return ConstNormalReturnType(m_coeffs,0,0,dim(),1); }$/;"	f	class:Eigen::Hyperplane
normal	include/Eigen/src/Geometry/Hyperplane.h	/^  inline NormalReturnType normal() { return NormalReturnType(m_coeffs,0,0,dim(),1); }$/;"	f	class:Eigen::Hyperplane
normalize	include/Eigen/src/Core/Dot.h	/^inline void MatrixBase<Derived>::normalize()$/;"	f	class:Eigen::MatrixBase
normalize	include/Eigen/src/Core/VectorwiseOp.h	/^    void normalize() {$/;"	f	class:Eigen::VectorwiseOp
normalize	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  void normalize(void)$/;"	f	class:Eigen::Hyperplane
normalize	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline void normalize() { m_coeffs.normalize(); }$/;"	f	class:Eigen::Quaternion
normalize	include/Eigen/src/Geometry/Hyperplane.h	/^  void normalize(void)$/;"	f	class:Eigen::Hyperplane
normalize	include/Eigen/src/Geometry/Quaternion.h	/^  inline void normalize() { coeffs().normalize(); }$/;"	f	class:Eigen::QuaternionBase
normalized	include/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::normalized() const$/;"	f	class:Eigen::MatrixBase
normalized	include/Eigen/src/Core/VectorwiseOp.h	/^    normalized() const { return m_matrix.cwiseQuotient(extendedToOpposite(this->norm())); }$/;"	f	class:Eigen::VectorwiseOp
normalized	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion normalized() const { return Quaternion(m_coeffs.normalized()); }$/;"	f	class:Eigen::Quaternion
normalized	include/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion<Scalar> normalized() const { return Quaternion<Scalar>(coeffs().normalized()); }$/;"	f	class:Eigen::QuaternionBase
nr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    nr = 2,$/;"	e	enum:Eigen::internal::gebp_traits::__anon203
nr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    nr = 4,$/;"	e	enum:Eigen::internal::gebp_traits::__anon204
nr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    nr = NumberOfRegisters\/4,$/;"	e	enum:Eigen::internal::gebp_traits::__anon201
nr	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    nr = NumberOfRegisters\/4,$/;"	e	enum:Eigen::internal::gebp_traits::__anon202
nr_etdfs	include/Eigen/src/SparseCore/SparseColEtree.h	/^void nr_etdfs (Index n, IndexVector& parent, IndexVector& first_kid, IndexVector& next_kid, IndexVector& post, Index postnum)$/;"	f	namespace:Eigen::internal
nsuper	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index nsuper() const $/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
num_expansions	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index   num_expansions; $/;"	m	struct:Eigen::internal::LU_GlobalLU_t
numext	include/Eigen/src/Core/MathFunctions.h	/^namespace numext {$/;"	n	namespace:Eigen
nzlmax	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index   nzlmax; \/\/ Current max size of lsub$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
nzlumax	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index   nzlumax; \/\/ Current max size of lusup$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
nzumax	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index   nzumax; \/\/ Current max size of ucol$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
offset	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Scalar& offset() { return m_coeffs(dim()); }$/;"	f	class:Eigen::Hyperplane
offset	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline const Scalar& offset() const { return m_coeffs.coeff(dim()); }$/;"	f	class:Eigen::Hyperplane
offset	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Scalar& offset() { return m_coeffs(dim()); }$/;"	f	class:Eigen::Hyperplane
offset	include/Eigen/src/Geometry/Hyperplane.h	/^  inline const Scalar& offset() const { return m_coeffs.coeff(dim()); }$/;"	f	class:Eigen::Hyperplane
open	include/base/reader_graph.h	/^			void GraphReader<T>::open(const char* file_name) $/;"	f	class:msd::base::GraphReader
open	include/base/reader_graph.h	/^			void GraphReader<T>::open(const std::string& file_name) $/;"	f	class:msd::base::GraphReader
operator !=	include/Eigen/src/Core/MatrixBase.h	/^    inline bool operator!=(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::MatrixBase
operator !=	include/Eigen/src/Core/util/Memory.h	/^    bool operator!=(const aligned_allocator<T>& ) const$/;"	f	class:Eigen::aligned_allocator
operator !=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator!=(Scalar s) const$/;"	f	class:Eigen::Cwise
operator !=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator!=(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator &&	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator&&(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
operator ()	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE CoeffReturnType operator()(Index row, Index col) const$/;"	f	class:Eigen::DenseCoeffsBase
operator ()	include/Eigen/src/Core/DenseCoeffsBase.h	/^    operator()(Index index) const$/;"	f	class:Eigen::DenseCoeffsBase
operator ()	include/Eigen/src/Core/DenseCoeffsBase.h	/^    operator()(Index index)$/;"	f	class:Eigen::DenseCoeffsBase
operator ()	include/Eigen/src/Core/DenseCoeffsBase.h	/^    operator()(Index row, Index col)$/;"	f	class:Eigen::DenseCoeffsBase
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE Scalar operator() (const Scalar& a) const { return a * m_other; }$/;"	f	struct:Eigen::internal::scalar_multiple_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE Scalar operator() (const Scalar& a) const { return a \/ m_other; }$/;"	f	struct:Eigen::internal::scalar_quotient1_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b) const { return a && b; }$/;"	f	struct:Eigen::internal::scalar_boolean_and_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b) const { return a || b; }$/;"	f	struct:Eigen::internal::scalar_boolean_or_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const NewType operator() (const Scalar& a) const { return cast<Scalar, NewType>(a); }$/;"	f	struct:Eigen::internal::scalar_cast_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index i) const $/;"	f	struct:Eigen::internal::linspaced_op_impl
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index i) const { return impl(i); }$/;"	f	struct:Eigen::internal::linspaced_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index i) const { return m_low+i*m_step; }$/;"	f	struct:Eigen::internal::linspaced_op_impl
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index row, Index col) const $/;"	f	struct:Eigen::internal::linspaced_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index row, Index col) const { return row==col ? Scalar(1) : Scalar(0); }$/;"	f	struct:Eigen::internal::scalar_identity_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index, Index = 0) const { return m_other; }$/;"	f	struct:Eigen::internal::scalar_constant_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& _x, const Scalar& _y) const$/;"	f	struct:Eigen::internal::scalar_hypot_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a) const { return -a; }$/;"	f	struct:Eigen::internal::scalar_opposite_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a) const { using numext::conj; return conj(a); }$/;"	f	struct:Eigen::internal::scalar_conjugate_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { return a + b; }$/;"	f	struct:Eigen::internal::scalar_sum_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { return a - b; }$/;"	f	struct:Eigen::internal::scalar_difference_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { using std::max; return (max)(a, b); }$/;"	f	struct:Eigen::internal::scalar_max_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { using std::min; return (min)(a, b); }$/;"	f	struct:Eigen::internal::scalar_min_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }$/;"	f	struct:Eigen::internal::scalar_product_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a \/ b; }$/;"	f	struct:Eigen::internal::scalar_quotient_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const$/;"	f	struct:Eigen::internal::scalar_conj_product_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const Scalar& a) const { return numext::abs2(a); }$/;"	f	struct:Eigen::internal::scalar_abs2_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const Scalar& a) const { using std::abs; return abs(a); }$/;"	f	struct:Eigen::internal::scalar_abs_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type operator() (const Scalar& a) const { return numext::imag(a); }$/;"	f	struct:Eigen::internal::scalar_imag_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type operator() (const Scalar& a) const { return numext::real(a); }$/;"	f	struct:Eigen::internal::scalar_real_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type operator() (const Scalar1& a) const { return a * m_other; }$/;"	f	struct:Eigen::internal::scalar_multiple2_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type& operator() (const Scalar& a) const { return numext::imag_ref(*const_cast<Scalar*>(&a)); }$/;"	f	struct:Eigen::internal::scalar_imag_ref_op
operator ()	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type& operator() (const Scalar& a) const { return numext::real_ref(*const_cast<Scalar*>(&a)); }$/;"	f	struct:Eigen::internal::scalar_real_ref_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return Scalar(1)\/a; }$/;"	f	struct:Eigen::internal::scalar_inverse_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return a + m_other; }$/;"	f	struct:Eigen::internal::scalar_add_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return a*a*a; }$/;"	f	struct:Eigen::internal::scalar_cube_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return a*a; }$/;"	f	struct:Eigen::internal::scalar_square_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return m_other \/ a; }$/;"	f	struct:Eigen::internal::scalar_inverse_mult_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return numext::pow(a, m_exponent); }$/;"	f	struct:Eigen::internal::scalar_pow_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { using std::cos; return cos(a); }$/;"	f	struct:Eigen::internal::scalar_cos_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a, const OtherScalar& b) const { return numext::pow(a, b); }$/;"	f	struct:Eigen::internal::scalar_binary_pow_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { using std::acos; return acos(a); }$/;"	f	struct:Eigen::internal::scalar_acos_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { using std::asin; return asin(a); }$/;"	f	struct:Eigen::internal::scalar_asin_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { using std::exp; return exp(a); }$/;"	f	struct:Eigen::internal::scalar_exp_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { using std::log; return log(a); }$/;"	f	struct:Eigen::internal::scalar_log_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { using std::sin; return sin(a); }$/;"	f	struct:Eigen::internal::scalar_sin_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { using std::sqrt; return sqrt(a); }$/;"	f	struct:Eigen::internal::scalar_sqrt_op
operator ()	include/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { using std::tan; return tan(a); }$/;"	f	struct:Eigen::internal::scalar_tan_op
operator ()	include/Eigen/src/Core/GeneralProduct.h	/^      template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const {$/;"	f	struct:Eigen::GeneralProduct::adds
operator ()	include/Eigen/src/Core/GeneralProduct.h	/^    struct add  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const { dst.const_cast_derived() += src; } };$/;"	f	struct:Eigen::GeneralProduct::add
operator ()	include/Eigen/src/Core/GeneralProduct.h	/^    struct set  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const { dst.const_cast_derived()  = src; } };$/;"	f	struct:Eigen::GeneralProduct::set
operator ()	include/Eigen/src/Core/GeneralProduct.h	/^    struct sub  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const { dst.const_cast_derived() -= src; } };$/;"	f	struct:Eigen::GeneralProduct::sub
operator ()	include/Eigen/src/Core/Random.h	/^  inline const Scalar operator() (Index, Index = 0) const { return random<Scalar>(); }$/;"	f	struct:Eigen::internal::scalar_random_op
operator ()	include/Eigen/src/Core/Reverse.h	/^    inline Scalar& operator()(Index index)$/;"	f	class:Eigen::Reverse
operator ()	include/Eigen/src/Core/Reverse.h	/^    inline Scalar& operator()(Index row, Index col)$/;"	f	class:Eigen::Reverse
operator ()	include/Eigen/src/Core/Transpositions.h	/^    inline Index& operator()(Index i) { return indices()(i); }$/;"	f	class:Eigen::TranspositionsBase
operator ()	include/Eigen/src/Core/Transpositions.h	/^    inline const Index& operator()(Index i) const { return indices()(i); }$/;"	f	class:Eigen::TranspositionsBase
operator ()	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar operator()(Index row, Index col) const$/;"	f	class:Eigen::TriangularBase
operator ()	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar& operator()(Index row, Index col)$/;"	f	class:Eigen::TriangularBase
operator ()	include/Eigen/src/Core/VectorwiseOp.h	/^  inline result_type operator()(const DenseBase<Derived>& mat) const$/;"	f	struct:Eigen::internal::member_redux
operator ()	include/Eigen/src/Core/Visitor.h	/^  void operator() (const Scalar& value, Index i, Index j)$/;"	f	struct:Eigen::internal::max_coeff_visitor
operator ()	include/Eigen/src/Core/Visitor.h	/^  void operator() (const Scalar& value, Index i, Index j)$/;"	f	struct:Eigen::internal::min_coeff_visitor
operator ()	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  ::operator()(ResScalar* res, Index resStride, const LhsScalar* blockA, const RhsScalar* blockB, Index rows, Index depth, Index cols, ResScalar alpha,$/;"	f	class:Eigen::internal::gebp_kernel
operator ()	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  ::operator()(Scalar* blockA, const Scalar* EIGEN_RESTRICT _lhs, Index lhsStride, Index depth, Index rows, Index stride, Index offset)$/;"	f	class:Eigen::internal::gemm_pack_lhs
operator ()	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  ::operator()(Scalar* blockB, const Scalar* rhs, Index rhsStride, Index depth, Index cols, Index stride, Index offset)$/;"	f	class:Eigen::internal::gemm_pack_rhs
operator ()	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  void operator() (Index row, Index rows, Index col=0, Index cols=-1, GemmParallelInfo<Index>* info=0) const$/;"	f	struct:Eigen::internal::gemm_functor
operator ()	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  void operator()(ResScalar* res, Index resStride, const LhsScalar* blockA, const RhsScalar* blockB, Index size, Index depth, const ResScalar& alpha, RhsScalar* workspace)$/;"	f	struct:Eigen::internal::tribb_kernel
operator ()	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  void operator()(Scalar* blockA, const Scalar* _lhs, Index lhsStride, Index cols, Index rows)$/;"	f	struct:Eigen::internal::symm_pack_lhs
operator ()	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  void operator()(Scalar* blockB, const Scalar* _rhs, Index rhsStride, Index rows, Index cols, Index k2)$/;"	f	struct:Eigen::internal::symm_pack_rhs
operator ()	include/Eigen/src/Core/util/BlasUtil.h	/^    EIGEN_STRONG_INLINE Scalar& operator()(Index i, Index j)$/;"	f	class:Eigen::internal::blas_data_mapper
operator ()	include/Eigen/src/Core/util/BlasUtil.h	/^    EIGEN_STRONG_INLINE const Scalar& operator()(Index i, Index j) const$/;"	f	class:Eigen::internal::const_blas_data_mapper
operator ()	include/Eigen/src/Core/util/BlasUtil.h	/^  inline T operator()(const T& x) { return numext::conj(x); }$/;"	f	struct:Eigen::internal::conj_if
operator ()	include/Eigen/src/Core/util/BlasUtil.h	/^  inline const T& operator()(const T& x) { return x; }$/;"	f	struct:Eigen::internal::conj_if
operator ()	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Scalar operator() (int row, int col) const { return m_matrix(row,col); }$/;"	f	class:Eigen::Transform
operator ()	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Scalar& operator() (int row, int col) { return m_matrix(row,col); }$/;"	f	class:Eigen::Transform
operator ()	include/Eigen/src/Geometry/Transform.h	/^  inline Scalar operator() (Index row, Index col) const { return m_matrix(row,col); }$/;"	f	class:Eigen::Transform
operator ()	include/Eigen/src/Geometry/Transform.h	/^  inline Scalar& operator() (Index row, Index col) { return m_matrix(row,col); }$/;"	f	class:Eigen::Transform
operator ()	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^      inline bool operator() (const Index& row, const Index& col, const Scalar&) const$/;"	f	struct:Eigen::IncompleteLUT::keep_diag
operator ()	include/Eigen/src/MetisSupport/MetisSupport.h	/^  void operator() (const MatrixType& A, PermutationType& matperm)$/;"	f	class:Eigen::MetisOrdering
operator ()	include/Eigen/src/OrderingMethods/Ordering.h	/^    void operator() (const MatrixType& mat, PermutationType& perm)$/;"	f	class:Eigen::COLAMDOrdering
operator ()	include/Eigen/src/OrderingMethods/Ordering.h	/^    void operator()(const MatrixType& \/*mat*\/, PermutationType& perm)$/;"	f	class:Eigen::NaturalOrdering
operator ()	include/Eigen/src/OrderingMethods/Ordering.h	/^    void operator()(const MatrixType& mat, PermutationType& perm)$/;"	f	class:Eigen::AMDOrdering
operator ()	include/Eigen/src/OrderingMethods/Ordering.h	/^    void operator()(const SparseSelfAdjointView<SrcType, SrcUpLo>& mat, PermutationType& perm)$/;"	f	class:Eigen::AMDOrdering
operator ()	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^      inline bool operator() (const Index& row, const Index& col, const Scalar&) const$/;"	f	struct:Eigen::SimplicialCholeskyBase::keep_diag
operator ()	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline bool operator() (const Index&, const Index&, const Scalar& value) const$/;"	f	struct:Eigen::SparseMatrix::default_prunning_func
operator *	include/Eigen/src/Core/DiagonalMatrix.h	/^    operator*(const MatrixBase<MatrixDerived> &matrix) const$/;"	f	class:Eigen::DiagonalBase
operator *	include/Eigen/src/Core/DiagonalMatrix.h	/^    operator*(const Scalar& scalar) const$/;"	f	class:Eigen::DiagonalBase
operator *	include/Eigen/src/Core/DiagonalMatrix.h	/^    operator*(const Scalar& scalar, const DiagonalBase& other)$/;"	f	class:Eigen::DiagonalBase
operator *	include/Eigen/src/Core/DiagonalProduct.h	/^MatrixBase<Derived>::operator*(const DiagonalBase<DiagonalDerived> &a_diagonal) const$/;"	f	class:Eigen::MatrixBase
operator *	include/Eigen/src/Core/GeneralProduct.h	/^MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::MatrixBase
operator *	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PlainPermutationType operator*(const PermutationBase<Other>& other) const$/;"	f	class:Eigen::PermutationBase
operator *	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PlainPermutationType operator*(const Transpose<PermutationBase<Other> >& other) const$/;"	f	class:Eigen::PermutationBase
operator *	include/Eigen/src/Core/PermutationMatrix.h	/^    inline PlainPermutationType operator*(const Transpose<PermutationBase<Other> >& other, const PermutationBase& perm)$/;"	f	class:Eigen::PermutationBase
operator *	include/Eigen/src/Core/PermutationMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& matrix) const$/;"	f	class:Eigen::Transpose
operator *	include/Eigen/src/Core/PermutationMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& matrix, const Transpose& trPerm)$/;"	f	class:Eigen::Transpose
operator *	include/Eigen/src/Core/PermutationMatrix.h	/^operator*(const MatrixBase<Derived>& matrix,$/;"	f	namespace:Eigen
operator *	include/Eigen/src/Core/PermutationMatrix.h	/^operator*(const PermutationBase<PermutationDerived> &permutation,$/;"	f	namespace:Eigen
operator *	include/Eigen/src/Core/ProductBase.h	/^operator*(const ProductBase<Derived,Lhs,Rhs>& prod, const typename Derived::RealScalar& x)$/;"	f
operator *	include/Eigen/src/Core/ProductBase.h	/^operator*(const ProductBase<Derived,Lhs,Rhs>& prod, const typename Derived::Scalar& x)$/;"	f
operator *	include/Eigen/src/Core/ProductBase.h	/^operator*(const typename Derived::RealScalar& x,const ProductBase<Derived,Lhs,Rhs>& prod)$/;"	f
operator *	include/Eigen/src/Core/ProductBase.h	/^operator*(const typename Derived::Scalar& x,const ProductBase<Derived,Lhs,Rhs>& prod)$/;"	f
operator *	include/Eigen/src/Core/SelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const SelfAdjointView& rhs)$/;"	f	class:Eigen::SelfAdjointView
operator *	include/Eigen/src/Core/SelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& rhs) const$/;"	f	class:Eigen::SelfAdjointView
operator *	include/Eigen/src/Core/Transpositions.h	/^    operator*(const MatrixBase<Derived>& matrix) const$/;"	f	class:Eigen::Transpose
operator *	include/Eigen/src/Core/Transpositions.h	/^    operator*(const MatrixBase<Derived>& matrix, const Transpose& trt)$/;"	f	class:Eigen::Transpose
operator *	include/Eigen/src/Core/Transpositions.h	/^operator*(const MatrixBase<Derived>& matrix,$/;"	f	namespace:Eigen
operator *	include/Eigen/src/Core/Transpositions.h	/^operator*(const TranspositionsBase<TranspositionDerived> &transpositions,$/;"	f	namespace:Eigen
operator *	include/Eigen/src/Core/TriangularMatrix.h	/^    operator*(const EigenBase<OtherDerived>& rhs) const$/;"	f	class:Eigen::TriangularView
operator *	include/Eigen/src/Core/TriangularMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const TriangularView& rhs)$/;"	f	class:Eigen::TriangularView
operator *	include/Eigen/src/Core/TriangularMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& rhs) const$/;"	f	class:Eigen::TriangularView
operator *	include/Eigen/src/Core/VectorwiseOp.h	/^    operator*(const DenseBase<OtherDerived>& other) const$/;"	f	class:Eigen::VectorwiseOp
operator *	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator*(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator *	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  friend inline QuaternionType operator* (const QuaternionType& a, const AngleAxis& b)$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline Matrix3 operator* (const Matrix3& other) const$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const AngleAxis& other) const$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const QuaternionType& other) const$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline Vector3 operator* (const Vector3& other) const$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline friend Matrix3 operator* (const Matrix3& a, const AngleAxis& b)$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^Quaternion<Scalar>::operator* (const MatrixBase<Derived>& v) const$/;"	f	class:Eigen::Quaternion
operator *	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar> Quaternion<Scalar>::operator* (const Quaternion& other) const$/;"	f	class:Eigen::Quaternion
operator *	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  Vector2 operator* (const Vector2& vec) const$/;"	f	class:Eigen::Rotation2D
operator *	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D operator*(const Rotation2D& other) const$/;"	f	class:Eigen::Rotation2D
operator *	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline RotationMatrixType operator*(const Scaling<Scalar,Dim>& s) const$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim> operator*(const Transform<Scalar,Dim>& t) const$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim> operator*(const Translation<Scalar,Dim>& t) const$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  friend inline LinearMatrixType operator* (const LinearMatrixType& other, const Scaling& s)$/;"	f	class:Eigen::Scaling
operator *	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline LinearMatrixType operator* (const LinearMatrixType& other) const$/;"	f	class:Eigen::Scaling
operator *	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline LinearMatrixType operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Eigen::Scaling
operator *	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling operator* (const Scaling& other) const$/;"	f	class:Eigen::Scaling
operator *	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline VectorType operator* (const VectorType& other) const$/;"	f	class:Eigen::Scaling
operator *	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^Scaling<Scalar,Dim>::operator* (const TransformType& t) const$/;"	f	class:Eigen::Scaling
operator *	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^Scaling<Scalar,Dim>::operator* (const TranslationType& t) const$/;"	f	class:Eigen::Scaling
operator *	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  friend inline Transform operator*(const LinearMatrixType& mat, const Transform& t)$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  operator * (const MatrixBase<OtherDerived> &a, const Transform &b)$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  operator * (const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  operator * (const Transform& other) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim> Transform<Scalar,Dim>::operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim> Transform<Scalar,Dim>::operator*(const ScalingType& s) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim> Transform<Scalar,Dim>::operator*(const TranslationType& t) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  friend inline TransformType operator* (const LinearMatrixType& linear, const Translation& t)$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline TransformType operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline Translation operator* (const Translation& other) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline VectorType operator* (const VectorType& other) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const LinearMatrixType& linear) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const ScalingType& other) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const TransformType& t) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Geometry/AngleAxis.h	/^  friend inline QuaternionType operator* (const QuaternionType& a, const AngleAxis& b)$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const AngleAxis& other) const$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const QuaternionType& other) const$/;"	f	class:Eigen::AngleAxis
operator *	include/Eigen/src/Geometry/Homogeneous.h	/^    operator* (const MatrixBase<Lhs>& lhs, const Homogeneous& rhs)$/;"	f	class:Eigen::Homogeneous
operator *	include/Eigen/src/Geometry/Homogeneous.h	/^    operator* (const MatrixBase<Rhs>& rhs) const$/;"	f	class:Eigen::Homogeneous
operator *	include/Eigen/src/Geometry/Homogeneous.h	/^    operator* (const Transform<Scalar,Dim,Mode,Options>& lhs, const Homogeneous& rhs)$/;"	f	class:Eigen::Homogeneous
operator *	include/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::operator* (const QuaternionBase<OtherDerived>& other) const$/;"	f	class:Eigen::QuaternionBase
operator *	include/Eigen/src/Geometry/Rotation2D.h	/^  Vector2 operator* (const Vector2& vec) const$/;"	f	class:Eigen::Rotation2D
operator *	include/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D operator*(const Rotation2D& other) const$/;"	f	class:Eigen::Rotation2D
operator *	include/Eigen/src/Geometry/RotationBase.h	/^    friend inline Transform<Scalar,Dim,Affine> operator*(const DiagonalMatrix<Scalar,Dim>& l, const Derived& r)$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType operator*(const EigenBase<OtherDerived>& l, const Derived& r)$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType operator*(const UniformScaling<Scalar>& s) const$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim,Isometry> operator*(const Translation<Scalar,Dim>& t) const$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim,Mode> operator*(const Transform<Scalar,Dim,Mode,Options>& t) const$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Geometry/RotationBase.h	/^    operator*(const EigenBase<OtherDerived>& e) const$/;"	f	class:Eigen::RotationBase
operator *	include/Eigen/src/Geometry/Scaling.h	/^  inline Matrix<Scalar,Dim,Dim> operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Eigen::UniformScaling
operator *	include/Eigen/src/Geometry/Scaling.h	/^  inline Transform<Scalar,Dim,(int(Mode)==int(Isometry)?Affine:Mode)> operator* (const Transform<Scalar,Dim, Mode, Options>& t) const$/;"	f	class:Eigen::UniformScaling
operator *	include/Eigen/src/Geometry/Scaling.h	/^  inline UniformScaling operator* (const UniformScaling& other) const$/;"	f	class:Eigen::UniformScaling
operator *	include/Eigen/src/Geometry/Scaling.h	/^  inline typename internal::plain_matrix_type<Derived>::type operator* (const MatrixBase<Derived>& other) const$/;"	f	class:Eigen::UniformScaling
operator *	include/Eigen/src/Geometry/Scaling.h	/^MatrixBase<Derived>::operator*(const UniformScaling<Scalar>& s) const$/;"	f	class:Eigen::MatrixBase
operator *	include/Eigen/src/Geometry/Scaling.h	/^UniformScaling<Scalar>::operator* (const Translation<Scalar,Dim>& t) const$/;"	f	class:Eigen::UniformScaling
operator *	include/Eigen/src/Geometry/Transform.h	/^    operator * (const DiagonalBase<DiagonalDerived> &a, const Transform &b)$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^    operator * (const DiagonalBase<DiagonalDerived> &b) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^    operator * (const EigenBase<OtherDerived> &a, const Transform &b)$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^    operator * (const Transform<Scalar,Dim,OtherMode,OtherOptions>& other) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^  inline Transform<Scalar,Dim,(int(Mode)==int(Isometry)?int(Affine):int(Mode))> operator*(const UniformScaling<Scalar>& s) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^  inline const Transform operator * (const Transform& other) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^  operator * (const EigenBase<OtherDerived> &other) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options> Transform<Scalar,Dim,Mode,Options>::operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options> Transform<Scalar,Dim,Mode,Options>::operator*(const TranslationType& t) const$/;"	f	class:Eigen::Transform
operator *	include/Eigen/src/Geometry/Translation.h	/^  inline AffineTransformType operator*(const EigenBase<OtherDerived>& linear, const Translation& t)$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Geometry/Translation.h	/^  inline IsometryTransformType operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Geometry/Translation.h	/^  inline Transform<Scalar,Dim,Mode> operator* (const Transform<Scalar,Dim,Mode,Options>& t) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Geometry/Translation.h	/^  inline Translation operator* (const Translation& other) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Geometry/Translation.h	/^  inline VectorType operator* (const VectorType& other) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const EigenBase<OtherDerived>& linear) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const UniformScaling<Scalar>& other) const$/;"	f	class:Eigen::Translation
operator *	include/Eigen/src/Householder/HouseholderSequence.h	/^    typename internal::matrix_type_times_scalar_type<Scalar, OtherDerived>::Type operator*(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::HouseholderSequence
operator *	include/Eigen/src/Householder/HouseholderSequence.h	/^typename internal::matrix_type_times_scalar_type<typename VectorsType::Scalar,OtherDerived>::Type operator*(const MatrixBase<OtherDerived>& other, const HouseholderSequence<VectorsType,CoeffsType,Side>& h)$/;"	f	namespace:Eigen
operator *	include/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation operator*(const JacobiRotation& other)$/;"	f	class:Eigen::JacobiRotation
operator *	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  SPQR_QProduct<SPQRType, Derived> operator*(const MatrixBase<Derived>& other)$/;"	f	struct:Eigen::SPQRMatrixQReturnType
operator *	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  SPQR_QProduct<SPQRType,Derived> operator*(const MatrixBase<Derived>& other)$/;"	f	struct:Eigen::SPQRMatrixQTransposeReturnType
operator *	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^SparseMatrixBase<Derived>::operator*(const DiagonalBase<OtherDerived> &other) const$/;"	f	class:Eigen::SparseMatrixBase
operator *	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    operator*(const DiagonalBase<OtherDerived> &lhs, const SparseMatrixBase& rhs)$/;"	f	class:Eigen::SparseMatrixBase
operator *	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    operator*(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::SparseMatrixBase
operator *	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const Derived& rhs)$/;"	f	class:Eigen::SparseMatrixBase
operator *	include/Eigen/src/SparseCore/SparsePermutation.h	/^operator*( const PermutationBase<PermDerived>& perm, const SparseMatrixBase<SparseDerived>& matrix)$/;"	f	namespace:Eigen
operator *	include/Eigen/src/SparseCore/SparsePermutation.h	/^operator*(const SparseMatrixBase<SparseDerived>& matrix, const PermutationBase<PermDerived>& perm)$/;"	f	namespace:Eigen
operator *	include/Eigen/src/SparseCore/SparsePermutation.h	/^operator*(const SparseMatrixBase<SparseDerived>& matrix, const Transpose<PermutationBase<PermDerived> >& tperm)$/;"	f	namespace:Eigen
operator *	include/Eigen/src/SparseCore/SparsePermutation.h	/^operator*(const Transpose<PermutationBase<PermDerived> >& tperm, const SparseMatrixBase<SparseDerived>& matrix)$/;"	f	namespace:Eigen
operator *	include/Eigen/src/SparseCore/SparseProduct.h	/^SparseMatrixBase<Derived>::operator*(const SparseMatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::SparseMatrixBase
operator *	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const SparseSelfAdjointView& rhs)$/;"	f	class:Eigen::SparseSelfAdjointView
operator *	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& rhs) const$/;"	f	class:Eigen::SparseSelfAdjointView
operator *	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    operator*(const SparseMatrixBase<OtherDerived>& lhs, const SparseSelfAdjointView& rhs)$/;"	f	class:Eigen::SparseSelfAdjointView
operator *	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    operator*(const SparseMatrixBase<OtherDerived>& rhs) const$/;"	f	class:Eigen::SparseSelfAdjointView
operator *	include/Eigen/src/SparseQR/SparseQR.h	/^  SparseQR_QProduct<SparseQRType, Derived> operator*(const MatrixBase<Derived>& other)$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
operator *	include/Eigen/src/SparseQR/SparseQR.h	/^  SparseQR_QProduct<SparseQRType,Derived> operator*(const MatrixBase<Derived>& other)$/;"	f	struct:Eigen::SparseQRMatrixQTransposeReturnType
operator *	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator*(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
operator *	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const Scalar& scalar) const$/;"	f
operator *	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const Scalar& scalar, const StorageBaseType& matrix)$/;"	f
operator *	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const std::complex<Scalar>& scalar) const$/;"	f
operator *	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const std::complex<Scalar>& scalar, const StorageBaseType& matrix)$/;"	f
operator *=	include/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator*=(const ArrayBase<OtherDerived>& other)$/;"	f	class:Eigen::ArrayBase
operator *=	include/Eigen/src/Core/MatrixBase.h	/^MatrixBase<Derived>::operator*=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::MatrixBase
operator *=	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^inline Derived& DenseBase<Derived>::operator*=(const Scalar& other)$/;"	f	class:Eigen::DenseBase
operator *=	include/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView&  operator*=(const typename internal::traits<MatrixType>::Scalar& other) { return *this = m_matrix * other; }$/;"	f	class:Eigen::TriangularView
operator *=	include/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator*=(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::VectorwiseOp
operator *=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator*=(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Cwise
operator *=	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator*= (const Quaternion& other)$/;"	f	class:Eigen::Quaternion
operator *=	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D& operator*=(const Rotation2D& other)$/;"	f	class:Eigen::Rotation2D
operator *=	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator*=(const RotationBase<Derived,Dim>& r) { return rotate(r.toRotationMatrix()); }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator*=(const ScalingType& s) { return scale(s.coeffs()); }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator*=(const TranslationType& t) { return translate(t.vector()); }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE Derived& QuaternionBase<Derived>::operator*= (const QuaternionBase<OtherDerived>& other)$/;"	f	class:Eigen::QuaternionBase
operator *=	include/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D& operator*=(const Rotation2D& other)$/;"	f	class:Eigen::Rotation2D
operator *=	include/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const DiagonalMatrix<Scalar,Dim>& s) { linear() *= s; return *this; }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const EigenBase<OtherDerived>& other) { return *this = *this * other; }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const RotationBase<Derived,Dim>& r) { return rotate(r.toRotationMatrix()); }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const TranslationType& t) { return translate(t.vector()); }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const UniformScaling<Scalar>& s) { return scale(s.factor()); }$/;"	f	class:Eigen::Transform
operator *=	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^SparseMatrixBase<Derived>::operator*=(const Scalar& other)$/;"	f	class:Eigen::SparseMatrixBase
operator +	include/Eigen/src/Core/VectorwiseOp.h	/^    operator+(const DenseBase<OtherDerived>& other) const$/;"	f	class:Eigen::VectorwiseOp
operator +	include/Eigen/src/Eigen2Support/Cwise.h	/^    operator+(const Scalar& scalar, const Cwise& mat)$/;"	f	class:Eigen::Cwise
operator +	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator+(const Scalar& scalar) const$/;"	f	class:Eigen::Cwise
operator +	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator+(const Scalar& scalar) const$/;"	f
operator +	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator+(const Scalar& scalar,const EIGEN_CURRENT_STORAGE_BASE_CLASS<Derived>& other)$/;"	f
operator ++	include/Eigen/src/Core/CoreIterators.h	/^    EIGEN_STRONG_INLINE InnerIterator& operator++() { m_inner++; return *this; }$/;"	f	class:Eigen::DenseBase::InnerIterator
operator ++	include/Eigen/src/SparseCore/AmbiVector.h	/^    Iterator& operator++()$/;"	f	class:Eigen::internal::AmbiVector::Iterator
operator ++	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline InnerIterator& operator++() { m_id++; return *this; }$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
operator ++	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Derived& operator++()$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
operator ++	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator& operator++()$/;"	f	class:Eigen::CwiseUnaryOpImpl::InnerIterator
operator ++	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator& operator++()$/;"	f	class:Eigen::CwiseUnaryViewImpl::InnerIterator
operator ++	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline InnerIterator& operator++() { m_id++; return *this; }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
operator ++	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE InnerIterator& operator++()$/;"	f	class:Eigen::SparseTriangularView::InnerIterator
operator ++	include/Eigen/src/SparseCore/SparseVector.h	/^    inline InnerIterator& operator++() { m_id++; return *this; }$/;"	f	class:Eigen::SparseVector::InnerIterator
operator ++	include/Eigen/src/SparseCore/SparseView.h	/^  EIGEN_STRONG_INLINE InnerIterator& operator++()$/;"	f	class:Eigen::SparseView::InnerIterator
operator ++	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline InnerIterator& operator++()$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
operator +=	include/Eigen/src/Core/ArrayBase.h	/^    Derived& operator+=(const Scalar& scalar)$/;"	f	class:Eigen::ArrayBase
operator +=	include/Eigen/src/Core/ArrayBase.h	/^    template<typename OtherDerived> Derived& operator+=(const MatrixBase<OtherDerived>& )$/;"	f	class:Eigen::ArrayBase
operator +=	include/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator+=(const ArrayBase<OtherDerived>& other)$/;"	f	class:Eigen::ArrayBase
operator +=	include/Eigen/src/Core/CwiseBinaryOp.h	/^MatrixBase<Derived>::operator+=(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::MatrixBase
operator +=	include/Eigen/src/Core/EigenBase.h	/^Derived& DenseBase<Derived>::operator+=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::DenseBase
operator +=	include/Eigen/src/Core/MatrixBase.h	/^    template<typename OtherDerived> Derived& operator+=(const ArrayBase<OtherDerived>& )$/;"	f	class:Eigen::MatrixBase
operator +=	include/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator+=(const CoeffBasedProduct<Lhs,Rhs,NestingFlags>& other)$/;"	f	class:Eigen::NoAlias
operator +=	include/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator+=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:Eigen::NoAlias
operator +=	include/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator+=(const StorageBase<OtherDerived>& other)$/;"	f	class:Eigen::NoAlias
operator +=	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator+=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:Eigen::TriangularView
operator +=	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator+=(const ScaledProduct<ProductDerived>& other)$/;"	f	class:Eigen::TriangularView
operator +=	include/Eigen/src/Core/TriangularMatrix.h	/^    template<typename Other> TriangularView&  operator+=(const DenseBase<Other>& other) { return *this = m_matrix + other.derived(); }$/;"	f	class:Eigen::TriangularView
operator +=	include/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator+=(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::VectorwiseOp
operator +=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator+=(const Scalar& scalar)$/;"	f	class:Eigen::Cwise
operator +=	include/Eigen/src/Eigen2Support/Lazy.h	/^Derived& MatrixBase<Derived>::operator+=(const Flagged<ProductBase<ProductDerived, Lhs,Rhs>, 0,$/;"	f	class:Eigen::MatrixBase
operator +=	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^SparseMatrixBase<Derived>::operator+=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrixBase
operator ,	include/Eigen/src/Core/CommaInitializer.h	/^  CommaInitializer& operator,(const DenseBase<OtherDerived>& other)$/;"	f	struct:Eigen::CommaInitializer
operator ,	include/Eigen/src/Core/CommaInitializer.h	/^  CommaInitializer& operator,(const Scalar& s)$/;"	f	struct:Eigen::CommaInitializer
operator -	include/Eigen/src/Core/VectorwiseOp.h	/^    operator-(const DenseBase<OtherDerived>& other) const$/;"	f	class:Eigen::VectorwiseOp
operator -	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator-(const Scalar& scalar) const$/;"	f	class:Eigen::Cwise
operator -	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator-(const Scalar& scalar) const$/;"	f
operator -	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator-(const Scalar& scalar,const EIGEN_CURRENT_STORAGE_BASE_CLASS<Derived>& other)$/;"	f
operator -	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator-() const { return derived(); }$/;"	f
operator --	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline ReverseInnerIterator& operator--() { m_id--; return *this; }$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
operator --	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator& operator--()$/;"	f	class:Eigen::CwiseUnaryOpImpl::ReverseInnerIterator
operator --	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator& operator--()$/;"	f	class:Eigen::CwiseUnaryViewImpl::ReverseInnerIterator
operator --	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline ReverseInnerIterator& operator--() { --m_id; return *this; }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
operator --	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator& operator--()$/;"	f	class:Eigen::SparseTriangularView::ReverseInnerIterator
operator --	include/Eigen/src/SparseCore/SparseVector.h	/^    inline ReverseInnerIterator& operator--() { m_id--; return *this; }$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
operator -=	include/Eigen/src/Core/ArrayBase.h	/^    Derived& operator-=(const Scalar& scalar)$/;"	f	class:Eigen::ArrayBase
operator -=	include/Eigen/src/Core/ArrayBase.h	/^    template<typename OtherDerived> Derived& operator-=(const MatrixBase<OtherDerived>& )$/;"	f	class:Eigen::ArrayBase
operator -=	include/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator-=(const ArrayBase<OtherDerived> &other)$/;"	f	class:Eigen::ArrayBase
operator -=	include/Eigen/src/Core/CwiseBinaryOp.h	/^MatrixBase<Derived>::operator-=(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::MatrixBase
operator -=	include/Eigen/src/Core/EigenBase.h	/^Derived& DenseBase<Derived>::operator-=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::DenseBase
operator -=	include/Eigen/src/Core/MatrixBase.h	/^    template<typename OtherDerived> Derived& operator-=(const ArrayBase<OtherDerived>& )$/;"	f	class:Eigen::MatrixBase
operator -=	include/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator-=(const CoeffBasedProduct<Lhs,Rhs,NestingFlags>& other)$/;"	f	class:Eigen::NoAlias
operator -=	include/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator-=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:Eigen::NoAlias
operator -=	include/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator-=(const StorageBase<OtherDerived>& other)$/;"	f	class:Eigen::NoAlias
operator -=	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator-=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:Eigen::TriangularView
operator -=	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator-=(const ScaledProduct<ProductDerived>& other)$/;"	f	class:Eigen::TriangularView
operator -=	include/Eigen/src/Core/TriangularMatrix.h	/^    template<typename Other> TriangularView&  operator-=(const DenseBase<Other>& other) { return *this = m_matrix - other.derived(); }$/;"	f	class:Eigen::TriangularView
operator -=	include/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator-=(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::VectorwiseOp
operator -=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator-=(const Scalar& scalar)$/;"	f	class:Eigen::Cwise
operator -=	include/Eigen/src/Eigen2Support/Lazy.h	/^Derived& MatrixBase<Derived>::operator-=(const Flagged<ProductBase<ProductDerived, Lhs,Rhs>, 0,$/;"	f	class:Eigen::MatrixBase
operator -=	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^SparseMatrixBase<Derived>::operator-=(const SparseMatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::SparseMatrixBase
operator /	include/Eigen/src/Core/GlobalFunctions.h	/^    operator\/(const typename Derived::Scalar& s, const Eigen::ArrayBase<Derived>& a)$/;"	f	namespace:Eigen
operator /	include/Eigen/src/Core/VectorwiseOp.h	/^    operator\/(const DenseBase<OtherDerived>& other) const$/;"	f	class:Eigen::VectorwiseOp
operator /	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator\/(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator /	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator\/(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
operator /	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator\/(const Scalar& scalar) const$/;"	f
operator /=	include/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator\/=(const ArrayBase<OtherDerived>& other)$/;"	f	class:Eigen::ArrayBase
operator /=	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^inline Derived& DenseBase<Derived>::operator\/=(const Scalar& other)$/;"	f	class:Eigen::DenseBase
operator /=	include/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView&  operator\/=(const typename internal::traits<MatrixType>::Scalar& other) { return *this = m_matrix \/ other; }$/;"	f	class:Eigen::TriangularView
operator /=	include/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator\/=(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::VectorwiseOp
operator /=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator\/=(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Cwise
operator /=	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^SparseMatrixBase<Derived>::operator\/=(const Scalar& other)$/;"	f	class:Eigen::SparseMatrixBase
operator <	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<(Scalar s) const$/;"	f	class:Eigen::Cwise
operator <	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator <	include/base/graph.h	/^						bool operator < (const struct heap_node_t& node) const $/;"	f	struct:msd::base::Graph::heap_node_t
operator <<	include/Eigen/src/Core/CommaInitializer.h	/^DenseBase<Derived>::operator<<(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseBase
operator <<	include/Eigen/src/Core/CommaInitializer.h	/^inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)$/;"	f	class:Eigen::DenseBase
operator <<	include/Eigen/src/Core/IO.h	/^    friend std::ostream & operator << (std::ostream & s, const WithFormat& wf)$/;"	f	class:Eigen::WithFormat
operator <<	include/Eigen/src/Core/IO.h	/^std::ostream & operator <<$/;"	f	namespace:Eigen
operator <<	include/Eigen/src/SparseCore/SparseMatrix.h	/^    friend std::ostream & operator << (std::ostream & s, const SparseMatrix& m)$/;"	f	class:Eigen::SparseMatrix
operator <<	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    friend std::ostream & operator << (std::ostream & s, const SparseMatrixBase& m)$/;"	f	class:Eigen::SparseMatrixBase
operator <<	include/Eigen/src/SparseCore/SparseVector.h	/^    friend std::ostream & operator << (std::ostream & s, const SparseVector& m)$/;"	f	class:Eigen::SparseVector
operator <=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<=(Scalar s) const$/;"	f	class:Eigen::Cwise
operator <=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<=(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator =	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array& operator=(const Array& other)$/;"	f	class:Eigen::Array
operator =	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array& operator=(const ArrayBase<OtherDerived>& other)$/;"	f	class:Eigen::Array
operator =	include/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::Array
operator =	include/Eigen/src/Core/ArrayBase.h	/^    Derived& operator=(const ArrayBase& other)$/;"	f	class:Eigen::ArrayBase
operator =	include/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::operator=(const DenseBase& other)$/;"	f	class:Eigen::DenseBase
operator =	include/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::operator=(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseBase
operator =	include/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::MatrixBase
operator =	include/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const EigenBase<OtherDerived>& other)$/;"	f	class:Eigen::MatrixBase
operator =	include/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const MatrixBase& other)$/;"	f	class:Eigen::MatrixBase
operator =	include/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::MatrixBase
operator =	include/Eigen/src/Core/DiagonalMatrix.h	/^    DiagonalMatrix& operator=(const DiagonalBase<OtherDerived>& other)$/;"	f	class:Eigen::DiagonalMatrix
operator =	include/Eigen/src/Core/DiagonalMatrix.h	/^    DiagonalMatrix& operator=(const DiagonalMatrix& other)$/;"	f	class:Eigen::DiagonalMatrix
operator =	include/Eigen/src/Core/EigenBase.h	/^Derived& DenseBase<Derived>::operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::DenseBase
operator =	include/Eigen/src/Core/MapBase.h	/^    Derived& operator=(const MapBase& other)$/;"	f	class:Eigen::MapBase
operator =	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::Matrix
operator =	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const Matrix& other)$/;"	f	class:Eigen::Matrix
operator =	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::Matrix
operator =	include/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const ReturnByValue<OtherDerived>& func)$/;"	f	class:Eigen::Matrix
operator =	include/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator=(const StorageBase<OtherDerived>& other)$/;"	f	class:Eigen::NoAlias
operator =	include/Eigen/src/Core/NoAlias.h	/^    ExpressionType& operator=(const ReturnByValue<OtherDerived>& func)$/;"	f	class:Eigen::NoAlias
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    Derived& operator=(const PermutationBase& other)$/;"	f	class:Eigen::PermutationBase
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    Derived& operator=(const PermutationBase<OtherDerived>& other)$/;"	f	class:Eigen::PermutationBase
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    Derived& operator=(const TranspositionsBase<OtherDerived>& tr)$/;"	f	class:Eigen::PermutationBase
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    Map& operator=(const Map& other)$/;"	f	class:Eigen::Map
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    Map& operator=(const PermutationBase<Other>& other)$/;"	f	class:Eigen::Map
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    Map& operator=(const TranspositionsBase<Other>& tr)$/;"	f	class:Eigen::Map
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix& operator=(const PermutationBase<Other>& other)$/;"	f	class:Eigen::PermutationMatrix
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix& operator=(const PermutationMatrix& other)$/;"	f	class:Eigen::PermutationMatrix
operator =	include/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix& operator=(const TranspositionsBase<Other>& tr)$/;"	f	class:Eigen::PermutationMatrix
operator =	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::PlainObjectBase
operator =	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& operator=(const PlainObjectBase& other)$/;"	f	class:Eigen::PlainObjectBase
operator =	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& operator=(const ReturnByValue<OtherDerived>& func)$/;"	f	class:Eigen::PlainObjectBase
operator =	include/Eigen/src/Core/ReturnByValue.h	/^      Unusable& operator=(const Unusable&) {return *this;}$/;"	f	class:Eigen::ReturnByValue::Unusable
operator =	include/Eigen/src/Core/ReturnByValue.h	/^Derived& DenseBase<Derived>::operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::DenseBase
operator =	include/Eigen/src/Core/SelfAdjointView.h	/^    SelfAdjointView& operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::SelfAdjointView
operator =	include/Eigen/src/Core/SelfAdjointView.h	/^    SelfAdjointView& operator=(const TriangularView<OtherMatrixType, OtherMode>& other)$/;"	f	class:Eigen::SelfAdjointView
operator =	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    SelfCwiseBinaryOp& operator=(const Rhs& _rhs)$/;"	f	class:Eigen::SelfCwiseBinaryOp
operator =	include/Eigen/src/Core/Transpositions.h	/^    Derived& operator=(const TranspositionsBase& other)$/;"	f	class:Eigen::TranspositionsBase
operator =	include/Eigen/src/Core/Transpositions.h	/^    Derived& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Eigen::TranspositionsBase
operator =	include/Eigen/src/Core/Transpositions.h	/^    Map& operator=(const Map& other)$/;"	f	class:Eigen::Map
operator =	include/Eigen/src/Core/Transpositions.h	/^    Map& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Eigen::Map
operator =	include/Eigen/src/Core/Transpositions.h	/^    Transpositions& operator=(const Transpositions& other)$/;"	f	class:Eigen::Transpositions
operator =	include/Eigen/src/Core/Transpositions.h	/^    Transpositions& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Eigen::Transpositions
operator =	include/Eigen/src/Core/Transpositions.h	/^    TranspositionsWrapper& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Eigen::TranspositionsWrapper
operator =	include/Eigen/src/Core/Transpositions.h	/^    TranspositionsWrapper& operator=(const TranspositionsWrapper& other)$/;"	f	class:Eigen::TranspositionsWrapper
operator =	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:Eigen::TriangularView
operator =	include/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator=(const ScaledProduct<ProductDerived>& other)$/;"	f	class:Eigen::TriangularView
operator =	include/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& operator=(const TriangularView& other)$/;"	f	class:Eigen::TriangularView
operator =	include/Eigen/src/Core/TriangularMatrix.h	/^TriangularView<MatrixType, Mode>::operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::TriangularView
operator =	include/Eigen/src/Core/TriangularMatrix.h	/^TriangularView<MatrixType, Mode>::operator=(const TriangularBase<OtherDerived>& other)$/;"	f	class:Eigen::TriangularView
operator =	include/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator=(const DenseBase<OtherDerived>& other)$/;"	f	class:Eigen::VectorwiseOp
operator =	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const MatrixBase<Derived>& mat)$/;"	f	class:Eigen::AngleAxis
operator =	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const QuaternionType& q)$/;"	f	class:Eigen::AngleAxis
operator =	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator=(const AngleAxisType& aa)$/;"	f	class:Eigen::Quaternion
operator =	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator=(const MatrixBase<Derived>& xpr)$/;"	f	class:Eigen::Quaternion
operator =	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator=(const Quaternion& other)$/;"	f	class:Eigen::Quaternion
operator =	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^::operator=(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Eigen::Matrix
operator =	include/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling& operator=(const Scaling& other)$/;"	f	class:Eigen::Scaling
operator =	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator=(const Transform& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const QMatrix& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const QTransform& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const RotationBase<Derived,Dim>& r)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const ScalingType& s)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const TranslationType& t)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  Translation& operator=(const Translation& other)$/;"	f	class:Eigen::Translation
operator =	include/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const MatrixBase<Derived>& mat)$/;"	f	class:Eigen::AngleAxis
operator =	include/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const QuaternionBase<QuatDerived>& q)$/;"	f	class:Eigen::AngleAxis
operator =	include/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE Derived& QuaternionBase<Derived>::operator=(const AngleAxisType& aa)$/;"	f	class:Eigen::QuaternionBase
operator =	include/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE Derived& QuaternionBase<Derived>::operator=(const QuaternionBase<OtherDerived>& other)$/;"	f	class:Eigen::QuaternionBase
operator =	include/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE QuaternionBase<Derived>& QuaternionBase<Derived>::operator=(const QuaternionBase<Derived>& other)$/;"	f	class:Eigen::QuaternionBase
operator =	include/Eigen/src/Geometry/Quaternion.h	/^inline Derived& QuaternionBase<Derived>::operator=(const MatrixBase<MatrixDerived>& xpr)$/;"	f	class:Eigen::QuaternionBase
operator =	include/Eigen/src/Geometry/RotationBase.h	/^::operator=(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Eigen::Matrix
operator =	include/Eigen/src/Geometry/Transform.h	/^  Transform& operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator=(const EigenBase<OtherDerived>& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator=(const Transform& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const QMatrix& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const QTransform& other)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const RotationBase<Derived,Dim>& r)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const TranslationType& t)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const UniformScaling<Scalar>& s)$/;"	f	class:Eigen::Transform
operator =	include/Eigen/src/Geometry/Translation.h	/^  Translation& operator=(const Translation& other)$/;"	f	class:Eigen::Translation
operator =	include/Eigen/src/SparseCore/CompressedStorage.h	/^    CompressedStorage& operator=(const CompressedStorage& other)$/;"	f	class:Eigen::internal::CompressedStorage
operator =	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline BlockType& operator=(const BlockType& other)$/;"	f	class:Eigen::BlockImpl
operator =	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline BlockType& operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::BlockImpl
operator =	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix& operator=(const EigenBase<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrix
operator =	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix& operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrix
operator =	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix& operator=(const SparseMatrix& other)$/;"	f	class:Eigen::SparseMatrix
operator =	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline SparseMatrix& operator=(const SparseSparseProduct<Lhs,Rhs>& product)$/;"	f	class:Eigen::SparseMatrix
operator =	include/Eigen/src/SparseCore/SparseMatrix.h	/^EIGEN_DONT_INLINE SparseMatrix<Scalar,_Options,_Index>& SparseMatrix<Scalar,_Options,_Index>::operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrix
operator =	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    Derived& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:Eigen::SparseMatrixBase
operator =	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    Derived& operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrixBase
operator =	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Derived& operator=(const Derived& other)$/;"	f	class:Eigen::SparseMatrixBase
operator =	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Derived& operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::SparseMatrixBase
operator =	include/Eigen/src/SparseCore/SparseProduct.h	/^inline Derived& SparseMatrixBase<Derived>::operator=(const SparseSparseProduct<Lhs,Rhs>& product)$/;"	f	class:Eigen::SparseMatrixBase
operator =	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    SparseSelfAdjointView& operator=(const SparseSelfAdjointView& src)$/;"	f	class:Eigen::SparseSelfAdjointView
operator =	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    SparseSelfAdjointView& operator=(const SparseSelfAdjointView<SrcMatrixType,SrcUpLo>& src)$/;"	f	class:Eigen::SparseSelfAdjointView
operator =	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    SparseSelfAdjointView& operator=(const SparseSymmetricPermutationProduct<SrcMatrixType,SrcUpLo>& permutedMatrix)$/;"	f	class:Eigen::SparseSelfAdjointView
operator =	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector& operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:Eigen::SparseVector
operator =	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector& operator=(const SparseSparseProduct<Lhs,Rhs>& product)$/;"	f	class:Eigen::SparseVector
operator =	include/Eigen/src/SparseCore/SparseVector.h	/^    inline SparseVector& operator=(const SparseVector& other)$/;"	f	class:Eigen::SparseVector
operator =	include/Eigen/src/StlSupport/details.h	/^    inline T& operator=(const OtherT& other)$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
operator =	include/Eigen/src/StlSupport/details.h	/^    inline workaround_msvc_stl_support& operator=(const workaround_msvc_stl_support& other)$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
operator =	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  SluMatrix& operator=(const SluMatrix& other)$/;"	f	struct:Eigen::SluMatrix
operator ==	include/Eigen/src/Core/MatrixBase.h	/^    inline bool operator==(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::MatrixBase
operator ==	include/Eigen/src/Core/util/Memory.h	/^    bool operator==(const aligned_allocator<T>& ) const$/;"	f	class:Eigen::aligned_allocator
operator ==	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator==(Scalar s) const$/;"	f	class:Eigen::Cwise
operator ==	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator==(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator >	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>(Scalar s) const$/;"	f	class:Eigen::Cwise
operator >	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator >=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>=(Scalar s) const$/;"	f	class:Eigen::Cwise
operator >=	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>=(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Eigen::Cwise
operator T&	include/Eigen/src/StlSupport/details.h	/^    inline operator T& () { return *static_cast<T*>(this); }$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
operator []	include/Eigen/src/Core/DenseCoeffsBase.h	/^    operator[](Index index) const$/;"	f	class:Eigen::DenseCoeffsBase
operator []	include/Eigen/src/Core/DenseCoeffsBase.h	/^    operator[](Index index)$/;"	f	class:Eigen::DenseCoeffsBase
operator []	include/Eigen/src/Core/Transpositions.h	/^    inline Index& operator[](Index i) { return indices()(i); }$/;"	f	class:Eigen::TranspositionsBase
operator []	include/Eigen/src/Core/Transpositions.h	/^    inline const Index& operator[](Index i) const { return indices()(i); }$/;"	f	class:Eigen::TranspositionsBase
operator []	include/Eigen/src/SparseCore/SparseMatrix.h	/^        Index operator[](Index i) const { return i==m_index ? m_value : 0; }$/;"	f	class:Eigen::SparseMatrix::SingletonVector
operator bool	include/Eigen/src/Core/CoreIterators.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_inner < m_end && m_inner>=0; }$/;"	f	class:Eigen::DenseBase::InnerIterator
operator bool	include/Eigen/src/SparseCore/AmbiVector.h	/^    operator bool() const { return m_cachedIndex>=0; }$/;"	f	class:Eigen::internal::AmbiVector::Iterator
operator bool	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline operator bool() const { return (m_id < m_end) && (m_id>=m_start); }$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
operator bool	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline operator bool() const { return (m_id <= m_end) && (m_id>m_start); }$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
operator bool	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline operator bool() const { return Base::operator bool() && Base::index() < m_end; }$/;"	f	class:Eigen::BlockImpl::InnerIterator
operator bool	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline operator bool() const { return Base::operator bool() && Base::index() >= m_begin; }$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
operator bool	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return (m_lhsIter && m_rhsIter); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
operator bool	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_id>=0; }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
operator bool	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_lhsIter; }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
operator bool	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_rhsIter; }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
operator bool	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline operator bool() const { return (m_id < m_end); }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
operator bool	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline operator bool() const { return (m_id > m_start); }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
operator bool	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE operator bool() const$/;"	f	class:Eigen::SparseTriangularView::InnerIterator
operator bool	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE operator bool() const$/;"	f	class:Eigen::SparseTriangularView::ReverseInnerIterator
operator bool	include/Eigen/src/SparseCore/SparseVector.h	/^    inline operator bool() const { return (m_id < m_end); }$/;"	f	class:Eigen::SparseVector::InnerIterator
operator bool	include/Eigen/src/SparseCore/SparseVector.h	/^    inline operator bool() const { return (m_id > m_start); }$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
operator bool	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline operator bool() const $/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
operator const ExpressionType&	include/Eigen/src/Core/ForceAlignedAccess.h	/^    operator const ExpressionType&() const { return m_expression; }$/;"	f	class:Eigen::ForceAlignedAccess
operator const ExpressionType&	include/Eigen/src/Core/NestByValue.h	/^    operator const ExpressionType&() const { return m_expression; }$/;"	f	class:Eigen::NestByValue
operator const PlainObject&	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE operator const PlainObject& () const$/;"	f	class:Eigen::CoeffBasedProduct
operator const T&	include/Eigen/src/StlSupport/details.h	/^    inline operator const T& () const { return *static_cast<const T*>(this); }$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
operator const typename Base::Scalar	include/Eigen/src/Core/GeneralProduct.h	/^    operator const typename Base::Scalar() const {$/;"	f	class:Eigen::GeneralProduct
operator ||	include/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator||(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
operatorInverseSqrt	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    MatrixType operatorInverseSqrt() const$/;"	f	class:Eigen::SelfAdjointEigenSolver
operatorNorm	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^MatrixBase<Derived>::operatorNorm() const$/;"	f	class:Eigen::MatrixBase
operatorNorm	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^SelfAdjointView<MatrixType, UpLo>::operatorNorm() const$/;"	f	class:Eigen::SelfAdjointView
operatorSqrt	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    MatrixType operatorSqrt() const$/;"	f	class:Eigen::SelfAdjointEigenSolver
options	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline superlu_options_t& options() { return m_sluOptions; }$/;"	f	class:Eigen::SuperLUBase
order	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index order ; \/* pivot ordering of this column, if col is dead *\/$/;"	m	union:internal::colamd_col::__anon402
order_children	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^static inline  void order_children$/;"	f	namespace:internal
ordering	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^void SimplicialCholeskyBase<Derived>::ordering(const MatrixType& a, CholMatrixType& ap)$/;"	f	class:Eigen::SimplicialCholeskyBase
ordering_helper_at_plus_a	include/Eigen/src/OrderingMethods/Ordering.h	/^void ordering_helper_at_plus_a(const MatrixType& mat, MatrixType& symmat)$/;"	f	namespace:Eigen::internal
origin	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType& origin() { return m_origin; }$/;"	f	class:Eigen::ParametrizedLine
origin	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  const VectorType& origin() const { return m_origin; }$/;"	f	class:Eigen::ParametrizedLine
origin	include/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType& origin() { return m_origin; }$/;"	f	class:Eigen::ParametrizedLine
origin	include/Eigen/src/Geometry/ParametrizedLine.h	/^  const VectorType& origin() const { return m_origin; }$/;"	f	class:Eigen::ParametrizedLine
originalMatrix	include/Eigen/src/misc/Image.h	/^  inline const MatrixType& originalMatrix() const { return m_originalMatrix; }$/;"	f	struct:Eigen::internal::image_retval_base
other	include/Eigen/src/Core/util/Memory.h	/^        typedef aligned_allocator<U> other;$/;"	t	struct:Eigen::aligned_allocator::rebind
other	include/Eigen/src/StlSupport/details.h	/^      typedef aligned_allocator_indirection<U> other;$/;"	t	struct:Eigen::aligned_allocator_indirection::rebind
outer	include/Eigen/src/Core/Assign.h	/^    outer = Index \/ Derived1::InnerSizeAtCompileTime,$/;"	e	enum:Eigen::internal::assign_DefaultTraversal_CompleteUnrolling::__anon39
outer	include/Eigen/src/Core/Assign.h	/^    outer = Index \/ Derived1::InnerSizeAtCompileTime,$/;"	e	enum:Eigen::internal::assign_innervec_CompleteUnrolling::__anon40
outer	include/Eigen/src/Core/Redux.h	/^    outer = Start \/ Derived::InnerSizeAtCompileTime,$/;"	e	enum:Eigen::internal::redux_novec_unroller::__anon232
outer	include/Eigen/src/Core/Redux.h	/^    outer = index \/ int(Derived::InnerSizeAtCompileTime),$/;"	e	enum:Eigen::internal::redux_vec_unroller::__anon234
outer	include/Eigen/src/Core/Stride.h	/^    inline Index outer() const { return m_outer.value(); }$/;"	f	class:Eigen::Stride
outer	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index outer()  const { return Base::outer() - (IsRowMajor ? m_block.m_startRow.value() : m_block.m_startCol.value()); }$/;"	f	class:Eigen::BlockImpl::InnerIterator
outer	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index outer()  const { return Base::outer() - (IsRowMajor ? m_block.m_startRow.value() : m_block.m_startCol.value()); }$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
outer	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    inline Index outer() const { return m_outer; }$/;"	f	class:Eigen::SparseDenseOuterProduct::InnerIterator
outer	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    inline Index outer() const { return m_outer; }$/;"	f	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
outer	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index outer() const { return m_outer; }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
outer	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index outer() const { return m_outer; }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
outerInd	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    int *outerInd;$/;"	m	struct:Eigen::SluMatrix::__anon457
outerIndexPtr	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index* outerIndexPtr() { return m_outerIndex; }$/;"	f	class:Eigen::MappedSparseMatrix
outerIndexPtr	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline const Index* outerIndexPtr() const { return m_outerIndex; }$/;"	f	class:Eigen::MappedSparseMatrix
outerIndexPtr	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline Index* outerIndexPtr()$/;"	f	class:Eigen::BlockImpl
outerIndexPtr	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline const Index* outerIndexPtr() const$/;"	f	class:Eigen::BlockImpl
outerIndexPtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index* outerIndexPtr() { return m_outerIndex; }$/;"	f	class:Eigen::SparseMatrix
outerIndexPtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline const Index* outerIndexPtr() const { return m_outerIndex; }$/;"	f	class:Eigen::SparseMatrix
outerSize	include/Eigen/src/Core/DenseBase.h	/^    Index outerSize() const$/;"	f	class:Eigen::DenseBase
outerSize	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index outerSize() const { return m_outerSize; }$/;"	f	class:Eigen::MappedSparseMatrix
outerSize	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index outerSize() const { return m_outerSize; }$/;"	f	class:Eigen::SparseMatrix
outerSize	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    Index outerSize() const { return (int(Flags)&RowMajorBit) ? this->rows() : this->cols(); }$/;"	f	class:Eigen::SparseMatrixBase
outerSize	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE Index outerSize() const { return 1; }$/;"	f	class:Eigen::SparseVector
outerSize	include/Eigen/src/SparseCore/SparseView.h	/^  inline Index outerSize() const { return m_matrix.outerSize(); }$/;"	f	class:Eigen::SparseView
outerStride	include/Eigen/src/Core/Array.h	/^    inline Index outerStride() const { return this->innerSize(); }$/;"	f	class:Eigen::Array
outerStride	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:Eigen::ArrayWrapper
outerStride	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:Eigen::MatrixWrapper
outerStride	include/Eigen/src/Core/Block.h	/^    inline Index outerStride() const$/;"	f	class:Eigen::internal::BlockImpl_dense
outerStride	include/Eigen/src/Core/CwiseUnaryView.h	/^    inline Index outerStride() const$/;"	f	class:Eigen::CwiseUnaryViewImpl
outerStride	include/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index outerStride() const$/;"	f	class:Eigen::DenseCoeffsBase
outerStride	include/Eigen/src/Core/Diagonal.h	/^    inline Index outerStride() const$/;"	f	class:Eigen::Diagonal
outerStride	include/Eigen/src/Core/Flagged.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:Eigen::Flagged
outerStride	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:Eigen::ForceAlignedAccess
outerStride	include/Eigen/src/Core/Map.h	/^    inline Index outerStride() const$/;"	f	class:Eigen::Map
outerStride	include/Eigen/src/Core/Matrix.h	/^    inline Index outerStride() const { return this->innerSize(); }$/;"	f	class:Eigen::Matrix
outerStride	include/Eigen/src/Core/NestByValue.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:Eigen::NestByValue
outerStride	include/Eigen/src/Core/Ref.h	/^  inline Index outerStride() const$/;"	f	class:Eigen::RefBase
outerStride	include/Eigen/src/Core/SelfAdjointView.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:Eigen::SelfAdjointView
outerStride	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:Eigen::SelfCwiseBinaryOp
outerStride	include/Eigen/src/Core/Swap.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:Eigen::SwapWrapper
outerStride	include/Eigen/src/Core/Transpose.h	/^    inline Index outerStride() const { return derived().nestedExpression().outerStride(); }$/;"	f	class:Eigen::TransposeImpl
outerStride	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index outerStride() const { return derived().outerStride(); }$/;"	f	class:Eigen::TriangularBase
outerStride	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:Eigen::TriangularView
outer_product_selector_run	include/Eigen/src/Core/GeneralProduct.h	/^EIGEN_DONT_INLINE void outer_product_selector_run(const ProductType& prod, Dest& dest, const Func& func, const false_type&)$/;"	f	namespace:Eigen::internal
outer_product_selector_run	include/Eigen/src/Core/GeneralProduct.h	/^EIGEN_DONT_INLINE void outer_product_selector_run(const ProductType& prod, Dest& dest, const Func& func, const true_type&) {$/;"	f	namespace:Eigen::internal
outer_stride_at_compile_time	include/Eigen/src/Core/DenseCoeffsBase.h	/^struct outer_stride_at_compile_time$/;"	s	namespace:Eigen::internal
outer_stride_at_compile_time	include/Eigen/src/Core/DenseCoeffsBase.h	/^struct outer_stride_at_compile_time<Derived, false>$/;"	s	namespace:Eigen::internal
p	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index p ;   \/* used as a row pointer in init_rows_cols () *\/$/;"	m	union:internal::Colamd_Row::__anon405
p16uc_COMPLEX_IM	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_IM   = vec_sld((Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 1), (Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 3), 8);\/\/{ 4,5,6,7, 4,5,6,7, 12,13,14,15, 12,13,14,15 };$/;"	m	namespace:Eigen::internal
p16uc_COMPLEX_RE	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_RE   = vec_sld((Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 0), (Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 2), 8);\/\/{ 0,1,2,3, 0,1,2,3, 8,9,10,11, 8,9,10,11 };$/;"	m	namespace:Eigen::internal
p16uc_COMPLEX_REV	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_REV  = vec_sld(p16uc_REVERSE, p16uc_REVERSE, 8);\/\/{ 4,5,6,7, 0,1,2,3, 12,13,14,15, 8,9,10,11 };$/;"	m	namespace:Eigen::internal
p16uc_COMPLEX_REV2	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_REV2 = vec_sld(p16uc_FORWARD, p16uc_FORWARD, 8);\/\/{ 8,9,10,11, 12,13,14,15, 0,1,2,3, 4,5,6,7 };$/;"	m	namespace:Eigen::internal
p16uc_DUPLICATE	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet16uc p16uc_DUPLICATE = {0,1,2,3, 0,1,2,3, 4,5,6,7, 4,5,6,7};$/;"	m	namespace:Eigen::internal
p16uc_FORWARD	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet16uc p16uc_FORWARD = vec_lvsl(0, (float*)0);$/;"	m	namespace:Eigen::internal
p16uc_PSET_HI	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_PSET_HI = (Packet16uc) vec_mergeh((Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 0), (Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 1));\/\/{ 0,1,2,3, 4,5,6,7, 0,1,2,3, 4,5,6,7 };$/;"	m	namespace:Eigen::internal
p16uc_PSET_LO	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_PSET_LO = (Packet16uc) vec_mergeh((Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 2), (Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 3));\/\/{ 8,9,10,11, 12,13,14,15, 8,9,10,11, 12,13,14,15 };$/;"	m	namespace:Eigen::internal
p16uc_REVERSE	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet16uc p16uc_REVERSE = {12,13,14,15, 8,9,10,11, 4,5,6,7, 0,1,2,3};$/;"	m	namespace:Eigen::internal
p2ui_CONJ_XOR	include/Eigen/src/Core/arch/NEON/Complex.h	/^static uint32x2_t p2ui_CONJ_XOR = EIGEN_INIT_NEON_PACKET2(0x00000000, 0x80000000);$/;"	m	namespace:Eigen::internal
p4f_COUNTDOWN	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4f p4f_COUNTDOWN = { 3.0, 2.0, 1.0, 0.0 };$/;"	m	namespace:Eigen::internal
p4f_ONE	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4f p4f_ONE = vec_ctf(p4i_ONE, 0);$/;"	m	namespace:Eigen::internal
p4f_ZERO_	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4f p4f_ZERO_ = (Packet4f) vec_sl((Packet4ui)p4i_MINUS1, (Packet4ui)p4i_MINUS1);$/;"	m	namespace:Eigen::internal
p4i_COUNTDOWN	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4i p4i_COUNTDOWN = { 3, 2, 1, 0 };$/;"	m	namespace:Eigen::internal
p4ui_CONJ_XOR	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet4ui  p4ui_CONJ_XOR = vec_mergeh((Packet4ui)p4i_ZERO, (Packet4ui)p4f_ZERO_);\/\/{ 0x00000000, 0x80000000, 0x00000000, 0x80000000 };$/;"	m	namespace:Eigen::internal
p4ui_CONJ_XOR	include/Eigen/src/Core/arch/NEON/Complex.h	/^static uint32x4_t p4ui_CONJ_XOR = EIGEN_INIT_NEON_PACKET4(0x00000000, 0x80000000, 0x00000000, 0x80000000);$/;"	m	namespace:Eigen::internal
pabs	include/Eigen/src/Core/GenericPacketMath.h	/^pabs(const Packet& a) { using std::abs; return abs(a); }$/;"	f	namespace:Eigen::internal
pabs	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pabs(const Packet4f& a) { return vec_abs(a); }$/;"	f	namespace:Eigen::internal
pabs	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pabs(const Packet4i& a) { return vec_abs(a); }$/;"	f	namespace:Eigen::internal
pabs	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pabs(const Packet4f& a) { return vabsq_f32(a); }$/;"	f	namespace:Eigen::internal
pabs	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pabs(const Packet4i& a) { return vabsq_s32(a); }$/;"	f	namespace:Eigen::internal
pabs	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pabs(const Packet2d& a)$/;"	f	namespace:Eigen::internal
pabs	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pabs(const Packet4f& a)$/;"	f	namespace:Eigen::internal
pabs	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pabs(const Packet4i& a)$/;"	f	namespace:Eigen::internal
pack	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  void pack(Scalar* blockA, const const_blas_data_mapper<Scalar,Index,StorageOrder>& lhs, Index cols, Index i, Index& count)$/;"	f	struct:Eigen::internal::symm_pack_lhs
packedMatrix	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    const MatrixType& packedMatrix() const$/;"	f	class:Eigen::HessenbergDecomposition
packedMatrix	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    inline const MatrixType& packedMatrix() const$/;"	f	class:Eigen::Tridiagonalization
packet	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Eigen::ArrayWrapper
packet	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Eigen::MatrixWrapper
packet	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::ArrayWrapper
packet	include/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::MatrixWrapper
packet	include/Eigen/src/Core/Block.h	/^    inline PacketScalar packet(Index index) const$/;"	f	class:Eigen::internal::BlockImpl_dense
packet	include/Eigen/src/Core/Block.h	/^    inline PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::internal::BlockImpl_dense
packet	include/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:Eigen::CwiseBinaryOpImpl
packet	include/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::CwiseBinaryOpImpl
packet	include/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:Eigen::CwiseNullaryOp
packet	include/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::CwiseNullaryOp
packet	include/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:Eigen::CwiseUnaryOpImpl
packet	include/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::CwiseUnaryOpImpl
packet	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE PacketReturnType packet(Index index) const$/;"	f	class:Eigen::DenseCoeffsBase
packet	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE PacketReturnType packet(Index row, Index col) const$/;"	f	class:Eigen::DenseCoeffsBase
packet	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index idx) const$/;"	f	class:Eigen::DiagonalProduct
packet	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index row, Index col) const$/;"	f	class:Eigen::DiagonalProduct
packet	include/Eigen/src/Core/Flagged.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Eigen::Flagged
packet	include/Eigen/src/Core/Flagged.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:Eigen::Flagged
packet	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Eigen::ForceAlignedAccess
packet	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:Eigen::ForceAlignedAccess
packet	include/Eigen/src/Core/MapBase.h	/^    inline PacketScalar packet(Index index) const$/;"	f	class:Eigen::MapBase
packet	include/Eigen/src/Core/MapBase.h	/^    inline PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::MapBase
packet	include/Eigen/src/Core/NestByValue.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Eigen::NestByValue
packet	include/Eigen/src/Core/NestByValue.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:Eigen::NestByValue
packet	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:Eigen::PlainObjectBase
packet	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::PlainObjectBase
packet	include/Eigen/src/Core/Replicate.h	/^    inline PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::Replicate
packet	include/Eigen/src/Core/Reverse.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Eigen::Reverse
packet	include/Eigen/src/Core/Reverse.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:Eigen::Reverse
packet	include/Eigen/src/Core/Transpose.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Eigen::TransposeImpl
packet	include/Eigen/src/Core/Transpose.h	/^    inline const PacketScalar packet(Index rowId, Index colId) const$/;"	f	class:Eigen::TransposeImpl
packet	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE const PacketScalar packet(Index row, Index col) const$/;"	f	class:Eigen::CoeffBasedProduct
packetByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE PacketReturnType packetByOuterInner(Index outer, Index inner) const$/;"	f	class:Eigen::DenseCoeffsBase
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index i) const { return impl.packetOp(i); }$/;"	f	struct:Eigen::internal::linspaced_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index i) const$/;"	f	struct:Eigen::internal::linspaced_op_impl
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index row, Index col) const$/;"	f	struct:Eigen::internal::linspaced_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index) const { return m_base = padd(m_base,m_packetStep); }$/;"	f	struct:Eigen::internal::linspaced_op_impl
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index, Index = 0) const { return internal::pset1<Packet>(m_other); }$/;"	f	struct:Eigen::internal::scalar_constant_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const { return internal::pconj(a); }$/;"	f	struct:Eigen::internal::scalar_conjugate_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_abs2_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_abs_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_multiple_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_opposite_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_quotient1_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:Eigen::internal::scalar_conj_product_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:Eigen::internal::scalar_difference_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:Eigen::internal::scalar_max_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:Eigen::internal::scalar_min_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:Eigen::internal::scalar_product_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:Eigen::internal::scalar_quotient_op
packetOp	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:Eigen::internal::scalar_sum_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pacos(a); }$/;"	f	struct:Eigen::internal::scalar_acos_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pasin(a); }$/;"	f	struct:Eigen::internal::scalar_asin_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pcos(a); }$/;"	f	struct:Eigen::internal::scalar_cos_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pexp(a); }$/;"	f	struct:Eigen::internal::scalar_exp_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::plog(a); }$/;"	f	struct:Eigen::internal::scalar_log_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::psin(a); }$/;"	f	struct:Eigen::internal::scalar_sin_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::psqrt(a); }$/;"	f	struct:Eigen::internal::scalar_sqrt_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::ptan(a); }$/;"	f	struct:Eigen::internal::scalar_tan_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_add_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_cube_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_inverse_mult_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_inverse_op
packetOp	include/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_square_op
packet_impl	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE PacketScalar packet_impl(Index row, Index col, Index id, internal::false_type) const$/;"	f	class:Eigen::DiagonalProduct
packet_impl	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE PacketScalar packet_impl(Index row, Index col, Index id, internal::true_type) const$/;"	f	class:Eigen::DiagonalProduct
packet_traits	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename T> struct packet_traits : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct packet_traits<std::complex<float> >  : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct packet_traits<float>  : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct packet_traits<int>    : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct packet_traits<std::complex<float> >  : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct packet_traits<float>  : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct packet_traits<int>    : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct packet_traits<std::complex<double> >  : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct packet_traits<std::complex<float> >  : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct packet_traits<double> : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct packet_traits<float>  : default_packet_traits$/;"	s	namespace:Eigen::internal
packet_traits	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct packet_traits<int>    : default_packet_traits$/;"	s	namespace:Eigen::internal
pacos	include/Eigen/src/Core/GenericPacketMath.h	/^Packet pacos(const Packet& a) { using std::acos; return acos(a); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/GenericPacketMath.h	/^padd(const Packet& a,$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf padd<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_add(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f padd<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_add(a,b); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i padd<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_add(a,b); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf padd<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(padd<Packet4f>(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f padd<Packet4f>(const Packet4f& a, const Packet4f& b) { return vaddq_f32(a,b); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i padd<Packet4i>(const Packet4i& a, const Packet4i& b) { return vaddq_s32(a,b); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd padd<Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_add_pd(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf padd<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_add_ps(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d padd<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_add_pd(a,b); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f padd<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_add_ps(a,b); }$/;"	f	namespace:Eigen::internal
padd	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i padd<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_add_epi32(a,b); }$/;"	f	namespace:Eigen::internal
palign	include/Eigen/src/Core/GenericPacketMath.h	/^inline void palign(PacketType& first, const PacketType& second)$/;"	f	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/GenericPacketMath.h	/^struct palign_impl$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^struct palign_impl<Offset,Packet2cf>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^struct palign_impl<Offset,Packet4f>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^struct palign_impl<Offset,Packet4i>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/NEON/Complex.h	/^struct palign_impl<Offset,Packet2cf>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/SSE/Complex.h	/^struct palign_impl<Offset,Packet1cd>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/SSE/Complex.h	/^struct palign_impl<Offset,Packet2cf>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^struct palign_impl<Offset,Packet2d>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^struct palign_impl<Offset,Packet4f>$/;"	s	namespace:Eigen::internal
palign_impl	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^struct palign_impl<Offset,Packet4i>$/;"	s	namespace:Eigen::internal
pand	include/Eigen/src/Core/GenericPacketMath.h	/^pand(const Packet& a, const Packet& b) { return a & b; }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pand   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_and(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pand<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_and(a, b); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pand<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_and(a, b); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pand   <Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pand<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pand<Packet4i>(const Packet4i& a, const Packet4i& b) { return vandq_s32(a,b); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pand   <Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_and_pd(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pand   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_and_ps(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pand<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_and_pd(a,b); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pand<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_and_ps(a,b); }$/;"	f	namespace:Eigen::internal
pand	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pand<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_and_si128(a,b); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/GenericPacketMath.h	/^pandnot(const Packet& a, const Packet& b) { return a & (!b); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pandnot<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_and(a.v, vec_nor(b.v,b.v))); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pandnot<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_and(a, vec_nor(b, b)); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pandnot<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_and(a, vec_nor(b, b)); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pandnot<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pandnot<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pandnot<Packet4i>(const Packet4i& a, const Packet4i& b) { return vbicq_s32(a,b); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pandnot<Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_andnot_pd(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pandnot<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_andnot_ps(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pandnot<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_andnot_pd(a,b); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pandnot<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_andnot_ps(a,b); }$/;"	f	namespace:Eigen::internal
pandnot	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pandnot<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_andnot_si128(a,b); }$/;"	f	namespace:Eigen::internal
panel_bmod	include/Eigen/src/SparseLU/SparseLU_panel_bmod.h	/^void SparseLUImpl<Scalar,Index>::panel_bmod(const Index m, const Index w, const Index jcol, $/;"	f	class:Eigen::internal::SparseLUImpl
panel_dfs	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^void SparseLUImpl<Scalar,Index>::panel_dfs(const Index m, const Index w, const Index jcol, MatrixType& A, IndexVector& perm_r, Index& nseg, ScalarVector& dense, IndexVector& panel_lsub, IndexVector& segrep, IndexVector& repfnz, IndexVector& xprune, IndexVector& marker, IndexVector& parent, IndexVector& xplore, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
panel_dfs_traits	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^  panel_dfs_traits(Index jcol, Index* marker)$/;"	f	struct:Eigen::internal::panel_dfs_traits
panel_dfs_traits	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^struct panel_dfs_traits$/;"	s	namespace:Eigen::internal
panel_size	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index panel_size; \/\/ a panel consists of at most <panel_size> consecutive columns$/;"	m	struct:Eigen::internal::perfvalues
parallelize_gemm	include/Eigen/src/Core/products/Parallelizer.h	/^void parallelize_gemm(const Functor& func, Index rows, Index cols, bool transpose)$/;"	f	namespace:Eigen::internal
pardisoInit	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    void pardisoInit(int type)$/;"	f	class:Eigen::PardisoImpl
pardisoParameterArray	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    ParameterType& pardisoParameterArray()$/;"	f	class:Eigen::PardisoImpl
pardisoRelease	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    void pardisoRelease()$/;"	f	class:Eigen::PardisoImpl
pardiso_run_selector	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  struct pardiso_run_selector$/;"	s	namespace:Eigen::internal
pardiso_run_selector	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  struct pardiso_run_selector<long long int>$/;"	s	namespace:Eigen::internal
pardiso_traits	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  struct pardiso_traits< PardisoLDLT<_MatrixType, Options> >$/;"	s	namespace:Eigen::internal
pardiso_traits	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  struct pardiso_traits< PardisoLLT<_MatrixType, Options> >$/;"	s	namespace:Eigen::internal
pardiso_traits	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^  struct pardiso_traits< PardisoLU<_MatrixType> >$/;"	s	namespace:Eigen::internal
parent	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index parent ;  \/* parent in parent tree super-column structure, if *\/$/;"	m	union:internal::colamd_col::__anon401
part	include/Eigen/src/Core/MatrixBase.h	/^    const DiagonalWrapper<ConstDiagonalReturnType> part() const$/;"	f	class:Eigen::MatrixBase
part	include/Eigen/src/Core/TriangularMatrix.h	/^const typename internal::eigen2_part_return_type<Derived, Mode>::type MatrixBase<Derived>::part() const$/;"	f	class:Eigen::MatrixBase
part	include/Eigen/src/Core/TriangularMatrix.h	/^typename internal::eigen2_part_return_type<Derived, Mode>::type MatrixBase<Derived>::part()$/;"	f	class:Eigen::MatrixBase
partialPivLu	include/Eigen/src/LU/PartialPivLU.h	/^MatrixBase<Derived>::partialPivLu() const$/;"	f	class:Eigen::MatrixBase
partial_lu_impl	include/Eigen/src/LU/PartialPivLU.h	/^struct partial_lu_impl$/;"	s	namespace:Eigen::internal
partial_lu_inplace	include/Eigen/src/LU/PartialPivLU.h	/^void partial_lu_inplace(MatrixType& lu, TranspositionType& row_transpositions, typename TranspositionType::Index& nb_transpositions)$/;"	f	namespace:Eigen::internal
pasin	include/Eigen/src/Core/GenericPacketMath.h	/^Packet pasin(const Packet& a) { using std::asin; return asin(a); }$/;"	f	namespace:Eigen::internal
pastix_traits	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  struct pastix_traits< PastixLDLT<_MatrixType,Options> >$/;"	s	namespace:Eigen::internal
pastix_traits	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  struct pastix_traits< PastixLLT<_MatrixType,Options> >$/;"	s	namespace:Eigen::internal
pastix_traits	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^  struct pastix_traits< PastixLU<_MatrixType> >$/;"	s	namespace:Eigen::internal
pconj	include/Eigen/src/Core/GenericPacketMath.h	/^pconj(const Packet& a) { return numext::conj(a); }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pconj(const Packet2cf& a) { return Packet2cf((Packet4f)vec_xor((Packet4ui)a.v, p4ui_CONJ_XOR)); }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pconj(const Packet4f& a) { return a; }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pconj(const Packet4i& a) { return a; }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pconj(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pconj(const Packet4f& a) { return a; }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pconj(const Packet4i& a) { return a; }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pconj(const Packet1cd& a)$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pconj(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pconj(const Packet2d& a) { return a; }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pconj(const Packet4f& a) { return a; }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pconj(const Packet4i& a) { return a; }$/;"	f	namespace:Eigen::internal
pconj	include/Eigen/src/Core/util/BlasUtil.h	/^  inline T pconj(const T& x) { return internal::pconj(x); }$/;"	f	struct:Eigen::internal::conj_if
pconj	include/Eigen/src/Core/util/BlasUtil.h	/^  inline const T& pconj(const T& x) { return x; }$/;"	f	struct:Eigen::internal::conj_if
pcos	include/Eigen/src/Core/GenericPacketMath.h	/^Packet pcos(const Packet& a) { using std::cos; return cos(a); }$/;"	f	namespace:Eigen::internal
pcos	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f pcos<Packet4f>(const Packet4f& _x)$/;"	f	namespace:Eigen::internal
pcplxflip	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline Packet pcplxflip(const Packet& a)$/;"	f	namespace:Eigen::internal
pcplxflip	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pcplxflip<Packet2cf>(const Packet2cf& x)$/;"	f	namespace:Eigen::internal
pcplxflip	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pcplxflip<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
pcplxflip	include/Eigen/src/Core/arch/SSE/Complex.h	/^EIGEN_STRONG_INLINE Packet1cd pcplxflip\/*<Packet1cd>*\/(const Packet1cd& x)$/;"	f	namespace:Eigen::internal
pcplxflip	include/Eigen/src/Core/arch/SSE/Complex.h	/^EIGEN_STRONG_INLINE Packet2cf pcplxflip\/*<Packet2cf>*\/(const Packet2cf& x)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/GenericPacketMath.h	/^pdiv(const Packet& a,$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pdiv<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pdiv<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pdiv<Packet4i>(const Packet4i& \/*a*\/, const Packet4i& \/*b*\/)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pdiv<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pdiv<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pdiv<Packet4i>(const Packet4i& \/*a*\/, const Packet4i& \/*b*\/)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pdiv<Packet1cd>(const Packet1cd& a, const Packet1cd& b)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pdiv<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pdiv<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_div_pd(a,b); }$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pdiv<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_div_ps(a,b); }$/;"	f	namespace:Eigen::internal
pdiv	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pdiv<Packet4i>(const Packet4i& \/*a*\/, const Packet4i& \/*b*\/)$/;"	f	namespace:Eigen::internal
performFrancisQRStep	include/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::performFrancisQRStep(Index il, Index im, Index iu, bool computeU, const Vector3s& firstHouseholderVector, Scalar* workspace)$/;"	f	class:Eigen::RealSchur
perfvalues	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^struct perfvalues {$/;"	s	namespace:Eigen::internal
permut_matrix_product_retval	include/Eigen/src/Core/PermutationMatrix.h	/^    permut_matrix_product_retval(const PermutationType& perm, const MatrixType& matrix)$/;"	f	struct:Eigen::internal::permut_matrix_product_retval
permut_matrix_product_retval	include/Eigen/src/Core/PermutationMatrix.h	/^struct permut_matrix_product_retval$/;"	s	namespace:Eigen::internal
permut_sparsematrix_product_retval	include/Eigen/src/SparseCore/SparsePermutation.h	/^    permut_sparsematrix_product_retval(const PermutationType& perm, const MatrixType& matrix)$/;"	f	struct:Eigen::internal::permut_sparsematrix_product_retval
permut_sparsematrix_product_retval	include/Eigen/src/SparseCore/SparsePermutation.h	/^struct permut_sparsematrix_product_retval$/;"	s	namespace:Eigen::internal
permutationP	include/Eigen/src/LU/FullPivLU.h	/^    inline const PermutationPType& permutationP() const$/;"	f	class:Eigen::FullPivLU
permutationP	include/Eigen/src/LU/PartialPivLU.h	/^    inline const PermutationType& permutationP() const$/;"	f	class:Eigen::PartialPivLU
permutationP	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    const PermutationMatrix<Dynamic,Dynamic,Index>& permutationP() const$/;"	f	class:Eigen::SimplicialCholeskyBase
permutationP	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline const IntColVectorType& permutationP() const$/;"	f	class:Eigen::SuperLU
permutationP	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline const IntColVectorType& permutationP() const$/;"	f	class:Eigen::UmfPackLU
permutationPinv	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    const PermutationMatrix<Dynamic,Dynamic,Index>& permutationPinv() const$/;"	f	class:Eigen::SimplicialCholeskyBase
permutationQ	include/Eigen/src/LU/FullPivLU.h	/^    inline const PermutationQType& permutationQ() const$/;"	f	class:Eigen::FullPivLU
permutationQ	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline const IntRowVectorType& permutationQ() const$/;"	f	class:Eigen::SuperLU
permutationQ	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline const IntRowVectorType& permutationQ() const$/;"	f	class:Eigen::UmfPackLU
permute_symm_to_fullsymm	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^void permute_symm_to_fullsymm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::Index>& _dest, const typename MatrixType::Index* perm)$/;"	f	namespace:Eigen::internal
permute_symm_to_symm	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^void permute_symm_to_symm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DstOrder,typename MatrixType::Index>& _dest, const typename MatrixType::Index* perm)$/;"	f	namespace:Eigen::internal
pexp	include/Eigen/src/Core/GenericPacketMath.h	/^Packet pexp(const Packet& a) { using std::exp; return exp(a); }$/;"	f	namespace:Eigen::internal
pexp	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet2d pexp<Packet2d>(const Packet2d& _x)$/;"	f	namespace:Eigen::internal
pexp	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f pexp<Packet4f>(const Packet4f& _x)$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type pfirst(const Packet& a)$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float>  pfirst<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { float EIGEN_ALIGN16 x[4]; vec_st(a, 0, x); return x[0]; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { int   EIGEN_ALIGN16 x[4]; vec_st(a, 0, x); return x[0]; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float>  pfirst<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { float EIGEN_ALIGN16 x[4]; vst1q_f32(x, a); return x[0]; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { int   EIGEN_ALIGN16 x[4]; vst1q_s32(x, a); return x[0]; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<double>  pfirst<Packet1cd>(const Packet1cd& a)$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float>  pfirst<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double pfirst<Packet2d>(const Packet2d& a) { double x = _mm_cvtsd_f64(a); return x; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double pfirst<Packet2d>(const Packet2d& a) { return _mm_cvtsd_f64(a); }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double pfirst<Packet2d>(const Packet2d& a) { return a.m128d_f64[0]; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { float x = _mm_cvtss_f32(a); return x; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { return _mm_cvtss_f32(a); }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { return a.m128_f32[0]; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { int x = _mm_cvtsi128_si32(a); return x; }$/;"	f	namespace:Eigen::internal
pfirst	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { return _mm_cvtsi128_si32(a); }$/;"	f	namespace:Eigen::internal
pivotL	include/Eigen/src/SparseLU/SparseLU_pivotL.h	/^Index SparseLUImpl<Scalar,Index>::pivotL(const Index jcol, const RealScalar& diagpivotthresh, IndexVector& perm_r, IndexVector& iperm_c, Index& pivrow, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
plain_array	include/Eigen/src/Core/DenseStorage.h	/^  plain_array() $/;"	f	struct:Eigen::internal::plain_array
plain_array	include/Eigen/src/Core/DenseStorage.h	/^  plain_array() {}$/;"	f	struct:Eigen::internal::plain_array
plain_array	include/Eigen/src/Core/DenseStorage.h	/^  plain_array(constructor_without_unaligned_array_assert) $/;"	f	struct:Eigen::internal::plain_array
plain_array	include/Eigen/src/Core/DenseStorage.h	/^  plain_array(constructor_without_unaligned_array_assert) {}$/;"	f	struct:Eigen::internal::plain_array
plain_array	include/Eigen/src/Core/DenseStorage.h	/^struct plain_array$/;"	s	namespace:Eigen::internal
plain_array	include/Eigen/src/Core/DenseStorage.h	/^struct plain_array<T, 0, MatrixOrArrayOptions, Alignment>$/;"	s	namespace:Eigen::internal
plain_array	include/Eigen/src/Core/DenseStorage.h	/^struct plain_array<T, Size, MatrixOrArrayOptions, 16>$/;"	s	namespace:Eigen::internal
plain_matrix_type	include/Eigen/src/SparseCore/SparseUtil.h	/^template<typename T> struct plain_matrix_type<T,Sparse>$/;"	s	namespace:Eigen::internal
pload	include/Eigen/src/Core/GenericPacketMath.h	/^pload(const typename unpacket_traits<Packet>::type* from) { return *from; }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pload <Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_ALIGNED_LOAD return Packet2cf(pload<Packet4f>((const float*)from)); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pload<Packet4f>(const float* from) { EIGEN_DEBUG_ALIGNED_LOAD return vec_ld(0, from); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pload<Packet4i>(const int*     from) { EIGEN_DEBUG_ALIGNED_LOAD return vec_ld(0, from); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pload<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_ALIGNED_LOAD return Packet2cf(pload<Packet4f>((const float*)from)); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pload<Packet4f>(const float* from) { EIGEN_DEBUG_ALIGNED_LOAD return vld1q_f32(from); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pload<Packet4i>(const int*   from) { EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s32(from); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pload <Packet1cd>(const std::complex<double>* from)$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pload <Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_ALIGNED_LOAD return Packet2cf(pload<Packet4f>(&numext::real_ref(*from))); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pload<Packet2d>(const double*  from) { EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_pd(from); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pload<Packet4f>(const float*   from) { EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_ps(from); }$/;"	f	namespace:Eigen::internal
pload	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pload<Packet4i>(const int*     from) { EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_si128(reinterpret_cast<const Packet4i*>(from)); }$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/GenericPacketMath.h	/^ploaddup(const typename unpacket_traits<Packet>::type* from) { return *from; }$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploaddup<Packet2cf>(const std::complex<float>*     from)$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploaddup<Packet4f>(const float*   from)$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploaddup<Packet4i>(const int*     from)$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploaddup<Packet2cf>(const std::complex<float>* from) { return pset1<Packet2cf>(*from); }$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploaddup<Packet4f>(const float*   from)$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploaddup<Packet4i>(const int*     from)$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd ploaddup<Packet1cd>(const std::complex<double>* from) { return pset1<Packet1cd>(*from); }$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploaddup<Packet2cf>(const std::complex<float>* from) { return pset1<Packet2cf>(*from); }$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d ploaddup<Packet2d>(const double*  from)$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploaddup<Packet4f>(const float*   from)$/;"	f	namespace:Eigen::internal
ploaddup	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploaddup<Packet4i>(const int*     from)$/;"	f	namespace:Eigen::internal
ploadt	include/Eigen/src/Core/GenericPacketMath.h	/^inline Packet ploadt(const typename unpacket_traits<Packet>::type* from)$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/GenericPacketMath.h	/^ploadu(const typename unpacket_traits<Packet>::type* from) { return *from; }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploadu<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_UNALIGNED_LOAD return Packet2cf(ploadu<Packet4f>((const float*)from)); }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float* from)$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int* from)$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploadu<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_UNALIGNED_LOAD return Packet2cf(ploadu<Packet4f>((const float*)from)); }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float* from) { EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_f32(from); }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int* from)   { EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s32(from); }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd ploadu<Packet1cd>(const std::complex<double>* from)$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploadu<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_UNALIGNED_LOAD return Packet2cf(ploadu<Packet4f>(&numext::real_ref(*from))); }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  template<> EIGEN_STRONG_INLINE Packet2d ploadu<Packet2d>(const double* from) { EIGEN_DEBUG_UNALIGNED_LOAD return _mm_loadu_pd(from); }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float*  from) {$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int*    from) { EIGEN_DEBUG_UNALIGNED_LOAD return _mm_loadu_si128(reinterpret_cast<const Packet4i*>(from)); }$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d ploadu<Packet2d>(const double* from)$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float* from)$/;"	f	namespace:Eigen::internal
ploadu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int* from)$/;"	f	namespace:Eigen::internal
plog	include/Eigen/src/Core/GenericPacketMath.h	/^Packet plog(const Packet& a) { using std::log; return log(a); }$/;"	f	namespace:Eigen::internal
plog	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f plog<Packet4f>(const Packet4f& _x)$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/GenericPacketMath.h	/^plset(const Scalar& a) { return a; }$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f plset<float>(const float& a) { return vec_add(pset1<Packet4f>(a), p4f_COUNTDOWN); }$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i plset<int>(const int& a)     { return vec_add(pset1<Packet4i>(a), p4i_COUNTDOWN); }$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f plset<float>(const float& a)$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i plset<int>(const int& a)$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d plset<double>(const double& a) { return _mm_add_pd(pset1<Packet2d>(a),_mm_set_pd(1,0)); }$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f plset<float>(const float& a) { return _mm_add_ps(pset1<Packet4f>(a), _mm_set_ps(3,2,1,0)); }$/;"	f	namespace:Eigen::internal
plset	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i plset<int>(const int& a) { return _mm_add_epi32(pset1<Packet4i>(a),_mm_set_epi32(3,2,1,0)); }$/;"	f	namespace:Eigen::internal
pmadd	include/Eigen/src/Core/GenericPacketMath.h	/^pmadd(const Packet&  a,$/;"	f	namespace:Eigen::internal
pmadd	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmadd(const Packet4f& a, const Packet4f& b, const Packet4f& c) { return vec_madd(a, b, c); }$/;"	f	namespace:Eigen::internal
pmadd	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmadd(const Packet4i& a, const Packet4i& b, const Packet4i& c) { return padd(pmul(a,b), c); }$/;"	f	namespace:Eigen::internal
pmadd	include/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmadd(const Packet4f& a, const Packet4f& b, const Packet4f& c) { return vmlaq_f32(c,a,b); }$/;"	f	namespace:Eigen::internal
pmadd	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmadd(const Packet4i& a, const Packet4i& b, const Packet4i& c) { return vmlaq_s32(c,a,b); }$/;"	f	namespace:Eigen::internal
pmadd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmadd(const Packet1cd& x, const Packet1cd& y, const Packet1cd& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmadd(const Packet1cd& x, const Packet2d& y, const Packet1cd& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmadd(const Packet2d& x, const Packet1cd& y, const Packet1cd& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet4f& y, const Packet2cf& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet4f& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmadd(const Packet4i& a, const Packet4i& b, const Packet4i& c) { return padd(pmul(a,b), c); }$/;"	f	namespace:Eigen::internal
pmadd	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const RealScalar& x, const Scalar& y, const Scalar& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const Scalar& x, const RealScalar& y, const Scalar& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const Scalar& x, const Scalar& y, const Scalar& c) const { return internal::pmadd(x,y,c); }$/;"	f	struct:Eigen::internal::conj_helper
pmadd	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const Scalar& x, const Scalar& y, const Scalar& c) const$/;"	f	struct:Eigen::internal::conj_helper
pmax	include/Eigen/src/Core/GenericPacketMath.h	/^pmax(const Packet& a,$/;"	f	namespace:Eigen::internal
pmax	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmax<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_max(a, b); }$/;"	f	namespace:Eigen::internal
pmax	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmax<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_max(a, b); }$/;"	f	namespace:Eigen::internal
pmax	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmax<Packet4f>(const Packet4f& a, const Packet4f& b) { return vmaxq_f32(a,b); }$/;"	f	namespace:Eigen::internal
pmax	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmax<Packet4i>(const Packet4i& a, const Packet4i& b) { return vmaxq_s32(a,b); }$/;"	f	namespace:Eigen::internal
pmax	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pmax<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_max_pd(a,b); }$/;"	f	namespace:Eigen::internal
pmax	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmax<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_max_ps(a,b); }$/;"	f	namespace:Eigen::internal
pmax	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmax<Packet4i>(const Packet4i& a, const Packet4i& b)$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/GenericPacketMath.h	/^pmin(const Packet& a,$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmin<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_min(a, b); }$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmin<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_min(a, b); }$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmin<Packet4f>(const Packet4f& a, const Packet4f& b) { return vminq_f32(a,b); }$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmin<Packet4i>(const Packet4i& a, const Packet4i& b) { return vminq_s32(a,b); }$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pmin<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_min_pd(a,b); }$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmin<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_min_ps(a,b); }$/;"	f	namespace:Eigen::internal
pmin	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmin<Packet4i>(const Packet4i& a, const Packet4i& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/GenericPacketMath.h	/^pmul(const Packet& a,$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/GenericPacketMath.h	/^template<> inline std::complex<double> pmul(const std::complex<double>& a, const std::complex<double>& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/GenericPacketMath.h	/^template<> inline std::complex<float> pmul(const std::complex<float>& a, const std::complex<float>& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& a, const Packet2cf& b) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pmul<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmul<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_madd(a,b,p4f_ZERO); }$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& a, const Packet2cf& b) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pmul<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmul<Packet4f>(const Packet4f& a, const Packet4f& b) { return vmulq_f32(a,b); }$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmul<Packet4i>(const Packet4i& a, const Packet4i& b) { return vmulq_s32(a,b); }$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmul(const Packet1cd& a, const Packet1cd& b) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmul(const Packet1cd& x, const Packet2d& y) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmul(const Packet2d& x, const Packet1cd& y) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& a, const Packet2cf& b) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& x, const Packet4f& y) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet4f& x, const Packet2cf& y) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pmul<Packet1cd>(const Packet1cd& a, const Packet1cd& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pmul<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pmul<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_mul_pd(a,b); }$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmul<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_mul_ps(a,b); }$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmul<Packet4i>(const Packet4i& a, const Packet4i& b)$/;"	f	namespace:Eigen::internal
pmul	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const RealScalar& x, const Scalar& y) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const Scalar& x, const RealScalar& y) const$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const Scalar& x, const Scalar& y) const { return internal::pmul(x,y); }$/;"	f	struct:Eigen::internal::conj_helper
pmul	include/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const Scalar& x, const Scalar& y) const$/;"	f	struct:Eigen::internal::conj_helper
pnegate	include/Eigen/src/Core/GenericPacketMath.h	/^pnegate(const Packet& a) { return -a; }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pnegate(const Packet2cf& a) { return Packet2cf(pnegate(a.v)); }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pnegate(const Packet4f& a) { return psub<Packet4f>(p4f_ZERO, a); }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pnegate(const Packet4i& a) { return psub<Packet4i>(p4i_ZERO, a); }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pnegate(const Packet2cf& a) { return Packet2cf(pnegate<Packet4f>(a.v)); }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pnegate(const Packet4f& a) { return vnegq_f32(a); }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pnegate(const Packet4i& a) { return vnegq_s32(a); }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pnegate(const Packet1cd& a) { return Packet1cd(pnegate(a.v)); }$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pnegate(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pnegate(const Packet2d& a)$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pnegate(const Packet4f& a)$/;"	f	namespace:Eigen::internal
pnegate	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pnegate(const Packet4i& a)$/;"	f	namespace:Eigen::internal
pointAt	include/Eigen/src/Geometry/ParametrizedLine.h	/^ParametrizedLine<_Scalar, _AmbientDim,_Options>::pointAt(const _Scalar& t) const$/;"	f	class:Eigen::ParametrizedLine
pointer	include/Eigen/src/Core/util/Memory.h	/^    typedef T*        pointer;$/;"	t	class:Eigen::aligned_allocator
pointer	include/Eigen/src/StlSupport/details.h	/^    typedef T*        pointer;$/;"	t	class:Eigen::aligned_allocator_indirection
por	include/Eigen/src/Core/GenericPacketMath.h	/^por(const Packet& a, const Packet& b) { return a | b; }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf por    <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_or(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f por<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_or(a, b); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i por<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_or(a, b); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf por    <Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f por<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i por<Packet4i>(const Packet4i& a, const Packet4i& b) { return vorrq_s32(a,b); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd por    <Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_or_pd(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf por    <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_or_ps(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d por<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_or_pd(a,b); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f por<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_or_ps(a,b); }$/;"	f	namespace:Eigen::internal
por	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i por<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_or_si128(a,b); }$/;"	f	namespace:Eigen::internal
pow	include/Eigen/src/Core/GlobalFunctions.h	/^  pow(const Eigen::ArrayBase<Derived>& x, const Eigen::ArrayBase<Derived>& exponents) $/;"	f	namespace:Eigen
pow	include/Eigen/src/Core/GlobalFunctions.h	/^  pow(const Eigen::ArrayBase<Derived>& x, const typename Derived::Scalar& exponent) {$/;"	f	namespace:Eigen
pow	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(pow, Scalar) pow(const Scalar& x, const Scalar& y)$/;"	f	namespace:Eigen::numext
pow	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::pow(const Scalar& exponent) const$/;"	f	class:Eigen::Cwise
pow	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^pow(const Scalar& exponent) const$/;"	f
pow_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct pow_default_impl$/;"	s	namespace:Eigen::internal
pow_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct pow_default_impl<Scalar, true>$/;"	s	namespace:Eigen::internal
pow_impl	include/Eigen/src/Core/MathFunctions.h	/^struct pow_impl : pow_default_impl<Scalar, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:Eigen::internal
pow_retval	include/Eigen/src/Core/MathFunctions.h	/^struct pow_retval$/;"	s	namespace:Eigen::internal
precision	include/Eigen/src/Core/IO.h	/^  int precision;$/;"	m	struct:Eigen::IOFormat
precision	include/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T precision () { return NumTraits<T>::dummy_precision(); }$/;"	f	namespace:Eigen
preconditioner	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Preconditioner& preconditioner() { return m_preconditioner; }$/;"	f	class:Eigen::IterativeSolverBase
preconditioner	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  const Preconditioner& preconditioner() const { return m_preconditioner; }$/;"	f	class:Eigen::IterativeSolverBase
predux	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar predux(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_max_op
predux	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar predux(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_min_op
predux	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar predux(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_sum_op
predux	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type predux(const Packet& a) const$/;"	f	struct:Eigen::internal::scalar_product_op
predux	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux(const Packet& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<double> predux<Packet1cd>(const Packet1cd& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux<Packet2d>(const Packet2d& a) { return pfirst(_mm_hadd_pd(a, a)); }$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux<Packet2d>(const Packet2d& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux_max(const Packet& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_max<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_max<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_max<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_max<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux_max<Packet2d>(const Packet2d& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_max<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_max	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_max<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux_min(const Packet& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_min<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_min<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_min<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_min<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux_min<Packet2d>(const Packet2d& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_min<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_min	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_min<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux_mul(const Packet& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux_mul<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_mul<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_mul<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux_mul<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_mul<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_mul<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<double> predux_mul<Packet1cd>(const Packet1cd& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux_mul<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux_mul<Packet2d>(const Packet2d& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_mul<Packet4f>(const Packet4f& a)$/;"	f	namespace:Eigen::internal
predux_mul	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_mul<Packet4i>(const Packet4i& a)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/GenericPacketMath.h	/^preduxp(const Packet* vecs) { return vecs[0]; }$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preduxp<Packet2cf>(const Packet2cf* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preduxp<Packet4f>(const Packet4f* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preduxp<Packet4i>(const Packet4i* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preduxp<Packet2cf>(const Packet2cf* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preduxp<Packet4f>(const Packet4f* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preduxp<Packet4i>(const Packet4i* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd preduxp<Packet1cd>(const Packet1cd* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preduxp<Packet2cf>(const Packet2cf* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d preduxp<Packet2d>(const Packet2d* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preduxp<Packet4f>(const Packet4f* vecs)$/;"	f	namespace:Eigen::internal
preduxp	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preduxp<Packet4i>(const Packet4i* vecs)$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Scalar> inline void prefetch(const Scalar* addr)$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<float> >(const std::complex<float> *   addr) { vec_dstt((float *)addr, DST_CTRL(2,2,32), DST_CHAN); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<float>(const float* addr) { vec_dstt(addr, DST_CTRL(2,2,32), DST_CHAN); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<int>(const int*     addr) { vec_dstt(addr, DST_CTRL(2,2,32), DST_CHAN); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<float> >(const std::complex<float> *   addr) { EIGEN_ARM_PREFETCH((float *)addr); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<float>(const float* addr) { EIGEN_ARM_PREFETCH(addr); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<int>(const int*     addr) { EIGEN_ARM_PREFETCH(addr); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<double> >(const std::complex<double> *   addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<float> >(const std::complex<float> *   addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<double>(const double* addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<float>(const float*   addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:Eigen::internal
prefetch	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<int>(const int*       addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:Eigen::internal
prerotate	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::prerotate(const RotationType& rotation)$/;"	f	class:Eigen::Transform
prerotate	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::prerotate(const RotationType& rotation)$/;"	f	class:Eigen::Transform
prescale	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::prescale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
prescale	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::prescale(Scalar s)$/;"	f	class:Eigen::Transform
prescale	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::prescale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
prescale	include/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::prescale(const Scalar& s)$/;"	f	class:Eigen::Transform
preshear	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::preshear(Scalar sx, Scalar sy)$/;"	f	class:Eigen::Transform
preshear	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::preshear(const Scalar& sx, const Scalar& sy)$/;"	f	class:Eigen::Transform
pretranslate	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::pretranslate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
pretranslate	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::pretranslate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
prev	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index prev ;  \/* previous column in degree list, if col is in a *\/$/;"	m	union:internal::colamd_col::__anon403
preverse	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline Packet preverse(const Packet& a)$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preverse(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preverse(const Packet4f& a) { return (Packet4f)vec_perm((Packet16uc)a,(Packet16uc)a, p16uc_REVERSE); }$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preverse(const Packet4i& a) { return (Packet4i)vec_perm((Packet16uc)a,(Packet16uc)a, p16uc_REVERSE); }$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preverse(const Packet2cf& a)$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preverse(const Packet4f& a) {$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preverse(const Packet4i& a) {$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd preverse(const Packet1cd& a) { return a; }$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preverse(const Packet2cf& a) { return Packet2cf(_mm_castpd_ps(preverse(_mm_castps_pd(a.v)))); }$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d preverse(const Packet2d& a)$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preverse(const Packet4f& a)$/;"	f	namespace:Eigen::internal
preverse	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preverse(const Packet4i& a)$/;"	f	namespace:Eigen::internal
print_graph	include/base/graph.h	/^			void Graph<T>::print_graph() $/;"	f	class:msd::base::Graph
print_graph	include/base/graph.h	/^			void Graph<T>::print_graph() const$/;"	f	class:msd::base::Graph
print_matrix	include/Eigen/src/Core/IO.h	/^std::ostream & print_matrix(std::ostream & s, const Derived& _m, const IOFormat& fmt)$/;"	f	namespace:Eigen::internal
prod	include/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::prod() const$/;"	f	class:Eigen::DenseBase
prod	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_prod>::Type prod() const$/;"	f	class:Eigen::VectorwiseOp
product_coeff_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<DefaultTraversal, 0, Lhs, Rhs, RetScalar>$/;"	s	namespace:Eigen::internal
product_coeff_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<DefaultTraversal, Dynamic, Lhs, Rhs, RetScalar>$/;"	s	namespace:Eigen::internal
product_coeff_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<DefaultTraversal, UnrollingIndex, Lhs, Rhs, RetScalar>$/;"	s	namespace:Eigen::internal
product_coeff_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<InnerVectorizedTraversal, Dynamic, Lhs, Rhs, RetScalar>$/;"	s	namespace:Eigen::internal
product_coeff_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<InnerVectorizedTraversal, UnrollingIndex, Lhs, Rhs, RetScalar>$/;"	s	namespace:Eigen::internal
product_coeff_vectorized_dyn_selector	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector$/;"	s	namespace:Eigen::internal
product_coeff_vectorized_dyn_selector	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector<Lhs,Rhs,1,1>$/;"	s	namespace:Eigen::internal
product_coeff_vectorized_dyn_selector	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector<Lhs,Rhs,1,RhsCols>$/;"	s	namespace:Eigen::internal
product_coeff_vectorized_dyn_selector	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector<Lhs,Rhs,LhsRows,1>$/;"	s	namespace:Eigen::internal
product_coeff_vectorized_unroller	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_unroller$/;"	s	namespace:Eigen::internal
product_coeff_vectorized_unroller	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_unroller<0, Lhs, Rhs, Packet>$/;"	s	namespace:Eigen::internal
product_packet_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<ColMajor, 0, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:Eigen::internal
product_packet_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<ColMajor, Dynamic, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:Eigen::internal
product_packet_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<ColMajor, UnrollingIndex, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:Eigen::internal
product_packet_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<RowMajor, 0, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:Eigen::internal
product_packet_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<RowMajor, Dynamic, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:Eigen::internal
product_packet_impl	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<RowMajor, UnrollingIndex, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:Eigen::internal
product_selfadjoint_matrix	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,LhsSelfAdjoint,ConjugateLhs, RhsStorageOrder,RhsSelfAdjoint,ConjugateRhs,RowMajor>$/;"	s	namespace:Eigen::internal
product_selfadjoint_matrix	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,false,ConjugateLhs, RhsStorageOrder,true,ConjugateRhs,ColMajor>$/;"	s	namespace:Eigen::internal
product_selfadjoint_matrix	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,true,ConjugateLhs, RhsStorageOrder,false,ConjugateRhs,ColMajor>$/;"	s	namespace:Eigen::internal
product_size_category	include/Eigen/src/Core/GeneralProduct.h	/^template<int Size, int MaxSize> struct product_size_category$/;"	s	namespace:Eigen::internal
product_triangular_matrix_matrix	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct product_triangular_matrix_matrix<Scalar,Index,Mode,LhsIsTriangular,$/;"	s	namespace:Eigen::internal
product_triangular_matrix_matrix	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct product_triangular_matrix_matrix<Scalar,Index,Mode,false,$/;"	s	namespace:Eigen::internal
product_triangular_matrix_matrix	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct product_triangular_matrix_matrix<Scalar,Index,Mode,true,$/;"	s	namespace:Eigen::internal
product_triangular_matrix_matrix_trmm	include/Eigen/src/Core/products/TriangularMatrixMatrix_MKL.h	/^struct product_triangular_matrix_matrix_trmm :$/;"	s	namespace:Eigen::internal
product_type	include/Eigen/src/Core/GeneralProduct.h	/^template<typename Lhs, typename Rhs> struct product_type$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    1,    1>      { enum { ret = InnerProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Large,Large>  { enum { ret = GemvProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Large,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Small,Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,1,    Large>  { enum { ret = GemvProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Large,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Large,Small>  { enum { ret = GemmProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Small,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Small,Small>  { enum { ret = GemmProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small, Large, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,1,    Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Large,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Large,Small>  { enum { ret = GemmProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Small,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<int Depth>     struct product_type_selector<1,    1,    Depth>  { enum { ret = InnerProduct }; };$/;"	s	namespace:Eigen::internal
product_type_selector	include/Eigen/src/Core/GeneralProduct.h	/^template<int M, int N>  struct product_type_selector<M,N,1>              { enum { ret = OuterProduct }; };$/;"	s	namespace:Eigen::internal
projection	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline VectorType projection(const VectorType& p) const { return p - signedDistance(p) * normal(); }$/;"	f	class:Eigen::Hyperplane
projection	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType projection(const VectorType& p) const$/;"	f	class:Eigen::ParametrizedLine
projection	include/Eigen/src/Geometry/Hyperplane.h	/^  inline VectorType projection(const VectorType& p) const { return p - signedDistance(p) * normal(); }$/;"	f	class:Eigen::Hyperplane
projection	include/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType projection(const VectorType& p) const$/;"	f	class:Eigen::ParametrizedLine
projective_transform_inverse	include/Eigen/src/Geometry/Transform.h	/^struct projective_transform_inverse$/;"	s	namespace:Eigen::internal
projective_transform_inverse	include/Eigen/src/Geometry/Transform.h	/^struct projective_transform_inverse<TransformType, Projective>$/;"	s	namespace:Eigen::internal
promote_index_type	include/Eigen/src/Core/util/XprHelper.h	/^struct promote_index_type$/;"	s	namespace:Eigen::internal
promote_storage_type	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^template<> struct promote_storage_type<Dense,Sparse>$/;"	s	namespace:Eigen::internal
promote_storage_type	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^template<> struct promote_storage_type<Sparse,Dense>$/;"	s	namespace:Eigen::internal
prune	include/Eigen/src/SparseCore/CompressedStorage.h	/^    void prune(const Scalar& reference, const RealScalar& epsilon = NumTraits<RealScalar>::dummy_precision())$/;"	f	class:Eigen::internal::CompressedStorage
prune	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void prune(const KeepFunc& keep = KeepFunc())$/;"	f	class:Eigen::SparseMatrix
prune	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void prune(const Scalar& reference, const RealScalar& epsilon = NumTraits<RealScalar>::dummy_precision())$/;"	f	class:Eigen::SparseMatrix
prune	include/Eigen/src/SparseCore/SparseVector.h	/^    void prune(const Scalar& reference, const RealScalar& epsilon = NumTraits<RealScalar>::dummy_precision())$/;"	f	class:Eigen::SparseVector
pruneL	include/Eigen/src/SparseLU/SparseLU_pruneL.h	/^void SparseLUImpl<Scalar,Index>::pruneL(const Index jcol, const IndexVector& perm_r, const Index pivrow, const Index nseg, const IndexVector& segrep, BlockIndexVector repfnz, IndexVector& xprune, GlobalLU_t& glu)$/;"	f	class:Eigen::internal::SparseLUImpl
pruned	include/Eigen/src/SparseCore/SparseProduct.h	/^    SparseSparseProduct pruned(const Scalar& reference = 0, const RealScalar& epsilon = NumTraits<RealScalar>::dummy_precision()) const$/;"	f	class:Eigen::SparseSparseProduct
pset1	include/Eigen/src/Core/GenericPacketMath.h	/^pset1(const typename unpacket_traits<Packet>::type& a) { return a; }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pset1<Packet2cf>(const std::complex<float>&  from)$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pset1<Packet4f>(const float&  from) {$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pset1<Packet4i>(const int&    from)   {$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pset1<Packet2cf>(const std::complex<float>&  from)$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pset1<Packet4f>(const float&  from) { return vdupq_n_f32(from); }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pset1<Packet4i>(const int&    from)   { return vdupq_n_s32(from); }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pset1<Packet1cd>(const std::complex<double>&  from)$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pset1<Packet2cf>(const std::complex<float>&  from)$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pset1<Packet2d>(const double& from) { return _mm_set1_pd(from); }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pset1<Packet2d>(const double& from) { return _mm_set_pd(from,from); }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pset1<Packet4f>(const float&  from) { return _mm_set1_ps(from); }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pset1<Packet4f>(const float&  from) { return _mm_set_ps(from,from,from,from); }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pset1<Packet4i>(const int&    from) { return _mm_set1_epi32(from); }$/;"	f	namespace:Eigen::internal
pset1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pset1<Packet4i>(const int&    from) { return _mm_set_epi32(from,from,from,from); }$/;"	f	namespace:Eigen::internal
pseudoEigenvalueMatrix	include/Eigen/src/Eigenvalues/EigenSolver.h	/^MatrixType EigenSolver<MatrixType>::pseudoEigenvalueMatrix() const$/;"	f	class:Eigen::EigenSolver
pseudoEigenvectors	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    const MatrixType& pseudoEigenvectors() const$/;"	f	class:Eigen::EigenSolver
psin	include/Eigen/src/Core/GenericPacketMath.h	/^Packet psin(const Packet& a) { using std::sin; return sin(a); }$/;"	f	namespace:Eigen::internal
psin	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f psin<Packet4f>(const Packet4f& _x)$/;"	f	namespace:Eigen::internal
psqrt	include/Eigen/src/Core/GenericPacketMath.h	/^Packet psqrt(const Packet& a) { using std::sqrt; return sqrt(a); }$/;"	f	namespace:Eigen::internal
psqrt	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f psqrt<Packet4f>(const Packet4f& _x)$/;"	f	namespace:Eigen::internal
psqrt	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^template<> EIGEN_STRONG_INLINE Packet2d psqrt<Packet2d>(const Packet2d& x) { return _mm_sqrt_pd(x); }$/;"	f	namespace:Eigen::internal
psqrt	include/Eigen/src/Core/arch/SSE/MathFunctions.h	/^template<> EIGEN_STRONG_INLINE Packet4f psqrt<Packet4f>(const Packet4f& x) { return _mm_sqrt_ps(x); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Scalar, typename Packet> inline void pstore(Scalar* to, const Packet& from)$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_ALIGNED_STORE pstore((float*)to, from.v); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<float>(float*   to, const Packet4f& from) { EIGEN_DEBUG_ALIGNED_STORE vec_st(from, 0, to); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<int>(int*       to, const Packet4i& from) { EIGEN_DEBUG_ALIGNED_STORE vec_st(from, 0, to); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_ALIGNED_STORE pstore((float*)to, from.v); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<float>(float*   to, const Packet4f& from) { EIGEN_DEBUG_ALIGNED_STORE vst1q_f32(to, from); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<int>(int*       to, const Packet4i& from) { EIGEN_DEBUG_ALIGNED_STORE vst1q_s32(to, from); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<double> >(std::complex<double> *   to, const Packet1cd& from) { EIGEN_DEBUG_ALIGNED_STORE pstore((double*)to, from.v); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_ALIGNED_STORE pstore(&numext::real_ref(*to), from.v); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<double>(double* to, const Packet2d& from) { EIGEN_DEBUG_ALIGNED_STORE _mm_store_pd(to, from); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<float>(float*   to, const Packet4f& from) { EIGEN_DEBUG_ALIGNED_STORE _mm_store_ps(to, from); }$/;"	f	namespace:Eigen::internal
pstore	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<int>(int*       to, const Packet4i& from) { EIGEN_DEBUG_ALIGNED_STORE _mm_store_si128(reinterpret_cast<Packet4i*>(to), from); }$/;"	f	namespace:Eigen::internal
pstore1	include/Eigen/src/Core/GenericPacketMath.h	/^inline void pstore1(typename unpacket_traits<Packet>::type* to, const typename unpacket_traits<Packet>::type& a)$/;"	f	namespace:Eigen::internal
pstore1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore1<Packet2d>(double* to, const double& a)$/;"	f	namespace:Eigen::internal
pstore1	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore1<Packet4f>(float* to, const float& a)$/;"	f	namespace:Eigen::internal
pstoret	include/Eigen/src/Core/GenericPacketMath.h	/^inline void pstoret(Scalar* to, const Packet& from)$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/GenericPacketMath.h	/^template<typename Scalar, typename Packet> inline void pstoreu(Scalar* to, const Packet& from)$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((float*)to, from.v); }$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<float>(float*  to, const Packet4f& from)$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<int>(int*      to, const Packet4i& from)$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((float*)to, from.v); }$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<float>(float*  to, const Packet4f& from) { EIGEN_DEBUG_UNALIGNED_STORE vst1q_f32(to, from); }$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<int>(int*      to, const Packet4i& from) { EIGEN_DEBUG_UNALIGNED_STORE vst1q_s32(to, from); }$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<double> >(std::complex<double> *   to, const Packet1cd& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((double*)to, from.v); }$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu(&numext::real_ref(*to), from.v); }$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<double>(double* to, const Packet2d& from) {$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<float>(float*  to, const Packet4f& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu(reinterpret_cast<double*>(to), _mm_castps_pd(from)); }$/;"	f	namespace:Eigen::internal
pstoreu	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<int>(int*      to, const Packet4i& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu(reinterpret_cast<double*>(to), _mm_castsi128_pd(from)); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/GenericPacketMath.h	/^psub(const Packet& a,$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf psub<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_sub(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f psub<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_sub(a,b); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i psub<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_sub(a,b); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf psub<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(psub<Packet4f>(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f psub<Packet4f>(const Packet4f& a, const Packet4f& b) { return vsubq_f32(a,b); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i psub<Packet4i>(const Packet4i& a, const Packet4i& b) { return vsubq_s32(a,b); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd psub<Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_sub_pd(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf psub<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_sub_ps(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d psub<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_sub_pd(a,b); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f psub<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_sub_ps(a,b); }$/;"	f	namespace:Eigen::internal
psub	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i psub<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_sub_epi32(a,b); }$/;"	f	namespace:Eigen::internal
ptan	include/Eigen/src/Core/GenericPacketMath.h	/^Packet ptan(const Packet& a) { using std::tan; return tan(a); }$/;"	f	namespace:Eigen::internal
punpackp	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^EIGEN_STRONG_INLINE void punpackp(Packet4f* vecs)$/;"	f	namespace:Eigen::internal
pushDownZero	include/Eigen/src/Eigenvalues/RealQZ.h	/^    inline void RealQZ<MatrixType>::pushDownZero(Index z, Index f, Index l)$/;"	f	class:Eigen::RealQZ
push_back	include/Eigen/src/StlSupport/StdDeque.h	/^  void push_back(const value_type& x)$/;"	f	class:std::deque
push_back	include/Eigen/src/StlSupport/StdList.h	/^    void push_back(const value_type& x)$/;"	f	class:std::list
push_back	include/Eigen/src/StlSupport/StdVector.h	/^  void push_back(const value_type& x)$/;"	f	class:std::vector
push_back	include/base/graph.h	/^			inline void Graph<T>::push_back(const T& from, const T& to)$/;"	f	class:msd::base::Graph
push_front	include/Eigen/src/StlSupport/StdDeque.h	/^  void push_front(const value_type& x)$/;"	f	class:std::deque
pxor	include/Eigen/src/Core/GenericPacketMath.h	/^pxor(const Packet& a, const Packet& b) { return a ^ b; }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pxor   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_xor(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pxor<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_xor(a, b); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pxor<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_xor(a, b); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pxor   <Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pxor<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pxor<Packet4i>(const Packet4i& a, const Packet4i& b) { return veorq_s32(a,b); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pxor   <Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_xor_pd(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pxor   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_xor_ps(a.v,b.v)); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pxor<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_xor_pd(a,b); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pxor<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_xor_ps(a,b); }$/;"	f	namespace:Eigen::internal
pxor	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pxor<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_xor_si128(a,b); }$/;"	f	namespace:Eigen::internal
qr	include/Eigen/src/Eigen2Support/QR.h	/^MatrixBase<Derived>::qr() const$/;"	f	class:Eigen::MatrixBase
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^> struct qr_preconditioner_impl {};$/;"	s	namespace:Eigen::internal
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^class qr_preconditioner_impl<MatrixType, ColPivHouseholderQRPreconditioner, PreconditionIfMoreColsThanRows, true>$/;"	c	namespace:Eigen::internal
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^class qr_preconditioner_impl<MatrixType, ColPivHouseholderQRPreconditioner, PreconditionIfMoreRowsThanCols, true>$/;"	c	namespace:Eigen::internal
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^class qr_preconditioner_impl<MatrixType, FullPivHouseholderQRPreconditioner, PreconditionIfMoreColsThanRows, true>$/;"	c	namespace:Eigen::internal
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^class qr_preconditioner_impl<MatrixType, FullPivHouseholderQRPreconditioner, PreconditionIfMoreRowsThanCols, true>$/;"	c	namespace:Eigen::internal
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^class qr_preconditioner_impl<MatrixType, HouseholderQRPreconditioner, PreconditionIfMoreColsThanRows, true>$/;"	c	namespace:Eigen::internal
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^class qr_preconditioner_impl<MatrixType, HouseholderQRPreconditioner, PreconditionIfMoreRowsThanCols, true>$/;"	c	namespace:Eigen::internal
qr_preconditioner_impl	include/Eigen/src/SVD/JacobiSVD.h	/^class qr_preconditioner_impl<MatrixType, QRPreconditioner, Case, false>$/;"	c	namespace:Eigen::internal
qr_preconditioner_should_do_anything	include/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_should_do_anything$/;"	s	namespace:Eigen::internal
quat_product	include/Eigen/src/Geometry/Quaternion.h	/^template<int Arch, class Derived1, class Derived2, typename Scalar, int _Options> struct quat_product$/;"	s	namespace:Eigen::internal
quat_product	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^struct quat_product<Architecture::SSE, Derived, OtherDerived, double, Aligned>$/;"	s	namespace:Eigen::internal
quat_product	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^struct quat_product<Architecture::SSE, Derived, OtherDerived, float, Aligned>$/;"	s	namespace:Eigen::internal
quaternionbase_assign_impl	include/Eigen/src/Geometry/Quaternion.h	/^struct quaternionbase_assign_impl<Other,3,3>$/;"	s	namespace:Eigen::internal
quaternionbase_assign_impl	include/Eigen/src/Geometry/Quaternion.h	/^struct quaternionbase_assign_impl<Other,4,1>$/;"	s	namespace:Eigen::internal
queryCacheSizes	include/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes(int& l1, int& l2, int& l3)$/;"	f	namespace:Eigen::internal
queryCacheSizes_amd	include/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_amd(int& l1, int& l2, int& l3)$/;"	f	namespace:Eigen::internal
queryCacheSizes_intel	include/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_intel(int& l1, int& l2, int& l3, int max_std_funcs)$/;"	f	namespace:Eigen::internal
queryCacheSizes_intel_codes	include/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_intel_codes(int& l1, int& l2, int& l3)$/;"	f	namespace:Eigen::internal
queryCacheSizes_intel_direct	include/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_intel_direct(int& l1, int& l2, int& l3)$/;"	f	namespace:Eigen::internal
queryL1CacheSize	include/Eigen/src/Core/util/Memory.h	/^inline int queryL1CacheSize()$/;"	f	namespace:Eigen::internal
queryTopLevelCacheSize	include/Eigen/src/Core/util/Memory.h	/^inline int queryTopLevelCacheSize()$/;"	f	namespace:Eigen::internal
random	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random()$/;"	f	namespace:Eigen::internal
random	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random(const Scalar& x, const Scalar& y)$/;"	f	namespace:Eigen::internal
random_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl {};$/;"	s	namespace:Eigen::internal
random_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl<Scalar, false, false>$/;"	s	namespace:Eigen::internal
random_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl<Scalar, false, true>$/;"	s	namespace:Eigen::internal
random_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl<Scalar, true, false>$/;"	s	namespace:Eigen::internal
random_impl	include/Eigen/src/Core/MathFunctions.h	/^struct random_impl : random_default_impl<Scalar, NumTraits<Scalar>::IsComplex, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:Eigen::internal
random_impl	include/Eigen/src/Core/MathFunctions.h	/^template<> struct random_impl<bool>$/;"	s	namespace:Eigen::internal
random_retval	include/Eigen/src/Core/MathFunctions.h	/^struct random_retval$/;"	s	namespace:Eigen::internal
rank	include/Eigen/src/LU/FullPivLU.h	/^    inline Index rank() const$/;"	f	class:Eigen::FullPivLU
rank	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index rank() const$/;"	f	class:Eigen::ColPivHouseholderQR
rank	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index rank() const$/;"	f	class:Eigen::FullPivHouseholderQR
rank	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    Index rank() const$/;"	f	class:Eigen::SPQR
rank	include/Eigen/src/SVD/JacobiSVD.h	/^    inline Index rank() const$/;"	f	class:Eigen::JacobiSVD
rank	include/Eigen/src/SparseQR/SparseQR.h	/^    Index rank() const $/;"	f	class:Eigen::SparseQR
rank	include/Eigen/src/misc/Image.h	/^  inline Index rank() const { return m_rank; }$/;"	f	struct:Eigen::internal::image_retval_base
rank	include/Eigen/src/misc/Kernel.h	/^  inline Index rank() const { return m_rank; }$/;"	f	struct:Eigen::internal::kernel_retval_base
rankUpdate	include/Eigen/src/Cholesky/LDLT.h	/^LDLT<MatrixType,_UpLo>& LDLT<MatrixType,_UpLo>::rankUpdate(const MatrixBase<Derived>& w, const typename NumTraits<typename MatrixType::Scalar>::Real& sigma)$/;"	f	class:Eigen::LDLT
rankUpdate	include/Eigen/src/Cholesky/LLT.h	/^  static typename MatrixType::Index rankUpdate(MatrixType& mat, const VectorType& vec, const RealScalar& sigma)$/;"	f	struct:Eigen::internal::llt_inplace
rankUpdate	include/Eigen/src/Cholesky/LLT.h	/^LLT<_MatrixType,_UpLo> LLT<_MatrixType,_UpLo>::rankUpdate(const VectorType& v, const RealScalar& sigma)$/;"	f	class:Eigen::LLT
rankUpdate	include/Eigen/src/Core/products/SelfadjointProduct.h	/^::rankUpdate(const MatrixBase<DerivedU>& u, const Scalar& alpha)$/;"	f	class:Eigen::SelfAdjointView
rankUpdate	include/Eigen/src/Core/products/SelfadjointRank2Update.h	/^::rankUpdate(const MatrixBase<DerivedU>& u, const MatrixBase<DerivedV>& v, const Scalar& alpha)$/;"	f	class:Eigen::SelfAdjointView
rankUpdate	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^SparseSelfAdjointView<MatrixType,UpLo>::rankUpdate(const SparseMatrixBase<DerivedU>& u, const Scalar& alpha)$/;"	f	class:Eigen::SparseSelfAdjointView
rawMatrix	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline const CholMatrixType rawMatrix() const {$/;"	f	class:Eigen::SimplicialCholesky
read_file	include/base/reader_graph.h	/^			bool GraphReader<T>::read_file()$/;"	f	class:msd::base::GraphReader
read_file	include/base/reader_graph.h	/^			void WeightedReader<T>::read_file()$/;"	f	class:msd::base::WeightedReader
real	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(real, Scalar) real(const Scalar& x)$/;"	f	namespace:Eigen::numext
real	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^real() const { return derived(); }$/;"	f
real	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^real() { return derived(); }$/;"	f
real_2x2_jacobi_svd	include/Eigen/src/SVD/JacobiSVD.h	/^void real_2x2_jacobi_svd(const MatrixType& matrix, Index p, Index q,$/;"	f	namespace:Eigen::internal
real_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct real_default_impl$/;"	s	namespace:Eigen::internal
real_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct real_default_impl<Scalar,true>$/;"	s	namespace:Eigen::internal
real_impl	include/Eigen/src/Core/MathFunctions.h	/^template<typename Scalar> struct real_impl : real_default_impl<Scalar> {};$/;"	s	namespace:Eigen::internal
real_ref	include/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(real_ref, Scalar) real_ref(Scalar& x)$/;"	f	namespace:Eigen::numext
real_ref	include/Eigen/src/Core/MathFunctions.h	/^inline typename internal::add_const_on_value_type< EIGEN_MATHFUNC_RETVAL(real_ref, Scalar) >::type real_ref(const Scalar& x)$/;"	f	namespace:Eigen::numext
real_ref_impl	include/Eigen/src/Core/MathFunctions.h	/^struct real_ref_impl$/;"	s	namespace:Eigen::internal
real_ref_retval	include/Eigen/src/Core/MathFunctions.h	/^struct real_ref_retval$/;"	s	namespace:Eigen::internal
real_retval	include/Eigen/src/Core/MathFunctions.h	/^struct real_retval$/;"	s	namespace:Eigen::internal
reallocate	include/Eigen/src/SparseCore/AmbiVector.h	/^    void reallocate(Index size)$/;"	f	class:Eigen::internal::AmbiVector
reallocate	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline void reallocate(size_t size)$/;"	f	class:Eigen::internal::CompressedStorage
reallocate	include/base/graph.h	/^			void Graph<T>::reallocate()$/;"	f	class:msd::base::Graph
reallocateSparse	include/Eigen/src/SparseCore/AmbiVector.h	/^    void reallocateSparse()$/;"	f	class:Eigen::internal::AmbiVector
rebind	include/Eigen/src/Core/util/Memory.h	/^    struct rebind$/;"	s	class:Eigen::aligned_allocator
rebind	include/Eigen/src/StlSupport/details.h	/^    struct rebind$/;"	s	class:Eigen::aligned_allocator_indirection
reconstructedMatrix	include/Eigen/src/Cholesky/LDLT.h	/^MatrixType LDLT<MatrixType,_UpLo>::reconstructedMatrix() const$/;"	f	class:Eigen::LDLT
reconstructedMatrix	include/Eigen/src/Cholesky/LLT.h	/^MatrixType LLT<MatrixType,_UpLo>::reconstructedMatrix() const$/;"	f	class:Eigen::LLT
reconstructedMatrix	include/Eigen/src/LU/FullPivLU.h	/^MatrixType FullPivLU<MatrixType>::reconstructedMatrix() const$/;"	f	class:Eigen::FullPivLU
reconstructedMatrix	include/Eigen/src/LU/PartialPivLU.h	/^MatrixType PartialPivLU<MatrixType>::reconstructedMatrix() const$/;"	f	class:Eigen::PartialPivLU
reduceToTriangularForm	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^void ComplexSchur<MatrixType>::reduceToTriangularForm(bool computeU)$/;"	f	class:Eigen::ComplexSchur
redux	include/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::redux(const Func& func) const$/;"	f	class:Eigen::DenseBase
redux	include/Eigen/src/Core/VectorwiseOp.h	/^    redux(const BinaryOp& func = BinaryOp()) const$/;"	f	class:Eigen::VectorwiseOp
redux_impl	include/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, DefaultTraversal, NoUnrolling>$/;"	s	namespace:Eigen::internal
redux_impl	include/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, LinearVectorizedTraversal, CompleteUnrolling>$/;"	s	namespace:Eigen::internal
redux_impl	include/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, LinearVectorizedTraversal, NoUnrolling>$/;"	s	namespace:Eigen::internal
redux_impl	include/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, SliceVectorizedTraversal, NoUnrolling>$/;"	s	namespace:Eigen::internal
redux_impl	include/Eigen/src/Core/Redux.h	/^struct redux_impl<Func,Derived, DefaultTraversal, CompleteUnrolling>$/;"	s	namespace:Eigen::internal
redux_novec_unroller	include/Eigen/src/Core/Redux.h	/^struct redux_novec_unroller$/;"	s	namespace:Eigen::internal
redux_novec_unroller	include/Eigen/src/Core/Redux.h	/^struct redux_novec_unroller<Func, Derived, Start, 0>$/;"	s	namespace:Eigen::internal
redux_novec_unroller	include/Eigen/src/Core/Redux.h	/^struct redux_novec_unroller<Func, Derived, Start, 1>$/;"	s	namespace:Eigen::internal
redux_traits	include/Eigen/src/Core/Redux.h	/^struct redux_traits$/;"	s	namespace:Eigen::internal
redux_vec_unroller	include/Eigen/src/Core/Redux.h	/^struct redux_vec_unroller$/;"	s	namespace:Eigen::internal
redux_vec_unroller	include/Eigen/src/Core/Redux.h	/^struct redux_vec_unroller<Func, Derived, Start, 1>$/;"	s	namespace:Eigen::internal
reference	include/Eigen/src/Core/util/Memory.h	/^    typedef T&        reference;$/;"	t	class:Eigen::aligned_allocator
reference	include/Eigen/src/SparseCore/SparseMatrix.h	/^    Scalar reference;$/;"	m	struct:Eigen::SparseMatrix::default_prunning_func
reference	include/Eigen/src/StlSupport/details.h	/^    typedef T&        reference;$/;"	t	class:Eigen::aligned_allocator_indirection
relax	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index relax; \/\/ To control degree of relaxing supernodes. If the number of nodes (columns) $/;"	m	struct:Eigen::internal::perfvalues
relax_snode	include/Eigen/src/SparseLU/SparseLU_relax_snode.h	/^void SparseLUImpl<Scalar,Index>::relax_snode (const Index n, IndexVector& et, const Index relax_columns, IndexVector& descendants, IndexVector& relax_end)$/;"	f	class:Eigen::internal::SparseLUImpl
remove_all	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all { typedef T type; };$/;"	s	namespace:Eigen::internal
remove_all	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const&>  { typedef typename remove_all<T>::type type; };$/;"	s	namespace:Eigen::internal
remove_all	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const*>  { typedef typename remove_all<T>::type type; };$/;"	s	namespace:Eigen::internal
remove_all	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T&>        { typedef typename remove_all<T>::type type; };$/;"	s	namespace:Eigen::internal
remove_all	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T*>        { typedef typename remove_all<T>::type type; };$/;"	s	namespace:Eigen::internal
remove_all	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<const T>   { typedef typename remove_all<T>::type type; };$/;"	s	namespace:Eigen::internal
remove_const	include/Eigen/src/Core/util/Meta.h	/^template <class T, unsigned int Size> struct remove_const<const T[Size]> { typedef T type[Size]; };$/;"	s	namespace:Eigen::internal
remove_const	include/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const { typedef T type; };$/;"	s	namespace:Eigen::internal
remove_const	include/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T> { typedef T type; };$/;"	s	namespace:Eigen::internal
remove_const	include/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T[]> { typedef T type[]; };$/;"	s	namespace:Eigen::internal
remove_pointer	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer { typedef T type; };$/;"	s	namespace:Eigen::internal
remove_pointer	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*> { typedef T type; };$/;"	s	namespace:Eigen::internal
remove_pointer	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	s	namespace:Eigen::internal
remove_reference	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference { typedef T type; };$/;"	s	namespace:Eigen::internal
remove_reference	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference<T&> { typedef T type; };$/;"	s	namespace:Eigen::internal
replicate	include/Eigen/src/Core/Replicate.h	/^DenseBase<Derived>::replicate() const$/;"	f	class:Eigen::DenseBase
replicate	include/Eigen/src/Core/Replicate.h	/^DenseBase<Derived>::replicate(Index rowFactor,Index colFactor) const$/;"	f	class:Eigen::DenseBase
replicate	include/Eigen/src/Core/Replicate.h	/^VectorwiseOp<ExpressionType,Direction>::replicate(Index factor) const$/;"	f	class:Eigen::VectorwiseOp
replicate	include/Eigen/src/Core/VectorwiseOp.h	/^    replicate(Index factor = Factor) const$/;"	f	class:Eigen::VectorwiseOp
res	include/Eigen/src/Core/Visitor.h	/^  Scalar res;$/;"	m	struct:Eigen::internal::coeff_visitor
reserve	include/Eigen/src/SparseCore/CompressedStorage.h	/^    void reserve(size_t size)$/;"	f	class:Eigen::internal::CompressedStorage
reserve	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void reserve(Index reserveSize)$/;"	f	class:Eigen::SparseMatrix
reserve	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void reserve(const SizesType& reserveSizes, const typename SizesType::Scalar& enableif =$/;"	f	class:Eigen::SparseMatrix
reserve	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void reserve(const SizesType& reserveSizes, const typename SizesType::value_type& enableif = typename SizesType::value_type())$/;"	f	class:Eigen::SparseMatrix
reserve	include/Eigen/src/SparseCore/SparseVector.h	/^    inline void reserve(Index reserveSize) { m_data.reserve(reserveSize); }$/;"	f	class:Eigen::SparseVector
reserveInnerVectors	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void reserveInnerVectors(const SizesType& reserveSizes)$/;"	f	class:Eigen::SparseMatrix
resize	include/Eigen/src/Core/ArrayWrapper.h	/^    void resize(Index nbRows, Index nbCols) { m_expression.const_cast_derived().resize(nbRows,nbCols); }$/;"	f	class:Eigen::ArrayWrapper
resize	include/Eigen/src/Core/ArrayWrapper.h	/^    void resize(Index nbRows, Index nbCols) { m_expression.const_cast_derived().resize(nbRows,nbCols); }$/;"	f	class:Eigen::MatrixWrapper
resize	include/Eigen/src/Core/ArrayWrapper.h	/^    void resize(Index newSize) { m_expression.const_cast_derived().resize(newSize); }$/;"	f	class:Eigen::ArrayWrapper
resize	include/Eigen/src/Core/ArrayWrapper.h	/^    void resize(Index newSize) { m_expression.const_cast_derived().resize(newSize); }$/;"	f	class:Eigen::MatrixWrapper
resize	include/Eigen/src/Core/DenseBase.h	/^    void resize(Index nbRows, Index nbCols)$/;"	f	class:Eigen::DenseBase
resize	include/Eigen/src/Core/DenseBase.h	/^    void resize(Index newSize)$/;"	f	class:Eigen::DenseBase
resize	include/Eigen/src/Core/DenseStorage.h	/^    EIGEN_STRONG_INLINE void resize(DenseIndex size, DenseIndex nbRows, DenseIndex)$/;"	f	class:Eigen::DenseStorage
resize	include/Eigen/src/Core/DenseStorage.h	/^    EIGEN_STRONG_INLINE void resize(DenseIndex size, DenseIndex, DenseIndex nbCols)$/;"	f	class:Eigen::DenseStorage
resize	include/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex, DenseIndex nbRows, DenseIndex nbCols) { m_rows = nbRows; m_cols = nbCols; }$/;"	f	class:Eigen::DenseStorage
resize	include/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex, DenseIndex nbRows, DenseIndex) { m_rows = nbRows; }$/;"	f	class:Eigen::DenseStorage
resize	include/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex, DenseIndex, DenseIndex nbCols) { m_cols = nbCols; }$/;"	f	class:Eigen::DenseStorage
resize	include/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex,DenseIndex,DenseIndex) {}$/;"	f	class:Eigen::DenseStorage
resize	include/Eigen/src/Core/DenseStorage.h	/^    void resize(DenseIndex size, DenseIndex nbRows, DenseIndex nbCols)$/;"	f	class:Eigen::DenseStorage
resize	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline void resize(Index size) { m_diagonal.resize(size); }$/;"	f	class:Eigen::DiagonalMatrix
resize	include/Eigen/src/Core/PermutationMatrix.h	/^    inline void resize(Index newSize)$/;"	f	class:Eigen::PermutationBase
resize	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void resize(Index nbRows, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
resize	include/Eigen/src/Core/PlainObjectBase.h	/^    inline void resize(Index nbRows, NoChange_t)$/;"	f	class:Eigen::PlainObjectBase
resize	include/Eigen/src/Core/PlainObjectBase.h	/^    inline void resize(Index size)$/;"	f	class:Eigen::PlainObjectBase
resize	include/Eigen/src/Core/PlainObjectBase.h	/^    inline void resize(NoChange_t, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
resize	include/Eigen/src/Core/Transpositions.h	/^    inline void resize(int newSize)$/;"	f	class:Eigen::TranspositionsBase
resize	include/Eigen/src/SparseCore/AmbiVector.h	/^    void resize(Index size)$/;"	f	class:Eigen::internal::AmbiVector
resize	include/Eigen/src/SparseCore/CompressedStorage.h	/^    void resize(size_t size, double reserveSizeFactor = 0)$/;"	f	class:Eigen::internal::CompressedStorage
resize	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void resize(Index rows, Index cols)$/;"	f	class:Eigen::SparseMatrix
resize	include/Eigen/src/SparseCore/SparseVector.h	/^    void resize(Index newSize)$/;"	f	class:Eigen::SparseVector
resize	include/Eigen/src/SparseCore/SparseVector.h	/^    void resize(Index rows, Index cols)$/;"	f	class:Eigen::SparseVector
resize	include/Eigen/src/StlSupport/StdDeque.h	/^  void resize(size_type new_size)$/;"	f	class:std::deque
resize	include/Eigen/src/StlSupport/StdDeque.h	/^  void resize(size_type new_size, const value_type& x)$/;"	f	class:std::deque
resize	include/Eigen/src/StlSupport/StdList.h	/^    void resize(size_type new_size)$/;"	f	class:std::list
resize	include/Eigen/src/StlSupport/StdList.h	/^    void resize(size_type new_size, const value_type& x)$/;"	f	class:std::list
resize	include/Eigen/src/StlSupport/StdVector.h	/^  void resize(size_type new_size)$/;"	f	class:std::vector
resize	include/Eigen/src/StlSupport/StdVector.h	/^  void resize(size_type new_size, const value_type& x)$/;"	f	class:std::vector
resizeLike	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void resizeLike(const EigenBase<OtherDerived>& _other)$/;"	f	class:Eigen::PlainObjectBase
resizeNonZeros	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void resizeNonZeros(Index size)$/;"	f	class:Eigen::SparseMatrix
resizeNonZeros	include/Eigen/src/SparseCore/SparseVector.h	/^    void resizeNonZeros(Index size) { m_data.resize(size); }$/;"	f	class:Eigen::SparseVector
restart	include/Eigen/src/SparseCore/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::restart()$/;"	f	class:Eigen::internal::AmbiVector
result	include/Eigen/src/Core/ProductBase.h	/^      Matrix<Scalar,1,1> result = *this;$/;"	m	class:Eigen::ProductBase
result_of	include/Eigen/src/Core/util/Meta.h	/^struct result_of<Func(ArgType)> {$/;"	s	namespace:Eigen::internal
result_of	include/Eigen/src/Core/util/Meta.h	/^struct result_of<Func(ArgType0,ArgType1)> {$/;"	s	namespace:Eigen::internal
result_of	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct result_of {};$/;"	s	namespace:Eigen::internal
result_type	include/Eigen/src/Core/Functors.h	/^  typedef NewType result_type;$/;"	t	struct:Eigen::internal::scalar_cast_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:Eigen::internal::scalar_abs2_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:Eigen::internal::scalar_abs_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:Eigen::internal::scalar_imag_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:Eigen::internal::scalar_imag_ref_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:Eigen::internal::scalar_real_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:Eigen::internal::scalar_real_ref_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename scalar_product_traits<LhsScalar,RhsScalar>::ReturnType result_type;$/;"	t	struct:Eigen::internal::scalar_conj_product_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename scalar_product_traits<LhsScalar,RhsScalar>::ReturnType result_type;$/;"	t	struct:Eigen::internal::scalar_product_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename scalar_product_traits<LhsScalar,RhsScalar>::ReturnType result_type;$/;"	t	struct:Eigen::internal::scalar_quotient_op
result_type	include/Eigen/src/Core/Functors.h	/^  typedef typename scalar_product_traits<Scalar1,Scalar2>::ReturnType result_type;$/;"	t	struct:Eigen::internal::scalar_multiple2_op
result_type	include/Eigen/src/Core/VectorwiseOp.h	/^                   >::type  result_type;$/;"	t	struct:Eigen::internal::member_redux
ret	include/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = 0 };$/;"	e	enum:Eigen::internal::inner_stride_at_compile_time::__anon61
ret	include/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = 0 };$/;"	e	enum:Eigen::internal::outer_stride_at_compile_time::__anon63
ret	include/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = traits<Derived>::InnerStrideAtCompileTime };$/;"	e	enum:Eigen::internal::inner_stride_at_compile_time::__anon60
ret	include/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = traits<Derived>::OuterStrideAtCompileTime };$/;"	e	enum:Eigen::internal::outer_stride_at_compile_time::__anon62
ret	include/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_has_linear_access { enum { ret = 1 }; };$/;"	e	enum:Eigen::internal::functor_has_linear_access::__anon102
ret	include/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_is_product_like { enum { ret = 0 }; };$/;"	e	enum:Eigen::internal::functor_is_product_like::__anon104
ret	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_is_product_like<scalar_conj_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	e	enum:Eigen::internal::functor_is_product_like::__anon106
ret	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_is_product_like<scalar_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	e	enum:Eigen::internal::functor_is_product_like::__anon105
ret	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_is_product_like<scalar_quotient_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	e	enum:Eigen::internal::functor_is_product_like::__anon107
ret	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct functor_has_linear_access<scalar_identity_op<Scalar> > { enum { ret = 0 }; };$/;"	e	enum:Eigen::internal::functor_has_linear_access::__anon103
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    1,    1>      { enum { ret = InnerProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon150
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Large,Large>  { enum { ret = GemvProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon158
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Large,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon157
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Small,Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon159
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<1,    Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon152
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon156
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,1,    Large>  { enum { ret = GemvProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon161
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon160
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Large,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon166
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Large,Small>  { enum { ret = GemmProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon169
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Small,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon164
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Large,Small,Small>  { enum { ret = GemmProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon167
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small, Large, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon155
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon154
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,1,    Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon162
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon151
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Large,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon165
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Large,Small>  { enum { ret = GemmProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon168
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Small,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon163
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<>              struct product_type_selector<Small,Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon153
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<int Depth>     struct product_type_selector<1,    1,    Depth>  { enum { ret = InnerProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon149
ret	include/Eigen/src/Core/GeneralProduct.h	/^template<int M, int N>  struct product_type_selector<M,N,1>              { enum { ret = OuterProduct }; };$/;"	e	enum:Eigen::internal::product_type_selector::__anon148
ret	include/Eigen/src/Core/Transpose.h	/^  enum { ret =    bool(blas_traits<DerivedA>::IsTransposed) != DestIsTransposed$/;"	e	enum:Eigen::internal::check_transpose_aliasing_compile_time_selector::__anon255
ret	include/Eigen/src/Core/Transpose.h	/^  enum { ret = bool(blas_traits<OtherDerived>::IsTransposed) != DestIsTransposed };$/;"	e	enum:Eigen::internal::check_transpose_aliasing_compile_time_selector::__anon254
ret	include/Eigen/src/Core/util/ForwardDeclarations.h	/^  enum { ret = (traits<Derived>::Flags & DirectAccessBit) ? 1 : 0 };$/;"	e	enum:Eigen::internal::has_direct_access::__anon272
ret	include/Eigen/src/Core/util/Meta.h	/^    enum { ret = meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e	enum:Eigen::internal::__anon318
ret	include/Eigen/src/Core/util/Meta.h	/^class meta_sqrt<Y, InfX, SupX, true> { public:  enum { ret = (SupX*SupX <= Y) ? SupX : InfX }; };$/;"	e	enum:Eigen::meta_sqrt::__anon319
ret	include/Eigen/src/Core/util/Meta.h	/^{ enum { ret = false }; };$/;"	e	enum:Eigen::is_diagonal::__anon324
ret	include/Eigen/src/Core/util/Meta.h	/^{ enum { ret = true }; };$/;"	e	enum:Eigen::is_diagonal::__anon325
ret	include/Eigen/src/Core/util/Meta.h	/^{ enum { ret = true }; };$/;"	e	enum:Eigen::is_diagonal::__anon326
ret	include/Eigen/src/Core/util/Meta.h	/^{ enum { ret = true }; };$/;"	e	enum:Eigen::is_diagonal::__anon327
ret	include/Eigen/src/Eigen2Support/Meta.h	/^    enum { ret = ei_meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e	enum:Eigen::__anon355
ret	include/Eigen/src/Eigen2Support/Meta.h	/^class ei_meta_sqrt<Y, InfX, SupX, true> { public:  enum { ret = (SupX*SupX <= Y) ? SupX : InfX }; };$/;"	e	enum:ei_meta_sqrt::__anon356
ret	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_false { enum { ret = 0 }; };$/;"	e	enum:Eigen::ei_meta_false::__anon352
ret	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if <false, Then, Else> { typedef Else ret; };$/;"	t	struct:Eigen::ei_meta_if
ret	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if { typedef Then ret; };$/;"	t	struct:Eigen::ei_meta_if
ret	include/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_true {  enum { ret = 1 }; };$/;"	e	enum:Eigen::ei_meta_true::__anon351
ret	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T, typename U> struct ei_is_same_type { enum { ret = 0 }; };$/;"	e	enum:Eigen::ei_is_same_type::__anon353
ret	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_is_same_type<T,T> { enum { ret = 1 }; };$/;"	e	enum:Eigen::ei_is_same_type::__anon354
ret	include/Eigen/src/Householder/Householder.h	/^    ret = n==Dynamic ? n : n-1$/;"	e	enum:Eigen::internal::decrement_size::__anon391
ret	include/Eigen/src/SVD/JacobiSVD.h	/^         ret = !( (QRPreconditioner == NoQRPreconditioner) ||$/;"	e	enum:Eigen::internal::qr_preconditioner_should_do_anything::__anon460
ret	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^{ typedef Sparse ret; };$/;"	t	struct:Eigen::internal::promote_storage_type
retval	include/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar retval;$/;"	t	struct:Eigen::internal::atanh2_default_impl
retval	include/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar retval;$/;"	t	struct:Eigen::internal::pow_default_impl
reverse	include/Eigen/src/Core/Reverse.h	/^DenseBase<Derived>::reverse() const$/;"	f	class:Eigen::DenseBase
reverse	include/Eigen/src/Core/Reverse.h	/^DenseBase<Derived>::reverse()$/;"	f	class:Eigen::DenseBase
reverse	include/Eigen/src/Core/VectorwiseOp.h	/^    const Reverse<ExpressionType, Direction> reverse() const$/;"	f	class:Eigen::VectorwiseOp
reverseInPlace	include/Eigen/src/Core/Reverse.h	/^inline void DenseBase<Derived>::reverseInPlace()$/;"	f	class:Eigen::DenseBase
reverse_packet	include/Eigen/src/Core/Reverse.h	/^    typedef internal::reverse_packet_cond<PacketScalar,ReversePacket> reverse_packet;$/;"	t	class:Eigen::Reverse
reverse_packet_cond	include/Eigen/src/Core/Reverse.h	/^template<typename PacketScalar, bool ReversePacket> struct reverse_packet_cond$/;"	s	namespace:Eigen::internal
reverse_packet_cond	include/Eigen/src/Core/Reverse.h	/^template<typename PacketScalar> struct reverse_packet_cond<PacketScalar,false>$/;"	s	namespace:Eigen::internal
rhs	include/Eigen/src/Core/CwiseBinaryOp.h	/^    const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:Eigen::CwiseBinaryOp
rhs	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:Eigen::CoeffBasedProduct
rhs	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:Eigen::SparseDenseOuterProduct
rhs	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:Eigen::SparseDiagonalProduct
rhs	include/Eigen/src/SparseCore/SparseProduct.h	/^    EIGEN_STRONG_INLINE const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:Eigen::SparseSparseProduct
rhs	include/Eigen/src/misc/Solve.h	/^  inline const RhsNestedCleaned& rhs() const { return m_rhs; }$/;"	f	struct:Eigen::internal::solve_retval_base
rhs	include/Eigen/src/misc/SparseSolve.h	/^  inline const RhsNestedCleaned& rhs() const { return m_rhs; }$/;"	f	struct:Eigen::internal::sparse_solve_retval_base
rhs_length	include/Eigen/src/Core/products/Parallelizer.h	/^  Index rhs_length;$/;"	m	struct:Eigen::internal::GemmParallelInfo
rhs_start	include/Eigen/src/Core/products/Parallelizer.h	/^  Index rhs_start;$/;"	m	struct:Eigen::internal::GemmParallelInfo
rightCols	include/Eigen/src/plugins/BlockMethods.h	/^inline ColsBlockXpr rightCols(Index n)$/;"	f
rightCols	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstColsBlockXpr rightCols(Index n) const$/;"	f
rightCols	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNColsBlockXpr<N>::Type rightCols(Index n = N) const$/;"	f
rightCols	include/Eigen/src/plugins/BlockMethods.h	/^inline typename NColsBlockXpr<N>::Type rightCols(Index n = N)$/;"	f
rightHouseholderSequence	include/Eigen/src/Householder/HouseholderSequence.h	/^HouseholderSequence<VectorsType,CoeffsType,OnTheRight> rightHouseholderSequence(const VectorsType& v, const CoeffsType& h)$/;"	f	namespace:Eigen
rotate	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::rotate(const RotationType& rotation)$/;"	f	class:Eigen::Transform
rotate	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::rotate(const RotationType& rotation)$/;"	f	class:Eigen::Transform
rotation	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::rotation() const$/;"	f	class:Eigen::Transform
rotation	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::rotation() const$/;"	f	class:Eigen::Transform
rotation_base_generic_product_selector	include/Eigen/src/Geometry/RotationBase.h	/^struct rotation_base_generic_product_selector< RotationDerived, DiagonalMatrix<Scalar,Dim,MaxDim>, false >$/;"	s	namespace:Eigen::internal
rotation_base_generic_product_selector	include/Eigen/src/Geometry/RotationBase.h	/^struct rotation_base_generic_product_selector<RotationDerived,MatrixType,false>$/;"	s	namespace:Eigen::internal
rotation_base_generic_product_selector	include/Eigen/src/Geometry/RotationBase.h	/^struct rotation_base_generic_product_selector<RotationDerived,OtherVectorType,true>$/;"	s	namespace:Eigen::internal
row	include/Eigen/src/Core/BooleanRedux.h	/^    row = (UnrollCount-1) % Derived::RowsAtCompileTime$/;"	e	enum:Eigen::internal::all_unroller::__anon50
row	include/Eigen/src/Core/BooleanRedux.h	/^    row = (UnrollCount-1) % Derived::RowsAtCompileTime$/;"	e	enum:Eigen::internal::any_unroller::__anon51
row	include/Eigen/src/Core/CoreIterators.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:Eigen::DenseBase::InnerIterator
row	include/Eigen/src/Core/SelfAdjointView.h	/^    row = (UnrollCount-1) % Derived1::RowsAtCompileTime$/;"	e	enum:Eigen::internal::triangular_assignment_selector::__anon246
row	include/Eigen/src/Core/SelfAdjointView.h	/^    row = (UnrollCount-1) % Derived1::RowsAtCompileTime$/;"	e	enum:Eigen::internal::triangular_assignment_selector::__anon247
row	include/Eigen/src/Core/TriangularMatrix.h	/^    row = (UnrollCount-1) % Derived1::RowsAtCompileTime$/;"	e	enum:Eigen::internal::triangular_assignment_selector::__anon259
row	include/Eigen/src/Core/Visitor.h	/^    row = (UnrollCount-1) % Derived::RowsAtCompileTime$/;"	e	enum:Eigen::internal::visitor_impl::__anon335
row	include/Eigen/src/Core/Visitor.h	/^  Index row, col;$/;"	m	struct:Eigen::internal::coeff_visitor
row	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
row	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
row	include/Eigen/src/SparseCore/SparseBlock.h	/^        inline Index row() const { return IsRowMajor ? m_outer : this->index(); }$/;"	f	class:Eigen::BlockImpl::InnerIterator
row	include/Eigen/src/SparseCore/SparseBlock.h	/^        inline Index row() const { return IsRowMajor ? m_outer : this->index(); }$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
row	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index row()    const { return Base::row()   - m_block.m_startRow.value(); }$/;"	f	class:Eigen::BlockImpl::InnerIterator
row	include/Eigen/src/SparseCore/SparseBlock.h	/^      inline Index row()    const { return Base::row()   - m_block.m_startRow.value(); }$/;"	f	class:Eigen::BlockImpl::ReverseInnerIterator
row	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return Lhs::IsRowMajor ? m_lhsIter.row() : index(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
row	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return m_lhsIter.row(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
row	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return m_rhsIter.row(); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
row	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    inline Index row() const { return Transpose ? m_outer : Base::index(); }$/;"	f	class:Eigen::SparseDenseOuterProduct::InnerIterator
row	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    inline Index row() const { return m_outer; }$/;"	f	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
row	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
row	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
row	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typename TransposeImpl<MatrixType,Sparse>::Index row() const { return Base::col(); }$/;"	f	class:Eigen::TransposeImpl::InnerIterator
row	include/Eigen/src/SparseCore/SparseTranspose.h	/^    typename TransposeImpl<MatrixType,Sparse>::Index row() const { return Base::col(); }$/;"	f	class:Eigen::TransposeImpl::ReverseInnerIterator
row	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Index row() const { return (MatrixType::Flags&RowMajorBit ? Base::outer() : this->index()); }$/;"	f	class:Eigen::SparseTriangularView::InnerIterator
row	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Index row() const { return Base::row(); }$/;"	f	class:Eigen::SparseTriangularView::ReverseInnerIterator
row	include/Eigen/src/SparseCore/SparseUtil.h	/^  const Index& row() const { return m_row; }$/;"	f	class:Eigen::Triplet
row	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Index row() const { return IsColVector ? index() : 0; }$/;"	f	class:Eigen::SparseVector::InnerIterator
row	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Index row() const { return IsColVector ? index() : 0; }$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
row	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline Index row() const { return index(); }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
row	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowXpr row(Index i) const$/;"	f
row	include/Eigen/src/plugins/BlockMethods.h	/^inline RowXpr row(Index i)$/;"	f
rowIndex	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* rowIndex()  { return m_rowind; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
rowIndex	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index* rowIndex() const$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
rowIndexByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner) const$/;"	f	class:Eigen::DenseCoeffsBase
rowIndexPtr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* rowIndexPtr() { return m_rowind_colptr; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
rowIndexPtr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index* rowIndexPtr() const $/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
rowOffset	include/Eigen/src/Core/Diagonal.h	/^    EIGEN_STRONG_INLINE Index rowOffset() const { return m_index.value()>0 ? 0 : -m_index.value(); }$/;"	f	class:Eigen::Diagonal
rowPrefix	include/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:Eigen::IOFormat
rowSeparator	include/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:Eigen::IOFormat
rowSpacer	include/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:Eigen::IOFormat
rowStride	include/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index rowStride() const$/;"	f	class:Eigen::DenseCoeffsBase
rowSuffix	include/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:Eigen::IOFormat
rowblk	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  Index rowblk; \/\/ The minimum row dimension for 2-D blocking to be used;$/;"	m	struct:Eigen::internal::perfvalues
rows	include/Eigen/src/Cholesky/LDLT.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::LDLT
rows	include/Eigen/src/Cholesky/LLT.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::LLT
rows	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    inline Index rows() const { return m_cholmodFactor->n; }$/;"	f	class:Eigen::CholmodBase
rows	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:Eigen::ArrayWrapper
rows	include/Eigen/src/Core/ArrayWrapper.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:Eigen::MatrixWrapper
rows	include/Eigen/src/Core/BandMatrix.h	/^    inline Index rows() const { return m_rows.value(); }$/;"	f	class:Eigen::internal::BandMatrix
rows	include/Eigen/src/Core/BandMatrix.h	/^    inline Index rows() const { return m_rows.value(); }$/;"	f	class:Eigen::internal::BandMatrixWrapper
rows	include/Eigen/src/Core/Block.h	/^    inline Index rows() const { return m_blockRows.value(); }$/;"	f	class:Eigen::internal::BlockImpl_dense
rows	include/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index rows() const {$/;"	f	class:Eigen::CwiseBinaryOp
rows	include/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_rows.value(); }$/;"	f	class:Eigen::CwiseNullaryOp
rows	include/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_xpr.rows(); }$/;"	f	class:Eigen::CwiseUnaryOp
rows	include/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::CwiseUnaryView
rows	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex rows() const {return m_rows;}$/;"	f	class:Eigen::DenseStorage
rows	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex rows(void) const {return _Rows;}$/;"	f	class:Eigen::DenseStorage
rows	include/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex rows(void) const {return m_rows;}$/;"	f	class:Eigen::DenseStorage
rows	include/Eigen/src/Core/DenseStorage.h	/^    static inline DenseIndex rows(void) {return _Rows;}$/;"	f	class:Eigen::DenseStorage
rows	include/Eigen/src/Core/Diagonal.h	/^    inline Index rows() const$/;"	f	class:Eigen::Diagonal
rows	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline Index rows() const { return diagonal().size(); }$/;"	f	class:Eigen::DiagonalBase
rows	include/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::DiagonalProduct
rows	include/Eigen/src/Core/EigenBase.h	/^  inline Index rows() const { return derived().rows(); }$/;"	f	struct:Eigen::EigenBase
rows	include/Eigen/src/Core/Flagged.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::Flagged
rows	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:Eigen::ForceAlignedAccess
rows	include/Eigen/src/Core/MapBase.h	/^    inline Index rows() const { return m_rows.value(); }$/;"	f	class:Eigen::MapBase
rows	include/Eigen/src/Core/NestByValue.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:Eigen::NestByValue
rows	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Index rows() const { return Index(indices().size()); }$/;"	f	class:Eigen::PermutationBase
rows	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	struct:Eigen::internal::permut_matrix_product_retval
rows	include/Eigen/src/Core/PermutationMatrix.h	/^    inline int rows() const { return m_permutation.rows(); }$/;"	f	class:Eigen::Transpose
rows	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_storage.rows(); }$/;"	f	class:Eigen::PlainObjectBase
rows	include/Eigen/src/Core/Replicate.h	/^    inline Index rows() const { return m_matrix.rows() * m_rowFactor.value(); }$/;"	f	class:Eigen::Replicate
rows	include/Eigen/src/Core/ReturnByValue.h	/^    inline Index rows() const { return static_cast<const Derived*>(this)->rows(); }$/;"	f	class:Eigen::ReturnByValue
rows	include/Eigen/src/Core/Reverse.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::Reverse
rows	include/Eigen/src/Core/Select.h	/^    Index rows() const { return m_condition.rows(); }$/;"	f	class:Eigen::Select
rows	include/Eigen/src/Core/SelfAdjointView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SelfAdjointView
rows	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SelfCwiseBinaryOp
rows	include/Eigen/src/Core/SolveTriangular.h	/^  inline Index rows() const { return m_rhs.rows(); }$/;"	f	struct:Eigen::internal::triangular_solve_retval
rows	include/Eigen/src/Core/Swap.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:Eigen::SwapWrapper
rows	include/Eigen/src/Core/Transpose.h	/^    inline Index rows() const { return m_matrix.cols(); }$/;"	f	class:Eigen::Transpose
rows	include/Eigen/src/Core/Transpositions.h	/^    inline int rows() const { return m_matrix.rows(); }$/;"	f	struct:Eigen::internal::transposition_matrix_product_retval
rows	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index rows() const { return derived().rows(); }$/;"	f	class:Eigen::TriangularBase
rows	include/Eigen/src/Core/TriangularMatrix.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::TriangularView
rows	include/Eigen/src/Core/VectorwiseOp.h	/^    Index rows() const { return (Direction==Vertical   ? 1 : m_matrix.rows()); }$/;"	f	class:Eigen::PartialReduxExpr
rows	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_lhs.rows(); }$/;"	f	class:Eigen::CoeffBasedProduct
rows	include/Eigen/src/Eigen2Support/Minor.h	/^    inline Index rows() const { return m_matrix.rows() - 1; }$/;"	f	class:Eigen::Minor
rows	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    Index rows() const { return m_hess.packedMatrix().rows(); }$/;"	f	struct:Eigen::internal::HessenbergDecompositionMatrixHReturnType
rows	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Index rows() const { return m_matrix.rows(); }$/;"	f	struct:Eigen::internal::TridiagonalizationMatrixTReturnType
rows	include/Eigen/src/Geometry/Homogeneous.h	/^    inline Index rows() const { return m_matrix.rows() + (int(Direction)==Vertical   ? 1 : 0); }$/;"	f	class:Eigen::Homogeneous
rows	include/Eigen/src/Geometry/Homogeneous.h	/^  inline Index rows() const { return m_lhs.rows(); }$/;"	f	struct:Eigen::internal::homogeneous_left_product_impl
rows	include/Eigen/src/Geometry/Homogeneous.h	/^  inline Index rows() const { return m_lhs.rows(); }$/;"	f	struct:Eigen::internal::homogeneous_right_product_impl
rows	include/Eigen/src/Householder/HouseholderSequence.h	/^    Index rows() const { return Side==OnTheLeft ? m_vectors.rows() : m_vectors.cols(); }$/;"	f	class:Eigen::HouseholderSequence
rows	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    Index rows() const { return m_invdiag.size(); }$/;"	f	class:Eigen::DiagonalPreconditioner
rows	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^    Index rows() const { return m_lu.rows(); }$/;"	f	class:Eigen::IncompleteLUT
rows	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Index rows() const { return mp_matrix ? mp_matrix->rows() : 0; }$/;"	f	class:Eigen::IterativeSolverBase
rows	include/Eigen/src/LU/FullPivLU.h	/^    inline Index rows() const { return m_lu.rows(); }$/;"	f	class:Eigen::FullPivLU
rows	include/Eigen/src/LU/Inverse.h	/^  inline Index rows() const { return m_matrix.rows(); }$/;"	f	struct:Eigen::internal::inverse_impl
rows	include/Eigen/src/LU/PartialPivLU.h	/^    inline Index rows() const { return m_lu.rows(); }$/;"	f	class:Eigen::PartialPivLU
rows	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    inline Index rows() const { return m_size; }$/;"	f	class:Eigen::PastixBase
rows	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    inline Index rows() const { return m_size; }$/;"	f	class:Eigen::PardisoImpl
rows	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index rows() const { return m_qr.rows(); }$/;"	f	class:Eigen::ColPivHouseholderQR
rows	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    Index rows() const { return m_qr.rows(); }$/;"	f	struct:Eigen::internal::FullPivHouseholderQRMatrixQReturnType
rows	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index rows() const { return m_qr.rows(); }$/;"	f	class:Eigen::FullPivHouseholderQR
rows	include/Eigen/src/QR/HouseholderQR.h	/^    inline Index rows() const { return m_qr.rows(); }$/;"	f	class:Eigen::HouseholderQR
rows	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    inline Index rows() const {return m_H->nrow; }$/;"	f	class:Eigen::SPQR
rows	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  inline Index rows() const { return m_transpose ? m_spqr.rows() : m_spqr.cols(); }$/;"	f	struct:Eigen::SPQR_QProduct
rows	include/Eigen/src/SVD/JacobiSVD.h	/^    inline Index rows() const { return m_rows; }$/;"	f	class:Eigen::JacobiSVD
rows	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SimplicialCholeskyBase
rows	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Index rows() const { return IsRowMajor ? m_outerSize : m_innerSize; }$/;"	f	class:Eigen::MappedSparseMatrix
rows	include/Eigen/src/SparseCore/SparseBlock.h	/^    EIGEN_STRONG_INLINE Index rows() const { return IsRowMajor ? m_outerSize.value() : m_matrix.rows(); }$/;"	f	class:Eigen::BlockImpl
rows	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline int rows() const { return m_blockRows.value(); }$/;"	f	class:Eigen::BlockImpl
rows	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return Tr ? m_rhs.rows() : m_lhs.rows(); }$/;"	f	class:Eigen::SparseDenseOuterProduct
rows	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_lhs.rows(); }$/;"	f	class:Eigen::SparseDiagonalProduct
rows	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Index rows() const { return IsRowMajor ? m_outerSize : m_innerSize; }$/;"	f	class:Eigen::SparseMatrix
rows	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Index rows() const { return derived().rows(); }$/;"	f	class:Eigen::SparseMatrixBase
rows	include/Eigen/src/SparseCore/SparsePermutation.h	/^    inline int rows() const { return m_matrix.rows(); }$/;"	f	struct:Eigen::internal::permut_sparsematrix_product_retval
rows	include/Eigen/src/SparseCore/SparseProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_lhs.rows(); }$/;"	f	class:Eigen::SparseSparseProduct
rows	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SparseSelfAdjointView
rows	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SparseSymmetricPermutationProduct
rows	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SparseTriangularView
rows	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE Index rows() const { return IsColVector ? m_size : 1; }$/;"	f	class:Eigen::SparseVector
rows	include/Eigen/src/SparseCore/SparseView.h	/^  inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SparseView
rows	include/Eigen/src/SparseLU/SparseLU.h	/^    inline Index rows() const { return m_mat.rows(); }$/;"	f	class:Eigen::SparseLU
rows	include/Eigen/src/SparseLU/SparseLU.h	/^  Index rows() { return m_mapL.rows(); }$/;"	f	struct:Eigen::SparseLUMatrixLReturnType
rows	include/Eigen/src/SparseLU/SparseLU.h	/^  Index rows() { return m_mapL.rows(); }$/;"	f	struct:Eigen::SparseLUMatrixUReturnType
rows	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index rows() { return m_row; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
rows	include/Eigen/src/SparseQR/SparseQR.h	/^    inline Index rows() const { return m_pmat.rows(); }$/;"	f	class:Eigen::SparseQR
rows	include/Eigen/src/SparseQR/SparseQR.h	/^  inline Index rows() const { return m_qr.rows(); }$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
rows	include/Eigen/src/SparseQR/SparseQR.h	/^  inline Index rows() const { return m_transpose ? m_qr.rows() : m_qr.cols(); }$/;"	f	struct:Eigen::SparseQR_QProduct
rows	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Eigen::SuperLUBase
rows	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline Index rows() const { return m_copyMatrix.rows(); }$/;"	f	class:Eigen::UmfPackLU
rows	include/Eigen/src/misc/Image.h	/^  inline Index rows() const { return m_dec.rows(); }$/;"	f	struct:Eigen::internal::image_retval_base
rows	include/Eigen/src/misc/Kernel.h	/^  inline Index rows() const { return m_dec.cols(); }$/;"	f	struct:Eigen::internal::kernel_retval_base
rows	include/Eigen/src/misc/Solve.h	/^  inline Index rows() const { return m_dec.cols(); }$/;"	f	struct:Eigen::internal::solve_retval_base
rows	include/Eigen/src/misc/SparseSolve.h	/^  inline Index rows() const { return m_dec.cols(); }$/;"	f	struct:Eigen::internal::solve_retval_with_guess
rows	include/Eigen/src/misc/SparseSolve.h	/^  inline Index rows() const { return m_dec.cols(); }$/;"	f	struct:Eigen::internal::sparse_solve_retval_base
rowsPermutation	include/Eigen/src/SparseLU/SparseLU.h	/^    inline const PermutationType& rowsPermutation() const$/;"	f	class:Eigen::SparseLU
rowsTranspositions	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    const IntDiagSizeVectorType& rowsTranspositions() const$/;"	f	class:Eigen::FullPivHouseholderQR
rows_select	include/Eigen/src/Core/GeneralProduct.h	/^    rows_select = product_size_category<Rows,MaxRows>::value,$/;"	e	enum:Eigen::internal::product_type::__anon146
rowwise	include/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::rowwise() const$/;"	f	class:Eigen::DenseBase
rowwise	include/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::rowwise()$/;"	f	class:Eigen::DenseBase
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_DONT_INLINE void run(const Derived& src, OtherDerived& dst, typename Derived::Index start, typename Derived::Index end)$/;"	f	struct:Eigen::internal::unaligned_assign_impl
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.derived()); }$/;"	f	struct:Eigen::internal::assign_selector
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.eval()); }$/;"	f	struct:Eigen::internal::assign_selector
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.transpose()); }$/;"	f	struct:Eigen::internal::assign_selector
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.transpose().eval()); }$/;"	f	struct:Eigen::internal::assign_selector
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:Eigen::internal::assign_DefaultTraversal_CompleteUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:Eigen::internal::assign_LinearTraversal_CompleteUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:Eigen::internal::assign_innervec_CompleteUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &, const Derived2 &, typename Derived1::Index) {}$/;"	f	struct:Eigen::internal::assign_DefaultTraversal_InnerUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &, const Derived2 &, typename Derived1::Index) {}$/;"	f	struct:Eigen::internal::assign_innervec_InnerUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:Eigen::internal::assign_DefaultTraversal_CompleteUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:Eigen::internal::assign_LinearTraversal_CompleteUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:Eigen::internal::assign_impl
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:Eigen::internal::assign_innervec_CompleteUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &dst, const Derived2 &src, typename Derived1::Index outer)$/;"	f	struct:Eigen::internal::assign_DefaultTraversal_InnerUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(Derived1 &dst, const Derived2 &src, typename Derived1::Index outer)$/;"	f	struct:Eigen::internal::assign_innervec_InnerUnrolling
run	include/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(const Derived&, OtherDerived&, typename Derived::Index, typename Derived::Index) {}$/;"	f	struct:Eigen::internal::unaligned_assign_impl
run	include/Eigen/src/Core/Assign.h	/^  static inline void run(Derived1 &, const Derived2 &) { }$/;"	f	struct:Eigen::internal::assign_impl
run	include/Eigen/src/Core/Assign.h	/^  static inline void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:Eigen::internal::assign_impl
run	include/Eigen/src/Core/Assign_MKL.h	/^  static inline void run(Derived1& dst, const CwiseUnaryOp<UnaryOp, Derived2>& src)$/;"	f	struct:Eigen::internal::vml_assign_impl
run	include/Eigen/src/Core/BooleanRedux.h	/^  static inline bool run(const Derived & \/*mat*\/) { return false; }$/;"	f	struct:Eigen::internal::any_unroller
run	include/Eigen/src/Core/BooleanRedux.h	/^  static inline bool run(const Derived &) { return false; }$/;"	f	struct:Eigen::internal::all_unroller
run	include/Eigen/src/Core/BooleanRedux.h	/^  static inline bool run(const Derived &) { return false; }$/;"	f	struct:Eigen::internal::any_unroller
run	include/Eigen/src/Core/BooleanRedux.h	/^  static inline bool run(const Derived &\/*mat*\/) { return true; }$/;"	f	struct:Eigen::internal::all_unroller
run	include/Eigen/src/Core/BooleanRedux.h	/^  static inline bool run(const Derived &mat)$/;"	f	struct:Eigen::internal::all_unroller
run	include/Eigen/src/Core/BooleanRedux.h	/^  static inline bool run(const Derived &mat)$/;"	f	struct:Eigen::internal::any_unroller
run	include/Eigen/src/Core/CwiseNullaryOp.h	/^  static EIGEN_STRONG_INLINE Derived& run(Derived& m)$/;"	f	struct:Eigen::internal::setIdentity_impl
run	include/Eigen/src/Core/DenseCoeffsBase.h	/^  static inline typename Derived::Index run(const Derived& m)$/;"	f	struct:Eigen::internal::first_aligned_impl
run	include/Eigen/src/Core/DenseCoeffsBase.h	/^  static inline typename Derived::Index run(const Derived&)$/;"	f	struct:Eigen::internal::first_aligned_impl
run	include/Eigen/src/Core/Dot.h	/^  static inline RealScalar run(const MatrixBase<Derived>& m)$/;"	f	struct:Eigen::internal::lpNorm_selector
run	include/Eigen/src/Core/Dot.h	/^  static inline ResScalar run(const MatrixBase<T>& a, const MatrixBase<U>& b)$/;"	f	struct:Eigen::internal::dot_nocheck
run	include/Eigen/src/Core/Dot.h	/^  static inline typename NumTraits<typename traits<Derived>::Scalar>::Real run(const MatrixBase<Derived>& m)$/;"	f	struct:Eigen::internal::lpNorm_selector
run	include/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived& y, const typename Derived::RealScalar& prec)$/;"	f	struct:Eigen::internal::isApprox_selector
run	include/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived& y, const typename Derived::RealScalar& prec)$/;"	f	struct:Eigen::internal::isMuchSmallerThan_object_selector
run	include/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived& y, const typename Derived::RealScalar&)$/;"	f	struct:Eigen::internal::isApprox_selector
run	include/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived&, const typename Derived::RealScalar&)$/;"	f	struct:Eigen::internal::isMuchSmallerThan_object_selector
run	include/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const typename Derived::RealScalar& y, const typename Derived::RealScalar& prec)$/;"	f	struct:Eigen::internal::isMuchSmallerThan_scalar_selector
run	include/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const typename Derived::RealScalar&, const typename Derived::RealScalar&)$/;"	f	struct:Eigen::internal::isMuchSmallerThan_scalar_selector
run	include/Eigen/src/Core/GeneralProduct.h	/^  static inline void run(const ProductType& prod, Dest& dest, const typename ProductType::Scalar& alpha)$/;"	f	struct:Eigen::internal::gemv_selector
run	include/Eigen/src/Core/GeneralProduct.h	/^  static void run(const ProductType& prod, Dest& dest, const typename ProductType::Scalar& alpha)$/;"	f	struct:Eigen::internal::gemv_selector
run	include/Eigen/src/Core/GenericPacketMath.h	/^  static inline void run(PacketType&, const PacketType&) {}$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/IO.h	/^  static inline int run()$/;"	f	struct:Eigen::internal::significant_decimals_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline NewType run(const OldType& x)$/;"	f	struct:Eigen::internal::cast_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:Eigen::internal::abs2_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:Eigen::internal::imag_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:Eigen::internal::norm1_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:Eigen::internal::real_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:Eigen::internal::hypot_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar&)$/;"	f	struct:Eigen::internal::imag_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const std::complex<RealScalar>& x)$/;"	f	struct:Eigen::internal::abs2_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar& run(Scalar& x)$/;"	f	struct:Eigen::internal::imag_ref_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar& run(Scalar& x)$/;"	f	struct:Eigen::internal::real_ref_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run()$/;"	f	struct:Eigen::internal::random_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(Scalar x, Scalar y)$/;"	f	struct:Eigen::internal::pow_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(Scalar&)$/;"	f	struct:Eigen::internal::imag_ref_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x)$/;"	f	struct:Eigen::internal::conj_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x)$/;"	f	struct:Eigen::internal::norm1_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:Eigen::internal::atanh2_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:Eigen::internal::pow_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:Eigen::internal::random_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar&, const Scalar&)$/;"	f	struct:Eigen::internal::atanh2_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline bool run()$/;"	f	struct:Eigen::internal::random_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline const RealScalar& run(const Scalar& x)$/;"	f	struct:Eigen::internal::imag_ref_default_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline const RealScalar& run(const Scalar& x)$/;"	f	struct:Eigen::internal::real_ref_impl
run	include/Eigen/src/Core/MathFunctions.h	/^  static inline const Scalar run(const Scalar&)$/;"	f	struct:Eigen::internal::imag_ref_default_impl
run	include/Eigen/src/Core/PlainObjectBase.h	/^  static EIGEN_ALWAYS_INLINE void run(Index rows, Index cols)$/;"	f	struct:Eigen::internal::check_rows_cols_for_overflow
run	include/Eigen/src/Core/PlainObjectBase.h	/^  static EIGEN_ALWAYS_INLINE void run(Index, Index)$/;"	f	struct:Eigen::internal::check_rows_cols_for_overflow
run	include/Eigen/src/Core/PlainObjectBase.h	/^  static inline void run(MatrixTypeA& a, MatrixTypeB& b)$/;"	f	struct:Eigen::internal::matrix_swap_impl
run	include/Eigen/src/Core/PlainObjectBase.h	/^  static void run(DenseBase<Derived>& _this, Index rows, Index cols)$/;"	f	struct:Eigen::internal::conservative_resize_like_impl
run	include/Eigen/src/Core/PlainObjectBase.h	/^  static void run(DenseBase<Derived>& _this, Index size)$/;"	f	struct:Eigen::internal::conservative_resize_like_impl
run	include/Eigen/src/Core/PlainObjectBase.h	/^  static void run(DenseBase<Derived>& _this, const DenseBase<OtherDerived>& other)$/;"	f	struct:Eigen::internal::conservative_resize_like_impl
run	include/Eigen/src/Core/Redux.h	/^  static EIGEN_STRONG_INLINE PacketScalar run(const Derived &mat, const Func& func)$/;"	f	struct:Eigen::internal::redux_vec_unroller
run	include/Eigen/src/Core/Redux.h	/^  static EIGEN_STRONG_INLINE PacketScalar run(const Derived &mat, const Func&)$/;"	f	struct:Eigen::internal::redux_vec_unroller
run	include/Eigen/src/Core/Redux.h	/^  static EIGEN_STRONG_INLINE Scalar run(const Derived &mat, const Func& func)$/;"	f	struct:Eigen::internal::redux_novec_unroller
run	include/Eigen/src/Core/Redux.h	/^  static EIGEN_STRONG_INLINE Scalar run(const Derived &mat, const Func&)$/;"	f	struct:Eigen::internal::redux_novec_unroller
run	include/Eigen/src/Core/Redux.h	/^  static EIGEN_STRONG_INLINE Scalar run(const Derived& mat, const Func& func)$/;"	f	struct:Eigen::internal::redux_impl
run	include/Eigen/src/Core/Redux.h	/^  static EIGEN_STRONG_INLINE Scalar run(const Derived&, const Func&) { return Scalar(); }$/;"	f	struct:Eigen::internal::redux_novec_unroller
run	include/Eigen/src/Core/Redux.h	/^  static Scalar run(const Derived& mat, const Func& func)$/;"	f	struct:Eigen::internal::redux_impl
run	include/Eigen/src/Core/Reverse.h	/^  static inline PacketScalar run(const PacketScalar& x) { return preverse(x); }$/;"	f	struct:Eigen::internal::reverse_packet_cond
run	include/Eigen/src/Core/Reverse.h	/^  static inline PacketScalar run(const PacketScalar& x) { return x; }$/;"	f	struct:Eigen::internal::reverse_packet_cond
run	include/Eigen/src/Core/SelfAdjointView.h	/^  static inline void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:Eigen::internal::triangular_assignment_selector
run	include/Eigen/src/Core/SelfAdjointView.h	/^  static inline void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:Eigen::internal::triangular_assignment_selector
run	include/Eigen/src/Core/SolveTriangular.h	/^  static void run(const Lhs& lhs, Rhs& rhs)$/;"	f	struct:Eigen::internal::triangular_solver_selector
run	include/Eigen/src/Core/SolveTriangular.h	/^  static void run(const Lhs& lhs, Rhs& rhs)$/;"	f	struct:Eigen::internal::triangular_solver_unroller
run	include/Eigen/src/Core/SolveTriangular.h	/^  static void run(const Lhs&, Rhs&) {}$/;"	f	struct:Eigen::internal::triangular_solver_unroller
run	include/Eigen/src/Core/Transpose.h	/^    static void run(const Derived& dst, const OtherDerived& other)$/;"	f	struct:Eigen::internal::checkTransposeAliasing_impl
run	include/Eigen/src/Core/Transpose.h	/^    static void run(const Derived&, const OtherDerived&)$/;"	f	struct:Eigen::internal::checkTransposeAliasing_impl
run	include/Eigen/src/Core/Transpose.h	/^  static bool run(const Scalar* dest, const CwiseBinaryOp<BinOp,DerivedA,DerivedB>& src)$/;"	f	struct:Eigen::internal::check_transpose_aliasing_run_time_selector
run	include/Eigen/src/Core/Transpose.h	/^  static bool run(const Scalar* dest, const OtherDerived& src)$/;"	f	struct:Eigen::internal::check_transpose_aliasing_run_time_selector
run	include/Eigen/src/Core/Transpose.h	/^  static void run(MatrixType& m) {$/;"	f	struct:Eigen::internal::inplace_transpose_selector
run	include/Eigen/src/Core/TriangularMatrix.h	/^  static inline void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:Eigen::internal::triangular_assignment_selector
run	include/Eigen/src/Core/TriangularMatrix.h	/^  static inline void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:Eigen::internal::triangular_assignment_selector
run	include/Eigen/src/Core/Visitor.h	/^  static inline void run(const Derived &mat, Visitor& visitor)$/;"	f	struct:Eigen::internal::visitor_impl
run	include/Eigen/src/Core/Visitor.h	/^  static inline void run(const Derived& mat, Visitor& visitor)$/;"	f	struct:Eigen::internal::visitor_impl
run	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^  static EIGEN_STRONG_INLINE void run(Packet2cf& first, const Packet2cf& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  static EIGEN_STRONG_INLINE void run(Packet4f& first, const Packet4f& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  static EIGEN_STRONG_INLINE void run(Packet4i& first, const Packet4i& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE static void run(Packet2cf& first, const Packet2cf& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/SSE/Complex.h	/^  static EIGEN_STRONG_INLINE void run(Packet1cd& \/*first*\/, const Packet1cd& \/*second*\/)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/SSE/Complex.h	/^  static EIGEN_STRONG_INLINE void run(Packet2cf& first, const Packet2cf& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  static EIGEN_STRONG_INLINE void run(Packet2d& first, const Packet2d& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  static EIGEN_STRONG_INLINE void run(Packet4f& first, const Packet4f& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  static EIGEN_STRONG_INLINE void run(Packet4i& first, const Packet4i& second)$/;"	f	struct:Eigen::internal::palign_impl
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index \/*row*\/, Index \/*col*\/, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:Eigen::internal::product_coeff_vectorized_dyn_selector
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index \/*row*\/, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:Eigen::internal::product_coeff_vectorized_dyn_selector
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index \/*col*\/, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:Eigen::internal::product_coeff_vectorized_dyn_selector
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, Packet &res)$/;"	f	struct:Eigen::internal::product_packet_impl
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, Packet& res)$/;"	f	struct:Eigen::internal::product_packet_impl
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, RetScalar &res)$/;"	f	struct:Eigen::internal::product_coeff_impl
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, RetScalar& res)$/;"	f	struct:Eigen::internal::product_coeff_impl
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::PacketScalar &pres)$/;"	f	struct:Eigen::internal::product_coeff_vectorized_unroller
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:Eigen::internal::product_coeff_impl
run	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  static EIGEN_STRONG_INLINE void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:Eigen::internal::product_coeff_vectorized_dyn_selector
run	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    EIGEN_ALWAYS_INLINE static void run(const CJ& cj, A& a, B& b, C& c, T& \/*t*\/)$/;"	f	struct:Eigen::internal::gebp_madd_selector
run	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    EIGEN_ALWAYS_INLINE static void run(const CJ& cj, T& a, T& b, T& c, T& t)$/;"	f	struct:Eigen::internal::gebp_madd_selector
run	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  static EIGEN_STRONG_INLINE void run($/;"	f	struct:Eigen::internal::general_matrix_matrix_product
run	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^static void run(Index rows, Index cols, Index depth,$/;"	f	struct:Eigen::internal::general_matrix_matrix_product
run	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  static EIGEN_STRONG_INLINE void run(Index size, Index depth,const LhsScalar* _lhs, Index lhsStride,$/;"	f	struct:Eigen::internal::general_matrix_matrix_triangular_product
run	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  static EIGEN_STRONG_INLINE void run(Index size, Index depth,const LhsScalar* lhs, Index lhsStride,$/;"	f	struct:Eigen::internal::general_matrix_matrix_triangular_product
run	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  static void run(MatrixType& mat, const ProductType& prod, const typename MatrixType::Scalar& alpha)$/;"	f	struct:Eigen::general_product_to_triangular_selector
run	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^EIGEN_DONT_INLINE void general_matrix_vector_product<Index,LhsScalar,ColMajor,ConjugateLhs,RhsScalar,ConjugateRhs,Version>::run($/;"	f	class:Eigen::internal::general_matrix_vector_product
run	include/Eigen/src/Core/products/GeneralMatrixVector.h	/^EIGEN_DONT_INLINE void general_matrix_vector_product<Index,LhsScalar,RowMajor,ConjugateLhs,RhsScalar,ConjugateRhs,Version>::run($/;"	f	class:Eigen::internal::general_matrix_vector_product
run	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  static EIGEN_STRONG_INLINE void run($/;"	f	struct:Eigen::internal::product_selfadjoint_matrix
run	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^EIGEN_DONT_INLINE void product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,false,ConjugateLhs, RhsStorageOrder,true,ConjugateRhs,ColMajor>::run($/;"	f	class:Eigen::internal::product_selfadjoint_matrix
run	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^EIGEN_DONT_INLINE void product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,true,ConjugateLhs, RhsStorageOrder,false,ConjugateRhs,ColMajor>::run($/;"	f	class:Eigen::internal::product_selfadjoint_matrix
run	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^EIGEN_DONT_INLINE void selfadjoint_matrix_vector_product<Scalar,Index,StorageOrder,UpLo,ConjugateLhs,ConjugateRhs,Version>::run($/;"	f	class:Eigen::internal::selfadjoint_matrix_vector_product
run	include/Eigen/src/Core/products/SelfadjointProduct.h	/^  static void run(Index size, Scalar* mat, Index stride, const Scalar* vecX, const Scalar* vecY, const Scalar& alpha)$/;"	f	struct:Eigen::selfadjoint_rank1_update
run	include/Eigen/src/Core/products/SelfadjointProduct.h	/^  static void run(MatrixType& mat, const OtherType& other, const typename MatrixType::Scalar& alpha)$/;"	f	struct:Eigen::selfadjoint_product_selector
run	include/Eigen/src/Core/products/SelfadjointRank2Update.h	/^  static void run(Scalar* mat, Index stride, const UType& u, const VType& v, const Scalar& alpha)$/;"	f	struct:Eigen::internal::selfadjoint_rank2_update_selector
run	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^                                                        RhsStorageOrder,ConjugateRhs,ColMajor,Version>::run($/;"	f	class:Eigen::internal::product_triangular_matrix_matrix
run	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  static EIGEN_STRONG_INLINE void run($/;"	f	struct:Eigen::internal::product_triangular_matrix_matrix
run	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^  ::run(Index _rows, Index _cols, const LhsScalar* _lhs, Index lhsStride,$/;"	f	class:Eigen::internal::triangular_matrix_vector_product
run	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^  static void run(const TriangularProduct<Mode,true,Lhs,false,Rhs,true>& prod, Dest& dest, const typename TriangularProduct<Mode,true,Lhs,false,Rhs,true>::Scalar& alpha)$/;"	f	struct:Eigen::internal::trmv_selector
run	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^  static void run($/;"	f	struct:Eigen::internal::triangular_solve_matrix
run	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^EIGEN_DONT_INLINE void triangular_solve_matrix<Scalar,Index,OnTheLeft,Mode,Conjugate,TriStorageOrder,ColMajor>::run($/;"	f	class:Eigen::internal::triangular_solve_matrix
run	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^EIGEN_DONT_INLINE void triangular_solve_matrix<Scalar,Index,OnTheRight,Mode,Conjugate,TriStorageOrder,ColMajor>::run($/;"	f	class:Eigen::internal::triangular_solve_matrix
run	include/Eigen/src/Core/products/TriangularSolverVector.h	/^  static void run(Index size, const LhsScalar* _lhs, Index lhsStride, RhsScalar* rhs)$/;"	f	struct:Eigen::internal::triangular_solve_vector
run	include/Eigen/src/Core/util/BlasUtil.h	/^  static EIGEN_STRONG_INLINE To run(const From& x) { return x; }$/;"	f	struct:Eigen::internal::get_factor
run	include/Eigen/src/Core/util/BlasUtil.h	/^  static EIGEN_STRONG_INLINE typename NumTraits<Scalar>::Real run(const Scalar& x) { return numext::real(x); }$/;"	f	struct:Eigen::internal::get_factor
run	include/Eigen/src/Core/util/BlasUtil.h	/^  static const typename T::Scalar* run(const T& m)$/;"	f	struct:Eigen::internal::extract_data_selector
run	include/Eigen/src/Core/util/BlasUtil.h	/^  static typename T::Scalar* run(const T&) { return 0; }$/;"	f	struct:Eigen::internal::extract_data_selector
run	include/Eigen/src/Core/util/Memory.h	/^  static inline void run(const T* start, const T* end, T* target)$/;"	f	struct:Eigen::internal::smart_copy_helper
run	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  static inline void run(Quaternion<Scalar>& q, const Other& mat)$/;"	f	struct:Eigen::ei_quaternion_assign_impl
run	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  static inline void run(Quaternion<Scalar>& q, const Other& vec)$/;"	f	struct:Eigen::ei_quaternion_assign_impl
run	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^    static inline void run(Transform *transform, const MatrixBase<OtherDerived>& other)$/;"	f	struct:Eigen::Transform::construct_from_matrix
run	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  static ResultType run(const TransformType& tr, const Other& other)$/;"	f	struct:Eigen::ei_transform_product_impl
run	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^  static void run(ComplexSchur<MatrixType>& _this, const MatrixType& matrix, bool computeU)$/;"	f	struct:Eigen::internal::complex_schur_reduce_to_hessenberg
run	include/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^  run(const MatrixBase<Derived>& m)$/;"	f	class:Eigen::internal::eigenvalues_selector::MatrixBase
run	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^  static inline void run(SolverType& eig, const typename SolverType::MatrixType& A, int options)$/;"	f	struct:Eigen::internal::direct_selfadjoint_eigenvalues
run	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^  static inline void run(SolverType& solver, const MatrixType& mat, int options)$/;"	f	struct:Eigen::internal::direct_selfadjoint_eigenvalues
run	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  static void run(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, bool extractQ)$/;"	f	struct:Eigen::internal::tridiagonalization_inplace_selector
run	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  static void run(MatrixType& mat, DiagonalType& diag, SubDiagonalType&, bool extractQ)$/;"	f	struct:Eigen::internal::tridiagonalization_inplace_selector
run	include/Eigen/src/Geometry/Homogeneous.h	/^  static const type& run (const TransformType& x) { return x.matrix(); }$/;"	f	struct:Eigen::internal::take_matrix_for_product
run	include/Eigen/src/Geometry/Homogeneous.h	/^  static const type& run(const type &x) { return x; }$/;"	f	struct:Eigen::internal::take_matrix_for_product
run	include/Eigen/src/Geometry/Homogeneous.h	/^  static type run (const TransformType& x) { return x.affine(); }$/;"	f	struct:Eigen::internal::take_matrix_for_product
run	include/Eigen/src/Geometry/OrthoMethods.h	/^  run(const VectorLhs& lhs, const VectorRhs& rhs)$/;"	f	struct:Eigen::internal::cross3_impl
run	include/Eigen/src/Geometry/OrthoMethods.h	/^  static inline VectorType run(const Derived& src)$/;"	f	struct:Eigen::internal::unitOrthogonal_selector
run	include/Eigen/src/Geometry/Quaternion.h	/^  static EIGEN_STRONG_INLINE Quaternion<Scalar> run(const QuaternionBase<Derived1>& a, const QuaternionBase<Derived2>& b){$/;"	f	struct:Eigen::internal::quat_product
run	include/Eigen/src/Geometry/Quaternion.h	/^  template<class Derived> static inline void run(QuaternionBase<Derived>& q, const Other& mat)$/;"	f	struct:Eigen::internal::quaternionbase_assign_impl
run	include/Eigen/src/Geometry/Quaternion.h	/^  template<class Derived> static inline void run(QuaternionBase<Derived>& q, const Other& vec)$/;"	f	struct:Eigen::internal::quaternionbase_assign_impl
run	include/Eigen/src/Geometry/RotationBase.h	/^  static EIGEN_STRONG_INLINE ReturnType run(const RotationDerived& r, const OtherVectorType& v)$/;"	f	struct:Eigen::internal::rotation_base_generic_product_selector
run	include/Eigen/src/Geometry/RotationBase.h	/^  static inline ReturnType run(const RotationDerived& r, const DiagonalMatrix<Scalar,Dim,MaxDim>& m)$/;"	f	struct:Eigen::internal::rotation_base_generic_product_selector
run	include/Eigen/src/Geometry/RotationBase.h	/^  static inline ReturnType run(const RotationDerived& r, const MatrixType& m)$/;"	f	struct:Eigen::internal::rotation_base_generic_product_selector
run	include/Eigen/src/Geometry/Transform.h	/^  static EIGEN_STRONG_INLINE ResultType run(const TransformType& T, const MatrixType& other)$/;"	f	struct:Eigen::internal::transform_right_product_impl
run	include/Eigen/src/Geometry/Transform.h	/^  static ResultType run(const Lhs& lhs, const Rhs& rhs)$/;"	f	struct:Eigen::internal::transform_transform_product_impl
run	include/Eigen/src/Geometry/Transform.h	/^  static ResultType run(const Other& other, const TransformType& tr)$/;"	f	struct:Eigen::internal::transform_left_product_impl
run	include/Eigen/src/Geometry/Transform.h	/^  static ResultType run(const Other& other,const TransformType& tr)$/;"	f	struct:Eigen::internal::transform_left_product_impl
run	include/Eigen/src/Geometry/Transform.h	/^  static inline AffinePart run(MatrixType& m)$/;"	f	struct:Eigen::internal::transform_take_affine_part
run	include/Eigen/src/Geometry/Transform.h	/^  static inline ConstAffinePart run(const MatrixType& m)$/;"	f	struct:Eigen::internal::transform_take_affine_part
run	include/Eigen/src/Geometry/Transform.h	/^  static inline MatrixType& run(MatrixType& m) { return m; }$/;"	f	struct:Eigen::internal::transform_take_affine_part
run	include/Eigen/src/Geometry/Transform.h	/^  static inline const MatrixType& run(const MatrixType& m) { return m; }$/;"	f	struct:Eigen::internal::transform_take_affine_part
run	include/Eigen/src/Geometry/Transform.h	/^  static inline void run(Transform<typename Other::Scalar,Dim,AffineCompact,Options> *transform, const Other& other)$/;"	f	struct:Eigen::internal::transform_construct_from_matrix
run	include/Eigen/src/Geometry/Transform.h	/^  static inline void run(Transform<typename Other::Scalar,Dim,Mode,Options> *transform, const Other& other)$/;"	f	struct:Eigen::internal::transform_construct_from_matrix
run	include/Eigen/src/Geometry/Transform.h	/^  static inline void run(const TransformType& m, TransformType& res)$/;"	f	struct:Eigen::internal::projective_transform_inverse
run	include/Eigen/src/Geometry/Transform.h	/^  static inline void run(const TransformType&, TransformType&)$/;"	f	struct:Eigen::internal::projective_transform_inverse
run	include/Eigen/src/Geometry/Transform.h	/^  static void run(MatrixType &mat)$/;"	f	struct:Eigen::internal::transform_make_affine
run	include/Eigen/src/Geometry/Transform.h	/^  template<typename MatrixType> static void run(MatrixType &) { }$/;"	f	struct:Eigen::internal::transform_make_affine
run	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^  run(const VectorLhs& lhs, const VectorRhs& rhs)$/;"	f	struct:Eigen::internal::cross3_impl
run	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^  static inline Quaternion<double> run(const QuaternionBase<Derived>& _a, const QuaternionBase<OtherDerived>& _b)$/;"	f	struct:Eigen::internal::quat_product
run	include/Eigen/src/Geometry/arch/Geometry_SSE.h	/^  static inline Quaternion<float> run(const QuaternionBase<Derived>& _a, const QuaternionBase<OtherDerived>& _b)$/;"	f	struct:Eigen::internal::quat_product
run	include/Eigen/src/LU/Determinant.h	/^  static inline typename traits<Derived>::Scalar run(const Derived& m)$/;"	f	struct:Eigen::internal::determinant_impl
run	include/Eigen/src/LU/Determinant.h	/^  static typename traits<Derived>::Scalar run(const Derived& m)$/;"	f	struct:Eigen::internal::determinant_impl
run	include/Eigen/src/LU/Inverse.h	/^  static inline void run($/;"	f	struct:Eigen::internal::compute_inverse_and_det_with_check
run	include/Eigen/src/LU/Inverse.h	/^  static inline void run(const MatrixType& matrix, ResultType& result)$/;"	f	struct:Eigen::internal::compute_inverse
run	include/Eigen/src/LU/Inverse.h	/^  static void run(const MatrixType& matrix, ResultType& result)$/;"	f	struct:Eigen::internal::compute_inverse_size4
run	include/Eigen/src/LU/arch/Inverse_SSE.h	/^  static void run(const MatrixType& matrix, ResultType& result)$/;"	f	struct:Eigen::internal::compute_inverse_size4
run	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    static Index run( _MKL_DSS_HANDLE_t pt, Index maxfct, Index mnum, Index type, Index phase, Index n, void *a,$/;"	f	struct:Eigen::internal::pardiso_run_selector
run	include/Eigen/src/SVD/JacobiSVD.h	/^  bool run(JacobiSVD<MatrixType, ColPivHouseholderQRPreconditioner>& svd, const MatrixType& matrix)$/;"	f	class:Eigen::internal::qr_preconditioner_impl
run	include/Eigen/src/SVD/JacobiSVD.h	/^  bool run(JacobiSVD<MatrixType, FullPivHouseholderQRPreconditioner>& svd, const MatrixType& matrix)$/;"	f	class:Eigen::internal::qr_preconditioner_impl
run	include/Eigen/src/SVD/JacobiSVD.h	/^  bool run(JacobiSVD<MatrixType, HouseholderQRPreconditioner>& svd, const MatrixType& matrix)$/;"	f	class:Eigen::internal::qr_preconditioner_impl
run	include/Eigen/src/SVD/JacobiSVD.h	/^  bool run(JacobiSVD<MatrixType, QRPreconditioner>&, const MatrixType&)$/;"	f	class:Eigen::internal::qr_preconditioner_impl
run	include/Eigen/src/SVD/JacobiSVD.h	/^  static void run(typename SVD::WorkMatrixType& work_matrix, SVD& svd, Index p, Index q)$/;"	f	struct:Eigen::internal::svd_precondition_2x2_block_to_be_real
run	include/Eigen/src/SVD/JacobiSVD.h	/^  static void run(typename SVD::WorkMatrixType&, SVD&, Index, Index) {}$/;"	f	struct:Eigen::internal::svd_precondition_2x2_block_to_be_real
run	include/Eigen/src/SparseCore/ConservativeSparseSparseProduct.h	/^  static void run(const Lhs& lhs, const Rhs& rhs, ResultType& res)$/;"	f	struct:Eigen::internal::conservative_sparse_sparse_product_selector
run	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^  static void run(const SparseLhsType& lhs, const DenseRhsType& rhs, DenseResType& res, const typename Res::Scalar& alpha)$/;"	f	struct:Eigen::internal::sparse_time_dense_product_impl
run	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^  static void run(const Lhs& lhs, const Rhs& rhs, ResultType& res, const RealScalar& tolerance)$/;"	f	struct:Eigen::internal::sparse_sparse_product_with_pruning_selector
run	include/Eigen/src/SparseCore/SparseVector.h	/^  static void run(Dest& dst, const Src& src) {$/;"	f	struct:Eigen::internal::sparse_vector_assign_selector
run	include/Eigen/src/SparseCore/TriangularSolver.h	/^  static void run(const Lhs& lhs, Rhs& other)$/;"	f	struct:Eigen::internal::sparse_solve_triangular_selector
run	include/Eigen/src/SparseCore/TriangularSolver.h	/^  static void run(const Lhs& lhs, Rhs& other)$/;"	f	struct:Eigen::internal::sparse_solve_triangular_sparse_selector
run	include/Eigen/src/SparseLU/SparseLU_kernel_bmod.h	/^EIGEN_DONT_INLINE void LU_kernel_bmod<1>::run(const int \/*segsize*\/, BlockScalarVector& dense, ScalarVector& \/*tempv*\/, ScalarVector& lusup, Index& luptr,$/;"	f	class:Eigen::internal::LU_kernel_bmod
run	include/Eigen/src/SparseLU/SparseLU_kernel_bmod.h	/^EIGEN_DONT_INLINE void LU_kernel_bmod<SegSizeAtCompileTime>::run(const int segsize, BlockScalarVector& dense, ScalarVector& tempv, ScalarVector& lusup, Index& luptr, const Index lda,$/;"	f	class:Eigen::internal::LU_kernel_bmod
run	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  static void run(MatrixType& mat, SluMatrix& res)$/;"	f	struct:Eigen::SluMatrixMapHelper
s	include/Eigen/src/Jacobi/Jacobi.h	/^    Scalar s() const { return m_s; }$/;"	f	class:Eigen::JacobiRotation
s	include/Eigen/src/Jacobi/Jacobi.h	/^    Scalar& s() { return m_s; }$/;"	f	class:Eigen::JacobiRotation
sample	include/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType sample() const$/;"	f	class:Eigen::AlignedBox
scalar_abs2_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_abs2_op {$/;"	s	namespace:Eigen::internal
scalar_abs_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_abs_op {$/;"	s	namespace:Eigen::internal
scalar_acos_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_acos_op {$/;"	s	namespace:Eigen::internal
scalar_add_op	include/Eigen/src/Core/Functors.h	/^  inline scalar_add_op(const Scalar& other) : m_other(other) { }$/;"	f	struct:Eigen::internal::scalar_add_op
scalar_add_op	include/Eigen/src/Core/Functors.h	/^  inline scalar_add_op(const scalar_add_op& other) : m_other(other.m_other) { }$/;"	f	struct:Eigen::internal::scalar_add_op
scalar_add_op	include/Eigen/src/Core/Functors.h	/^struct scalar_add_op {$/;"	s	namespace:Eigen::internal
scalar_asin_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_asin_op {$/;"	s	namespace:Eigen::internal
scalar_binary_pow_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar, typename OtherScalar> struct scalar_binary_pow_op {$/;"	s	namespace:Eigen::internal
scalar_boolean_and_op	include/Eigen/src/Core/Functors.h	/^struct scalar_boolean_and_op {$/;"	s	namespace:Eigen::internal
scalar_boolean_or_op	include/Eigen/src/Core/Functors.h	/^struct scalar_boolean_or_op {$/;"	s	namespace:Eigen::internal
scalar_cast_op	include/Eigen/src/Core/Functors.h	/^struct scalar_cast_op {$/;"	s	namespace:Eigen::internal
scalar_conj_product_op	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct scalar_conj_product_op {$/;"	s	namespace:Eigen::internal
scalar_conjugate_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_conjugate_op {$/;"	s	namespace:Eigen::internal
scalar_constant_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }$/;"	f	struct:Eigen::internal::scalar_constant_op
scalar_constant_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }$/;"	f	struct:Eigen::internal::scalar_constant_op
scalar_constant_op	include/Eigen/src/Core/Functors.h	/^struct scalar_constant_op {$/;"	s	namespace:Eigen::internal
scalar_cos_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_cos_op {$/;"	s	namespace:Eigen::internal
scalar_cube_op	include/Eigen/src/Core/Functors.h	/^struct scalar_cube_op {$/;"	s	namespace:Eigen::internal
scalar_difference_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_difference_op {$/;"	s	namespace:Eigen::internal
scalar_exp_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_exp_op {$/;"	s	namespace:Eigen::internal
scalar_fuzzy_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl {};$/;"	s	namespace:Eigen::internal
scalar_fuzzy_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl<Scalar, false, false>$/;"	s	namespace:Eigen::internal
scalar_fuzzy_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl<Scalar, false, true>$/;"	s	namespace:Eigen::internal
scalar_fuzzy_default_impl	include/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl<Scalar, true, false>$/;"	s	namespace:Eigen::internal
scalar_fuzzy_impl	include/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_impl : scalar_fuzzy_default_impl<Scalar, NumTraits<Scalar>::IsComplex, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:Eigen::internal
scalar_fuzzy_impl	include/Eigen/src/Core/MathFunctions.h	/^template<> struct scalar_fuzzy_impl<bool>$/;"	s	namespace:Eigen::internal
scalar_hypot_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_hypot_op {$/;"	s	namespace:Eigen::internal
scalar_identity_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_identity_op {$/;"	s	namespace:Eigen::internal
scalar_imag_op	include/Eigen/src/Core/Functors.h	/^struct scalar_imag_op {$/;"	s	namespace:Eigen::internal
scalar_imag_ref_op	include/Eigen/src/Core/Functors.h	/^struct scalar_imag_ref_op {$/;"	s	namespace:Eigen::internal
scalar_inverse_mult_op	include/Eigen/src/Core/Functors.h	/^  scalar_inverse_mult_op(const Scalar& other) : m_other(other) {}$/;"	f	struct:Eigen::internal::scalar_inverse_mult_op
scalar_inverse_mult_op	include/Eigen/src/Core/Functors.h	/^struct scalar_inverse_mult_op {$/;"	s	namespace:Eigen::internal
scalar_inverse_op	include/Eigen/src/Core/Functors.h	/^struct scalar_inverse_op {$/;"	s	namespace:Eigen::internal
scalar_log_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_log_op {$/;"	s	namespace:Eigen::internal
scalar_max_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_max_op {$/;"	s	namespace:Eigen::internal
scalar_max_op	include/Eigen/src/Eigen2Support/Cwise.h	/^    const EIGEN_CWISE_BINOP_RETURN_TYPE(internal::scalar_max_op)$/;"	f	class:Eigen::Cwise
scalar_min_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_min_op {$/;"	s	namespace:Eigen::internal
scalar_min_op	include/Eigen/src/Eigen2Support/Cwise.h	/^    const EIGEN_CWISE_BINOP_RETURN_TYPE(internal::scalar_min_op)$/;"	f	class:Eigen::Cwise
scalar_multiple2_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple2_op(const Scalar2& other) : m_other(other) { }$/;"	f	struct:Eigen::internal::scalar_multiple2_op
scalar_multiple2_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple2_op(const scalar_multiple2_op& other) : m_other(other.m_other) { }$/;"	f	struct:Eigen::internal::scalar_multiple2_op
scalar_multiple2_op	include/Eigen/src/Core/Functors.h	/^struct scalar_multiple2_op {$/;"	s	namespace:Eigen::internal
scalar_multiple_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple_op(const Scalar& other) : m_other(other) { }$/;"	f	struct:Eigen::internal::scalar_multiple_op
scalar_multiple_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple_op(const scalar_multiple_op& other) : m_other(other.m_other) { }$/;"	f	struct:Eigen::internal::scalar_multiple_op
scalar_multiple_op	include/Eigen/src/Core/Functors.h	/^struct scalar_multiple_op {$/;"	s	namespace:Eigen::internal
scalar_opposite_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_opposite_op {$/;"	s	namespace:Eigen::internal
scalar_pow_op	include/Eigen/src/Core/Functors.h	/^  inline scalar_pow_op(const Scalar& exponent) : m_exponent(exponent) {}$/;"	f	struct:Eigen::internal::scalar_pow_op
scalar_pow_op	include/Eigen/src/Core/Functors.h	/^  inline scalar_pow_op(const scalar_pow_op& other) : m_exponent(other.m_exponent) { }$/;"	f	struct:Eigen::internal::scalar_pow_op
scalar_pow_op	include/Eigen/src/Core/Functors.h	/^struct scalar_pow_op {$/;"	s	namespace:Eigen::internal
scalar_product_op	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct scalar_product_op {$/;"	s	namespace:Eigen::internal
scalar_product_traits	include/Eigen/src/Core/util/Meta.h	/^template<typename T, typename U> struct scalar_product_traits$/;"	s	namespace:Eigen
scalar_product_traits	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct scalar_product_traits<T,T>$/;"	s	namespace:Eigen
scalar_product_traits	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct scalar_product_traits<T,std::complex<T> >$/;"	s	namespace:Eigen
scalar_product_traits	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct scalar_product_traits<std::complex<T>, T>$/;"	s	namespace:Eigen
scalar_quotient1_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_quotient1_op(const Scalar& other) : m_other(other) {}$/;"	f	struct:Eigen::internal::scalar_quotient1_op
scalar_quotient1_op	include/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_quotient1_op(const scalar_quotient1_op& other) : m_other(other.m_other) { }$/;"	f	struct:Eigen::internal::scalar_quotient1_op
scalar_quotient1_op	include/Eigen/src/Core/Functors.h	/^struct scalar_quotient1_op {$/;"	s	namespace:Eigen::internal
scalar_quotient_op	include/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct scalar_quotient_op {$/;"	s	namespace:Eigen::internal
scalar_random_op	include/Eigen/src/Core/Random.h	/^template<typename Scalar> struct scalar_random_op {$/;"	s	namespace:Eigen::internal
scalar_real_op	include/Eigen/src/Core/Functors.h	/^struct scalar_real_op {$/;"	s	namespace:Eigen::internal
scalar_real_ref_op	include/Eigen/src/Core/Functors.h	/^struct scalar_real_ref_op {$/;"	s	namespace:Eigen::internal
scalar_sin_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_sin_op {$/;"	s	namespace:Eigen::internal
scalar_sqrt_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_sqrt_op {$/;"	s	namespace:Eigen::internal
scalar_square_op	include/Eigen/src/Core/Functors.h	/^struct scalar_square_op {$/;"	s	namespace:Eigen::internal
scalar_sum_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_sum_op {$/;"	s	namespace:Eigen::internal
scalar_tan_op	include/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_tan_op {$/;"	s	namespace:Eigen::internal
scale	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::scale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
scale	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::scale(Scalar s)$/;"	f	class:Eigen::Transform
scale	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::scale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
scale	include/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::scale(const Scalar& s)$/;"	f	class:Eigen::Transform
scaleAndAddTo	include/Eigen/src/Core/GeneralProduct.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, const Scalar& alpha) const$/;"	f	class:Eigen::GeneralProduct
scaleAndAddTo	include/Eigen/src/Core/GeneralProduct.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dst, const Scalar& alpha) const$/;"	f	class:Eigen::GeneralProduct
scaleAndAddTo	include/Eigen/src/Core/ProductBase.h	/^    inline void scaleAndAddTo(Dest& dst, const Scalar& a_alpha) const { m_prod.derived().scaleAndAddTo(dst,a_alpha * m_alpha); }$/;"	f	class:ScaledProduct
scaleAndAddTo	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dst, const Scalar& alpha) const$/;"	f	class:Eigen::GeneralProduct
scaleAndAddTo	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dst, const Scalar& alpha) const$/;"	f	struct:Eigen::SelfadjointProductMatrix
scaleAndAddTo	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dest, const Scalar& alpha) const$/;"	f	struct:Eigen::SelfadjointProductMatrix
scaleAndAddTo	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dst, const Scalar& alpha) const$/;"	f	struct:Eigen::TriangularProduct
scaleAndAddTo	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dst, const Scalar& alpha) const$/;"	f	struct:Eigen::TriangularProduct
scaleAndAddTo	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, const Scalar& alpha) const$/;"	f	class:Eigen::DenseTimeSparseProduct
scaleAndAddTo	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, const Scalar& alpha) const$/;"	f	class:Eigen::SparseTimeDenseProduct
scaleAndAddTo	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    template<typename Dest> void scaleAndAddTo(Dest& \/*dest*\/, const Scalar& \/*alpha*\/) const$/;"	f	class:Eigen::DenseTimeSparseSelfAdjointProduct
scaleAndAddTo	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, const Scalar& alpha) const$/;"	f	class:Eigen::SparseSelfAdjointTimeDenseProduct
scomplex	include/Eigen/src/Core/util/MKL_support.h	/^typedef std::complex<float>  scomplex;$/;"	t	namespace:Eigen
score	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index score ; \/* the score used to maintain heap, if col is alive *\/$/;"	m	union:internal::colamd_col::__anon402
searchLowerIndex	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline Index searchLowerIndex(Index key) const$/;"	f	class:Eigen::internal::CompressedStorage
searchLowerIndex	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline Index searchLowerIndex(size_t start, size_t end, Index key) const$/;"	f	class:Eigen::internal::CompressedStorage
second	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RealPacket second;$/;"	m	struct:Eigen::internal::gebp_traits::DoublePacket
segment	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstSegmentReturnType segment(Index start, Index n) const$/;"	f
segment	include/Eigen/src/plugins/BlockMethods.h	/^inline SegmentReturnType segment(Index start, Index n)$/;"	f
segment	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstFixedSegmentReturnType<N>::Type segment(Index start, Index n = N) const$/;"	f
segment	include/Eigen/src/plugins/BlockMethods.h	/^inline typename FixedSegmentReturnType<N>::Type segment(Index start, Index n = N)$/;"	f
select	include/Eigen/src/Core/Select.h	/^DenseBase<Derived>::select(const DenseBase<ThenDerived>& thenMatrix,$/;"	f	class:Eigen::DenseBase
select	include/Eigen/src/Core/Select.h	/^DenseBase<Derived>::select(const typename ElseDerived::Scalar& thenScalar,$/;"	f	class:Eigen::DenseBase
selector	include/Eigen/src/Core/GeneralProduct.h	/^  typedef product_type_selector<rows_select, cols_select, depth_select> selector;$/;"	t	struct:Eigen::internal::product_type
selfadjointView	include/Eigen/src/Core/SelfAdjointView.h	/^MatrixBase<Derived>::selfadjointView() const$/;"	f	class:Eigen::MatrixBase
selfadjointView	include/Eigen/src/Core/SelfAdjointView.h	/^MatrixBase<Derived>::selfadjointView()$/;"	f	class:Eigen::MatrixBase
selfadjointView	include/Eigen/src/Core/TriangularMatrix.h	/^    SelfAdjointView<MatrixTypeNestedNonRef,Mode> selfadjointView()$/;"	f	class:Eigen::TriangularView
selfadjointView	include/Eigen/src/Core/TriangularMatrix.h	/^    const SelfAdjointView<MatrixTypeNestedNonRef,Mode> selfadjointView() const$/;"	f	class:Eigen::TriangularView
selfadjointView	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^SparseSelfAdjointView<Derived, UpLo> SparseMatrixBase<Derived>::selfadjointView()$/;"	f	class:Eigen::SparseMatrixBase
selfadjointView	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^const SparseSelfAdjointView<Derived, UpLo> SparseMatrixBase<Derived>::selfadjointView() const$/;"	f	class:Eigen::SparseMatrixBase
selfadjoint_matrix_vector_product	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct selfadjoint_matrix_vector_product$/;"	s	namespace:Eigen::internal
selfadjoint_matrix_vector_product_symv	include/Eigen/src/Core/products/SelfadjointMatrixVector_MKL.h	/^struct selfadjoint_matrix_vector_product_symv :$/;"	s	namespace:Eigen::internal
selfadjoint_product_selector	include/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_product_selector<MatrixType,OtherType,UpLo,false>$/;"	s	namespace:Eigen
selfadjoint_product_selector	include/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_product_selector<MatrixType,OtherType,UpLo,true>$/;"	s	namespace:Eigen
selfadjoint_rank1_update	include/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_rank1_update<Scalar,Index,ColMajor,UpLo,ConjLhs,ConjRhs>$/;"	s	namespace:Eigen
selfadjoint_rank1_update	include/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_rank1_update<Scalar,Index,RowMajor,UpLo,ConjLhs,ConjRhs>$/;"	s	namespace:Eigen
selfadjoint_rank2_update_selector	include/Eigen/src/Core/products/SelfadjointRank2Update.h	/^struct selfadjoint_rank2_update_selector<Scalar,Index,UType,VType,Lower>$/;"	s	namespace:Eigen::internal
selfadjoint_rank2_update_selector	include/Eigen/src/Core/products/SelfadjointRank2Update.h	/^struct selfadjoint_rank2_update_selector<Scalar,Index,UType,VType,Upper>$/;"	s	namespace:Eigen::internal
set	include/Eigen/src/Core/GeneralProduct.h	/^    struct set  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const { dst.const_cast_derived()  = src; } };$/;"	s	class:Eigen::GeneralProduct
setBounds	include/Eigen/src/SparseCore/AmbiVector.h	/^    void setBounds(Index start, Index end) { m_start = start; m_end = end; }$/;"	f	class:Eigen::internal::AmbiVector
setConstant	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setConstant(const Scalar& val)$/;"	f	class:Eigen::DenseBase
setConstant	include/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setConstant(Index nbRows, Index nbCols, const Scalar& val)$/;"	f	class:Eigen::PlainObjectBase
setConstant	include/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setConstant(Index size, const Scalar& val)$/;"	f	class:Eigen::PlainObjectBase
setConstant	include/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& setConstant(const Scalar& value)$/;"	f	class:Eigen::TriangularView
setCpuCacheSizes	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline void setCpuCacheSizes(std::ptrdiff_t l1, std::ptrdiff_t l2)$/;"	f	namespace:Eigen
setDroptol	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^void IncompleteLUT<Scalar>::setDroptol(const RealScalar& droptol)$/;"	f	class:Eigen::IncompleteLUT
setEmpty	include/Eigen/src/Geometry/AlignedBox.h	/^  inline void setEmpty()$/;"	f	class:Eigen::AlignedBox
setFillfactor	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^void IncompleteLUT<Scalar>::setFillfactor(int fillfactor)$/;"	f	class:Eigen::IncompleteLUT
setFromTriplets	include/Eigen/src/SparseCore/SparseMatrix.h	/^void SparseMatrix<Scalar,_Options,_Index>::setFromTriplets(const InputIterators& begin, const InputIterators& end)$/;"	f	class:Eigen::SparseMatrix
setFromTwoVectors	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::setFromTwoVectors(const MatrixBase<Derived1>& a, const MatrixBase<Derived2>& b)$/;"	f	class:Eigen::Quaternion
setFromTwoVectors	include/Eigen/src/Geometry/Quaternion.h	/^inline Derived& QuaternionBase<Derived>::setFromTwoVectors(const MatrixBase<Derived1>& a, const MatrixBase<Derived2>& b)$/;"	f	class:Eigen::QuaternionBase
setIdentity	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::setIdentity()$/;"	f	class:Eigen::MatrixBase
setIdentity	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::setIdentity(Index nbRows, Index nbCols)$/;"	f	class:Eigen::MatrixBase
setIdentity	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setIdentity() { m_diagonal.setOnes(); }$/;"	f	class:Eigen::DiagonalMatrix
setIdentity	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setIdentity(Index size) { m_diagonal.setOnes(size); }$/;"	f	class:Eigen::DiagonalMatrix
setIdentity	include/Eigen/src/Core/PermutationMatrix.h	/^    void setIdentity()$/;"	f	class:Eigen::PermutationBase
setIdentity	include/Eigen/src/Core/PermutationMatrix.h	/^    void setIdentity(Index newSize)$/;"	f	class:Eigen::PermutationBase
setIdentity	include/Eigen/src/Core/Transpositions.h	/^    void setIdentity()$/;"	f	class:Eigen::TranspositionsBase
setIdentity	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion& setIdentity() { m_coeffs << 0, 0, 0, 1; return *this; }$/;"	f	class:Eigen::Quaternion
setIdentity	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  void setIdentity() { m_matrix.setIdentity(); }$/;"	f	class:Eigen::Transform
setIdentity	include/Eigen/src/Geometry/Quaternion.h	/^  inline QuaternionBase& setIdentity() { coeffs() << 0, 0, 0, 1; return *this; }$/;"	f	class:Eigen::QuaternionBase
setIdentity	include/Eigen/src/Geometry/Transform.h	/^  void setIdentity() { m_matrix.setIdentity(); }$/;"	f	class:Eigen::Transform
setIdentity	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void setIdentity()$/;"	f	class:Eigen::SparseMatrix
setIdentity_impl	include/Eigen/src/Core/CwiseNullaryOp.h	/^struct setIdentity_impl<Derived, true>$/;"	s	namespace:Eigen::internal
setInfos	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    void setInfos(Index m, Index n, ScalarVector& nzval, IndexVector& nzval_colptr, IndexVector& rowind, $/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
setLength	include/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence& setLength(Index length)$/;"	f	class:Eigen::HouseholderSequence
setLinSpaced	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setLinSpaced(Index newSize, const Scalar& low, const Scalar& high)$/;"	f	class:Eigen::DenseBase
setLinSpaced	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setLinSpaced(const Scalar& low, const Scalar& high)$/;"	f	class:Eigen::DenseBase
setMaxIterations	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComplexEigenSolver& setMaxIterations(Index maxIters)$/;"	f	class:Eigen::ComplexEigenSolver
setMaxIterations	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexSchur& setMaxIterations(Index maxIters)$/;"	f	class:Eigen::ComplexSchur
setMaxIterations	include/Eigen/src/Eigenvalues/EigenSolver.h	/^    EigenSolver& setMaxIterations(Index maxIters)$/;"	f	class:Eigen::EigenSolver
setMaxIterations	include/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h	/^    GeneralizedEigenSolver& setMaxIterations(Index maxIters)$/;"	f	class:Eigen::GeneralizedEigenSolver
setMaxIterations	include/Eigen/src/Eigenvalues/RealQZ.h	/^      RealQZ& setMaxIterations(Index maxIters)$/;"	f	class:Eigen::RealQZ
setMaxIterations	include/Eigen/src/Eigenvalues/RealSchur.h	/^    RealSchur& setMaxIterations(Index maxIters)$/;"	f	class:Eigen::RealSchur
setMaxIterations	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Derived& setMaxIterations(int maxIters)$/;"	f	class:Eigen::IterativeSolverBase
setMode	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    void setMode(CholmodMode mode)$/;"	f	class:Eigen::CholmodDecomposition
setMode	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    SimplicialCholesky& setMode(SimplicialCholeskyMode mode)$/;"	f	class:Eigen::SimplicialCholesky
setNbThreads	include/Eigen/src/Core/products/Parallelizer.h	/^inline void setNbThreads(int v)$/;"	f	namespace:Eigen
setNull	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline void setNull()$/;"	f	class:Eigen::AlignedBox
setNull	include/Eigen/src/Geometry/AlignedBox.h	/^  inline void setNull() { setEmpty(); }$/;"	f	class:Eigen::AlignedBox
setOnes	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setOnes()$/;"	f	class:Eigen::DenseBase
setOnes	include/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setOnes(Index nbRows, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
setOnes	include/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setOnes(Index newSize)$/;"	f	class:Eigen::PlainObjectBase
setOnes	include/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& setOnes() { return setConstant(Scalar(1)); }$/;"	f	class:Eigen::TriangularView
setPivotThreshold	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    void setPivotThreshold(const RealScalar& tol) { m_tolerance = tol; }$/;"	f	class:Eigen::SPQR
setPivotThreshold	include/Eigen/src/SparseLU/SparseLU.h	/^    void setPivotThreshold(const RealScalar& thresh)$/;"	f	class:Eigen::SparseLU
setPivotThreshold	include/Eigen/src/SparseQR/SparseQR.h	/^    void setPivotThreshold(const RealScalar& threshold)$/;"	f	class:Eigen::SparseQR
setRandom	include/Eigen/src/Core/Random.h	/^PlainObjectBase<Derived>::setRandom(Index nbRows, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
setRandom	include/Eigen/src/Core/Random.h	/^PlainObjectBase<Derived>::setRandom(Index newSize)$/;"	f	class:Eigen::PlainObjectBase
setRandom	include/Eigen/src/Core/Random.h	/^inline Derived& DenseBase<Derived>::setRandom()$/;"	f	class:Eigen::DenseBase
setSPQROrdering	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    void setSPQROrdering(int ord) { m_ordering = ord;}$/;"	f	class:Eigen::SPQR
setScalarType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  void setScalarType()$/;"	f	struct:Eigen::SluMatrix
setShift	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    Derived& setShift(const RealScalar& offset)$/;"	f	class:Eigen::CholmodBase
setShift	include/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence& setShift(Index shift)$/;"	f	class:Eigen::HouseholderSequence
setShift	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    Derived& setShift(const RealScalar& offset, const RealScalar& scale = 1)$/;"	f	class:Eigen::SimplicialCholeskyBase
setStorageType	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  void setStorageType(Stype_t t)$/;"	f	struct:Eigen::SluMatrix
setThreshold	include/Eigen/src/LU/FullPivLU.h	/^    FullPivLU& setThreshold(Default_t)$/;"	f	class:Eigen::FullPivLU
setThreshold	include/Eigen/src/LU/FullPivLU.h	/^    FullPivLU& setThreshold(const RealScalar& threshold)$/;"	f	class:Eigen::FullPivLU
setThreshold	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR& setThreshold(Default_t)$/;"	f	class:Eigen::ColPivHouseholderQR
setThreshold	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR& setThreshold(const RealScalar& threshold)$/;"	f	class:Eigen::ColPivHouseholderQR
setThreshold	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR& setThreshold(Default_t)$/;"	f	class:Eigen::FullPivHouseholderQR
setThreshold	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR& setThreshold(const RealScalar& threshold)$/;"	f	class:Eigen::FullPivHouseholderQR
setThreshold	include/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD& setThreshold(Default_t)$/;"	f	class:Eigen::JacobiSVD
setThreshold	include/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD& setThreshold(const RealScalar& threshold)$/;"	f	class:Eigen::JacobiSVD
setTolerance	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  Derived& setTolerance(const RealScalar& tolerance)$/;"	f	class:Eigen::IterativeSolverBase
setTrans	include/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence& setTrans(bool trans)$/;"	f	class:Eigen::HouseholderSequence
setZero	include/Eigen/src/Cholesky/LDLT.h	/^    void setZero()$/;"	f	class:Eigen::LDLT
setZero	include/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setZero()$/;"	f	class:Eigen::DenseBase
setZero	include/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setZero(Index nbRows, Index nbCols)$/;"	f	class:Eigen::PlainObjectBase
setZero	include/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setZero(Index newSize)$/;"	f	class:Eigen::PlainObjectBase
setZero	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setZero() { m_diagonal.setZero(); }$/;"	f	class:Eigen::DiagonalMatrix
setZero	include/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setZero(Index size) { m_diagonal.setZero(size); }$/;"	f	class:Eigen::DiagonalMatrix
setZero	include/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& setZero() { return setConstant(Scalar(0)); }$/;"	f	class:Eigen::TriangularView
setZero	include/Eigen/src/SparseCore/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::setZero()$/;"	f	class:Eigen::internal::AmbiVector
setZero	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void setZero()$/;"	f	class:Eigen::SparseMatrix
setZero	include/Eigen/src/SparseCore/SparseVector.h	/^    inline void setZero() { m_data.clear(); }$/;"	f	class:Eigen::SparseVector
set_from_triplets	include/Eigen/src/SparseCore/SparseMatrix.h	/^void set_from_triplets(const InputIterator& begin, const InputIterator& end, SparseMatrixType& mat, int Options = 0)$/;"	f	namespace:Eigen::internal
set_is_malloc_allowed	include/Eigen/src/Core/util/Memory.h	/^inline bool set_is_malloc_allowed(bool new_value) { return is_malloc_allowed_impl(true, new_value); }$/;"	f	namespace:Eigen::internal
shared1	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  } shared1 ;$/;"	m	struct:internal::Colamd_Row	typeref:union:internal::Colamd_Row::__anon405
shared1	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  } shared1 ;$/;"	m	struct:internal::colamd_col	typeref:union:internal::colamd_col::__anon401
shared2	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  } shared2 ;$/;"	m	struct:internal::Colamd_Row	typeref:union:internal::Colamd_Row::__anon406
shared2	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  } shared2 ;$/;"	m	struct:internal::colamd_col	typeref:union:internal::colamd_col::__anon402
shared3	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  } shared3 ;$/;"	m	struct:internal::colamd_col	typeref:union:internal::colamd_col::__anon403
shared4	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  } shared4 ;$/;"	m	struct:internal::colamd_col	typeref:union:internal::colamd_col::__anon404
shear	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::shear(Scalar sx, Scalar sy)$/;"	f	class:Eigen::Transform
shear	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::shear(const Scalar& sx, const Scalar& sy)$/;"	f	class:Eigen::Transform
shift	include/Eigen/src/Householder/HouseholderSequence.h	/^    Index shift() const { return m_shift; }    \/**< \\brief Returns the shift of the Householder sequence. *\/$/;"	f	class:Eigen::HouseholderSequence
signDeterminant	include/Eigen/src/SparseLU/SparseLU.h	/^     Scalar signDeterminant()$/;"	f	class:Eigen::SparseLU
signedDistance	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Scalar signedDistance(const VectorType& p) const { return p.eigen2_dot(normal()) + offset(); }$/;"	f	class:Eigen::Hyperplane
signedDistance	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Scalar signedDistance(const VectorType& p) const { return normal().dot(p) + offset(); }$/;"	f	class:Eigen::Hyperplane
significant_decimals_default_impl	include/Eigen/src/Core/IO.h	/^struct significant_decimals_default_impl$/;"	s	namespace:Eigen::internal
significant_decimals_default_impl	include/Eigen/src/Core/IO.h	/^struct significant_decimals_default_impl<Scalar, true>$/;"	s	namespace:Eigen::internal
significant_decimals_impl	include/Eigen/src/Core/IO.h	/^struct significant_decimals_impl$/;"	s	namespace:Eigen::internal
sin	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::sin() const$/;"	f	class:Eigen::Cwise
sin	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^sin() const$/;"	f
single_source_dijkstra_full	include/base/graph.h	/^			void Graph<T>::single_source_dijkstra_full(T from, std::set<T>& nodes, $/;"	f	class:msd::base::Graph
singularValues	include/Eigen/src/Eigen2Support/SVD.h	/^    const SingularValuesType& singularValues() const { return m_sigma; }$/;"	f	class:Eigen::SVD
singularValues	include/Eigen/src/SVD/JacobiSVD.h	/^    const SingularValuesType& singularValues() const$/;"	f	class:Eigen::JacobiSVD
size	include/Eigen/src/Core/EigenBase.h	/^  inline Index size() const { return rows() * cols(); }$/;"	f	struct:Eigen::EigenBase
size	include/Eigen/src/Core/GenericPacketMath.h	/^    size = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon172
size	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Index size() const { return Index(indices().size()); }$/;"	f	class:Eigen::PermutationBase
size	include/Eigen/src/Core/Transpositions.h	/^    inline Index size() const { return indices().size(); }$/;"	f	class:Eigen::TranspositionsBase
size	include/Eigen/src/Core/Transpositions.h	/^    inline int size() const { return m_transpositions.size(); }$/;"	f	class:Eigen::Transpose
size	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^    size = 2,$/;"	e	enum:Eigen::internal::packet_traits::__anon5
size	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon6
size	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    size=4$/;"	e	enum:Eigen::internal::packet_traits::__anon8
size	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    size=4,$/;"	e	enum:Eigen::internal::packet_traits::__anon7
size	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon9
size	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon10
size	include/Eigen/src/Core/arch/NEON/Complex.h	/^    size = 2,$/;"	e	enum:Eigen::internal::packet_traits::__anon11
size	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon12
size	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    size = 4,$/;"	e	enum:Eigen::internal::packet_traits::__anon13
size	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^    size=4$/;"	e	enum:Eigen::internal::packet_traits::__anon14
size	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon15
size	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon16
size	include/Eigen/src/Core/arch/SSE/Complex.h	/^    size = 1,$/;"	e	enum:Eigen::internal::packet_traits::__anon19
size	include/Eigen/src/Core/arch/SSE/Complex.h	/^    size = 2,$/;"	e	enum:Eigen::internal::packet_traits::__anon17
size	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet1cd> { typedef std::complex<double> type; enum {size=1}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon20
size	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon18
size	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    size=2,$/;"	e	enum:Eigen::internal::packet_traits::__anon25
size	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    size=4$/;"	e	enum:Eigen::internal::packet_traits::__anon26
size	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^    size=4,$/;"	e	enum:Eigen::internal::packet_traits::__anon24
size	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon28
size	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon27
size	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	e	enum:Eigen::internal::unpacket_traits::__anon29
size	include/Eigen/src/SparseCore/AmbiVector.h	/^    Index size() const { return m_size; }$/;"	f	class:Eigen::internal::AmbiVector
size	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline size_t size() const { return m_size; }$/;"	f	class:Eigen::internal::CompressedStorage
size	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    inline Index size() const { return rows() * cols(); }$/;"	f	class:Eigen::SparseMatrixBase
size	include/base/graph.h	/^					size_type size() const$/;"	f	class:msd::base::Graph
size_type	include/Eigen/src/Core/util/Memory.h	/^    typedef size_t    size_type;$/;"	t	class:Eigen::aligned_allocator
size_type	include/Eigen/src/StlSupport/details.h	/^    typedef size_t    size_type;$/;"	t	class:Eigen::aligned_allocator_indirection
size_type	include/base/graph.h	/^					typedef std::size_t size_type;$/;"	t	class:msd::base::Graph
sizes	include/Eigen/src/Geometry/AlignedBox.h	/^  inline const CwiseBinaryOp< internal::scalar_difference_op<Scalar>, const VectorType, const VectorType> sizes() const$/;"	f	class:Eigen::AlignedBox
slerp	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^Quaternion<Scalar> Quaternion<Scalar>::slerp(Scalar t, const Quaternion& other) const$/;"	f	class:Eigen::Quaternion
slerp	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D slerp(Scalar t, const Rotation2D& other) const$/;"	f	class:Eigen::Rotation2D
slerp	include/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::slerp(const Scalar& t, const QuaternionBase<OtherDerived>& other) const$/;"	f	class:Eigen::QuaternionBase
slerp	include/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D slerp(const Scalar& t, const Rotation2D& other) const$/;"	f	class:Eigen::Rotation2D
smart_copy	include/Eigen/src/Core/util/Memory.h	/^template<typename T> void smart_copy(const T* start, const T* end, T* target)$/;"	f	namespace:Eigen::internal
smart_copy_helper	include/Eigen/src/Core/util/Memory.h	/^template<typename T> struct smart_copy_helper<T,false> {$/;"	s	namespace:Eigen::internal
smart_copy_helper	include/Eigen/src/Core/util/Memory.h	/^template<typename T> struct smart_copy_helper<T,true> {$/;"	s	namespace:Eigen::internal
solve	include/Eigen/src/Cholesky/LDLT.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:Eigen::LDLT
solve	include/Eigen/src/Cholesky/LDLT.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::LDLT
solve	include/Eigen/src/Cholesky/LLT.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:Eigen::LLT
solve	include/Eigen/src/Cholesky/LLT.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::LLT
solve	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::CholmodBase
solve	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:Eigen::CholmodBase
solve	include/Eigen/src/Core/SolveTriangular.h	/^TriangularView<Derived,Mode>::solve(const MatrixBase<Other>& other) const$/;"	f	class:Eigen::TriangularView
solve	include/Eigen/src/Core/TriangularMatrix.h	/^    solve(const MatrixBase<Other>& other) const$/;"	f	class:Eigen::TriangularView
solve	include/Eigen/src/Eigen2Support/LU.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:Eigen::LU
solve	include/Eigen/src/Eigen2Support/QR.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:Eigen::QR
solve	include/Eigen/src/Eigen2Support/SVD.h	/^bool SVD<MatrixType>::solve(const MatrixBase<OtherDerived> &b, ResultType* result) const$/;"	f	class:Eigen::SVD
solve	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    inline const Rhs& solve(const Rhs& b) const { return b; }$/;"	f	class:Eigen::IdentityPreconditioner
solve	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::DiagonalPreconditioner
solve	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^     solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::IncompleteLUT
solve	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::IterativeSolverBase
solve	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:Eigen::IterativeSolverBase
solve	include/Eigen/src/LU/FullPivLU.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::FullPivLU
solve	include/Eigen/src/LU/PartialPivLU.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::PartialPivLU
solve	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::PastixBase
solve	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:Eigen::PastixBase
solve	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::PardisoImpl
solve	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:Eigen::PardisoImpl
solve	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::ColPivHouseholderQR
solve	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::FullPivHouseholderQR
solve	include/Eigen/src/QR/HouseholderQR.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::HouseholderQR
solve	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    inline const internal::solve_retval<SPQR, Rhs> solve(const MatrixBase<Rhs>& B) const $/;"	f	class:Eigen::SPQR
solve	include/Eigen/src/SVD/JacobiSVD.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::JacobiSVD
solve	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::SimplicialCholeskyBase
solve	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:Eigen::SimplicialCholeskyBase
solve	include/Eigen/src/SparseCore/TriangularSolver.h	/^SparseTriangularView<ExpressionType,Mode>::solve(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::SparseTriangularView
solve	include/Eigen/src/SparseLU/SparseLU.h	/^    inline const internal::solve_retval<SparseLU, Rhs> solve(const MatrixBase<Rhs>& B) const $/;"	f	class:Eigen::SparseLU
solve	include/Eigen/src/SparseLU/SparseLU.h	/^    inline const internal::sparse_solve_retval<SparseLU, Rhs> solve(const SparseMatrixBase<Rhs>& B) const $/;"	f	class:Eigen::SparseLU
solve	include/Eigen/src/SparseQR/SparseQR.h	/^    inline const internal::solve_retval<SparseQR, Rhs> solve(const MatrixBase<Rhs>& B) const $/;"	f	class:Eigen::SparseQR
solve	include/Eigen/src/SparseQR/SparseQR.h	/^    inline const internal::sparse_solve_retval<SparseQR, Rhs> solve(const SparseMatrixBase<Rhs>& B) const$/;"	f	class:Eigen::SparseQR
solve	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline const internal::solve_retval<SuperLUBase, Rhs> solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::SuperLUBase
solve	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    inline const internal::sparse_solve_retval<SuperLUBase, Rhs> solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:Eigen::SuperLUBase
solve	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline const internal::solve_retval<UmfPackLU, Rhs> solve(const MatrixBase<Rhs>& b) const$/;"	f	class:Eigen::UmfPackLU
solve	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    inline const internal::sparse_solve_retval<UmfPackLU, Rhs> solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:Eigen::UmfPackLU
solveInPlace	include/Eigen/src/Cholesky/LDLT.h	/^bool LDLT<MatrixType,_UpLo>::solveInPlace(MatrixBase<Derived> &bAndX) const$/;"	f	class:Eigen::LDLT
solveInPlace	include/Eigen/src/Cholesky/LLT.h	/^void LLT<MatrixType,_UpLo>::solveInPlace(MatrixBase<Derived> &bAndX) const$/;"	f	class:Eigen::LLT
solveInPlace	include/Eigen/src/Core/SolveTriangular.h	/^void TriangularView<MatrixType,Mode>::solveInPlace(const MatrixBase<OtherDerived>& _other) const$/;"	f	class:Eigen::TriangularView
solveInPlace	include/Eigen/src/Core/TriangularMatrix.h	/^    void solveInPlace(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::TriangularView
solveInPlace	include/Eigen/src/SparseCore/TriangularSolver.h	/^void SparseTriangularView<ExpressionType,Mode>::solveInPlace(MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::SparseTriangularView
solveInPlace	include/Eigen/src/SparseCore/TriangularSolver.h	/^void SparseTriangularView<ExpressionType,Mode>::solveInPlace(SparseMatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::SparseTriangularView
solveInPlace	include/Eigen/src/SparseLU/SparseLU.h	/^  template<typename Dest>   void solveInPlace(MatrixBase<Dest> &X) const$/;"	f	struct:Eigen::SparseLUMatrixUReturnType
solveInPlace	include/Eigen/src/SparseLU/SparseLU.h	/^  void solveInPlace( MatrixBase<Dest> &X) const$/;"	f	struct:Eigen::SparseLUMatrixLReturnType
solveInPlace	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^void MappedSuperNodalMatrix<Scalar,Index>::solveInPlace( MatrixBase<Dest>&X) const$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
solveTriangular	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^Flagged<ExpressionType,Added,Removed>::solveTriangular(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::Flagged
solveTriangular	include/Eigen/src/SparseCore/TriangularSolver.h	/^SparseMatrixBase<Derived>::solveTriangular(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::SparseMatrixBase
solveTriangularInPlace	include/Eigen/src/Eigen2Support/TriangularSolver.h	/^void Flagged<ExpressionType,Added,Removed>::solveTriangularInPlace(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::Flagged
solveTriangularInPlace	include/Eigen/src/SparseCore/TriangularSolver.h	/^void SparseMatrixBase<Derived>::solveTriangularInPlace(MatrixBase<OtherDerived>& other) const$/;"	f	class:Eigen::SparseMatrixBase
solveWithGuess	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  solveWithGuess(const MatrixBase<Rhs>& b, const Guess& x0) const$/;"	f	class:Eigen::BiCGSTAB
solveWithGuess	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  solveWithGuess(const MatrixBase<Rhs>& b, const Guess& x0) const$/;"	f	class:Eigen::ConjugateGradient
solve_retval	include/Eigen/src/Cholesky/LDLT.h	/^struct solve_retval<LDLT<_MatrixType,_UpLo>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/Cholesky/LLT.h	/^struct solve_retval<LLT<_MatrixType, UpLo>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^struct solve_retval<CholmodBase<_MatrixType,_UpLo,Derived>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/IterativeLinearSolvers/BasicPreconditioners.h	/^struct solve_retval<DiagonalPreconditioner<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^struct solve_retval<BiCGSTAB<_MatrixType, _Preconditioner>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^struct solve_retval<ConjugateGradient<_MatrixType,_UpLo,_Preconditioner>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/IterativeLinearSolvers/IncompleteLUT.h	/^struct solve_retval<IncompleteLUT<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/LU/FullPivLU.h	/^struct solve_retval<FullPivLU<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/LU/PartialPivLU.h	/^struct solve_retval<PartialPivLU<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^struct solve_retval<PastixBase<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^struct solve_retval<PardisoImpl<_Derived>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/QR/ColPivHouseholderQR.h	/^struct solve_retval<ColPivHouseholderQR<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/QR/FullPivHouseholderQR.h	/^struct solve_retval<FullPivHouseholderQR<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/QR/HouseholderQR.h	/^struct solve_retval<HouseholderQR<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^struct solve_retval<SPQR<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/SVD/JacobiSVD.h	/^struct solve_retval<JacobiSVD<_MatrixType, QRPreconditioner>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^struct solve_retval<SimplicialCholeskyBase<Derived>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/SparseLU/SparseLU.h	/^struct solve_retval<SparseLU<_MatrixType,Derived>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/SparseQR/SparseQR.h	/^struct solve_retval<SparseQR<_MatrixType,OrderingType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^struct solve_retval<SuperLUBase<_MatrixType,Derived>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^struct solve_retval<UmfPackLU<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
solve_retval_base	include/Eigen/src/misc/Solve.h	/^  solve_retval_base(const DecompositionType& dec, const Rhs& rhs)$/;"	f	struct:Eigen::internal::solve_retval_base
solve_retval_base	include/Eigen/src/misc/Solve.h	/^template<typename _DecompositionType, typename Rhs> struct solve_retval_base$/;"	s	namespace:Eigen::internal
solve_retval_with_guess	include/Eigen/src/misc/SparseSolve.h	/^  solve_retval_with_guess(const DecompositionType& dec, const Rhs& rhs, const Guess& guess)$/;"	f	struct:Eigen::internal::solve_retval_with_guess
solve_retval_with_guess	include/Eigen/src/misc/SparseSolve.h	/^template<typename DecompositionType, typename Rhs, typename Guess> struct solve_retval_with_guess$/;"	s	namespace:Eigen::internal
sort	include/Eigen/src/Eigen2Support/SVD.h	/^SVD<MatrixType>& SVD<MatrixType>::sort()$/;"	f	class:Eigen::SVD
sortEigenvalues	include/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^void ComplexEigenSolver<MatrixType>::sortEigenvalues(bool computeEigenvectors)$/;"	f	class:Eigen::ComplexEigenSolver
sort_matrix_Q	include/Eigen/src/SparseQR/SparseQR.h	/^    inline void sort_matrix_Q()$/;"	f	class:Eigen::SparseQR
sparseView	include/Eigen/src/SparseCore/SparseView.h	/^const SparseView<Derived> MatrixBase<Derived>::sparseView(const Scalar& m_reference,$/;"	f	class:Eigen::MatrixBase
sparse_cwise_binary_op_inner_iterator_selector	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE sparse_cwise_binary_op_inner_iterator_selector(const CwiseBinaryXpr& xpr, Index outer)$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
sparse_cwise_binary_op_inner_iterator_selector	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<BinaryOp, Lhs, Rhs, Derived, Sparse, Sparse>$/;"	c	namespace:Eigen::internal
sparse_cwise_binary_op_inner_iterator_selector	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<scalar_product_op<T>, Lhs, Rhs, Derived, Dense, Sparse>$/;"	c	namespace:Eigen::internal
sparse_cwise_binary_op_inner_iterator_selector	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<scalar_product_op<T>, Lhs, Rhs, Derived, Sparse, Dense>$/;"	c	namespace:Eigen::internal
sparse_cwise_binary_op_inner_iterator_selector	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<scalar_product_op<T>, Lhs, Rhs, Derived, Sparse, Sparse>$/;"	c	namespace:Eigen::internal
sparse_diagonal_product_inner_iterator_selector	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^    inline sparse_diagonal_product_inner_iterator_selector($/;"	f	class:Eigen::internal::sparse_diagonal_product_inner_iterator_selector
sparse_diagonal_product_inner_iterator_selector	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^class sparse_diagonal_product_inner_iterator_selector$/;"	c	namespace:Eigen::internal
sparse_eval	include/Eigen/src/SparseCore/SparseUtil.h	/^template<typename T,int Cols> struct sparse_eval<T,1,Cols> {$/;"	s	namespace:Eigen::internal
sparse_eval	include/Eigen/src/SparseCore/SparseUtil.h	/^template<typename T,int Rows,int Cols> struct sparse_eval {$/;"	s	namespace:Eigen::internal
sparse_eval	include/Eigen/src/SparseCore/SparseUtil.h	/^template<typename T,int Rows> struct sparse_eval<T,Rows,1> {$/;"	s	namespace:Eigen::internal
sparse_eval	include/Eigen/src/SparseCore/SparseUtil.h	/^template<typename T> struct sparse_eval<T,1,1> {$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^struct sparse_solve_retval<CholmodBase<_MatrixType,_UpLo,Derived>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^struct sparse_solve_retval<IterativeSolverBase<Derived>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^struct sparse_solve_retval<PastixBase<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^struct sparse_solve_retval<PardisoImpl<Derived>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^struct sparse_solve_retval<SimplicialCholeskyBase<Derived>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/SparseLU/SparseLU.h	/^struct sparse_solve_retval<SparseLU<_MatrixType,Derived>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/SparseQR/SparseQR.h	/^struct sparse_solve_retval<SparseQR<_MatrixType, OrderingType>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^struct sparse_solve_retval<SuperLUBase<_MatrixType,Derived>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^struct sparse_solve_retval<UmfPackLU<_MatrixType>, Rhs>$/;"	s	namespace:Eigen::internal
sparse_solve_retval_base	include/Eigen/src/misc/SparseSolve.h	/^  sparse_solve_retval_base(const DecompositionType& dec, const Rhs& rhs)$/;"	f	struct:Eigen::internal::sparse_solve_retval_base
sparse_solve_retval_base	include/Eigen/src/misc/SparseSolve.h	/^template<typename _DecompositionType, typename Rhs> struct sparse_solve_retval_base$/;"	s	namespace:Eigen::internal
sparse_solve_triangular_selector	include/Eigen/src/SparseCore/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Lower,ColMajor>$/;"	s	namespace:Eigen::internal
sparse_solve_triangular_selector	include/Eigen/src/SparseCore/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Lower,RowMajor>$/;"	s	namespace:Eigen::internal
sparse_solve_triangular_selector	include/Eigen/src/SparseCore/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Upper,ColMajor>$/;"	s	namespace:Eigen::internal
sparse_solve_triangular_selector	include/Eigen/src/SparseCore/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Upper,RowMajor>$/;"	s	namespace:Eigen::internal
sparse_solve_triangular_sparse_selector	include/Eigen/src/SparseCore/TriangularSolver.h	/^struct sparse_solve_triangular_sparse_selector<Lhs,Rhs,Mode,UpLo,ColMajor>$/;"	s	namespace:Eigen::internal
sparse_sparse_product_with_pruning_impl	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^static void sparse_sparse_product_with_pruning_impl(const Lhs& lhs, const Rhs& rhs, ResultType& res, const typename ResultType::RealScalar& tolerance)$/;"	f	namespace:Eigen::internal
sparse_sparse_product_with_pruning_selector	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^struct sparse_sparse_product_with_pruning_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,ColMajor>$/;"	s	namespace:Eigen::internal
sparse_sparse_product_with_pruning_selector	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^struct sparse_sparse_product_with_pruning_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,RowMajor>$/;"	s	namespace:Eigen::internal
sparse_sparse_product_with_pruning_selector	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^struct sparse_sparse_product_with_pruning_selector<Lhs,Rhs,ResultType,RowMajor,RowMajor,ColMajor>$/;"	s	namespace:Eigen::internal
sparse_sparse_product_with_pruning_selector	include/Eigen/src/SparseCore/SparseSparseProductWithPruning.h	/^struct sparse_sparse_product_with_pruning_selector<Lhs,Rhs,ResultType,RowMajor,RowMajor,RowMajor>$/;"	s	namespace:Eigen::internal
sparse_time_dense_product	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^inline void sparse_time_dense_product(const SparseLhsType& lhs, const DenseRhsType& rhs, DenseResType& res, const AlphaType& alpha)$/;"	f	namespace:Eigen::internal
sparse_time_dense_product_impl	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^struct sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType, ColMajor, false>$/;"	s	namespace:Eigen::internal
sparse_time_dense_product_impl	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^struct sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType, ColMajor, true>$/;"	s	namespace:Eigen::internal
sparse_time_dense_product_impl	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^struct sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType, RowMajor, false>$/;"	s	namespace:Eigen::internal
sparse_time_dense_product_impl	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^struct sparse_time_dense_product_impl<SparseLhsType,DenseRhsType,DenseResType, RowMajor, true>$/;"	s	namespace:Eigen::internal
sparse_vector_assign_selector	include/Eigen/src/SparseCore/SparseVector.h	/^struct sparse_vector_assign_selector<Dest,Src,SVA_Inner> {$/;"	s	namespace:Eigen::internal
sparse_vector_assign_selector	include/Eigen/src/SparseCore/SparseVector.h	/^struct sparse_vector_assign_selector<Dest,Src,SVA_Outer> {$/;"	s	namespace:Eigen::internal
sparse_vector_assign_selector	include/Eigen/src/SparseCore/SparseVector.h	/^struct sparse_vector_assign_selector<Dest,Src,SVA_RuntimeSwitch> {$/;"	s	namespace:Eigen::internal
sparselu_gemm	include/Eigen/src/SparseLU/SparseLU_gemm_kernel.h	/^void sparselu_gemm(Index m, Index n, Index d, const Scalar* A, Index lda, const Scalar* B, Index ldb, Scalar* C, Index ldc)$/;"	f	namespace:Eigen::internal
splitOffTwoRows	include/Eigen/src/Eigenvalues/RealQZ.h	/^    inline void RealQZ<MatrixType>::splitOffTwoRows(Index i)$/;"	f	class:Eigen::RealQZ
splitOffTwoRows	include/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::splitOffTwoRows(Index iu, bool computeU, const Scalar& exshift)$/;"	f	class:Eigen::RealSchur
sqrt	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::sqrt() const$/;"	f	class:Eigen::Cwise
sqrt	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^sqrt() const$/;"	f
square	include/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::square() const$/;"	f	class:Eigen::Cwise
square	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^square() const$/;"	f
squaredDistance	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  RealScalar squaredDistance(const VectorType& p) const$/;"	f	class:Eigen::ParametrizedLine
squaredDistance	include/Eigen/src/Geometry/ParametrizedLine.h	/^  RealScalar squaredDistance(const VectorType& p) const$/;"	f	class:Eigen::ParametrizedLine
squaredExteriorDistance	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^inline Scalar AlignedBox<Scalar,AmbiantDim>::squaredExteriorDistance(const VectorType& p) const$/;"	f	class:Eigen::AlignedBox
squaredExteriorDistance	include/Eigen/src/Geometry/AlignedBox.h	/^inline Scalar AlignedBox<Scalar,AmbientDim>::squaredExteriorDistance(const AlignedBox& b) const$/;"	f	class:Eigen::AlignedBox
squaredExteriorDistance	include/Eigen/src/Geometry/AlignedBox.h	/^inline Scalar AlignedBox<Scalar,AmbientDim>::squaredExteriorDistance(const MatrixBase<Derived>& a_p) const$/;"	f	class:Eigen::AlignedBox
squaredNorm	include/Eigen/src/Core/Dot.h	/^EIGEN_STRONG_INLINE typename NumTraits<typename internal::traits<Derived>::Scalar>::Real MatrixBase<Derived>::squaredNorm() const$/;"	f	class:Eigen::MatrixBase
squaredNorm	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_squaredNorm,RealScalar>::Type squaredNorm() const$/;"	f	class:Eigen::VectorwiseOp
squaredNorm	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar squaredNorm() const { return m_coeffs.squaredNorm(); }$/;"	f	class:Eigen::Quaternion
squaredNorm	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar squaredNorm() const { return coeffs().squaredNorm(); }$/;"	f	class:Eigen::QuaternionBase
squaredNorm	include/Eigen/src/SparseCore/SparseDot.h	/^SparseMatrixBase<Derived>::squaredNorm() const$/;"	f	class:Eigen::SparseMatrixBase
squeeze	include/Eigen/src/SparseCore/CompressedStorage.h	/^    void squeeze()$/;"	f	class:Eigen::internal::CompressedStorage
stableNorm	include/Eigen/src/Core/StableNorm.h	/^MatrixBase<Derived>::stableNorm() const$/;"	f	class:Eigen::MatrixBase
stableNorm	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_stableNorm,RealScalar>::Type stableNorm() const$/;"	f	class:Eigen::VectorwiseOp
stable_norm_kernel	include/Eigen/src/Core/StableNorm.h	/^inline void stable_norm_kernel(const ExpressionType& bl, Scalar& ssq, Scalar& scale, Scalar& invScale)$/;"	f	namespace:Eigen::internal
start	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start() const$/;"	f	class:Eigen::MatrixBase
start	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start()$/;"	f	class:Eigen::MatrixBase
start	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start(Index size) const$/;"	f	class:Eigen::MatrixBase
start	include/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start(Index size)$/;"	f	class:Eigen::MatrixBase
start	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  Index start ;   \/* index for A of first col in this row *\/$/;"	m	struct:internal::Colamd_Row
start	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^  Index start ;   \/* index for A of first row in this column, or DEAD *\/$/;"	m	struct:internal::colamd_col
startCol	include/Eigen/src/Core/Block.h	/^    Index startCol() const $/;"	f	class:Eigen::internal::BlockImpl_dense
startFill	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_DEPRECATED void startFill(Index reserve)$/;"	f	class:Eigen::SparseVector
startRow	include/Eigen/src/Core/Block.h	/^    Index startRow() const $/;"	f	class:Eigen::internal::BlockImpl_dense
startVec	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void startVec(Index outer)$/;"	f	class:Eigen::SparseMatrix
startVec	include/Eigen/src/SparseCore/SparseVector.h	/^    inline void startVec(Index outer)$/;"	f	class:Eigen::SparseVector
static_assertion	include/Eigen/src/Core/util/StaticAssert.h	/^    struct static_assertion {};$/;"	s	namespace:Eigen::internal
static_assertion	include/Eigen/src/Core/util/StaticAssert.h	/^    struct static_assertion<true>$/;"	s	namespace:Eigen::internal
std	include/Eigen/src/StlSupport/StdDeque.h	/^namespace std {$/;"	n
std	include/Eigen/src/StlSupport/StdList.h	/^namespace std$/;"	n
std	include/Eigen/src/StlSupport/StdVector.h	/^namespace std {$/;"	n
stem_function	include/Eigen/src/Core/util/ForwardDeclarations.h	/^struct stem_function$/;"	s	namespace:Eigen::internal
step	include/Eigen/src/Eigenvalues/RealQZ.h	/^    inline void RealQZ<MatrixType>::step(Index f, Index l, Index iter)$/;"	f	class:Eigen::RealQZ
storage	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^  } storage;$/;"	m	struct:Eigen::SluMatrix	typeref:struct:Eigen::SluMatrix::__anon457
stride	include/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index stride() const$/;"	f	class:Eigen::DenseCoeffsBase
sub	include/Eigen/src/Core/BandMatrix.h	/^    inline const typename Base::template DiagonalIntReturnType<-1>::Type sub() const$/;"	f	class:Eigen::internal::TridiagonalMatrix
sub	include/Eigen/src/Core/BandMatrix.h	/^    inline typename Base::template DiagonalIntReturnType<-1>::Type sub()$/;"	f	class:Eigen::internal::TridiagonalMatrix
sub	include/Eigen/src/Core/GeneralProduct.h	/^    struct sub  { template<typename Dst, typename Src> void operator()(const Dst& dst, const Src& src) const { dst.const_cast_derived() -= src; } };$/;"	s	class:Eigen::GeneralProduct
subDiagonal	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^Tridiagonalization<MatrixType>::subDiagonal() const$/;"	f	class:Eigen::Tridiagonalization
subTo	include/Eigen/src/Core/DiagonalMatrix.h	/^    void subTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:Eigen::DiagonalBase
subTo	include/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void subTo(Dest& dst) const$/;"	f	struct:Eigen::EigenBase
subTo	include/Eigen/src/Core/GeneralProduct.h	/^    inline void subTo(Dest& dest) const {$/;"	f	class:Eigen::GeneralProduct
subTo	include/Eigen/src/Core/ProductBase.h	/^    inline void subTo(Dest& dst) const { scaleAndAddTo(dst, Scalar(-1)); }$/;"	f	class:ScaledProduct
subVector	include/Eigen/src/Core/VectorwiseOp.h	/^    SubVector subVector(Index i)$/;"	f	class:Eigen::VectorwiseOp
subVectors	include/Eigen/src/Core/VectorwiseOp.h	/^    Index subVectors() const$/;"	f	class:Eigen::VectorwiseOp
subdiagonalEntryIsNeglegible	include/Eigen/src/Eigenvalues/ComplexSchur.h	/^inline bool ComplexSchur<MatrixType>::subdiagonalEntryIsNeglegible(Index i)$/;"	f	class:Eigen::ComplexSchur
subs	include/Eigen/src/Core/BandMatrix.h	/^    inline Index subs() const { return derived().subs(); }$/;"	f	class:Eigen::internal::BandMatrixBase
subs	include/Eigen/src/Core/BandMatrix.h	/^    inline Index subs() const { return m_subs.value(); }$/;"	f	class:Eigen::internal::BandMatrix
subs	include/Eigen/src/Core/BandMatrix.h	/^    inline Index subs() const { return m_subs.value(); }$/;"	f	class:Eigen::internal::BandMatrixWrapper
sum	include/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::sum() const$/;"	f	class:Eigen::DenseBase
sum	include/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_sum>::Type sum() const$/;"	f	class:Eigen::VectorwiseOp
sum	include/Eigen/src/SparseCore/SparseRedux.h	/^SparseMatrix<_Scalar,_Options,_Index>::sum() const$/;"	f	class:Eigen::SparseMatrix
sum	include/Eigen/src/SparseCore/SparseRedux.h	/^SparseMatrixBase<Derived>::sum() const$/;"	f	class:Eigen::SparseMatrixBase
sum	include/Eigen/src/SparseCore/SparseRedux.h	/^SparseVector<_Scalar,_Options,_Index>::sum() const$/;"	f	class:Eigen::SparseVector
sumupDuplicates	include/Eigen/src/SparseCore/SparseMatrix.h	/^void SparseMatrix<Scalar,_Options,_Index>::sumupDuplicates()$/;"	f	class:Eigen::SparseMatrix
supIndex	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline Index supIndex() const { return m_supno; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
supToCol	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Index* supToCol() { return m_sup_to_col; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
supToCol	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Index* supToCol() const $/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
super	include/Eigen/src/Core/BandMatrix.h	/^    inline const typename Base::template DiagonalIntReturnType<1>::Type super() const$/;"	f	class:Eigen::internal::TridiagonalMatrix
super	include/Eigen/src/Core/BandMatrix.h	/^    inline typename Base::template DiagonalIntReturnType<1>::Type super()$/;"	f	class:Eigen::internal::TridiagonalMatrix
supers	include/Eigen/src/Core/BandMatrix.h	/^    inline Index supers() const { return derived().supers(); }$/;"	f	class:Eigen::internal::BandMatrixBase
supers	include/Eigen/src/Core/BandMatrix.h	/^    inline Index supers() const { return m_supers.value(); }$/;"	f	class:Eigen::internal::BandMatrix
supers	include/Eigen/src/Core/BandMatrix.h	/^    inline Index supers() const { return m_supers.value(); }$/;"	f	class:Eigen::internal::BandMatrixWrapper
supno	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  IndexVector supno; \/\/ Supernode number corresponding to this column (column to supernode mapping)$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
svd	include/Eigen/src/Eigen2Support/SVD.h	/^MatrixBase<Derived>::svd() const$/;"	f	class:Eigen::MatrixBase
svd_precondition_2x2_block_to_be_real	include/Eigen/src/SVD/JacobiSVD.h	/^struct svd_precondition_2x2_block_to_be_real {};$/;"	s	namespace:Eigen::internal
svd_precondition_2x2_block_to_be_real	include/Eigen/src/SVD/JacobiSVD.h	/^struct svd_precondition_2x2_block_to_be_real<MatrixType, QRPreconditioner, false>$/;"	s	namespace:Eigen::internal
svd_precondition_2x2_block_to_be_real	include/Eigen/src/SVD/JacobiSVD.h	/^struct svd_precondition_2x2_block_to_be_real<MatrixType, QRPreconditioner, true>$/;"	s	namespace:Eigen::internal
swap	include/Eigen/src/Core/Array.h	/^    void swap(ArrayBase<OtherDerived> const & other)$/;"	f	class:Eigen::Array
swap	include/Eigen/src/Core/DenseBase.h	/^    void swap(PlainObjectBase<OtherDerived>& other)$/;"	f	class:Eigen::DenseBase
swap	include/Eigen/src/Core/DenseBase.h	/^    void swap(const DenseBase<OtherDerived>& other,$/;"	f	class:Eigen::DenseBase
swap	include/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& ) {}$/;"	f	class:Eigen::DenseStorage
swap	include/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_cols,other.m_cols); }$/;"	f	class:Eigen::DenseStorage
swap	include/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_rows,other.m_rows); }$/;"	f	class:Eigen::DenseStorage
swap	include/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other) { std::swap(m_data,other.m_data); }$/;"	f	class:Eigen::DenseStorage
swap	include/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other)$/;"	f	class:Eigen::DenseStorage
swap	include/Eigen/src/Core/Matrix.h	/^    void swap(MatrixBase<OtherDerived> const & other)$/;"	f	class:Eigen::Matrix
swap	include/Eigen/src/Core/TriangularMatrix.h	/^    void swap(MatrixBase<OtherDerived> const & other)$/;"	f	class:Eigen::TriangularView
swap	include/Eigen/src/Core/TriangularMatrix.h	/^    void swap(TriangularBase<OtherDerived> const & other)$/;"	f	class:Eigen::TriangularView
swap	include/Eigen/src/SparseCore/CompressedStorage.h	/^    void swap(CompressedStorage& other)$/;"	f	class:Eigen::internal::CompressedStorage
swap	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline void swap(SparseMatrix& other)$/;"	f	class:Eigen::SparseMatrix
swap	include/Eigen/src/SparseCore/SparseVector.h	/^    inline void swap(SparseVector& other)$/;"	f	class:Eigen::SparseVector
symm_pack_lhs	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct symm_pack_lhs$/;"	s	namespace:Eigen::internal
symm_pack_rhs	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct symm_pack_rhs$/;"	s	namespace:Eigen::internal
sync	include/Eigen/src/Core/products/Parallelizer.h	/^  int volatile sync;$/;"	m	struct:Eigen::internal::GemmParallelInfo
tail	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstSegmentReturnType tail(Index n) const$/;"	f
tail	include/Eigen/src/plugins/BlockMethods.h	/^inline SegmentReturnType tail(Index n)$/;"	f
tail	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstFixedSegmentReturnType<N>::Type tail(Index n = N) const$/;"	f
tail	include/Eigen/src/plugins/BlockMethods.h	/^inline typename FixedSegmentReturnType<N>::Type tail(Index n = N)$/;"	f
take_affine_part	include/Eigen/src/Geometry/Transform.h	/^  typedef internal::transform_take_affine_part<Transform> take_affine_part;$/;"	t	class:Eigen::Transform
take_matrix_for_product	include/Eigen/src/Geometry/Homogeneous.h	/^struct take_matrix_for_product$/;"	s	namespace:Eigen::internal
take_matrix_for_product	include/Eigen/src/Geometry/Homogeneous.h	/^struct take_matrix_for_product<Transform<Scalar, Dim, Mode, Options> >$/;"	s	namespace:Eigen::internal
take_matrix_for_product	include/Eigen/src/Geometry/Homogeneous.h	/^struct take_matrix_for_product<Transform<Scalar, Dim, Projective, Options> >$/;"	s	namespace:Eigen::internal
tan	include/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^tan() const$/;"	f
test_random	include/base/test_graph.cc	/^void test_random()$/;"	f
test_star	include/base/test_graph.cc	/^void test_star()$/;"	f
test_type	include/base/test_graph.cc	/^void test_type()$/;"	f
thenMatrix	include/Eigen/src/Core/Select.h	/^    const ThenMatrixType& thenMatrix() const$/;"	f	class:Eigen::Select
thickness	include/Eigen/src/OrderingMethods/Eigen_Colamd.h	/^    Index thickness ; \/* number of original columns represented by this *\/$/;"	m	union:internal::colamd_col::__anon401
threshold	include/Eigen/src/LU/FullPivLU.h	/^    RealScalar threshold() const$/;"	f	class:Eigen::FullPivLU
threshold	include/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar threshold() const$/;"	f	class:Eigen::ColPivHouseholderQR
threshold	include/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar threshold() const$/;"	f	class:Eigen::FullPivHouseholderQR
threshold	include/Eigen/src/SVD/JacobiSVD.h	/^    RealScalar threshold() const$/;"	f	class:Eigen::JacobiSVD
throw_std_bad_alloc	include/Eigen/src/Core/util/Memory.h	/^inline void throw_std_bad_alloc()$/;"	f	namespace:Eigen::internal
toDense	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    Matrix<Scalar,RowsAtCompileTime,ColsAtCompileTime> toDense() const$/;"	f	class:Eigen::SparseMatrixBase
toDenseMatrix	include/Eigen/src/Core/BandMatrix.h	/^    DenseMatrixType toDenseMatrix() const$/;"	f	class:Eigen::internal::BandMatrixBase
toDenseMatrix	include/Eigen/src/Core/DiagonalMatrix.h	/^    DenseMatrixType toDenseMatrix() const { return derived(); }$/;"	f	class:Eigen::DiagonalBase
toDenseMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    DenseMatrixType toDenseMatrix() const { return *this; }$/;"	f	class:Eigen::Transpose
toDenseMatrix	include/Eigen/src/Core/PermutationMatrix.h	/^    DenseMatrixType toDenseMatrix() const$/;"	f	class:Eigen::PermutationBase
toDenseMatrix	include/Eigen/src/Core/TriangularMatrix.h	/^    DenseMatrixType toDenseMatrix() const$/;"	f	class:Eigen::TriangularBase
toQMatrix	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^QMatrix Transform<Scalar,Dim>::toQMatrix(void) const$/;"	f	class:Eigen::Transform
toQMatrix	include/Eigen/src/Geometry/Transform.h	/^QMatrix Transform<Scalar,Dim,Mode,Options>::toQMatrix(void) const$/;"	f	class:Eigen::Transform
toQTransform	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^QTransform Transform<Scalar,Dim>::toQTransform(void) const$/;"	f	class:Eigen::Transform
toQTransform	include/Eigen/src/Geometry/Transform.h	/^QTransform Transform<Scalar,Dim,Mode,Options>::toQTransform(void) const$/;"	f	class:Eigen::Transform
toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^AngleAxis<Scalar>::toRotationMatrix(void) const$/;"	f	class:Eigen::AngleAxis
toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^Quaternion<Scalar>::toRotationMatrix(void) const$/;"	f	class:Eigen::Quaternion
toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^Rotation2D<Scalar>::toRotationMatrix(void) const$/;"	f	class:Eigen::Rotation2D
toRotationMatrix	include/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline RotationMatrixType toRotationMatrix() const { return derived().toRotationMatrix(); }$/;"	f	class:Eigen::RotationBase
toRotationMatrix	include/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>::toRotationMatrix(void) const$/;"	f	class:Eigen::AngleAxis
toRotationMatrix	include/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::toRotationMatrix(void) const$/;"	f	class:Eigen::QuaternionBase
toRotationMatrix	include/Eigen/src/Geometry/Rotation2D.h	/^Rotation2D<Scalar>::toRotationMatrix(void) const$/;"	f	class:Eigen::Rotation2D
toRotationMatrix	include/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType toRotationMatrix() const { return derived().toRotationMatrix(); }$/;"	f	class:Eigen::RotationBase
toRotationMatrix	include/Eigen/src/Geometry/RotationBase.h	/^static inline Matrix<Scalar,2,2> toRotationMatrix(const Scalar& s)$/;"	f	namespace:Eigen::internal
toRotationMatrix	include/Eigen/src/Geometry/RotationBase.h	/^static inline Matrix<Scalar,Dim,Dim> toRotationMatrix(const RotationBase<OtherDerived,Dim>& r)$/;"	f	namespace:Eigen::internal
toRotationMatrix	include/Eigen/src/Geometry/RotationBase.h	/^static inline const MatrixBase<OtherDerived>& toRotationMatrix(const MatrixBase<OtherDerived>& mat)$/;"	f	namespace:Eigen::internal
tolerance	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  RealScalar tolerance() const { return m_tolerance; }$/;"	f	class:Eigen::IterativeSolverBase
topLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> topLeftCorner()$/;"	f
topLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> topLeftCorner(Index cRows, Index cCols)$/;"	f
topLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> topLeftCorner(Index cRows, Index cCols)$/;"	f
topLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> topLeftCorner() const$/;"	f
topLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> topLeftCorner(Index cRows, Index cCols) const$/;"	f
topLeftCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> topLeftCorner(Index cRows, Index cCols) const$/;"	f
topRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> topRightCorner()$/;"	f
topRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> topRightCorner(Index cRows, Index cCols)$/;"	f
topRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> topRightCorner(Index cRows, Index cCols)$/;"	f
topRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> topRightCorner() const$/;"	f
topRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> topRightCorner(Index cRows, Index cCols) const$/;"	f
topRightCorner	include/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> topRightCorner(Index cRows, Index cCols) const$/;"	f
topRows	include/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowsBlockXpr topRows(Index n) const$/;"	f
topRows	include/Eigen/src/plugins/BlockMethods.h	/^inline RowsBlockXpr topRows(Index n)$/;"	f
topRows	include/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNRowsBlockXpr<N>::Type topRows(Index n = N) const$/;"	f
topRows	include/Eigen/src/plugins/BlockMethods.h	/^inline typename NRowsBlockXpr<N>::Type topRows(Index n = N)$/;"	f
trace	include/Eigen/src/Core/Redux.h	/^MatrixBase<Derived>::trace() const$/;"	f	class:Eigen::MatrixBase
traits	include/Eigen/src/Core/Array.h	/^struct traits<Array<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> > : traits<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/ArrayWrapper.h	/^struct traits<ArrayWrapper<ExpressionType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/ArrayWrapper.h	/^struct traits<MatrixWrapper<ExpressionType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/BandMatrix.h	/^struct traits<BandMatrix<_Scalar,_Rows,_Cols,_Supers,_Subs,_Options> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/BandMatrix.h	/^struct traits<BandMatrixWrapper<_CoefficientsType,_Rows,_Cols,_Supers,_Subs,_Options> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Block.h	/^struct traits<Block<XprType, BlockRows, BlockCols, InnerPanel> > : traits<XprType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/CwiseBinaryOp.h	/^struct traits<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/CwiseNullaryOp.h	/^struct traits<CwiseNullaryOp<NullaryOp, PlainObjectType> > : traits<PlainObjectType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/CwiseUnaryOp.h	/^struct traits<CwiseUnaryOp<UnaryOp, XprType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/CwiseUnaryView.h	/^struct traits<CwiseUnaryView<ViewOp, MatrixType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Diagonal.h	/^struct traits<Diagonal<MatrixType,DiagIndex> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/DiagonalMatrix.h	/^struct traits<DiagonalMatrix<_Scalar,SizeAtCompileTime,MaxSizeAtCompileTime> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/DiagonalMatrix.h	/^struct traits<DiagonalWrapper<_DiagonalVectorType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/DiagonalProduct.h	/^struct traits<DiagonalProduct<MatrixType, DiagonalType, ProductOrder> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Flagged.h	/^struct traits<Flagged<ExpressionType, Added, Removed> > : traits<ExpressionType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/ForceAlignedAccess.h	/^struct traits<ForceAlignedAccess<ExpressionType> > : public traits<ExpressionType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/GeneralProduct.h	/^struct traits<GeneralProduct<Lhs,Rhs,GemvProduct> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/GeneralProduct.h	/^struct traits<GeneralProduct<Lhs,Rhs,InnerProduct> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/GeneralProduct.h	/^struct traits<GeneralProduct<Lhs,Rhs,OuterProduct> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Map.h	/^struct traits<Map<PlainObjectType, MapOptions, StrideType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Matrix.h	/^struct traits<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/NestByValue.h	/^struct traits<NestByValue<ExpressionType> > : public traits<ExpressionType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/PermutationMatrix.h	/^struct traits<Map<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType>,_PacketAccess> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/PermutationMatrix.h	/^struct traits<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/PermutationMatrix.h	/^struct traits<PermutationWrapper<_IndicesType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/PermutationMatrix.h	/^struct traits<Transpose<PermutationBase<Derived> > >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/PermutationMatrix.h	/^struct traits<permut_matrix_product_retval<PermutationType, MatrixType, Side, Transposed> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/ProductBase.h	/^struct traits<ProductBase<Derived,_Lhs,_Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/ProductBase.h	/^struct traits<ScaledProduct<NestedProduct> >$/;"	s	namespace:internal
traits	include/Eigen/src/Core/Ref.h	/^struct traits<Ref<_PlainObjectType, _Options, _StrideType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Ref.h	/^struct traits<RefBase<Derived> > : public traits<Derived> {};$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Replicate.h	/^struct traits<Replicate<MatrixType,RowFactor,ColFactor> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/ReturnByValue.h	/^struct traits<ReturnByValue<Derived> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Reverse.h	/^struct traits<Reverse<MatrixType, Direction> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Select.h	/^struct traits<Select<ConditionMatrixType, ThenMatrixType, ElseMatrixType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/SelfAdjointView.h	/^struct traits<SelfAdjointView<MatrixType, UpLo> > : traits<MatrixType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/SelfCwiseBinaryOp.h	/^struct traits<SelfCwiseBinaryOp<BinaryOp,Lhs,Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/SolveTriangular.h	/^struct traits<triangular_solve_retval<Side, TriangularType, Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Swap.h	/^struct traits<SwapWrapper<ExpressionType> > : traits<ExpressionType> {};$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Transpose.h	/^struct traits<Transpose<MatrixType> > : traits<MatrixType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Transpositions.h	/^struct traits<Map<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType>,_PacketAccess> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Transpositions.h	/^struct traits<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Transpositions.h	/^struct traits<TranspositionsWrapper<_IndicesType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/Transpositions.h	/^struct traits<transposition_matrix_product_retval<TranspositionType, MatrixType, Side, Transposed> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/TriangularMatrix.h	/^struct traits<TriangularView<MatrixType, _Mode> > : traits<MatrixType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/VectorBlock.h	/^struct traits<VectorBlock<VectorType, Size> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/VectorwiseOp.h	/^struct traits<PartialReduxExpr<MatrixType, MemberOp, Direction> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct traits<CoeffBasedProduct<LhsNested,RhsNested,NestingFlags> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct traits<GeneralProduct<Lhs,Rhs,GemmProduct> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct traits<SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,RhsMode,false> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct traits<SelfadjointProductMatrix<Lhs,0,true,Rhs,RhsMode,false> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct traits<SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,0,true> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct traits<TriangularProduct<Mode,LhsIsTriangular,Lhs,false,Rhs,false> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct traits<TriangularProduct<Mode,LhsIsTriangular,Lhs,false,Rhs,true> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct traits<TriangularProduct<Mode,LhsIsTriangular,Lhs,true,Rhs,false> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Core/util/ForwardDeclarations.h	/^template<typename T> struct traits<const T> : traits<T> {};$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Eigen2Support/Minor.h	/^struct traits<Minor<MatrixType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^struct traits<HessenbergDecompositionMatrixHReturnType<MatrixType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct traits<TridiagonalizationMatrixTReturnType<MatrixType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/AngleAxis.h	/^template<typename _Scalar> struct traits<AngleAxis<_Scalar> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/Homogeneous.h	/^struct traits<Homogeneous<MatrixType,Direction> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/Homogeneous.h	/^struct traits<homogeneous_left_product_impl<Homogeneous<MatrixType,Vertical>,Lhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/Homogeneous.h	/^struct traits<homogeneous_right_product_impl<Homogeneous<MatrixType,Horizontal>,Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/Quaternion.h	/^  struct traits<Map<Quaternion<_Scalar>, _Options> > : traits<Quaternion<_Scalar, (int(_Options)&Aligned)==Aligned ? AutoAlign : DontAlign> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/Quaternion.h	/^  struct traits<Map<const Quaternion<_Scalar>, _Options> > : traits<Quaternion<_Scalar, (int(_Options)&Aligned)==Aligned ? AutoAlign : DontAlign> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/Quaternion.h	/^struct traits<Quaternion<_Scalar,_Options> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Geometry/Rotation2D.h	/^template<typename _Scalar> struct traits<Rotation2D<_Scalar> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/Householder/HouseholderSequence.h	/^struct traits<HouseholderSequence<VectorsType,CoeffsType,Side> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^struct traits<BiCGSTAB<_MatrixType,_Preconditioner> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^struct traits<ConjugateGradient<_MatrixType,_UpLo,_Preconditioner> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/LU/Inverse.h	/^struct traits<inverse_impl<MatrixType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/QR/FullPivHouseholderQR.h	/^struct traits<FullPivHouseholderQRMatrixQReturnType<MatrixType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    template <typename SPQRType, typename Derived> struct traits<SPQR_QProduct<SPQRType, Derived> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    template <typename SPQRType> struct traits<SPQRMatrixQReturnType<SPQRType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    template <typename SPQRType> struct traits<SPQRMatrixQTransposeReturnType<SPQRType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^template<typename _MatrixType, int _UpLo, typename _Ordering> struct traits<SimplicialCholesky<_MatrixType,_UpLo,_Ordering> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^template<typename _MatrixType, int _UpLo, typename _Ordering> struct traits<SimplicialLLT<_MatrixType,_UpLo,_Ordering> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^template<typename _MatrixType,int _UpLo, typename _Ordering> struct traits<SimplicialLDLT<_MatrixType,_UpLo,_Ordering> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^struct traits<MappedSparseMatrix<_Scalar, _Flags, _Index> > : traits<SparseMatrix<_Scalar, _Flags, _Index> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^struct traits<DenseTimeSparseProduct<Lhs,Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^struct traits<SparseDenseOuterProduct<Lhs,Rhs,Tr> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^struct traits<SparseTimeDenseProduct<Lhs,Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseDiagonalProduct.h	/^struct traits<SparseDiagonalProduct<Lhs, Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseMatrix.h	/^struct traits<Diagonal<const SparseMatrix<_Scalar, _Options, _Index>, DiagIndex> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseMatrix.h	/^struct traits<SparseMatrix<_Scalar, _Options, _Index> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparsePermutation.h	/^struct traits<permut_sparsematrix_product_retval<PermutationType, MatrixType, Side, Transposed> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseProduct.h	/^struct traits<SparseSparseProduct<LhsNested, RhsNested> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^struct traits<DenseTimeSparseSelfAdjointProduct<Lhs,Rhs,UpLo> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^struct traits<SparseSelfAdjointTimeDenseProduct<Lhs,Rhs,UpLo> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^struct traits<SparseSelfAdjointView<MatrixType,UpLo> > : traits<MatrixType> {$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^struct traits<SparseSymmetricPermutationProduct<MatrixType,UpLo> > : traits<MatrixType> {$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseTriangularView.h	/^struct traits<SparseTriangularView<MatrixType,Mode> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseVector.h	/^struct traits<SparseVector<_Scalar, _Options, _Index> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseCore/SparseView.h	/^struct traits<SparseView<MatrixType> > : traits<MatrixType>$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseQR/SparseQR.h	/^  template <typename SparseQRType, typename Derived> struct traits<SparseQR_QProduct<SparseQRType, Derived> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseQR/SparseQR.h	/^  template <typename SparseQRType> struct traits<SparseQRMatrixQReturnType<SparseQRType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/SparseQR/SparseQR.h	/^  template <typename SparseQRType> struct traits<SparseQRMatrixQTransposeReturnType<SparseQRType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/misc/Image.h	/^struct traits<image_retval_base<DecompositionType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/misc/Kernel.h	/^struct traits<kernel_retval_base<DecompositionType> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/misc/Solve.h	/^struct traits<solve_retval_base<DecompositionType, Rhs> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/misc/SparseSolve.h	/^struct traits<solve_retval_with_guess<DecompositionType, Rhs, Guess> >$/;"	s	namespace:Eigen::internal
traits	include/Eigen/src/misc/SparseSolve.h	/^struct traits<sparse_solve_retval_base<DecompositionType, Rhs> >$/;"	s	namespace:Eigen::internal
trans	include/Eigen/src/Householder/HouseholderSequence.h	/^    bool trans() const { return m_trans; }     \/**< \\brief Returns the transpose flag. *\/$/;"	f	class:Eigen::HouseholderSequence
transform	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const MatrixBase<XprType>& mat, TransformTraits traits = Affine)$/;"	f	class:Eigen::Hyperplane
transform	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const Transform<Scalar,AmbientDimAtCompileTime>& t,$/;"	f	class:Eigen::Hyperplane
transform	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const MatrixBase<XprType>& mat, TransformTraits traits = Affine)$/;"	f	class:Eigen::Hyperplane
transform	include/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const Transform<Scalar,AmbientDimAtCompileTime,Affine,TrOptions>& t,$/;"	f	class:Eigen::Hyperplane
transform_construct_from_matrix	include/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, AffineCompact,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:Eigen::internal
transform_construct_from_matrix	include/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, Mode,Options,Dim,HDim, Dim,Dim>$/;"	s	namespace:Eigen::internal
transform_construct_from_matrix	include/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, Mode,Options,Dim,HDim, Dim,HDim>$/;"	s	namespace:Eigen::internal
transform_construct_from_matrix	include/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, Mode,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:Eigen::internal
transform_left_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,AffineCompact,Options,Dim,HDim, Dim,HDim>$/;"	s	namespace:Eigen::internal
transform_left_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,AffineCompact,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:Eigen::internal
transform_left_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,Mode,Options,Dim,HDim, Dim,Dim>$/;"	s	namespace:Eigen::internal
transform_left_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,Mode,Options,Dim,HDim, Dim,HDim>$/;"	s	namespace:Eigen::internal
transform_left_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,Mode,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:Eigen::internal
transform_make_affine	include/Eigen/src/Geometry/Transform.h	/^struct transform_make_affine$/;"	s	namespace:Eigen::internal
transform_make_affine	include/Eigen/src/Geometry/Transform.h	/^struct transform_make_affine<AffineCompact>$/;"	s	namespace:Eigen::internal
transform_product_result	include/Eigen/src/Geometry/Transform.h	/^struct transform_product_result$/;"	s	namespace:Eigen::internal
transform_right_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_right_product_impl< TransformType, MatrixType, 0 >$/;"	s	namespace:Eigen::internal
transform_right_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_right_product_impl< TransformType, MatrixType, 1 >$/;"	s	namespace:Eigen::internal
transform_right_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_right_product_impl< TransformType, MatrixType, 2 >$/;"	s	namespace:Eigen::internal
transform_take_affine_part	include/Eigen/src/Geometry/Transform.h	/^struct transform_take_affine_part<Transform<Scalar,Dim,AffineCompact, Options> > {$/;"	s	namespace:Eigen::internal
transform_take_affine_part	include/Eigen/src/Geometry/Transform.h	/^template<typename TransformType> struct transform_take_affine_part {$/;"	s	namespace:Eigen::internal
transform_traits	include/Eigen/src/Geometry/Transform.h	/^struct transform_traits$/;"	s	namespace:Eigen::internal
transform_transform_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_transform_product_impl<Transform<Scalar,Dim,AffineCompact,LhsOptions>,Transform<Scalar,Dim,Projective,RhsOptions>,true >$/;"	s	namespace:Eigen::internal
transform_transform_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_transform_product_impl<Transform<Scalar,Dim,LhsMode,LhsOptions>,Transform<Scalar,Dim,RhsMode,RhsOptions>,false >$/;"	s	namespace:Eigen::internal
transform_transform_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_transform_product_impl<Transform<Scalar,Dim,LhsMode,LhsOptions>,Transform<Scalar,Dim,RhsMode,RhsOptions>,true >$/;"	s	namespace:Eigen::internal
transform_transform_product_impl	include/Eigen/src/Geometry/Transform.h	/^struct transform_transform_product_impl<Transform<Scalar,Dim,Projective,LhsOptions>,Transform<Scalar,Dim,AffineCompact,RhsOptions>,true >$/;"	s	namespace:Eigen::internal
translate	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& translate(const VectorType& t)$/;"	f	class:Eigen::AlignedBox
translate	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::translate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
translate	include/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& translate(const MatrixBase<Derived>& a_t)$/;"	f	class:Eigen::AlignedBox
translate	include/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::translate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Eigen::Transform
translation	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline ConstTranslationPart translation() const { return m_matrix.template block<Dim,1>(0,Dim); }$/;"	f	class:Eigen::Transform
translation	include/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline TranslationPart translation() { return m_matrix.template block<Dim,1>(0,Dim); }$/;"	f	class:Eigen::Transform
translation	include/Eigen/src/Geometry/Transform.h	/^  inline ConstTranslationPart translation() const { return ConstTranslationPart(m_matrix,0,Dim); }$/;"	f	class:Eigen::Transform
translation	include/Eigen/src/Geometry/Transform.h	/^  inline TranslationPart translation() { return TranslationPart(m_matrix,0,Dim); }$/;"	f	class:Eigen::Transform
translation	include/Eigen/src/Geometry/Translation.h	/^  VectorType& translation() { return m_coeffs; }$/;"	f	class:Eigen::Translation
translation	include/Eigen/src/Geometry/Translation.h	/^  const VectorType& translation() const { return m_coeffs; }$/;"	f	class:Eigen::Translation
translationExt	include/Eigen/src/Geometry/Transform.h	/^  inline Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,1> translationExt()$/;"	f	class:Eigen::Transform
translationExt	include/Eigen/src/Geometry/Transform.h	/^  inline const Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,1> translationExt() const$/;"	f	class:Eigen::Transform
transpose	include/Eigen/src/Core/PermutationMatrix.h	/^    inline Transpose<PermutationBase> transpose() const$/;"	f	class:Eigen::PermutationBase
transpose	include/Eigen/src/Core/Transpose.h	/^DenseBase<Derived>::transpose() const$/;"	f	class:Eigen::DenseBase
transpose	include/Eigen/src/Core/Transpose.h	/^DenseBase<Derived>::transpose()$/;"	f	class:Eigen::DenseBase
transpose	include/Eigen/src/Core/Transpositions.h	/^    inline Transpose<TranspositionsBase> transpose() const$/;"	f	class:Eigen::TranspositionsBase
transpose	include/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularView<Transpose<MatrixType>,TransposeMode> transpose()$/;"	f	class:Eigen::TriangularView
transpose	include/Eigen/src/Core/TriangularMatrix.h	/^    inline const TriangularView<Transpose<MatrixType>,TransposeMode> transpose() const$/;"	f	class:Eigen::TriangularView
transpose	include/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence transpose() const$/;"	f	class:Eigen::HouseholderSequence
transpose	include/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation transpose() const { using numext::conj; return JacobiRotation(m_c, -conj(m_s)); }$/;"	f	class:Eigen::JacobiRotation
transpose	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^  SPQRMatrixQTransposeReturnType<SPQRType> transpose() const$/;"	f	struct:Eigen::SPQRMatrixQReturnType
transpose	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    Transpose<Derived> transpose() { return derived(); }$/;"	f	class:Eigen::SparseMatrixBase
transpose	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    const Transpose<const Derived> transpose() const { return derived(); }$/;"	f	class:Eigen::SparseMatrixBase
transpose	include/Eigen/src/SparseQR/SparseQR.h	/^  SparseQRMatrixQTransposeReturnType<SparseQRType> transpose() const$/;"	f	struct:Eigen::SparseQRMatrixQReturnType
transposeInPlace	include/Eigen/src/Core/Transpose.h	/^inline void DenseBase<Derived>::transposeInPlace()$/;"	f	class:Eigen::DenseBase
transposition_matrix_product_retval	include/Eigen/src/Core/Transpositions.h	/^    transposition_matrix_product_retval(const TranspositionType& tr, const MatrixType& matrix)$/;"	f	struct:Eigen::internal::transposition_matrix_product_retval
transposition_matrix_product_retval	include/Eigen/src/Core/Transpositions.h	/^struct transposition_matrix_product_retval$/;"	s	namespace:Eigen::internal
transpositionsP	include/Eigen/src/Cholesky/LDLT.h	/^    inline const TranspositionType& transpositionsP() const$/;"	f	class:Eigen::LDLT
treePostorder	include/Eigen/src/SparseCore/SparseColEtree.h	/^void treePostorder(Index n, IndexVector& parent, IndexVector& post)$/;"	f	namespace:Eigen::internal
triangularView	include/Eigen/src/Core/TriangularMatrix.h	/^MatrixBase<Derived>::triangularView() const$/;"	f	class:Eigen::MatrixBase
triangularView	include/Eigen/src/Core/TriangularMatrix.h	/^MatrixBase<Derived>::triangularView()$/;"	f	class:Eigen::MatrixBase
triangularView	include/Eigen/src/SparseCore/SparseTriangularView.h	/^SparseMatrixBase<Derived>::triangularView() const$/;"	f	class:Eigen::SparseMatrixBase
triangular_assignment_selector	include/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, (SelfAdjoint|Lower), UnrollCount, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, (SelfAdjoint|Upper), UnrollCount, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Lower, 0, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Lower, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Upper, 0, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Upper, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, Lower, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, Mode, 0, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, StrictlyLower, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, StrictlyUpper, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, UnitLower, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, UnitUpper, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_assignment_selector	include/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, Upper, Dynamic, ClearOpposite>$/;"	s	namespace:Eigen::internal
triangular_matrix_vector_product	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct triangular_matrix_vector_product<Index,Mode,LhsScalar,ConjLhs,RhsScalar,ConjRhs,ColMajor,Version>$/;"	s	namespace:Eigen::internal
triangular_matrix_vector_product	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct triangular_matrix_vector_product<Index,Mode,LhsScalar,ConjLhs,RhsScalar,ConjRhs,RowMajor,Version>$/;"	s	namespace:Eigen::internal
triangular_matrix_vector_product_trmv	include/Eigen/src/Core/products/TriangularMatrixVector_MKL.h	/^struct triangular_matrix_vector_product_trmv :$/;"	s	namespace:Eigen::internal
triangular_solve_matrix	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^struct triangular_solve_matrix<Scalar,Index,OnTheLeft,Mode,Conjugate,TriStorageOrder,ColMajor>$/;"	s	namespace:Eigen::internal
triangular_solve_matrix	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^struct triangular_solve_matrix<Scalar,Index,OnTheRight,Mode,Conjugate,TriStorageOrder,ColMajor>$/;"	s	namespace:Eigen::internal
triangular_solve_matrix	include/Eigen/src/Core/products/TriangularSolverMatrix.h	/^struct triangular_solve_matrix<Scalar,Index,Side,Mode,Conjugate,TriStorageOrder,RowMajor>$/;"	s	namespace:Eigen::internal
triangular_solve_retval	include/Eigen/src/Core/SolveTriangular.h	/^  triangular_solve_retval(const TriangularType& tri, const Rhs& rhs)$/;"	f	struct:Eigen::internal::triangular_solve_retval
triangular_solve_retval	include/Eigen/src/Core/SolveTriangular.h	/^template<int Side, typename TriangularType, typename Rhs> struct triangular_solve_retval$/;"	s	namespace:Eigen::internal
triangular_solve_vector	include/Eigen/src/Core/products/TriangularSolverVector.h	/^struct triangular_solve_vector<LhsScalar, RhsScalar, Index, OnTheLeft, Mode, Conjugate, ColMajor>$/;"	s	namespace:Eigen::internal
triangular_solve_vector	include/Eigen/src/Core/products/TriangularSolverVector.h	/^struct triangular_solve_vector<LhsScalar, RhsScalar, Index, OnTheLeft, Mode, Conjugate, RowMajor>$/;"	s	namespace:Eigen::internal
triangular_solve_vector	include/Eigen/src/Core/products/TriangularSolverVector.h	/^struct triangular_solve_vector<LhsScalar, RhsScalar, Index, OnTheRight, Mode, Conjugate, StorageOrder>$/;"	s	namespace:Eigen::internal
triangular_solver_selector	include/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,OnTheLeft,Mode,CompleteUnrolling,1> {$/;"	s	namespace:Eigen::internal
triangular_solver_selector	include/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,OnTheRight,Mode,CompleteUnrolling,1> {$/;"	s	namespace:Eigen::internal
triangular_solver_selector	include/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,Side,Mode,NoUnrolling,1>$/;"	s	namespace:Eigen::internal
triangular_solver_selector	include/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,Side,Mode,NoUnrolling,Dynamic>$/;"	s	namespace:Eigen::internal
triangular_solver_unroller	include/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_unroller<Lhs,Rhs,Mode,Index,Size,false> {$/;"	s	namespace:Eigen::internal
triangular_solver_unroller	include/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_unroller<Lhs,Rhs,Mode,Index,Size,true> {$/;"	s	namespace:Eigen::internal
tribb_kernel	include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct tribb_kernel$/;"	s	namespace:Eigen::internal
tridiagonal_qr_step	include/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^static void tridiagonal_qr_step(RealScalar* diag, RealScalar* subdiag, Index start, Index end, Scalar* matrixQ, Index n)$/;"	f	namespace:Eigen::internal
tridiagonalization_inplace	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^void tridiagonalization_inplace(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, bool extractQ)$/;"	f	namespace:Eigen::internal
tridiagonalization_inplace	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^void tridiagonalization_inplace(MatrixType& matA, CoeffVectorType& hCoeffs)$/;"	f	namespace:Eigen::internal
tridiagonalization_inplace_selector	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct tridiagonalization_inplace_selector$/;"	s	namespace:Eigen::internal
tridiagonalization_inplace_selector	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct tridiagonalization_inplace_selector<MatrixType,1,IsComplex>$/;"	s	namespace:Eigen::internal
tridiagonalization_inplace_selector	include/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct tridiagonalization_inplace_selector<MatrixType,3,false>$/;"	s	namespace:Eigen::internal
trmv_selector	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^template<> struct trmv_selector<ColMajor>$/;"	s	namespace:Eigen::internal
trmv_selector	include/Eigen/src/Core/products/TriangularMatrixVector.h	/^template<> struct trmv_selector<RowMajor>$/;"	s	namespace:Eigen::internal
trsolve_traits	include/Eigen/src/Core/SolveTriangular.h	/^class trsolve_traits$/;"	c	namespace:Eigen::internal
true_type	include/Eigen/src/Core/util/Meta.h	/^struct true_type {  enum { value = 1 }; };$/;"	s	namespace:Eigen::internal
twistedBy	include/Eigen/src/SparseCore/SparseMatrixBase.h	/^    SparseSymmetricPermutationProduct<Derived,Upper|Lower> twistedBy(const PermutationMatrix<Dynamic,Dynamic,Index>& perm) const$/;"	f	class:Eigen::SparseMatrixBase
twistedBy	include/Eigen/src/SparseCore/SparseSelfAdjointView.h	/^    SparseSymmetricPermutationProduct<_MatrixTypeNested,UpLo> twistedBy(const PermutationMatrix<Dynamic,Dynamic,Index>& perm) const$/;"	f	class:Eigen::SparseSelfAdjointView
type	include/Eigen/src/Core/DenseCoeffsBase.h	/^  typedef typename conditional<is_arithmetic<T>::value, T, typename add_const_on_value_type<T>::type>::type type;$/;"	t	struct:Eigen::internal::add_const_on_value_type_if_arithmetic
type	include/Eigen/src/Core/GenericPacketMath.h	/^  typedef T type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:Eigen::internal::atanh2_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:Eigen::internal::conj_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:Eigen::internal::pow_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:Eigen::internal::random_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef T type;$/;"	t	struct:Eigen::internal::global_math_functions_filtering_base
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real & type;$/;"	t	struct:Eigen::internal::imag_ref_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real & type;$/;"	t	struct:Eigen::internal::real_ref_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:Eigen::internal::abs2_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:Eigen::internal::hypot_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:Eigen::internal::imag_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:Eigen::internal::norm1_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:Eigen::internal::real_retval
type	include/Eigen/src/Core/MathFunctions.h	/^  typedef typename T::Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl type;$/;"	t	struct:Eigen::internal::global_math_functions_filtering_base
type	include/Eigen/src/Core/MathFunctions.h	/^template<typename T> struct always_void { typedef void type; };$/;"	t	struct:Eigen::internal::always_void
type	include/Eigen/src/Core/MatrixBase.h	/^      typedef Matrix<Scalar,MatrixBase::RowsAtCompileTime,MatrixBase::ColsAtCompileTime> type;$/;"	t	struct:Eigen::MatrixBase::cross_product_return_type
type	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedAlignedMapType { typedef Eigen::Map<Derived, Aligned, StrideType> type; };$/;"	t	struct:Eigen::PlainObjectBase::StridedAlignedMapType
type	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstAlignedMapType { typedef Eigen::Map<const Derived, Aligned, StrideType> type; };$/;"	t	struct:Eigen::PlainObjectBase::StridedConstAlignedMapType
type	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstMapType { typedef Eigen::Map<const Derived, Unaligned, StrideType> type; };$/;"	t	struct:Eigen::PlainObjectBase::StridedConstMapType
type	include/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedMapType { typedef Eigen::Map<Derived, Unaligned, StrideType> type; };$/;"	t	struct:Eigen::PlainObjectBase::StridedMapType
type	include/Eigen/src/Core/ProductBase.h	/^  typedef typename GeneralProduct<Lhs,Rhs,Mode>::PlainObject const& type;$/;"	t	class:internal::nested::GeneralProduct
type	include/Eigen/src/Core/Ref.h	/^    typedef typename internal::conditional<MatchAtCompileTime,internal::true_type,internal::false_type>::type type;$/;"	t	struct:Eigen::internal::traits::match
type	include/Eigen/src/Core/ReturnByValue.h	/^  typedef typename traits<Derived>::ReturnType type;$/;"	t	struct:Eigen::internal::nested
type	include/Eigen/src/Core/Transpose.h	/^  typedef typename dense_xpr_base<Transpose<MatrixType> >::type type;$/;"	t	struct:Eigen::internal::TransposeImpl_base
type	include/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename ProdRetType::PlainObject type;$/;"	t	struct:Eigen::TriangularView::eigen2_product_return_type
type	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef SelfAdjointView<MatrixType, Upper> type;$/;"	t	struct:Eigen::internal::eigen2_part_return_type
type	include/Eigen/src/Core/TriangularMatrix.h	/^  typedef TriangularView<MatrixType, Mode> type;$/;"	t	struct:Eigen::internal::eigen2_part_return_type
type	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^  typedef Packet2cf type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  typedef Packet4f type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  typedef Packet4i type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/NEON/Complex.h	/^  typedef Packet2cf type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^  typedef Packet4f type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^  typedef Packet4i type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/SSE/Complex.h	/^  typedef Packet1cd type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/SSE/Complex.h	/^  typedef Packet2cf type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet1cd> { typedef std::complex<double> type; enum {size=1}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  typedef Packet2d type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  typedef Packet4f type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^  typedef Packet4i type;$/;"	t	struct:Eigen::internal::packet_traits
type	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	t	struct:Eigen::internal::unpacket_traits
type	include/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef PlainObject const& type;$/;"	t	struct:Eigen::internal::nested
type	include/Eigen/src/Core/util/ForwardDeclarations.h	/^  typedef ComplexScalar type(ComplexScalar, int);$/;"	t	struct:Eigen::internal::stem_function
type	include/Eigen/src/Core/util/Meta.h	/^    typedef typename binary_result_of_select<Func, ArgType0, ArgType1, FunctorType>::type type;$/;"	t	struct:Eigen::internal::result_of
type	include/Eigen/src/Core/util/Meta.h	/^    typedef typename unary_result_of_select<Func, ArgType, FunctorType>::type type;$/;"	t	struct:Eigen::internal::result_of
type	include/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select {typedef ArgType0 type;};$/;"	t	struct:Eigen::internal::binary_result_of_select
type	include/Eigen/src/Core/util/Meta.h	/^struct conditional <false, Then, Else> { typedef Else type; };$/;"	t	struct:Eigen::internal::conditional
type	include/Eigen/src/Core/util/Meta.h	/^struct conditional { typedef Then type; };$/;"	t	struct:Eigen::internal::conditional
type	include/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select {typedef ArgType type;};$/;"	t	struct:Eigen::internal::unary_result_of_select
type	include/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_std_result_type)> {typedef typename Func::result_type type;};$/;"	t	struct:Eigen::internal::unary_result_of_select
type	include/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_tr1_result)> {typedef typename Func::template result<Func(ArgType)>::type type;};$/;"	t	struct:Eigen::internal::unary_result_of_select
type	include/Eigen/src/Core/util/Meta.h	/^template <class T, unsigned int Size> struct remove_const<const T[Size]> { typedef T type[Size]; };$/;"	t	struct:Eigen::internal::remove_const
type	include/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const { typedef T type; };$/;"	t	struct:Eigen::internal::remove_const
type	include/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T> { typedef T type; };$/;"	t	struct:Eigen::internal::remove_const
type	include/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T[]> { typedef T type[]; };$/;"	t	struct:Eigen::internal::remove_const
type	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const { typedef const T type; };$/;"	t	struct:Eigen::internal::add_const
type	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const<T&> { typedef T& type; };$/;"	t	struct:Eigen::internal::add_const
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type            { typedef const T type;  };$/;"	t	struct:Eigen::internal::add_const_on_value_type
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T const* const>  { typedef T const* const type; };$/;"	t	struct:Eigen::internal::add_const_on_value_type
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T&>        { typedef T const& type; };$/;"	t	struct:Eigen::internal::add_const_on_value_type
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T* const>  { typedef T const* const type; };$/;"	t	struct:Eigen::internal::add_const_on_value_type
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T*>        { typedef T const* type; };$/;"	t	struct:Eigen::internal::add_const_on_value_type
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all { typedef T type; };$/;"	t	struct:Eigen::internal::remove_all
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const&>  { typedef typename remove_all<T>::type type; };$/;"	t	struct:Eigen::internal::remove_all
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const*>  { typedef typename remove_all<T>::type type; };$/;"	t	struct:Eigen::internal::remove_all
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T&>        { typedef typename remove_all<T>::type type; };$/;"	t	struct:Eigen::internal::remove_all
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T*>        { typedef typename remove_all<T>::type type; };$/;"	t	struct:Eigen::internal::remove_all
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<const T>   { typedef typename remove_all<T>::type type; };$/;"	t	struct:Eigen::internal::remove_all
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer { typedef T type; };$/;"	t	struct:Eigen::internal::remove_pointer
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*> { typedef T type; };$/;"	t	struct:Eigen::internal::remove_pointer
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	t	struct:Eigen::internal::remove_pointer
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference { typedef T type; };$/;"	t	struct:Eigen::internal::remove_reference
type	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference<T&> { typedef T type; };$/;"	t	struct:Eigen::internal::remove_reference
type	include/Eigen/src/Core/util/Meta.h	/^{ typedef T type; };$/;"	t	struct:Eigen::internal::enable_if
type	include/Eigen/src/Core/util/Meta.h	/^{typedef typename Func::result_type type;};$/;"	t	struct:Eigen::internal::binary_result_of_select
type	include/Eigen/src/Core/util/Meta.h	/^{typedef typename Func::template result<Func(ArgType0,ArgType1)>::type type;};$/;"	t	struct:Eigen::internal::binary_result_of_select
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype { typedef T type; };$/;"	t	struct:Eigen::ei_cleantype
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T&>        { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:Eigen::ei_cleantype
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T*>        { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:Eigen::ei_cleantype
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T&>  { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:Eigen::ei_cleantype
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T*>  { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:Eigen::ei_cleantype
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T>   { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:Eigen::ei_cleantype
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst { typedef T type; };$/;"	t	struct:Eigen::ei_unconst
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const &> { typedef T & type; };$/;"	t	struct:Eigen::ei_unconst
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const *> { typedef T * type; };$/;"	t	struct:Eigen::ei_unconst
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<const T> { typedef T type; };$/;"	t	struct:Eigen::ei_unconst
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer { typedef T type; };$/;"	t	struct:Eigen::ei_unpointer
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*> { typedef T type; };$/;"	t	struct:Eigen::ei_unpointer
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*const> { typedef T type; };$/;"	t	struct:Eigen::ei_unpointer
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref { typedef T type; };$/;"	t	struct:Eigen::ei_unref
type	include/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref<T&> { typedef T type; };$/;"	t	struct:Eigen::ei_unref
type	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef MatrixOrTransformType type;$/;"	t	struct:Eigen::internal::take_matrix_for_product
type	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename TransformType::MatrixType type;$/;"	t	struct:Eigen::internal::take_matrix_for_product
type	include/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename internal::add_const<typename TransformType::ConstAffinePart>::type type;$/;"	t	struct:Eigen::internal::take_matrix_for_product
type	include/Eigen/src/Geometry/Umeyama.h	/^  > type;$/;"	t	struct:Eigen::internal::umeyama_transform_matrix_type
type	include/Eigen/src/SparseCore/SparseUtil.h	/^    typedef Matrix<_Scalar, 1, 1> type;$/;"	t	struct:Eigen::internal::sparse_eval
type	include/Eigen/src/SparseCore/SparseUtil.h	/^    typedef SparseMatrix<_Scalar, _Options, _Index> type;$/;"	t	struct:Eigen::internal::plain_matrix_type
type	include/Eigen/src/SparseCore/SparseUtil.h	/^    typedef SparseMatrix<_Scalar, _Options, _Index> type;$/;"	t	struct:Eigen::internal::sparse_eval
type	include/Eigen/src/SparseCore/SparseUtil.h	/^    typedef SparseVector<_Scalar, ColMajor, _Index> type;$/;"	t	struct:Eigen::internal::sparse_eval
type	include/Eigen/src/SparseCore/SparseUtil.h	/^    typedef SparseVector<_Scalar, RowMajor, _Index> type;$/;"	t	struct:Eigen::internal::sparse_eval
ucol	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  ScalarVector  ucol; \/\/ nonzero values of U ordered by columns $/;"	m	struct:Eigen::internal::LU_GlobalLU_t
umeyama	include/Eigen/src/Geometry/Umeyama.h	/^umeyama(const MatrixBase<Derived>& src, const MatrixBase<OtherDerived>& dst, bool with_scaling = true)$/;"	f	namespace:Eigen
umeyama_transform_matrix_type	include/Eigen/src/Geometry/Umeyama.h	/^struct umeyama_transform_matrix_type$/;"	s	namespace:Eigen::internal
umfpack_free_numeric	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline void umfpack_free_numeric(void **Numeric, double)$/;"	f	namespace:Eigen
umfpack_free_numeric	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline void umfpack_free_numeric(void **Numeric, std::complex<double>)$/;"	f	namespace:Eigen
umfpack_free_symbolic	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline void umfpack_free_symbolic(void **Symbolic, double)$/;"	f	namespace:Eigen
umfpack_free_symbolic	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline void umfpack_free_symbolic(void **Symbolic, std::complex<double>)$/;"	f	namespace:Eigen
umfpack_get_determinant	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_get_determinant(double *Mx, double *Ex, void *NumericHandle, double User_Info [UMFPACK_INFO])$/;"	f	namespace:Eigen
umfpack_get_determinant	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_get_determinant(std::complex<double> *Mx, double *Ex, void *NumericHandle, double User_Info [UMFPACK_INFO])$/;"	f	namespace:Eigen
umfpack_get_lunz	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_get_lunz(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric, double)$/;"	f	namespace:Eigen
umfpack_get_lunz	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_get_lunz(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric, std::complex<double>)$/;"	f	namespace:Eigen
umfpack_get_numeric	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_get_numeric(int Lp[], int Lj[], double Lx[], int Up[], int Ui[], double Ux[],$/;"	f	namespace:Eigen
umfpack_get_numeric	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_get_numeric(int Lp[], int Lj[], std::complex<double> Lx[], int Up[], int Ui[], std::complex<double> Ux[],$/;"	f	namespace:Eigen
umfpack_helper_is_sparse_plain	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^  struct umfpack_helper_is_sparse_plain<MappedSparseMatrix<Scalar,Options,StorageIndex> >$/;"	s	namespace:Eigen::internal
umfpack_helper_is_sparse_plain	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^  struct umfpack_helper_is_sparse_plain<SparseMatrix<Scalar,Options,StorageIndex> >$/;"	s	namespace:Eigen::internal
umfpack_helper_is_sparse_plain	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^  template<typename T> struct umfpack_helper_is_sparse_plain : false_type {};$/;"	s	namespace:Eigen::internal
umfpack_numeric	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_numeric( const int Ap[], const int Ai[], const double Ax[],$/;"	f	namespace:Eigen
umfpack_numeric	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_numeric( const int Ap[], const int Ai[], const std::complex<double> Ax[],$/;"	f	namespace:Eigen
umfpack_solve	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_solve( int sys, const int Ap[], const int Ai[], const double Ax[],$/;"	f	namespace:Eigen
umfpack_solve	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_solve( int sys, const int Ap[], const int Ai[], const std::complex<double> Ax[],$/;"	f	namespace:Eigen
umfpack_symbolic	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^inline int umfpack_symbolic(int n_row,int n_col,$/;"	f	namespace:Eigen
unaligned_assign_impl	include/Eigen/src/Core/Assign.h	/^struct unaligned_assign_impl$/;"	s	namespace:Eigen::internal
unaligned_assign_impl	include/Eigen/src/Core/Assign.h	/^struct unaligned_assign_impl<false>$/;"	s	namespace:Eigen::internal
unaryExpr	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^unaryExpr(const CustomUnaryOp& func = CustomUnaryOp()) const$/;"	f
unaryViewExpr	include/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^unaryViewExpr(const CustomViewOp& func = CustomViewOp()) const$/;"	f
unary_result_of_select	include/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select {typedef ArgType type;};$/;"	s	namespace:Eigen::internal
unary_result_of_select	include/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_std_result_type)> {typedef typename Func::result_type type;};$/;"	s	namespace:Eigen::internal
unary_result_of_select	include/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_tr1_result)> {typedef typename Func::template result<Func(ArgType)>::type type;};$/;"	s	namespace:Eigen::internal
unblocked	include/Eigen/src/Cholesky/LDLT.h	/^  static EIGEN_STRONG_INLINE bool unblocked(MatrixType& mat, TranspositionType& transpositions, Workspace& temp, SignMatrix& sign)$/;"	f	struct:Eigen::internal::ldlt_inplace
unblocked	include/Eigen/src/Cholesky/LDLT.h	/^  static bool unblocked(MatrixType& mat, TranspositionType& transpositions, Workspace& temp, SignMatrix& sign)$/;"	f	struct:Eigen::internal::ldlt_inplace
unblocked	include/Eigen/src/Cholesky/LLT.h	/^  static EIGEN_STRONG_INLINE typename MatrixType::Index unblocked(MatrixType& mat)$/;"	f	struct:Eigen::internal::llt_inplace
unblocked	include/Eigen/src/Cholesky/LLT.h	/^  static typename MatrixType::Index unblocked(MatrixType& mat)$/;"	f	struct:Eigen::internal::llt_inplace
unblocked_lu	include/Eigen/src/LU/PartialPivLU.h	/^  static Index unblocked_lu(MatrixType& lu, PivIndex* row_transpositions, PivIndex& nb_transpositions)$/;"	f	struct:Eigen::internal::partial_lu_impl
uncompress	include/Eigen/src/SparseCore/SparseMatrix.h	/^    void uncompress()$/;"	f	class:Eigen::SparseMatrix
unitOrthogonal	include/Eigen/src/Geometry/OrthoMethods.h	/^MatrixBase<Derived>::unitOrthogonal() const$/;"	f	class:Eigen::MatrixBase
unitOrthogonal_selector	include/Eigen/src/Geometry/OrthoMethods.h	/^struct unitOrthogonal_selector$/;"	s	namespace:Eigen::internal
unitOrthogonal_selector	include/Eigen/src/Geometry/OrthoMethods.h	/^struct unitOrthogonal_selector<Derived,2>$/;"	s	namespace:Eigen::internal
unitOrthogonal_selector	include/Eigen/src/Geometry/OrthoMethods.h	/^struct unitOrthogonal_selector<Derived,3>$/;"	s	namespace:Eigen::internal
unpackRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void unpackRhs(DenseIndex n, const RhsScalar* rhs, RhsScalar* b)$/;"	f	class:Eigen::internal::gebp_traits
unpackRhs	include/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void unpackRhs(DenseIndex n, const Scalar* rhs, Scalar* b)$/;"	f	class:Eigen::internal::gebp_traits
unpacket_traits	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet1cd> { typedef std::complex<double> type; enum {size=1}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	s	namespace:Eigen::internal
unpacket_traits	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	s	namespace:Eigen::internal
update	include/Eigen/src/Cholesky/LDLT.h	/^  static EIGEN_STRONG_INLINE bool update(MatrixType& mat, TranspositionType& transpositions, Workspace& tmp, WType& w, const typename MatrixType::RealScalar& sigma=1)$/;"	f	struct:Eigen::internal::ldlt_inplace
update	include/Eigen/src/Cholesky/LDLT.h	/^  static bool update(MatrixType& mat, const TranspositionType& transpositions, Workspace& tmp, const WType& w, const typename MatrixType::RealScalar& sigma=1)$/;"	f	struct:Eigen::internal::ldlt_inplace
updateInPlace	include/Eigen/src/Cholesky/LDLT.h	/^  static bool updateInPlace(MatrixType& mat, MatrixBase<WDerived>& w, const typename MatrixType::RealScalar& sigma=1)$/;"	f	struct:Eigen::internal::ldlt_inplace
update_segrep	include/Eigen/src/SparseLU/SparseLU_column_dfs.h	/^  bool update_segrep(Index \/*krep*\/, Index \/*jj*\/)$/;"	f	struct:Eigen::internal::column_dfs_traits
update_segrep	include/Eigen/src/SparseLU/SparseLU_panel_dfs.h	/^  bool update_segrep(Index krep, Index jj)$/;"	f	struct:Eigen::internal::panel_dfs_traits
users	include/Eigen/src/Core/products/Parallelizer.h	/^  int volatile users;$/;"	m	struct:Eigen::internal::GemmParallelInfo
usub	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  IndexVector usub; \/\/ row indices of U columns in ucol$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
v	include/Eigen/src/Core/arch/AltiVec/Complex.h	/^  Packet4f  v;$/;"	m	struct:Eigen::internal::Packet2cf
v	include/Eigen/src/Core/arch/NEON/Complex.h	/^  Packet4f  v;$/;"	m	struct:Eigen::internal::Packet2cf
v	include/Eigen/src/Core/arch/SSE/Complex.h	/^  __m128  v;$/;"	m	struct:Eigen::internal::Packet2cf
v	include/Eigen/src/Core/arch/SSE/Complex.h	/^  __m128d  v;$/;"	m	struct:Eigen::internal::Packet1cd
value	include/Eigen/src/Core/CoreIterators.h	/^    EIGEN_STRONG_INLINE Scalar value() const$/;"	f	class:Eigen::DenseBase::InnerIterator
value	include/Eigen/src/Core/DenseBase.h	/^    CoeffReturnType value() const$/;"	f	class:Eigen::DenseBase
value	include/Eigen/src/Core/GeneralProduct.h	/^         value = is_large  ? Large$/;"	e	enum:Eigen::internal::product_size_category::__anon144
value	include/Eigen/src/Core/GeneralProduct.h	/^    value = selector::ret$/;"	e	enum:Eigen::internal::product_type::__anon147
value	include/Eigen/src/Core/MathFunctions.h	/^         value = (upper <= lower + 1) ? int(floor_log2_terminate)$/;"	e	enum:Eigen::internal::floor_log2_selector::__anon180
value	include/Eigen/src/Core/MathFunctions.h	/^  enum { value = (n >= ((unsigned int)(1) << (lower+1))) ? lower+1 : lower };$/;"	e	enum:Eigen::internal::floor_log2::__anon183
value	include/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, floor_log2_selector<n, lower, upper>::middle, upper>::value };$/;"	e	enum:Eigen::internal::floor_log2::__anon182
value	include/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, lower, floor_log2_selector<n, lower, upper>::middle>::value };$/;"	e	enum:Eigen::internal::floor_log2::__anon181
value	include/Eigen/src/Core/VectorwiseOp.h	/^  { enum { value = (Size-1) * functor_traits<BinaryOp>::Cost }; };$/;"	e	enum:Eigen::internal::member_redux::Cost::__anon332
value	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128>  { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon21
value	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128d> { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon23
value	include/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128i> { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon22
value	include/Eigen/src/Core/util/ForwardDeclarations.h	/^         value = has_direct_access ? (has_write_access ? DirectWriteAccessors : DirectAccessors)$/;"	e	enum:Eigen::internal::accessors_level::__anon273
value	include/Eigen/src/Core/util/Meta.h	/^struct false_type { enum { value = 0 }; };$/;"	e	enum:Eigen::internal::false_type::__anon297
value	include/Eigen/src/Core/util/Meta.h	/^struct true_type {  enum { value = 1 }; };$/;"	e	enum:Eigen::internal::true_type::__anon296
value	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const { enum { value = 0 }; };$/;"	e	enum:Eigen::internal::is_const::__anon314
value	include/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const<T const> { enum { value = 1 }; };$/;"	e	enum:Eigen::internal::is_const::__anon315
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<bool>          { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon304
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<char>          { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon305
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<double>        { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon302
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<float>         { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon301
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<long double>   { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon303
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed char>   { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon306
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed int>    { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon310
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed long>   { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon312
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed short>  { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon308
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned char> { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon307
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned int>  { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon311
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned long> { enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon313
value	include/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned short>{ enum { value = true }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon309
value	include/Eigen/src/Core/util/Meta.h	/^template<typename T, typename U> struct is_same { enum { value = 0 }; };$/;"	e	enum:Eigen::internal::is_same::__anon298
value	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_arithmetic      { enum { value = false }; };$/;"	e	enum:Eigen::internal::is_arithmetic::__anon300
value	include/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_same<T,T> { enum { value = 1 }; };$/;"	e	enum:Eigen::internal::is_same::__anon299
value	include/Eigen/src/SparseCore/AmbiVector.h	/^      Scalar value;$/;"	m	struct:Eigen::internal::AmbiVector::ListEl
value	include/Eigen/src/SparseCore/AmbiVector.h	/^    Scalar value() const { return m_cachedValue; }$/;"	f	class:Eigen::internal::AmbiVector::Iterator
value	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline Scalar& value(size_t i) { return m_values[i]; }$/;"	f	class:Eigen::internal::CompressedStorage
value	include/Eigen/src/SparseCore/CompressedStorage.h	/^    inline const Scalar& value(size_t i) const { return m_values[i]; }$/;"	f	class:Eigen::internal::CompressedStorage
value	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Scalar value() const { return m_matrix.valuePtr()[m_id-1]; }$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
value	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Scalar value() const { return m_matrix.valuePtr()[m_id]; }$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
value	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const { return m_functor(m_lhsIter.value(), m_rhsIter.value()); }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
value	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const { return m_value; }$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
value	include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const$/;"	f	class:Eigen::internal::sparse_cwise_binary_op_inner_iterator_selector
value	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE typename CwiseUnaryOpImpl::Scalar value() const { return m_functor(Base::value()); }$/;"	f	class:Eigen::CwiseUnaryOpImpl::InnerIterator
value	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE typename CwiseUnaryOpImpl::Scalar value() const { return m_functor(Base::value()); }$/;"	f	class:Eigen::CwiseUnaryOpImpl::ReverseInnerIterator
value	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE typename CwiseUnaryViewImpl::Scalar value() const { return m_functor(Base::value()); }$/;"	f	class:Eigen::CwiseUnaryViewImpl::InnerIterator
value	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE typename CwiseUnaryViewImpl::Scalar value() const { return m_functor(Base::value()); }$/;"	f	class:Eigen::CwiseUnaryViewImpl::ReverseInnerIterator
value	include/Eigen/src/SparseCore/SparseDenseProduct.h	/^    inline Scalar value() const { return Base::value() * m_factor; }$/;"	f	class:Eigen::SparseDenseOuterProduct::InnerIterator
value	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline const Scalar& value() const { return m_values[m_id-1]; }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
value	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline const Scalar& value() const { return m_values[m_id]; }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
value	include/Eigen/src/SparseCore/SparseTriangularView.h	/^    inline Scalar value() const$/;"	f	class:Eigen::SparseTriangularView::InnerIterator
value	include/Eigen/src/SparseCore/SparseUtil.h	/^  const Scalar& value() const { return m_value; }$/;"	f	class:Eigen::Triplet
value	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar value() const { return m_data.value(m_id); }$/;"	f	class:Eigen::SparseVector::InnerIterator
value	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar value() const { return m_data.value(m_id-1); }$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
value	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline Scalar value() const { return m_matrix.valuePtr()[m_idval]; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
valuePtr	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Scalar* valuePtr() { return m_values; }$/;"	f	class:Eigen::MappedSparseMatrix
valuePtr	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline const Scalar* valuePtr() const { return m_values; }$/;"	f	class:Eigen::MappedSparseMatrix
valuePtr	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline Scalar* valuePtr()$/;"	f	class:Eigen::BlockImpl
valuePtr	include/Eigen/src/SparseCore/SparseBlock.h	/^    inline const Scalar* valuePtr() const$/;"	f	class:Eigen::BlockImpl
valuePtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar* valuePtr() { return &m_data.value(0); }$/;"	f	class:Eigen::SparseMatrix
valuePtr	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline const Scalar* valuePtr() const { return &m_data.value(0); }$/;"	f	class:Eigen::SparseMatrix
valuePtr	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE Scalar* valuePtr() { return &m_data.value(0); }$/;"	f	class:Eigen::SparseVector
valuePtr	include/Eigen/src/SparseCore/SparseVector.h	/^    EIGEN_STRONG_INLINE const Scalar* valuePtr() const { return &m_data.value(0); }$/;"	f	class:Eigen::SparseVector
valuePtr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    Scalar* valuePtr() {  return m_nzval; }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
valuePtr	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    const Scalar* valuePtr() const $/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
valueRef	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_matrix.valuePtr()[m_id-1]); }$/;"	f	class:Eigen::MappedSparseMatrix::ReverseInnerIterator
valueRef	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_matrix.valuePtr()[m_id]); }$/;"	f	class:Eigen::MappedSparseMatrix::InnerIterator
valueRef	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE typename CwiseUnaryViewImpl::Scalar& valueRef() { return m_functor(Base::valueRef()); }$/;"	f	class:Eigen::CwiseUnaryViewImpl::InnerIterator
valueRef	include/Eigen/src/SparseCore/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE typename CwiseUnaryViewImpl::Scalar& valueRef() { return m_functor(Base::valueRef()); }$/;"	f	class:Eigen::CwiseUnaryViewImpl::ReverseInnerIterator
valueRef	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_values[m_id-1]); }$/;"	f	class:Eigen::SparseMatrix::ReverseInnerIterator
valueRef	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_values[m_id]); }$/;"	f	class:Eigen::SparseMatrix::InnerIterator
valueRef	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_data.value(m_id)); }$/;"	f	class:Eigen::SparseVector::InnerIterator
valueRef	include/Eigen/src/SparseCore/SparseVector.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_data.value(m_id-1)); }$/;"	f	class:Eigen::SparseVector::ReverseInnerIterator
valueRef	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_matrix.valuePtr()[m_idval]); }$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix::InnerIterator
value_type	include/Eigen/src/Core/util/Memory.h	/^    typedef T         value_type;$/;"	t	class:Eigen::aligned_allocator
value_type	include/Eigen/src/SparseCore/SparseMatrix.h	/^        typedef Index value_type;$/;"	t	class:Eigen::SparseMatrix::SingletonVector
value_type	include/Eigen/src/StlSupport/details.h	/^    typedef T         value_type;$/;"	t	class:Eigen::aligned_allocator_indirection
values	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    void *values;$/;"	m	struct:Eigen::SluMatrix::__anon457
vec	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Block<Coefficients,3,1> vec() { return m_coeffs.template start<3>(); }$/;"	f	class:Eigen::Quaternion
vec	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline const Block<const Coefficients,3,1> vec() const { return m_coeffs.template start<3>(); }$/;"	f	class:Eigen::Quaternion
vec	include/Eigen/src/Geometry/Quaternion.h	/^  inline VectorBlock<Coefficients,3> vec() { return coeffs().template head<3>(); }$/;"	f	class:Eigen::QuaternionBase
vec	include/Eigen/src/Geometry/Quaternion.h	/^  inline const VectorBlock<const Coefficients,3> vec() const { return coeffs().template head<3>(); }$/;"	f	class:Eigen::QuaternionBase
vec2d_swizzle1	include/Eigen/src/Core/arch/SSE/PacketMath.h	39;"	d
vec4f_swizzle1	include/Eigen/src/Core/arch/SSE/PacketMath.h	33;"	d
vec4f_swizzle2	include/Eigen/src/Core/arch/SSE/PacketMath.h	42;"	d
vec4i_swizzle1	include/Eigen/src/Core/arch/SSE/PacketMath.h	36;"	d
vec4i_swizzle2	include/Eigen/src/Core/arch/SSE/PacketMath.h	45;"	d
vector	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  VectorType& vector() { return m_coeffs; }$/;"	f	class:Eigen::Translation
vector	include/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  const VectorType& vector() const { return m_coeffs; }$/;"	f	class:Eigen::Translation
vector	include/Eigen/src/Geometry/Translation.h	/^  VectorType& vector() { return m_coeffs; }$/;"	f	class:Eigen::Translation
vector	include/Eigen/src/Geometry/Translation.h	/^  const VectorType& vector() const { return m_coeffs; }$/;"	f	class:Eigen::Translation
vector	include/Eigen/src/StlSupport/StdVector.h	/^  class vector<T,EIGEN_ALIGNED_ALLOCATOR<T> >$/;"	c	namespace:std
vectorD	include/Eigen/src/Cholesky/LDLT.h	/^    inline Diagonal<const MatrixType> vectorD() const$/;"	f	class:Eigen::LDLT
vectorD	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline const VectorType vectorD() const {$/;"	f	class:Eigen::SimplicialCholesky
vectorD	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    inline const VectorType vectorD() const {$/;"	f	class:Eigen::SimplicialLDLT
vector_base	include/Eigen/src/StlSupport/StdVector.h	/^                 Eigen::aligned_allocator_indirection<EIGEN_WORKAROUND_MSVC_STL_SUPPORT(T)> > vector_base;$/;"	t	class:std::vector
viewAsCholmod	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^cholmod_dense viewAsCholmod(MatrixBase<Derived>& mat)$/;"	f	namespace:Eigen
viewAsCholmod	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^cholmod_sparse viewAsCholmod(SparseMatrix<_Scalar,_Options,_Index>& mat)$/;"	f	namespace:Eigen
viewAsCholmod	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^cholmod_sparse viewAsCholmod(const SparseSelfAdjointView<SparseMatrix<_Scalar,_Options,_Index>, UpLo>& mat)$/;"	f	namespace:Eigen
viewAsCholmod	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^const cholmod_sparse viewAsCholmod(const SparseMatrix<_Scalar,_Options,_Index>& mat)$/;"	f	namespace:Eigen
viewAsEigen	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^MappedSparseMatrix<Scalar,Flags,Index> viewAsEigen(cholmod_sparse& cm)$/;"	f	namespace:Eigen
visit	include/Eigen/src/Core/Visitor.h	/^void DenseBase<Derived>::visit(Visitor& visitor) const$/;"	f	class:Eigen::DenseBase
visitor_impl	include/Eigen/src/Core/Visitor.h	/^struct visitor_impl$/;"	s	namespace:Eigen::internal
visitor_impl	include/Eigen/src/Core/Visitor.h	/^struct visitor_impl<Visitor, Derived, 1>$/;"	s	namespace:Eigen::internal
visitor_impl	include/Eigen/src/Core/Visitor.h	/^struct visitor_impl<Visitor, Derived, Dynamic>$/;"	s	namespace:Eigen::internal
vld1_f32	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE float32x2_t vld1_f32 (const float* x) { return ::vld1_f32 ((const float32_t*)x); }$/;"	f	namespace:Eigen::internal
vld1q_f32	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE float32x4_t vld1q_f32(const float* x) { return ::vld1q_f32((const float32_t*)x); }$/;"	f	namespace:Eigen::internal
vml_assign_impl	include/Eigen/src/Core/Assign_MKL.h	/^struct vml_assign_impl$/;"	s	namespace:Eigen::internal
vml_assign_impl	include/Eigen/src/Core/Assign_MKL.h	/^struct vml_assign_impl<Derived1, Derived2, UnaryOp, Traversal, Unrolling, InnerVectorizedTraversal>$/;"	s	namespace:Eigen::internal
vml_assign_impl	include/Eigen/src/Core/Assign_MKL.h	/^struct vml_assign_impl<Derived1, Derived2, UnaryOp, Traversal, Unrolling, LinearVectorizedTraversal>$/;"	s	namespace:Eigen::internal
vml_assign_traits	include/Eigen/src/Core/Assign_MKL.h	/^class vml_assign_traits$/;"	c	namespace:Eigen::internal
vml_call	include/Eigen/src/Core/Assign_MKL.h	/^template<typename Op> struct vml_call$/;"	s	namespace:Eigen::internal
volume	include/Eigen/src/Geometry/AlignedBox.h	/^  inline Scalar volume() const$/;"	f	class:Eigen::AlignedBox
vst1_f32	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE void        vst1_f32 (float* to, float32x2_t from) { ::vst1_f32 ((float32_t*)to,from); }$/;"	f	namespace:Eigen::internal
vst1q_f32	include/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE void        vst1q_f32(float* to, float32x4_t from) { ::vst1q_f32((float32_t*)to,from); }$/;"	f	namespace:Eigen::internal
w	include/Eigen/src/Core/DenseCoeffsBase.h	/^    w() const { return (*this)[3]; }$/;"	f	class:Eigen::DenseCoeffsBase
w	include/Eigen/src/Core/DenseCoeffsBase.h	/^    w() { return (*this)[3]; }$/;"	f	class:Eigen::DenseCoeffsBase
w	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar w() const { return m_coeffs.coeff(3); }$/;"	f	class:Eigen::Quaternion
w	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& w() { return m_coeffs.coeffRef(3); }$/;"	f	class:Eigen::Quaternion
w	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar w() const { return this->derived().coeffs().coeff(3); }$/;"	f	class:Eigen::QuaternionBase
w	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& w() { return this->derived().coeffs().coeffRef(3); }$/;"	f	class:Eigen::QuaternionBase
workaround_msvc_stl_support	include/Eigen/src/StlSupport/details.h	/^    inline workaround_msvc_stl_support() : T() {}$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
workaround_msvc_stl_support	include/Eigen/src/StlSupport/details.h	/^    inline workaround_msvc_stl_support(const T& other) : T(other) {}$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
workaround_msvc_stl_support	include/Eigen/src/StlSupport/details.h	/^  template<typename T> struct workaround_msvc_stl_support : public T$/;"	s	namespace:Eigen::internal
writePacket	include/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index index, const PacketScalar& val)$/;"	f	class:Eigen::ArrayWrapper
writePacket	include/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index index, const PacketScalar& val)$/;"	f	class:Eigen::MatrixWrapper
writePacket	include/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index rowId, Index colId, const PacketScalar& val)$/;"	f	class:Eigen::ArrayWrapper
writePacket	include/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index rowId, Index colId, const PacketScalar& val)$/;"	f	class:Eigen::MatrixWrapper
writePacket	include/Eigen/src/Core/Block.h	/^    inline void writePacket(Index index, const PacketScalar& val)$/;"	f	class:Eigen::internal::BlockImpl_dense
writePacket	include/Eigen/src/Core/Block.h	/^    inline void writePacket(Index rowId, Index colId, const PacketScalar& val)$/;"	f	class:Eigen::internal::BlockImpl_dense
writePacket	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void writePacket$/;"	f	class:Eigen::DenseCoeffsBase
writePacket	include/Eigen/src/Core/Flagged.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Eigen::Flagged
writePacket	include/Eigen/src/Core/Flagged.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:Eigen::Flagged
writePacket	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Eigen::ForceAlignedAccess
writePacket	include/Eigen/src/Core/ForceAlignedAccess.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:Eigen::ForceAlignedAccess
writePacket	include/Eigen/src/Core/MapBase.h	/^    inline void writePacket(Index index, const PacketScalar& val)$/;"	f	class:Eigen::MapBase
writePacket	include/Eigen/src/Core/MapBase.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& val)$/;"	f	class:Eigen::MapBase
writePacket	include/Eigen/src/Core/NestByValue.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Eigen::NestByValue
writePacket	include/Eigen/src/Core/NestByValue.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:Eigen::NestByValue
writePacket	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void writePacket(Index index, const PacketScalar& val)$/;"	f	class:Eigen::PlainObjectBase
writePacket	include/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void writePacket(Index rowId, Index colId, const PacketScalar& val)$/;"	f	class:Eigen::PlainObjectBase
writePacket	include/Eigen/src/Core/Reverse.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Eigen::Reverse
writePacket	include/Eigen/src/Core/Reverse.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:Eigen::Reverse
writePacket	include/Eigen/src/Core/Transpose.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Eigen::TransposeImpl
writePacket	include/Eigen/src/Core/Transpose.h	/^    inline void writePacket(Index rowId, Index colId, const PacketScalar& x)$/;"	f	class:Eigen::TransposeImpl
writePacketByOuterInner	include/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void writePacketByOuterInner$/;"	f	class:Eigen::DenseCoeffsBase
x	include/Eigen/src/Core/DenseCoeffsBase.h	/^    x() const { return (*this)[0]; }$/;"	f	class:Eigen::DenseCoeffsBase
x	include/Eigen/src/Core/DenseCoeffsBase.h	/^    x() { return (*this)[0]; }$/;"	f	class:Eigen::DenseCoeffsBase
x	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar x() const { return m_coeffs.coeff(0); }$/;"	f	class:Eigen::Quaternion
x	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& x() { return m_coeffs.coeffRef(0); }$/;"	f	class:Eigen::Quaternion
x	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar x() const { return this->derived().coeffs().coeff(0); }$/;"	f	class:Eigen::QuaternionBase
x	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& x() { return this->derived().coeffs().coeffRef(0); }$/;"	f	class:Eigen::QuaternionBase
x	include/Eigen/src/Geometry/Translation.h	/^  inline Scalar x() const { return m_coeffs.x(); }$/;"	f	class:Eigen::Translation
x	include/Eigen/src/Geometry/Translation.h	/^  inline Scalar& x() { return m_coeffs.x(); }$/;"	f	class:Eigen::Translation
xlsub	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  IndexVector xlsub; \/\/ pointers to the beginning of each column in lsub$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
xlusup	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  IndexVector xlusup; \/\/ pointers to the beginning of each column in lusup$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
xsup	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  IndexVector xsup; \/\/First supernode column ... xsup(s) points to the beginning of the s-th supernode$/;"	m	struct:Eigen::internal::LU_GlobalLU_t
xusub	include/Eigen/src/SparseLU/SparseLU_Structs.h	/^  IndexVector xusub; \/\/ Pointers to the beginning of each column of U in ucol $/;"	m	struct:Eigen::internal::LU_GlobalLU_t
y	include/Eigen/src/Core/DenseCoeffsBase.h	/^    y() const { return (*this)[1]; }$/;"	f	class:Eigen::DenseCoeffsBase
y	include/Eigen/src/Core/DenseCoeffsBase.h	/^    y() { return (*this)[1]; }$/;"	f	class:Eigen::DenseCoeffsBase
y	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar y() const { return m_coeffs.coeff(1); }$/;"	f	class:Eigen::Quaternion
y	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& y() { return m_coeffs.coeffRef(1); }$/;"	f	class:Eigen::Quaternion
y	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar y() const { return this->derived().coeffs().coeff(1); }$/;"	f	class:Eigen::QuaternionBase
y	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& y() { return this->derived().coeffs().coeffRef(1); }$/;"	f	class:Eigen::QuaternionBase
y	include/Eigen/src/Geometry/Translation.h	/^  inline Scalar y() const { return m_coeffs.y(); }$/;"	f	class:Eigen::Translation
y	include/Eigen/src/Geometry/Translation.h	/^  inline Scalar& y() { return m_coeffs.y(); }$/;"	f	class:Eigen::Translation
z	include/Eigen/src/Core/DenseCoeffsBase.h	/^    z() const { return (*this)[2]; }$/;"	f	class:Eigen::DenseCoeffsBase
z	include/Eigen/src/Core/DenseCoeffsBase.h	/^    z() { return (*this)[2]; }$/;"	f	class:Eigen::DenseCoeffsBase
z	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar z() const { return m_coeffs.coeff(2); }$/;"	f	class:Eigen::Quaternion
z	include/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& z() { return m_coeffs.coeffRef(2); }$/;"	f	class:Eigen::Quaternion
z	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar z() const { return this->derived().coeffs().coeff(2); }$/;"	f	class:Eigen::QuaternionBase
z	include/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& z() { return this->derived().coeffs().coeffRef(2); }$/;"	f	class:Eigen::QuaternionBase
z	include/Eigen/src/Geometry/Translation.h	/^  inline Scalar z() const { return m_coeffs.z(); }$/;"	f	class:Eigen::Translation
z	include/Eigen/src/Geometry/Translation.h	/^  inline Scalar& z() { return m_coeffs.z(); }$/;"	f	class:Eigen::Translation
~AlignedBox	include/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  ~AlignedBox() {}$/;"	f	class:Eigen::AlignedBox
~AlignedBox	include/Eigen/src/Geometry/AlignedBox.h	/^  ~AlignedBox() {}$/;"	f	class:Eigen::AlignedBox
~AmbiVector	include/Eigen/src/SparseCore/AmbiVector.h	/^    ~AmbiVector() { delete[] m_buffer; }$/;"	f	class:Eigen::internal::AmbiVector
~BiCGSTAB	include/Eigen/src/IterativeLinearSolvers/BiCGSTAB.h	/^  ~BiCGSTAB() {}$/;"	f	class:Eigen::BiCGSTAB
~CholmodBase	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    ~CholmodBase()$/;"	f	class:Eigen::CholmodBase
~CholmodDecomposition	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    ~CholmodDecomposition() {}$/;"	f	class:Eigen::CholmodDecomposition
~CholmodSimplicialLDLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    ~CholmodSimplicialLDLT() {}$/;"	f	class:Eigen::CholmodSimplicialLDLT
~CholmodSimplicialLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    ~CholmodSimplicialLLT() {}$/;"	f	class:Eigen::CholmodSimplicialLLT
~CholmodSupernodalLLT	include/Eigen/src/CholmodSupport/CholmodSupport.h	/^    ~CholmodSupernodalLLT() {}$/;"	f	class:Eigen::CholmodSupernodalLLT
~CommaInitializer	include/Eigen/src/Core/CommaInitializer.h	/^  inline ~CommaInitializer()$/;"	f	struct:Eigen::CommaInitializer
~CompressedStorage	include/Eigen/src/SparseCore/CompressedStorage.h	/^    ~CompressedStorage()$/;"	f	class:Eigen::internal::CompressedStorage
~ConjugateGradient	include/Eigen/src/IterativeLinearSolvers/ConjugateGradient.h	/^  ~ConjugateGradient() {}$/;"	f	class:Eigen::ConjugateGradient
~DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Cols*m_rows); }$/;"	f	class:Eigen::DenseStorage
~DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Rows*m_cols); }$/;"	f	class:Eigen::DenseStorage
~DenseStorage	include/Eigen/src/Core/DenseStorage.h	/^    inline ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols); }$/;"	f	class:Eigen::DenseStorage
~Hyperplane	include/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  ~Hyperplane() {}$/;"	f	class:Eigen::Hyperplane
~Hyperplane	include/Eigen/src/Geometry/Hyperplane.h	/^  ~Hyperplane() {}$/;"	f	class:Eigen::Hyperplane
~IterativeSolverBase	include/Eigen/src/IterativeLinearSolvers/IterativeSolverBase.h	/^  ~IterativeSolverBase() {}$/;"	f	class:Eigen::IterativeSolverBase
~MappedSparseMatrix	include/Eigen/src/SparseCore/MappedSparseMatrix.h	/^    inline ~MappedSparseMatrix() {}$/;"	f	class:Eigen::MappedSparseMatrix
~MappedSuperNodalMatrix	include/Eigen/src/SparseLU/SparseLU_SupernodalMatrix.h	/^    ~MappedSuperNodalMatrix()$/;"	f	class:Eigen::internal::MappedSuperNodalMatrix
~ParametrizedLine	include/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  ~ParametrizedLine() {}$/;"	f	class:Eigen::ParametrizedLine
~ParametrizedLine	include/Eigen/src/Geometry/ParametrizedLine.h	/^  ~ParametrizedLine() {}$/;"	f	class:Eigen::ParametrizedLine
~PardisoImpl	include/Eigen/src/PardisoSupport/PardisoSupport.h	/^    ~PardisoImpl()$/;"	f	class:Eigen::PardisoImpl
~PastixBase	include/Eigen/src/PaStiXSupport/PaStiXSupport.h	/^    ~PastixBase() $/;"	f	class:Eigen::PastixBase
~SPQR	include/Eigen/src/SPQRSupport/SuiteSparseQRSupport.h	/^    ~SPQR()$/;"	f	class:Eigen::SPQR
~SimplicialCholeskyBase	include/Eigen/src/SparseCholesky/SimplicialCholesky.h	/^    ~SimplicialCholeskyBase()$/;"	f	class:Eigen::SimplicialCholeskyBase
~SparseLU	include/Eigen/src/SparseLU/SparseLU.h	/^    ~SparseLU()$/;"	f	class:Eigen::SparseLU
~SparseMatrix	include/Eigen/src/SparseCore/SparseMatrix.h	/^    inline ~SparseMatrix()$/;"	f	class:Eigen::SparseMatrix
~SparseVector	include/Eigen/src/SparseCore/SparseVector.h	/^    inline ~SparseVector() {}$/;"	f	class:Eigen::SparseVector
~SuperILU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    ~SuperILU()$/;"	f	class:Eigen::SuperILU
~SuperLU	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    ~SuperLU()$/;"	f	class:Eigen::SuperLU
~SuperLUBase	include/Eigen/src/SuperLUSupport/SuperLUSupport.h	/^    ~SuperLUBase()$/;"	f	class:Eigen::SuperLUBase
~UmfPackLU	include/Eigen/src/UmfPackSupport/UmfPackSupport.h	/^    ~UmfPackLU()$/;"	f	class:Eigen::UmfPackLU
~aligned_allocator	include/Eigen/src/Core/util/Memory.h	/^    ~aligned_allocator()$/;"	f	class:Eigen::aligned_allocator
~aligned_allocator_indirection	include/Eigen/src/StlSupport/details.h	/^    ~aligned_allocator_indirection() {}$/;"	f	class:Eigen::aligned_allocator_indirection
~aligned_stack_memory_handler	include/Eigen/src/Core/util/Memory.h	/^    ~aligned_stack_memory_handler()$/;"	f	class:Eigen::internal::aligned_stack_memory_handler
~gemm_blocking_space	include/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    ~gemm_blocking_space()$/;"	f	class:Eigen::internal::gemm_blocking_space
~noncopyable	include/Eigen/src/Core/util/Meta.h	/^  ~noncopyable() {}$/;"	f	class:Eigen::internal::noncopyable
